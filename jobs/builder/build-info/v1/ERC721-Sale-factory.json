{
  "id": "0aa2779f6c023c5ed5906f2fee004716f6f9729a",
  "source_id_to_path": {
    "0": "src/tokens/ERC721/utility/sale/ERC721SaleFactory.sol",
    "1": "src/proxies/SequenceProxyFactory.sol",
    "2": "src/tokens/ERC721/utility/sale/ERC721Sale.sol",
    "3": "src/tokens/ERC721/utility/sale/IERC721SaleFactory.sol",
    "4": "src/proxies/TransparentUpgradeableBeaconProxy.sol",
    "5": "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
    "6": "lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol",
    "7": "lib/openzeppelin-contracts/contracts/utils/Create2.sol",
    "8": "src/tokens/common/MerkleProofSingleUse.sol",
    "9": "src/tokens/common/SignalsImplicitModeControlled.sol",
    "10": "src/tokens/common/WithdrawControlled.sol",
    "11": "src/tokens/ERC721/presets/items/IERC721Items.sol",
    "12": "src/tokens/ERC721/utility/sale/IERC721Sale.sol",
    "13": "src/proxies/openzeppelin/BeaconProxy.sol",
    "14": "src/proxies/openzeppelin/TransparentUpgradeableProxy.sol",
    "15": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
    "16": "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol",
    "17": "lib/openzeppelin-contracts/contracts/utils/Address.sol",
    "18": "src/tokens/common/IMerkleProofSingleUse.sol",
    "19": "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
    "20": "lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol",
    "21": "lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol",
    "22": "src/tokens/common/IWithdrawControlled.sol",
    "23": "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
    "24": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol",
    "25": "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol",
    "26": "src/proxies/openzeppelin/ERC1967Proxy.sol",
    "27": "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol",
    "28": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
    "29": "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol",
    "30": "lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol",
    "31": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
    "32": "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol",
    "33": "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol",
    "34": "lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol",
    "35": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
    "36": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol",
    "37": "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol",
    "38": "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol",
    "39": "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
    "40": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
    "41": "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
    "42": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
    "43": "lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol",
    "44": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
    "45": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol"
  },
  "language": "Solidity",
  "_format": "ethers-rs-sol-build-info-1",
  "input": {
    "version": "0.8.27",
    "language": "Solidity",
    "sources": {
      "src/tokens/ERC721/utility/sale/ERC721SaleFactory.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { SequenceProxyFactory } from \"../../../../proxies/SequenceProxyFactory.sol\";\nimport { ERC721Sale } from \"./ERC721Sale.sol\";\nimport { IERC721SaleFactory, IERC721SaleFactoryFunctions } from \"./IERC721SaleFactory.sol\";\n\n/**\n * Deployer of ERC-721 Sale proxies.\n */\ncontract ERC721SaleFactory is IERC721SaleFactory, SequenceProxyFactory {\n\n    /**\n     * Creates an ERC-721 Sale Factory.\n     * @param factoryOwner The owner of the ERC-721 Sale Factory\n     */\n    constructor(\n        address factoryOwner\n    ) {\n        ERC721Sale impl = new ERC721Sale();\n        SequenceProxyFactory._initialize(address(impl), factoryOwner);\n    }\n\n    /// @inheritdoc IERC721SaleFactoryFunctions\n    function deploy(\n        uint256 nonce,\n        address proxyOwner,\n        address tokenOwner,\n        address items,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) external returns (address proxyAddr) {\n        bytes32 salt = keccak256(abi.encode(nonce, tokenOwner, items, implicitModeValidator, implicitModeProjectId));\n        proxyAddr = _createProxy(salt, proxyOwner, \"\");\n        ERC721Sale(proxyAddr).initialize(tokenOwner, items, implicitModeValidator, implicitModeProjectId);\n        emit ERC721SaleDeployed(proxyAddr);\n        return proxyAddr;\n    }\n\n    /// @inheritdoc IERC721SaleFactoryFunctions\n    function determineAddress(\n        uint256 nonce,\n        address proxyOwner,\n        address tokenOwner,\n        address items,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) external view returns (address proxyAddr) {\n        bytes32 salt = keccak256(abi.encode(nonce, tokenOwner, items, implicitModeValidator, implicitModeProjectId));\n        return _computeProxyAddress(salt, proxyOwner, \"\");\n    }\n\n}\n"
      },
      "src/proxies/SequenceProxyFactory.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport {\n    ITransparentUpgradeableBeaconProxy,\n    TransparentUpgradeableBeaconProxy\n} from \"./TransparentUpgradeableBeaconProxy.sol\";\n\nimport { Ownable } from \"openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport { UpgradeableBeacon } from \"openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport { Create2 } from \"openzeppelin-contracts/contracts/utils/Create2.sol\";\n\n/**\n * An proxy factory that deploys upgradeable beacon proxies.\n * @dev The factory owner is able to upgrade the beacon implementation.\n * @dev Proxy deployers are able to override the beacon reference with their own.\n */\nabstract contract SequenceProxyFactory is Ownable {\n\n    UpgradeableBeacon public beacon;\n\n    /**\n     * Initialize a Sequence Proxy Factory.\n     * @param implementation The initial beacon implementation.\n     * @param factoryOwner The owner of the factory.\n     */\n    function _initialize(address implementation, address factoryOwner) internal {\n        beacon = new UpgradeableBeacon(implementation);\n        Ownable._transferOwnership(factoryOwner);\n    }\n\n    /**\n     * Deploys and initializes a new proxy instance.\n     * @param _salt The deployment salt.\n     * @param _proxyOwner The owner of the proxy.\n     * @param _data The initialization data.\n     * @return proxyAddress The address of the deployed proxy.\n     */\n    function _createProxy(\n        bytes32 _salt,\n        address _proxyOwner,\n        bytes memory _data\n    ) internal returns (address proxyAddress) {\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\n        bytes memory bytecode = type(TransparentUpgradeableBeaconProxy).creationCode;\n\n        proxyAddress = Create2.deploy(0, saltedHash, bytecode);\n        ITransparentUpgradeableBeaconProxy(payable(proxyAddress)).initialize(_proxyOwner, address(beacon), _data);\n    }\n\n    /**\n     * Computes the address of a proxy instance.\n     * @param _salt The deployment salt.\n     * @param _proxyOwner The owner of the proxy.\n     * @return proxy The expected address of the deployed proxy.\n     */\n    function _computeProxyAddress(\n        bytes32 _salt,\n        address _proxyOwner,\n        bytes memory _data\n    ) internal view returns (address) {\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\n        bytes32 bytecodeHash = keccak256(type(TransparentUpgradeableBeaconProxy).creationCode);\n\n        return Create2.computeAddress(saltedHash, bytecodeHash);\n    }\n\n    /**\n     * Upgrades the beacon implementation.\n     * @param implementation The new beacon implementation.\n     */\n    function upgradeBeacon(\n        address implementation\n    ) public onlyOwner {\n        beacon.upgradeTo(implementation);\n    }\n\n}\n"
      },
      "src/tokens/ERC721/utility/sale/ERC721Sale.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { MerkleProofSingleUse } from \"../../../common/MerkleProofSingleUse.sol\";\nimport { SignalsImplicitModeControlled } from \"../../../common/SignalsImplicitModeControlled.sol\";\nimport { IERC20, SafeERC20, WithdrawControlled } from \"../../../common/WithdrawControlled.sol\";\nimport { IERC721ItemsFunctions } from \"../../presets/items/IERC721Items.sol\";\nimport { IERC721Sale, IERC721SaleFunctions } from \"./IERC721Sale.sol\";\n\n/**\n * An ERC-721 token contract with primary sale mechanisms.\n */\ncontract ERC721Sale is IERC721Sale, WithdrawControlled, MerkleProofSingleUse, SignalsImplicitModeControlled {\n\n    bytes32 internal constant MINT_ADMIN_ROLE = keccak256(\"MINT_ADMIN_ROLE\");\n\n    bool private _initialized;\n    address private _items;\n    SaleDetails private _saleDetails;\n\n    /**\n     * Initialize the contract.\n     * @param owner The owner of the contract\n     * @param items The ERC-721 Items contract address\n     * @param implicitModeValidator Implicit session validator address\n     * @param implicitModeProjectId Implicit session project id\n     * @dev This should be called immediately after deployment.\n     */\n    function initialize(\n        address owner,\n        address items,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) public virtual {\n        if (_initialized) {\n            revert InvalidInitialization();\n        }\n\n        _items = items;\n\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\n        _grantRole(MINT_ADMIN_ROLE, owner);\n        _grantRole(WITHDRAW_ROLE, owner);\n\n        _initializeImplicitMode(owner, implicitModeValidator, implicitModeProjectId);\n\n        _initialized = true;\n    }\n\n    /**\n     * Checks if the current block.timestamp is out of the give timestamp range.\n     * @param _startTime Earliest acceptable timestamp (inclusive).\n     * @param _endTime Latest acceptable timestamp (exclusive).\n     * @dev A zero endTime value is always considered out of bounds.\n     */\n    function _blockTimeOutOfBounds(uint256 _startTime, uint256 _endTime) private view returns (bool) {\n        // 0 end time indicates inactive sale.\n        return _endTime == 0 || block.timestamp < _startTime || block.timestamp >= _endTime; // solhint-disable-line not-rely-on-time\n    }\n\n    /**\n     * Checks the sale is active, valid and takes payment.\n     * @param _amount Amount of tokens to mint.\n     * @param _expectedPaymentToken ERC20 token address to accept payment in. address(0) indicates ETH.\n     * @param _maxTotal Maximum amount of payment tokens.\n     * @param _proof Merkle proof for allowlist minting.\n     */\n    function _validateMint(\n        uint256 _amount,\n        address _expectedPaymentToken,\n        uint256 _maxTotal,\n        bytes32[] calldata _proof\n    ) private {\n        // Active sale test\n        if (_blockTimeOutOfBounds(_saleDetails.startTime, _saleDetails.endTime)) {\n            revert SaleInactive();\n        }\n        // Supply test\n        if (_saleDetails.remainingSupply < _amount) {\n            revert InsufficientSupply(_saleDetails.remainingSupply, _amount);\n        }\n        _saleDetails.remainingSupply -= _amount;\n        // Check proof\n        requireMerkleProof(_saleDetails.merkleRoot, _proof, msg.sender, \"\");\n\n        uint256 total = _saleDetails.cost * _amount;\n        if (_expectedPaymentToken != _saleDetails.paymentToken) {\n            // Caller expected different payment token\n            revert InsufficientPayment(_saleDetails.paymentToken, total, 0);\n        }\n        if (_maxTotal < total) {\n            // Caller expected to pay less\n            revert InsufficientPayment(_expectedPaymentToken, total, _maxTotal);\n        }\n        if (_expectedPaymentToken == address(0)) {\n            // Paid in ETH\n            if (msg.value != total) {\n                // We expect exact value match\n                revert InsufficientPayment(_expectedPaymentToken, total, msg.value);\n            }\n        } else if (msg.value > 0) {\n            // Paid in ERC20, but sent ETH\n            revert InsufficientPayment(address(0), 0, msg.value);\n        } else {\n            // Paid in ERC20\n            SafeERC20.safeTransferFrom(IERC20(_expectedPaymentToken), msg.sender, address(this), total);\n        }\n    }\n\n    //\n    // Minting\n    //\n\n    /**\n     * Mint tokens.\n     * @param to Address to mint tokens to.\n     * @param amount Amount of tokens to mint.\n     * @param paymentToken ERC20 token address to accept payment in. address(0) indicates ETH.\n     * @param maxTotal Maximum amount of payment tokens.\n     * @param proof Merkle proof for allowlist minting.\n     * @notice Sale must be active for all tokens.\n     * @dev An empty proof is supplied when no proof is required.\n     * @dev `paymentToken` must match the `paymentToken` in the sale details.\n     */\n    function mint(\n        address to,\n        uint256 amount,\n        address paymentToken,\n        uint256 maxTotal,\n        bytes32[] calldata proof\n    ) public payable {\n        _validateMint(amount, paymentToken, maxTotal, proof);\n        try IERC721ItemsFunctions(_items).mintSequential(to, amount) { }\n        catch {\n            // On failure, support old minting method.\n            IERC721ItemsFunctions(_items).mint(to, amount);\n        }\n        emit ItemsMinted(to, amount);\n    }\n\n    /**\n     * Set the sale details.\n     * @param remainingSupply The remaining number of tokens that can be minted by the items contract. 0 indicates unlimited supply.\n     * @param cost The amount of payment tokens to accept for each token minted.\n     * @param paymentToken The ERC20 token address to accept payment in. address(0) indicates ETH.\n     * @param startTime The start time of the sale. Tokens cannot be minted before this time.\n     * @param endTime The end time of the sale. Tokens cannot be minted after this time.\n     * @param merkleRoot The merkle root for allowlist minting.\n     * @dev A zero end time indicates an inactive sale.\n     */\n    function setSaleDetails(\n        uint256 remainingSupply,\n        uint256 cost,\n        address paymentToken,\n        uint64 startTime,\n        uint64 endTime,\n        bytes32 merkleRoot\n    ) public onlyRole(MINT_ADMIN_ROLE) {\n        // solhint-disable-next-line not-rely-on-time\n        if (endTime < startTime || endTime <= block.timestamp) {\n            revert InvalidSaleDetails();\n        }\n        if (remainingSupply == 0) {\n            revert InvalidSaleDetails();\n        }\n        _saleDetails = SaleDetails(remainingSupply, cost, paymentToken, startTime, endTime, merkleRoot);\n        emit SaleDetailsUpdated(remainingSupply, cost, paymentToken, startTime, endTime, merkleRoot);\n    }\n\n    //\n    // Views\n    //\n    function itemsContract() external view returns (address) {\n        return address(_items);\n    }\n\n    /**\n     * Get sale details.\n     * @return Sale details.\n     */\n    function saleDetails() external view returns (SaleDetails memory) {\n        return _saleDetails;\n    }\n\n    /**\n     * Check interface support.\n     * @param interfaceId Interface id\n     * @return True if supported\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(WithdrawControlled, SignalsImplicitModeControlled) returns (bool) {\n        return interfaceId == type(IERC721SaleFunctions).interfaceId\n            || WithdrawControlled.supportsInterface(interfaceId)\n            || SignalsImplicitModeControlled.supportsInterface(interfaceId);\n    }\n\n}\n"
      },
      "src/tokens/ERC721/utility/sale/IERC721SaleFactory.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IERC721SaleFactoryFunctions {\n\n    /**\n     * Creates an ERC-721 Sale for given token contract\n     * @param nonce Nonce for randomizing the deployment address.\n     * @param proxyOwner The owner of the ERC-721 Sale proxy\n     * @param tokenOwner The owner of the ERC-721 Sale implementation\n     * @param items The ERC-721 Items contract address\n     * @param implicitModeValidator The implicit mode validator address\n     * @param implicitModeProjectId The implicit mode project id\n     * @return proxyAddr The address of the ERC-721 Sale Proxy\n     * @notice The deployed contract must be granted the MINTER_ROLE on the ERC-721 Items contract.\n     */\n    function deploy(\n        uint256 nonce,\n        address proxyOwner,\n        address tokenOwner,\n        address items,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) external returns (address proxyAddr);\n\n    /**\n     * Computes the address of a proxy instance.\n     * @param nonce Nonce for randomizing the deployment address.\n     * @param proxyOwner The owner of the ERC-721 Sale proxy\n     * @param tokenOwner The owner of the ERC-721 Sale implementation\n     * @param items The ERC-721 Items contract address\n     * @param implicitModeValidator The implicit mode validator address\n     * @param implicitModeProjectId The implicit mode project id\n     * @return proxyAddr The address of the ERC-721 Sale Proxy\n     */\n    function determineAddress(\n        uint256 nonce,\n        address proxyOwner,\n        address tokenOwner,\n        address items,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) external returns (address proxyAddr);\n\n}\n\ninterface IERC721SaleFactorySignals {\n\n    /**\n     * Event emitted when a new ERC-721 Sale proxy contract is deployed.\n     * @param proxyAddr The address of the deployed proxy.\n     */\n    event ERC721SaleDeployed(address proxyAddr);\n\n}\n\ninterface IERC721SaleFactory is IERC721SaleFactoryFunctions, IERC721SaleFactorySignals { }\n"
      },
      "src/proxies/TransparentUpgradeableBeaconProxy.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { BeaconProxy, Proxy } from \"./openzeppelin/BeaconProxy.sol\";\nimport { ERC1967Proxy, TransparentUpgradeableProxy } from \"./openzeppelin/TransparentUpgradeableProxy.sol\";\n\ninterface ITransparentUpgradeableBeaconProxy {\n\n    function initialize(address admin, address beacon, bytes memory data) external;\n\n}\n\nerror InvalidInitialization();\n\n/**\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\n * The proxy selectors are:\n * - 0xcf7a1d77: initialize\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\n */\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\n\n    /**\n     * Decode the initialization data from the msg.data and call the initialize function.\n     */\n    function _dispatchInitialize() private returns (bytes memory) {\n        _requireZeroValue();\n\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\n        initialize(admin, beacon, data);\n\n        return \"\";\n    }\n\n    function initialize(address admin, address beacon, bytes memory data) internal {\n        if (_admin() != address(0)) {\n            // Redundant call. This function can only be called when the admin is not set.\n            revert InvalidInitialization();\n        }\n        _changeAdmin(admin);\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\n     */\n    function _fallback() internal override(TransparentUpgradeableProxy, Proxy) {\n        if (_getAdmin() == address(0)) {\n            bytes memory ret;\n            bytes4 selector = msg.sig;\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\n                ret = _dispatchInitialize();\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    return(add(ret, 0x20), mload(ret))\n                }\n            }\n            // When the admin is not set, the fallback function is used to initialize the proxy.\n            revert InvalidInitialization();\n        }\n        TransparentUpgradeableProxy._fallback();\n    }\n\n    /**\n     * Returns the current implementation address.\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\n     */\n    function _implementation() internal view override(ERC1967Proxy, BeaconProxy) returns (address) {\n        address implementation = ERC1967Proxy._implementation();\n        if (implementation != address(0)) {\n            return implementation;\n        }\n        return BeaconProxy._implementation();\n    }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/Create2.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n"
      },
      "src/tokens/common/MerkleProofSingleUse.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { IMerkleProofSingleUse } from \"./IMerkleProofSingleUse.sol\";\n\nimport { MerkleProof } from \"openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\";\n\n/**\n * Require single use merkle proofs per address.\n */\nabstract contract MerkleProofSingleUse is IMerkleProofSingleUse {\n\n    // Stores proofs used by an address\n    mapping(address => mapping(bytes32 => bool)) private _proofUsed;\n\n    /**\n     * Requires the given merkle proof to be valid.\n     * @param root Merkle root.\n     * @param proof Merkle proof.\n     * @param addr Address to check.\n     * @param salt Salt used to generate the merkle leaf.\n     * @notice Fails when the proof is invalid or the proof has already been claimed by this address.\n     * @dev This function reverts on failure.\n     */\n    function requireMerkleProof(bytes32 root, bytes32[] calldata proof, address addr, bytes32 salt) internal {\n        if (root != bytes32(0)) {\n            if (!checkMerkleProof(root, proof, addr, salt)) {\n                revert MerkleProofInvalid(root, proof, addr, salt);\n            }\n            _proofUsed[addr][root] = true;\n        }\n    }\n\n    /**\n     * Checks if the given merkle proof is valid.\n     * @param root Merkle root.\n     * @param proof Merkle proof.\n     * @param addr Address to check.\n     * @param salt Salt used to generate the merkle leaf.\n     * @return True if the proof is valid and has not yet been used by {addr}.\n     */\n    function checkMerkleProof(\n        bytes32 root,\n        bytes32[] calldata proof,\n        address addr,\n        bytes32 salt\n    ) public view returns (bool) {\n        return !_proofUsed[addr][root] && MerkleProof.verify(proof, root, keccak256(abi.encodePacked(addr, salt)));\n    }\n\n}\n"
      },
      "src/tokens/common/SignalsImplicitModeControlled.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { AccessControlEnumerable } from \"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\";\nimport {\n    IERC165,\n    IImplicitProjectValidation,\n    SignalsImplicitMode\n} from \"signals-implicit-mode/src/helper/SignalsImplicitMode.sol\";\n\n/**\n * An abstract contract that allows implicit session access for a given project.\n */\nabstract contract SignalsImplicitModeControlled is AccessControlEnumerable, SignalsImplicitMode {\n\n    bytes32 internal constant _IMPLICIT_MODE_ADMIN_ROLE = keccak256(\"IMPLICIT_MODE_ADMIN_ROLE\");\n\n    function _initializeImplicitMode(address owner, address validator, bytes32 projectId) internal {\n        _grantRole(_IMPLICIT_MODE_ADMIN_ROLE, owner);\n        _initializeSignalsImplicitMode(validator, projectId);\n    }\n\n    /**\n     * Updates the validator for implicit mode validation.\n     * @param validator The validator address.\n     * @notice Only callable by an address with the project admin role.\n     */\n    function setImplicitModeValidator(\n        address validator\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\n        _validator = IImplicitProjectValidation(validator);\n    }\n\n    /**\n     * Updates the settings for implicit mode validation.\n     * @param projectId The project id.\n     * @notice Only callable by an address with the project admin role.\n     */\n    function setImplicitModeProjectId(\n        bytes32 projectId\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\n        _projectId = projectId;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(AccessControlEnumerable, SignalsImplicitMode) returns (bool) {\n        return\n            AccessControlEnumerable.supportsInterface(interfaceId) || SignalsImplicitMode.supportsInterface(interfaceId);\n    }\n\n}\n"
      },
      "src/tokens/common/WithdrawControlled.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { IWithdrawControlled } from \"./IWithdrawControlled.sol\";\n\nimport { AccessControlEnumerable, ERC165 } from \"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\";\nimport { IERC20, SafeERC20 } from \"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * An abstract contract that allows ETH and ERC20 tokens stored in the contract to be withdrawn.\n */\nabstract contract WithdrawControlled is AccessControlEnumerable, IWithdrawControlled {\n\n    bytes32 internal constant WITHDRAW_ROLE = keccak256(\"WITHDRAW_ROLE\");\n\n    //\n    // Withdraw\n    //\n\n    /**\n     * Withdraws ERC20 tokens owned by this contract.\n     * @param token The ERC20 token address.\n     * @param to Address to withdraw to.\n     * @param value Amount to withdraw.\n     * @notice Only callable by an address with the withdraw role.\n     */\n    function withdrawERC20(address token, address to, uint256 value) public onlyRole(WITHDRAW_ROLE) {\n        SafeERC20.safeTransfer(IERC20(token), to, value);\n    }\n\n    /**\n     * Withdraws ETH owned by this sale contract.\n     * @param to Address to withdraw to.\n     * @param value Amount to withdraw.\n     * @notice Only callable by an address with the withdraw role.\n     */\n    function withdrawETH(address to, uint256 value) public onlyRole(WITHDRAW_ROLE) {\n        (bool success,) = to.call{ value: value }(\"\");\n        if (!success) {\n            revert WithdrawFailed();\n        }\n    }\n\n    /// @inheritdoc ERC165\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(AccessControlEnumerable) returns (bool) {\n        return interfaceId == type(IWithdrawControlled).interfaceId\n            || AccessControlEnumerable.supportsInterface(interfaceId);\n    }\n\n}\n"
      },
      "src/tokens/ERC721/presets/items/IERC721Items.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IERC721ItemsFunctions {\n\n    /**\n     * Mint tokens.\n     * @param to Address to mint tokens to.\n     * @param tokenId Token id to mint.\n     */\n    function mint(address to, uint256 tokenId) external;\n\n    /**\n     * Mint a sequential token.\n     * @param to Address to mint token to.\n     * @param amount Amount of tokens to mint.\n     */\n    function mintSequential(address to, uint256 amount) external;\n\n    /**\n     * Get the total supply of tokens.\n     * @return totalSupply The total supply of tokens.\n     */\n    function totalSupply() external view returns (uint256 totalSupply);\n\n}\n\ninterface IERC721ItemsSignals {\n\n    /**\n     * Invalid initialization error.\n     */\n    error InvalidInitialization();\n\n}\n\ninterface IERC721Items is IERC721ItemsFunctions, IERC721ItemsSignals { }\n"
      },
      "src/tokens/ERC721/utility/sale/IERC721Sale.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IERC721SaleFunctions {\n\n    struct SaleDetails {\n        uint256 remainingSupply;\n        uint256 cost;\n        address paymentToken; // ERC20 token address for payment. address(0) indicated payment in ETH.\n        uint64 startTime;\n        uint64 endTime; // 0 end time indicates sale inactive\n        bytes32 merkleRoot; // Root of allowed addresses\n    }\n\n    /**\n     * Mint tokens.\n     * @param to Address to mint tokens to.\n     * @param amount Amount of tokens to mint.\n     * @param paymentToken ERC20 token address to accept payment in. address(0) indicates ETH.\n     * @param maxTotal Maximum amount of payment tokens.\n     * @param proof Merkle proof for allowlist minting.\n     * @notice Sale must be active for all tokens.\n     * @dev An empty proof is supplied when no proof is required.\n     */\n    function mint(\n        address to,\n        uint256 amount,\n        address paymentToken,\n        uint256 maxTotal,\n        bytes32[] memory proof\n    ) external payable;\n\n    /**\n     * Set the sale details.\n     * @param remainingSupply The maximum number of tokens that can be minted in this sale.\n     * @param cost The amount of payment tokens to accept for each token minted.\n     * @param paymentToken The ERC20 token address to accept payment in. address(0) indicates ETH.\n     * @param startTime The start time of the sale. Tokens cannot be minted before this time.\n     * @param endTime The end time of the sale. Tokens cannot be minted after this time.\n     * @param merkleRoot The merkle root for allowlist minting.\n     */\n    function setSaleDetails(\n        uint256 remainingSupply,\n        uint256 cost,\n        address paymentToken,\n        uint64 startTime,\n        uint64 endTime,\n        bytes32 merkleRoot\n    ) external;\n\n    /**\n     * Get sale details.\n     * @return Sale details.\n     */\n    function saleDetails() external view returns (SaleDetails memory);\n\n}\n\ninterface IERC721SaleSignals {\n\n    event SaleDetailsUpdated(\n        uint256 remainingSupply,\n        uint256 cost,\n        address paymentToken,\n        uint64 startTime,\n        uint64 endTime,\n        bytes32 merkleRoot\n    );\n    event ItemsMinted(address to, uint256 amount);\n\n    /**\n     * Contract already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * Sale details supplied are invalid.\n     */\n    error InvalidSaleDetails();\n\n    /**\n     * Sale is not active.\n     */\n    error SaleInactive();\n\n    /**\n     * Insufficient supply.\n     * @param remainingSupply Remaining supply.\n     * @param amount Amount to mint.\n     */\n    error InsufficientSupply(uint256 remainingSupply, uint256 amount);\n\n    /**\n     * Insufficient tokens for payment.\n     * @param currency Currency address. address(0) indicates ETH.\n     * @param expected Expected amount of tokens.\n     * @param actual Actual amount of tokens.\n     */\n    error InsufficientPayment(address currency, uint256 expected, uint256 actual);\n\n}\n\ninterface IERC721Sale is IERC721SaleFunctions, IERC721SaleSignals { }\n"
      },
      "src/proxies/openzeppelin/BeaconProxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\n\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\n\npragma solidity ^0.8.19;\n\nimport \"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\";\nimport \"openzeppelin-contracts/contracts/proxy/Proxy.sol\";\nimport \"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n}\n"
      },
      "src/proxies/openzeppelin/TransparentUpgradeableProxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\n/// - Pragma updated\n/// - Imports updated\n/// - Constructor removed\n/// - Allows admin to call implementation\n\npragma solidity ^0.8.19;\n\nimport \"./ERC1967Proxy.sol\";\n\n/**\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\n * include them in the ABI so this interface must be used to interact with it.\n */\ninterface ITransparentUpgradeableProxy is IERC1967 {\n\n    function admin() external view returns (address);\n\n    function implementation() external view returns (address);\n\n    function changeAdmin(\n        address\n    ) external;\n\n    function upgradeTo(\n        address\n    ) external;\n\n    function upgradeToAndCall(address, bytes memory) external payable;\n\n}\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\n * This potentially exposes the admin to a proxy selector attack. See\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\n * The proxy selectors are:\n * - 0x3659cfe6: upgradeTo\n * - 0x4f1ef286: upgradeToAndCall\n * - 0x8f283970: changeAdmin\n * - 0xf851a440: admin\n * - 0x5c60da1b: implementation\n *\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\n * implementation.\n *\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     *\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\n     * implementation provides a function with the same selector.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\n     */\n    function _fallback() internal virtual override {\n        if (msg.sender == _getAdmin()) {\n            bytes memory ret;\n            bytes4 selector = msg.sig;\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\n                ret = _dispatchUpgradeTo();\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\n                ret = _dispatchUpgradeToAndCall();\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\n                ret = _dispatchChangeAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\n                ret = _dispatchAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\n                ret = _dispatchImplementation();\n            } else {\n                // Call implementation\n                return super._fallback();\n            }\n            assembly {\n                return(add(ret, 0x20), mload(ret))\n            }\n        } else {\n            super._fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function _dispatchAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address admin = _getAdmin();\n        return abi.encode(admin);\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function _dispatchImplementation() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address implementation = _implementation();\n        return abi.encode(implementation);\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _dispatchChangeAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newAdmin = abi.decode(msg.data[4:], (address));\n        _changeAdmin(newAdmin);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     */\n    function _dispatchUpgradeTo() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newImplementation = abi.decode(msg.data[4:], (address));\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     */\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\n        _upgradeToAndCall(newImplementation, data, true);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\n     */\n    function _requireZeroValue() internal {\n        require(msg.value == 0);\n    }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
      },
      "src/tokens/common/IMerkleProofSingleUse.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IMerkleProofSingleUseFunctions {\n\n    /**\n     * Checks if the given merkle proof is valid.\n     * @param root Merkle root.\n     * @param proof Merkle proof.\n     * @param addr Address to check.\n     * @param salt Salt used to generate the merkle leaf.\n     * @return True if the proof is valid and has not yet been used by {addr}.\n     */\n    function checkMerkleProof(\n        bytes32 root,\n        bytes32[] calldata proof,\n        address addr,\n        bytes32 salt\n    ) external view returns (bool);\n\n}\n\ninterface IMerkleProofSingleUseSignals {\n\n    /**\n     * Thrown when the merkle proof is invalid or has already been used.\n     * @param root Merkle root.\n     * @param proof Merkle proof.\n     * @param addr Address to check.\n     * @param salt Salt used to generate the merkle leaf.\n     */\n    error MerkleProofInvalid(bytes32 root, bytes32[] proof, address addr, bytes32 salt);\n\n}\n\ninterface IMerkleProofSingleUse is IMerkleProofSingleUseFunctions, IMerkleProofSingleUseSignals { }\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofLen = proof.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proofLen - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            require(proofPos == proofLen, \"MerkleProof: invalid multiproof\");\n            unchecked {\n                return hashes[totalHashes - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
      },
      "lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.13;\n\nimport { IImplicitProjectValidation } from \"../registry/IImplicitProjectValidation.sol\";\n\nimport { ERC165, IERC165 } from \"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\";\nimport { Attestation } from \"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\";\nimport { ISignalsImplicitMode } from \"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\";\nimport { Payload } from \"sequence-v3/src/modules/Payload.sol\";\n\n/// @title SignalsImplicitMode\n/// @author Michael Standen\n/// @notice Base contract for implicit mode validation by project\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\n\n  IImplicitProjectValidation internal _validator;\n  bytes32 internal _projectId;\n\n  /// @notice Initialize implicit mode validation\n  /// @param validator The IImplicitProjectValidation address\n  /// @param projectId The project id\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\n    _validator = IImplicitProjectValidation(validator);\n    _projectId = projectId;\n  }\n\n  /// @inheritdoc ISignalsImplicitMode\n  function acceptImplicitRequest(\n    address wallet,\n    Attestation calldata attestation,\n    Payload.Call calldata call\n  ) external view returns (bytes32) {\n    _validateImplicitRequest(wallet, attestation, call);\n    return _validator.validateAttestation(wallet, attestation, _projectId);\n  }\n\n  /// @notice Validates an implicit request\n  /// @dev Optional hook for additional validation of the implicit requests\n  /// @param wallet The wallet's address\n  /// @param attestation The attestation data\n  /// @param call The call to validate\n  function _validateImplicitRequest(\n    address wallet,\n    Attestation calldata attestation,\n    Payload.Call calldata call\n  ) internal view virtual { }\n\n  /// @inheritdoc IERC165\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\n  }\n\n}\n"
      },
      "src/tokens/common/IWithdrawControlled.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IWithdrawControlledFunctions {\n\n    /**\n     * Withdraws ERC20 tokens owned by this contract.\n     * @param token The ERC20 token address.\n     * @param to Address to withdraw to.\n     * @param value Amount to withdraw.\n     */\n    function withdrawERC20(address token, address to, uint256 value) external;\n\n    /**\n     * Withdraws ETH owned by this sale contract.\n     * @param to Address to withdraw to.\n     * @param value Amount to withdraw.\n     */\n    function withdrawETH(address to, uint256 value) external;\n\n}\n\ninterface IWithdrawControlledSignals {\n\n    /**\n     * Withdraw failed error.\n     */\n    error WithdrawFailed();\n\n}\n\ninterface IWithdrawControlled is IWithdrawControlledFunctions, IWithdrawControlledSignals { }\n"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
      },
      "src/proxies/openzeppelin/ERC1967Proxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\n\npragma solidity ^0.8.19;\n\nimport \"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\";\nimport \"openzeppelin-contracts/contracts/proxy/Proxy.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
      },
      "lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.13;\n\nimport { Attestation } from \"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\";\n\n/// @title IImplicitProjectValidation\n/// @author Michael Standen\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\ninterface IImplicitProjectValidation {\n\n  /// @notice Invalid redirect url error\n  error InvalidRedirectUrl();\n\n  /// @notice Check if a project has a code\n  /// @param wallet The wallet address\n  /// @param attestation The attestation\n  /// @param projectId The project id\n  /// @return magic The attestation magic bytes for the wallet address\n  function validateAttestation(\n    address wallet,\n    Attestation calldata attestation,\n    bytes32 projectId\n  ) external view returns (bytes32);\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.27;\n\nimport { LibBytes } from \"../../../utils/LibBytes.sol\";\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \"./ISignalsImplicitMode.sol\";\n\nusing LibBytes for bytes;\n\n/// @notice Attestation for a specific session\n/// @param approvedSigner Address of the approved signer\n/// @param identityType Identity type\n/// @param issuerHash Hash of the issuer\n/// @param audienceHash Hash of the audience\n/// @param applicationData Unspecified application data\n/// @param authData Auth data\nstruct Attestation {\n  address approvedSigner;\n  bytes4 identityType;\n  bytes32 issuerHash;\n  bytes32 audienceHash;\n  bytes applicationData;\n  AuthData authData;\n}\n\n/// @notice Auth data for an attestation\n/// @param redirectUrl Authorization redirect URL\n/// @param issuedAt Timestamp of the attestation issuance\nstruct AuthData {\n  string redirectUrl;\n  uint64 issuedAt;\n}\n\n/// @title LibAttestation\n/// @author Michael Standen\n/// @notice Library for attestation management\nlibrary LibAttestation {\n\n  /// @notice Hashes an attestation\n  function toHash(\n    Attestation memory attestation\n  ) internal pure returns (bytes32) {\n    return keccak256(toPacked(attestation));\n  }\n\n  /// @notice Decodes an attestation from a packed bytes array\n  /// @param encoded The packed bytes array\n  /// @param pointer The pointer to the start of the attestation\n  /// @return attestation The decoded attestation\n  /// @return newPointer The new pointer to the end of the attestation\n  function fromPacked(\n    bytes calldata encoded,\n    uint256 pointer\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\n    newPointer = pointer;\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\n    // Application data (arbitrary bytes)\n    uint256 dataSize;\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\n    newPointer += dataSize;\n    // Auth data\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\n    return (attestation, newPointer);\n  }\n\n  /// @notice Decodes the auth data from a packed bytes\n  /// @param encoded The packed bytes containing the auth data\n  /// @param pointer The pointer to the start of the auth data within the encoded data\n  /// @return authData The decoded auth data\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\n  function fromPackedAuthData(\n    bytes calldata encoded,\n    uint256 pointer\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\n    uint24 redirectUrlLength;\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\n    pointer += redirectUrlLength;\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\n    return (authData, pointer);\n  }\n\n  /// @notice Encodes an attestation into a packed bytes array\n  /// @param attestation The attestation to encode\n  /// @return encoded The packed bytes array\n  function toPacked(\n    Attestation memory attestation\n  ) internal pure returns (bytes memory encoded) {\n    return abi.encodePacked(\n      attestation.approvedSigner,\n      attestation.identityType,\n      attestation.issuerHash,\n      attestation.audienceHash,\n      uint24(attestation.applicationData.length),\n      attestation.applicationData,\n      toPackAuthData(attestation.authData)\n    );\n  }\n\n  /// @notice Encodes the auth data into a packed bytes array\n  /// @param authData The auth data to encode\n  /// @return encoded The packed bytes array\n  function toPackAuthData(\n    AuthData memory authData\n  ) internal pure returns (bytes memory encoded) {\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\n  }\n\n  /// @notice Generates the implicit request magic return value\n  /// @param attestation The attestation\n  /// @param wallet The wallet\n  /// @return magic The expected implicit request magic\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\n    );\n  }\n\n}\n"
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.27;\n\nimport { Payload } from \"../../../modules/Payload.sol\";\nimport { Attestation } from \"./Attestation.sol\";\n\n/// @dev Magic prefix for the implicit request\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\"acceptImplicitRequest\"));\n\n/// @title ISignalsImplicitMode\n/// @author Agustin Aguilar, Michael Standen\n/// @notice Interface for the contracts that support implicit mode validation\ninterface ISignalsImplicitMode {\n\n  /// @notice Determines if an implicit request is valid\n  /// @param wallet The wallet's address\n  /// @param attestation The attestation data\n  /// @param call The call to validate\n  /// @return magic The hash of the implicit request if valid\n  function acceptImplicitRequest(\n    address wallet,\n    Attestation calldata attestation,\n    Payload.Call calldata call\n  ) external view returns (bytes32 magic);\n\n}\n"
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.27;\n\nimport { LibBytes } from \"../utils/LibBytes.sol\";\n\nusing LibBytes for bytes;\n\n/// @title Payload\n/// @author Agustin Aguilar, Michael Standen, William Hua\n/// @notice Library for encoding and decoding payloads\nlibrary Payload {\n\n  /// @notice Error thrown when the kind is invalid\n  error InvalidKind(uint8 kind);\n\n  /// @dev keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\n\n  /// @dev keccak256(\"Sequence Wallet\")\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\n\n  /// @dev keccak256(\"3\")\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\n\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\n    return keccak256(\n      abi.encode(\n        EIP712_DOMAIN_TYPEHASH,\n        EIP712_DOMAIN_NAME_SEQUENCE,\n        EIP712_DOMAIN_VERSION_SEQUENCE,\n        _noChainId ? uint256(0) : uint256(block.chainid),\n        _wallet\n      )\n    );\n  }\n\n  /// @dev keccak256(\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\")\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\n\n  /// @dev keccak256(\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\")\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\n\n  /// @dev keccak256(\"Message(bytes message,address[] wallets)\")\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\n\n  /// @dev keccak256(\"ConfigUpdate(bytes32 imageHash,address[] wallets)\")\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\n\n  /// @notice Kind of transaction\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\n  /// @notice Kind of digest\n  uint8 public constant KIND_MESSAGE = 0x01;\n  /// @notice Kind of config update\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\n  /// @notice Kind of message\n  uint8 public constant KIND_DIGEST = 0x03;\n\n  /// @notice Behavior on error: ignore error\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\n  /// @notice Behavior on error: revert on error\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\n  /// @notice Behavior on error: abort on error\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\n\n  /// @notice Payload call information\n  /// @param to Address of the target contract\n  /// @param value Value to send with the call\n  /// @param data Data to send with the call\n  /// @param gasLimit Gas limit for the call\n  /// @param delegateCall If the call is a delegate call\n  /// @param onlyFallback If the call should only be executed in an error scenario\n  /// @param behaviorOnError Behavior on error\n  struct Call {\n    address to;\n    uint256 value;\n    bytes data;\n    uint256 gasLimit;\n    bool delegateCall;\n    bool onlyFallback;\n    uint256 behaviorOnError;\n  }\n\n  /// @notice Decoded payload\n  /// @param kind Kind of payload\n  /// @param noChainId If the chain ID should be omitted\n  /// @param calls Array of calls (transaction kind)\n  /// @param space Nonce space for the calls (transaction kind)\n  /// @param nonce Nonce value for the calls (transaction kind)\n  /// @param message Message to validate (message kind)\n  /// @param imageHash Image hash to update to (config update kind)\n  /// @param digest Digest to validate (digest kind)\n  /// @param parentWallets Parent wallets\n  struct Decoded {\n    uint8 kind;\n    bool noChainId;\n    // Transaction kind\n    Call[] calls;\n    uint256 space;\n    uint256 nonce;\n    // Message kind\n    // TODO: Maybe native 721 ?\n    bytes message;\n    // Config update kind\n    bytes32 imageHash;\n    // Digest kind for 1271\n    bytes32 digest;\n    // Parent wallets\n    address[] parentWallets;\n  }\n\n  function fromMessage(\n    bytes memory message\n  ) internal pure returns (Decoded memory _decoded) {\n    _decoded.kind = KIND_MESSAGE;\n    _decoded.message = message;\n  }\n\n  function fromConfigUpdate(\n    bytes32 imageHash\n  ) internal pure returns (Decoded memory _decoded) {\n    _decoded.kind = KIND_CONFIG_UPDATE;\n    _decoded.imageHash = imageHash;\n  }\n\n  function fromDigest(\n    bytes32 digest\n  ) internal pure returns (Decoded memory _decoded) {\n    _decoded.kind = KIND_DIGEST;\n    _decoded.digest = digest;\n  }\n\n  function fromPackedCalls(\n    bytes calldata packed\n  ) internal view returns (Decoded memory _decoded) {\n    _decoded.kind = KIND_TRANSACTIONS;\n\n    // Read the global flag\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\n\n    // First bit determines if space is zero or not\n    if (globalFlag & 0x01 == 0x01) {\n      _decoded.space = 0;\n    } else {\n      (_decoded.space, pointer) = packed.readUint160(pointer);\n    }\n\n    // Next 3 bits determine the size of the nonce\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\n\n    if (nonceSize > 0) {\n      // Read the nonce\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\n    }\n\n    uint256 numCalls;\n\n    // Bit 5 determines if the batch contains a single call\n    if (globalFlag & 0x10 == 0x10) {\n      numCalls = 1;\n    } else {\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\n      if (globalFlag & 0x20 == 0x20) {\n        (numCalls, pointer) = packed.readUint16(pointer);\n      } else {\n        (numCalls, pointer) = packed.readUint8(pointer);\n      }\n    }\n\n    // Read the calls\n    _decoded.calls = new Call[](numCalls);\n\n    for (uint256 i = 0; i < numCalls; i++) {\n      uint8 flags;\n      (flags, pointer) = packed.readUint8(pointer);\n\n      // First bit determines if this is a call to self\n      // or a call to another address\n      if (flags & 0x01 == 0x01) {\n        // Call to self\n        _decoded.calls[i].to = address(this);\n      } else {\n        // Call to another address\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\n      }\n\n      // Second bit determines if the call has value or not\n      if (flags & 0x02 == 0x02) {\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\n      }\n\n      // Third bit determines if the call has data or not\n      if (flags & 0x04 == 0x04) {\n        // 3 bytes determine the size of the calldata\n        uint256 calldataSize;\n        (calldataSize, pointer) = packed.readUint24(pointer);\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\n        pointer += calldataSize;\n      }\n\n      // Fourth bit determines if the call has a gas limit or not\n      if (flags & 0x08 == 0x08) {\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\n      }\n\n      // Fifth bit determines if the call is a delegate call or not\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\n\n      // Sixth bit determines if the call is fallback only\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\n\n      // Last 2 bits are directly mapped to the behavior on error\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\n    }\n  }\n\n  function hashCall(\n    Call memory c\n  ) internal pure returns (bytes32) {\n    return keccak256(\n      abi.encode(\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\n      )\n    );\n  }\n\n  function hashCalls(\n    Call[] memory calls\n  ) internal pure returns (bytes32) {\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\n    // hashes of each item. So we hash each Call, pack them, and hash again.\n    bytes32[] memory callHashes = new bytes32[](calls.length);\n    for (uint256 i = 0; i < calls.length; i++) {\n      callHashes[i] = hashCall(calls[i]);\n    }\n    return keccak256(abi.encodePacked(callHashes));\n  }\n\n  function toEIP712(\n    Decoded memory _decoded\n  ) internal pure returns (bytes32) {\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\n\n    if (_decoded.kind == KIND_TRANSACTIONS) {\n      bytes32 callsHash = hashCalls(_decoded.calls);\n      // The top-level struct for Calls might be something like:\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\n    } else if (_decoded.kind == KIND_MESSAGE) {\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\n    } else if (_decoded.kind == KIND_DIGEST) {\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\n    } else {\n      // Unknown kind\n      revert InvalidKind(_decoded.kind);\n    }\n  }\n\n  function hash(\n    Decoded memory _decoded\n  ) internal view returns (bytes32) {\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\n    bytes32 structHash = toEIP712(_decoded);\n    return keccak256(abi.encodePacked(\"\\x19\\x01\", domain, structHash));\n  }\n\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\n    bytes32 structHash = toEIP712(_decoded);\n    return keccak256(abi.encodePacked(\"\\x19\\x01\", domain, structHash));\n  }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.18;\n\n/// @title Library for reading data from bytes arrays\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\n/// @notice This library contains functions for reading data from bytes arrays.\n/// @dev These functions do not check if the input index is within the bounds of the data array.\n/// @dev Reading out of bounds may return dirty values.\nlibrary LibBytes {\n\n  function readFirstUint8(\n    bytes calldata _data\n  ) internal pure returns (uint8 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(_data.offset)\n      a := shr(248, word)\n      newPointer := 1\n    }\n  }\n\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := shr(248, word)\n      newPointer := add(_index, 1)\n    }\n  }\n\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := shr(240, word)\n      newPointer := add(_index, 2)\n    }\n  }\n\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := shr(232, word)\n      newPointer := add(_index, 3)\n    }\n  }\n\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := shr(192, word)\n      newPointer := add(_index, 8)\n    }\n  }\n\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := shr(96, word)\n      newPointer := add(_index, 20)\n    }\n  }\n\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\n    assembly {\n      a := calldataload(add(_index, _data.offset))\n      newPointer := add(_index, 32)\n    }\n  }\n\n  function readUintX(\n    bytes calldata _data,\n    uint256 _index,\n    uint256 _length\n  ) internal pure returns (uint256 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      let shift := sub(256, mul(_length, 8))\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\n      newPointer := add(_index, _length)\n    }\n  }\n\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_pointer, _data.offset))\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n      newPointer := add(_pointer, 4)\n    }\n  }\n\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\n    assembly {\n      a := calldataload(add(_pointer, _data.offset))\n      newPointer := add(_pointer, 32)\n    }\n  }\n\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\n      newPointer := add(_index, 20)\n    }\n  }\n\n  /// @dev ERC-2098 Compact Signature\n  function readRSVCompact(\n    bytes calldata _data,\n    uint256 _index\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\n    uint256 yParityAndS;\n    assembly {\n      r := calldataload(add(_index, _data.offset))\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\n      newPointer := add(_index, 64)\n    }\n    uint256 yParity = uint256(yParityAndS >> 255);\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\n    v = uint8(yParity) + 27;\n  }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/",
        "ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/",
        "erc2470-libs/=lib/erc2470-libs/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "murky/=lib/murky/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/",
        "signals-implicit-mode/=lib/signals-implicit-mode/",
        "solady/=lib/solady/src/"
      ],
      "optimizer": {
        "enabled": false,
        "runs": 200
      },
      "metadata": {
        "useLiteralContent": true,
        "bytecodeHash": "ipfs",
        "appendCBOR": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "evm.bytecode",
            "evm.deployedBytecode",
            "devdoc",
            "userdoc",
            "metadata",
            "abi",
            "evm.methodIdentifiers"
          ]
        }
      },
      "evmVersion": "paris",
      "viaIR": true,
      "libraries": {}
    },
    "evmVersion": "paris",
    "viaIR": true,
    "libraries": {}
  },
  "allowPaths": [
    "/home/michael/Code/Horizon/live-contracts"
  ],
  "basePath": "/home/michael/Code/Horizon/live-contracts",
  "includePaths": [
    "/home/michael/Code/Horizon/live-contracts"
  ],
  "output": {
    "contracts": {
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
        "AccessControl": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.",
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol": {
        "AccessControlEnumerable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Extension of {AccessControl} that allows enumerating the members of each role.",
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {AccessControl} that allows enumerating the members of each role.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":\"AccessControlEnumerable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "IAccessControl": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "External interface of AccessControl declared to support ERC165 detection.",
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "getRoleAdmin(bytes32)": "248a9ca3",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol": {
        "IAccessControlEnumerable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "External interface of AccessControlEnumerable declared to support ERC165 detection.",
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControlEnumerable declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":\"IAccessControlEnumerable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "Ownable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
            "kind": "dev",
            "methods": {
              "constructor": {
                "details": "Initializes the contract setting the deployer as the initial owner."
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
        "IERC1967": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            }
          ],
          "devdoc": {
            "details": "ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":\"IERC1967\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
        "IERC1822Proxiable": {
          "abi": [
            {
              "inputs": [],
              "name": "proxiableUUID",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.",
            "kind": "dev",
            "methods": {
              "proxiableUUID()": {
                "details": "Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "proxiableUUID()": "52d1902d"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":\"IERC1822Proxiable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
        "ERC1967Upgrade": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            }
          ],
          "devdoc": {
            "details": "This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "stateVariables": {
              "_ADMIN_SLOT": {
                "details": "Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."
              },
              "_BEACON_SLOT": {
                "details": "The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."
              },
              "_IMPLEMENTATION_SLOT": {
                "details": "Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":\"ERC1967Upgrade\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
        "Proxy": {
          "abi": [
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "details": "This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":\"Proxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
        "IBeacon": {
          "abi": [
            {
              "inputs": [],
              "name": "implementation",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "This is the interface that {BeaconProxy} expects of its beacon.",
            "kind": "dev",
            "methods": {
              "implementation()": {
                "details": "Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "implementation()": "5c60da1b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":\"IBeacon\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol": {
        "UpgradeableBeacon": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "implementation_",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "implementation",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newImplementation",
                  "type": "address"
                }
              ],
              "name": "upgradeTo",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their implementation contract, which is where they will delegate all function calls. An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.",
            "events": {
              "Upgraded(address)": {
                "details": "Emitted when the implementation returned by the beacon is changed."
              }
            },
            "kind": "dev",
            "methods": {
              "constructor": {
                "details": "Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the beacon."
              },
              "implementation()": {
                "details": "Returns the current implementation address."
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              },
              "upgradeTo(address)": {
                "details": "Upgrades the beacon to a new implementation. Emits an {Upgraded} event. Requirements: - msg.sender must be the owner of the contract. - `newImplementation` must be a contract."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "abi_decode_address_fromMemory": {
                  "entryPoint": 204,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_fromMemory": {
                  "entryPoint": 219,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_5ccc": {
                  "entryPoint": 407,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 720,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_5ccc": {
                  "entryPoint": 433,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 134,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 52,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 320,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 171,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 676,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 831,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 160,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 828,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constructor_Ownable": {
                  "entryPoint": 302,
                  "id": 562,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "constructor_UpgradeableBeacon": {
                  "entryPoint": 283,
                  "id": 1076,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "convert_address_to_address": {
                  "entryPoint": 575,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 834,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 563,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 535,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_arguments_for_constructor_object_UpgradeableBeacon": {
                  "entryPoint": 250,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 687,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 95,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_isContract": {
                  "entryPoint": 862,
                  "id": 1631,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_msgSender": {
                  "entryPoint": 657,
                  "id": 1955,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_setImplementation": {
                  "entryPoint": 622,
                  "id": 1122,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_transferOwnership": {
                  "entryPoint": 726,
                  "id": 650,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "identity": {
                  "entryPoint": 532,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 73,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 587,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 707,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral_5ccc": {
                  "entryPoint": 458,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 58,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 155,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 63,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 499,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 670,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "store_literal_in_memory_5ccca6b0666a32006e874c0f8fc30910124098b6e8e91ea2ea1baa45ce41f1e6": {
                  "entryPoint": 329,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 505,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 590,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 183,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 652,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 823,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "60806040523461002f576100196100146100fa565b61011b565b610021610034565b610722610380823961072290f35b61003a565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100699061003f565b810190811060018060401b0382111761008157604052565b610049565b90610099610092610034565b928361005f565b565b600080fd5b60018060a01b031690565b6100b4906100a0565b90565b6100c0816100ab565b036100c757565b600080fd5b905051906100d9826100b7565b565b906020828203126100f5576100f2916000016100cc565b90565b61009b565b610118610aa28038038061010d81610086565b9283398101906100db565b90565b61012c9061012761012e565b61026e565b565b61013e610139610291565b6102d6565b565b60209181520190565b60207f6e206973206e6f74206120636f6e747261637400000000000000000000000000917f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60008201520152565b6101a46033604092610140565b6101ad81610149565b0190565b6101c79060208101906000818303910152610197565b90565b156101d157565b6101d9610034565b62461bcd60e51b8152806101ef600482016101b1565b0390fd5b60001b90565b9061020a60018060a01b03916101f3565b9181191691161790565b90565b61022b610226610230926100a0565b610214565b6100a0565b90565b61023c90610217565b90565b61024890610233565b90565b90565b9061026361025e61026a9261023f565b61024b565b82546101f9565b9055565b61028a9061028361027e8261035e565b6101ca565b600161024e565b565b600090565b61029961028c565b503390565b60001c90565b60018060a01b031690565b6102bb6102c09161029e565b6102a4565b90565b6102cd90546102af565b90565b60000190565b6102e060006102c3565b6102eb82600061024e565b9061031f6103197f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361023f565b9161023f565b91610328610034565b80610332816102d0565b0390a3565b600090565b90565b90565b61035661035161035b9261033f565b610214565b61033c565b90565b610366610337565b503b61037b6103756000610342565b9161033c565b119056fe60806040526004361015610013575b610219565b61001e60003561006d565b80633659cfe6146100685780635c60da1b14610063578063715018a61461005e5780638da5cb5b146100595763f2fde38b0361000e576101e6565b6101b1565b61017e565b610149565b6100e3565b60e01c90565b60405190565b600080fd5b600080fd5b60018060a01b031690565b61009790610083565b90565b6100a38161008e565b036100aa57565b600080fd5b905035906100bc8261009a565b565b906020828203126100d8576100d5916000016100af565b90565b61007e565b60000190565b34610111576100fb6100f63660046100be565b6102b3565b610103610073565b8061010d816100dd565b0390f35b610079565b600091031261012157565b61007e565b61012f9061008e565b9052565b919061014790600060208501940190610126565b565b3461017957610159366004610116565b6101756101646102f5565b61016c610073565b91829182610133565b0390f35b610079565b346101ac5761018e366004610116565b61019661035c565b61019e610073565b806101a8816100dd565b0390f35b610079565b346101e1576101c1366004610116565b6101dd6101cc610366565b6101d4610073565b91829182610133565b0390f35b610079565b34610214576101fe6101f93660046100be565b610473565b610206610073565b80610210816100dd565b0390f35b610079565b600080fd5b61022f9061022a610501565b610268565b565b90565b61024861024361024d92610083565b610231565b610083565b90565b61025990610234565b90565b61026590610250565b90565b6102718161061b565b61029b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9161025c565b906102a4610073565b806102ae816100dd565b0390a2565b6102bc9061021e565b565b600090565b60001c90565b60018060a01b031690565b6102e06102e5916102c3565b6102c9565b90565b6102f290546102d4565b90565b6102fd6102be565b5061030860016102e8565b90565b610313610501565b61031b610348565b565b90565b61033461032f6103399261031d565b610231565b610083565b90565b61034590610320565b90565b61035a610355600061033c565b610639565b565b61036461030b565b565b61036e6102be565b5061037960006102e8565b90565b61038d90610388610501565b610442565b565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201520152565b6103f3602660409261038f565b6103fc81610398565b0190565b61041690602081019060008183039101526103e6565b90565b1561042057565b610428610073565b62461bcd60e51b81528061043e60048201610400565b0390fd5b6104719061046c8161046561045f61045a600061033c565b61008e565b9161008e565b1415610419565b610639565b565b61047c9061037c565b565b60007f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910152565b6104b26020809261038f565b6104bb8161047e565b0190565b6104d590602081019060008183039101526104a6565b90565b156104df57565b6104e7610073565b62461bcd60e51b8152806104fd600482016104bf565b0390fd5b61052b61050c610366565b61052561051f61051a61069a565b61008e565b9161008e565b146104d8565b565b60207f6e206973206e6f74206120636f6e747261637400000000000000000000000000917f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60008201520152565b610588603360409261038f565b6105918161052d565b0190565b6105ab906020810190600081830391015261057b565b90565b156105b557565b6105bd610073565b62461bcd60e51b8152806105d360048201610595565b0390fd5b60001b90565b906105ee60018060a01b03916105d7565b9181191691161790565b90565b9061061061060b6106179261025c565b6105f8565b82546105dd565b9055565b6106379061063061062b826106cb565b6105ae565b60016105fb565b565b61064360006102e8565b61064e8260006105fb565b9061068261067c7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361025c565b9161025c565b9161068b610073565b80610695816100dd565b0390a3565b6106a26102be565b503390565b600090565b90565b6106c36106be6106c89261031d565b610231565b6106ac565b90565b6106d36106a7565b503b6106e86106e260006106af565b916106ac565b119056fea26469706673582212203fbf94b3aa182e7120f7ee578f52eecce106fbe2a323e7e4f1511d9f27768ead64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x2F JUMPI PUSH2 0x19 PUSH2 0x14 PUSH2 0xFA JUMP JUMPDEST PUSH2 0x11B JUMP JUMPDEST PUSH2 0x21 PUSH2 0x34 JUMP JUMPDEST PUSH2 0x722 PUSH2 0x380 DUP3 CODECOPY PUSH2 0x722 SWAP1 RETURN JUMPDEST PUSH2 0x3A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x69 SWAP1 PUSH2 0x3F JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x81 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x49 JUMP JUMPDEST SWAP1 PUSH2 0x99 PUSH2 0x92 PUSH2 0x34 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x5F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xB4 SWAP1 PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC0 DUP2 PUSH2 0xAB JUMP JUMPDEST SUB PUSH2 0xC7 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0xD9 DUP3 PUSH2 0xB7 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xF5 JUMPI PUSH2 0xF2 SWAP2 PUSH1 0x0 ADD PUSH2 0xCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9B JUMP JUMPDEST PUSH2 0x118 PUSH2 0xAA2 DUP1 CODESIZE SUB DUP1 PUSH2 0x10D DUP2 PUSH2 0x86 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD SWAP1 PUSH2 0xDB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x12C SWAP1 PUSH2 0x127 PUSH2 0x12E JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x13E PUSH2 0x139 PUSH2 0x291 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6E206973206E6F74206120636F6E747261637400000000000000000000000000 SWAP2 PUSH32 0x5570677261646561626C65426561636F6E3A20696D706C656D656E746174696F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1A4 PUSH1 0x33 PUSH1 0x40 SWAP3 PUSH2 0x140 JUMP JUMPDEST PUSH2 0x1AD DUP2 PUSH2 0x149 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1C7 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x197 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1D1 JUMPI JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x34 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1EF PUSH1 0x4 DUP3 ADD PUSH2 0x1B1 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x20A PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x1F3 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x22B PUSH2 0x226 PUSH2 0x230 SWAP3 PUSH2 0xA0 JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23C SWAP1 PUSH2 0x217 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x248 SWAP1 PUSH2 0x233 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x263 PUSH2 0x25E PUSH2 0x26A SWAP3 PUSH2 0x23F JUMP JUMPDEST PUSH2 0x24B JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1F9 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x28A SWAP1 PUSH2 0x283 PUSH2 0x27E DUP3 PUSH2 0x35E JUMP JUMPDEST PUSH2 0x1CA JUMP JUMPDEST PUSH1 0x1 PUSH2 0x24E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x299 PUSH2 0x28C JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2BB PUSH2 0x2C0 SWAP2 PUSH2 0x29E JUMP JUMPDEST PUSH2 0x2A4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2CD SWAP1 SLOAD PUSH2 0x2AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH1 0x0 PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x2EB DUP3 PUSH1 0x0 PUSH2 0x24E JUMP JUMPDEST SWAP1 PUSH2 0x31F PUSH2 0x319 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x23F JUMP JUMPDEST SWAP2 PUSH2 0x23F JUMP JUMPDEST SWAP2 PUSH2 0x328 PUSH2 0x34 JUMP JUMPDEST DUP1 PUSH2 0x332 DUP2 PUSH2 0x2D0 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x351 PUSH2 0x35B SWAP3 PUSH2 0x33F JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH2 0x33C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x366 PUSH2 0x337 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x37B PUSH2 0x375 PUSH1 0x0 PUSH2 0x342 JUMP JUMPDEST SWAP2 PUSH2 0x33C JUMP JUMPDEST GT SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x219 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x6D JUMP JUMPDEST DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x68 JUMPI DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x63 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x5E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x59 JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x1E6 JUMP JUMPDEST PUSH2 0x1B1 JUMP JUMPDEST PUSH2 0x17E JUMP JUMPDEST PUSH2 0x149 JUMP JUMPDEST PUSH2 0xE3 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x97 SWAP1 PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA3 DUP2 PUSH2 0x8E JUMP JUMPDEST SUB PUSH2 0xAA JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xBC DUP3 PUSH2 0x9A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xD8 JUMPI PUSH2 0xD5 SWAP2 PUSH1 0x0 ADD PUSH2 0xAF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x111 JUMPI PUSH2 0xFB PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x2B3 JUMP JUMPDEST PUSH2 0x103 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x10D DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x121 JUMPI JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH2 0x12F SWAP1 PUSH2 0x8E JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x147 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x126 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x179 JUMPI PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x164 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x16C PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1AC JUMPI PUSH2 0x18E CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x35C JUMP JUMPDEST PUSH2 0x19E PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x1A8 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1E1 JUMPI PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x1DD PUSH2 0x1CC PUSH2 0x366 JUMP JUMPDEST PUSH2 0x1D4 PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH2 0x1FE PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST PUSH2 0x206 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x210 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22F SWAP1 PUSH2 0x22A PUSH2 0x501 JUMP JUMPDEST PUSH2 0x268 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x248 PUSH2 0x243 PUSH2 0x24D SWAP3 PUSH2 0x83 JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x259 SWAP1 PUSH2 0x234 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x265 SWAP1 PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x271 DUP2 PUSH2 0x61B JUMP JUMPDEST PUSH2 0x29B PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP1 PUSH2 0x2A4 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x2AE DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH2 0x2BC SWAP1 PUSH2 0x21E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2E5 SWAP2 PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x2C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F2 SWAP1 SLOAD PUSH2 0x2D4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2FD PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x308 PUSH1 0x1 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x313 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x31B PUSH2 0x348 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x334 PUSH2 0x32F PUSH2 0x339 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x345 SWAP1 PUSH2 0x320 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x355 PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x364 PUSH2 0x30B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x36E PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x379 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38D SWAP1 PUSH2 0x388 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x442 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x3FC DUP2 PUSH2 0x398 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x416 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x3E6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x420 JUMPI JUMP JUMPDEST PUSH2 0x428 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x43E PUSH1 0x4 DUP3 ADD PUSH2 0x400 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x471 SWAP1 PUSH2 0x46C DUP2 PUSH2 0x465 PUSH2 0x45F PUSH2 0x45A PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ ISZERO PUSH2 0x419 JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x47C SWAP1 PUSH2 0x37C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x4B2 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x4BB DUP2 PUSH2 0x47E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x4D5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x4A6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x4DF JUMPI JUMP JUMPDEST PUSH2 0x4E7 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x4FD PUSH1 0x4 DUP3 ADD PUSH2 0x4BF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x52B PUSH2 0x50C PUSH2 0x366 JUMP JUMPDEST PUSH2 0x525 PUSH2 0x51F PUSH2 0x51A PUSH2 0x69A JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ PUSH2 0x4D8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6E206973206E6F74206120636F6E747261637400000000000000000000000000 SWAP2 PUSH32 0x5570677261646561626C65426561636F6E3A20696D706C656D656E746174696F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x588 PUSH1 0x33 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x591 DUP2 PUSH2 0x52D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x5AB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x57B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5B5 JUMPI JUMP JUMPDEST PUSH2 0x5BD PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x5D3 PUSH1 0x4 DUP3 ADD PUSH2 0x595 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x5EE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x5D7 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x610 PUSH2 0x60B PUSH2 0x617 SWAP3 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x5F8 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x5DD JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x637 SWAP1 PUSH2 0x630 PUSH2 0x62B DUP3 PUSH2 0x6CB JUMP JUMPDEST PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x1 PUSH2 0x5FB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x643 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0x64E DUP3 PUSH1 0x0 PUSH2 0x5FB JUMP JUMPDEST SWAP1 PUSH2 0x682 PUSH2 0x67C PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x68B PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x695 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x6A2 PUSH2 0x2BE JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C3 PUSH2 0x6BE PUSH2 0x6C8 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x6AC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6D3 PUSH2 0x6A7 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x6E8 PUSH2 0x6E2 PUSH1 0x0 PUSH2 0x6AF JUMP JUMPDEST SWAP2 PUSH2 0x6AC JUMP JUMPDEST GT SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH 0xBF SWAP5 0xB3 0xAA XOR 0x2E PUSH18 0x20F7EE578F52EECCE106FBE2A323E7E4F151 SAR SWAP16 0x27 PUSH23 0x8EAD64736F6C634300081B003300000000000000000000 ",
              "sourceMap": "543:1496:10:-:0;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;:::o;931:89::-;997:15;931:89;;;:::i;:::-;997:15;:::i;:::-;931:89::o;912:63:4:-;955:12;;;:::i;:::-;;:::i;:::-;912:63::o;543:1496:10:-;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;1811:226::-;1995:35;1811:226;1884:101;1892:37;1911:17;1892:37;:::i;:::-;1884:101;:::i;:::-;1995:35;;:::i;:::-;1811:226::o;543:1496::-;;;:::o;640:96:15:-;693:7;;:::i;:::-;719:10;;712:17;:::o;543:1496:10:-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;:::o;2426:187:4:-;2518:6;;;:::i;:::-;2534:17;2543:8;2534:17;;:::i;:::-;2597:8;2566:40;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;2426:187::o;543:1496:10:-;;;:::o;:::-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;1412:320:14:-;1472:4;;:::i;:::-;1702:7;:19;:23;;1724:1;1702:23;:::i;:::-;;;:::i;:::-;;1695:30;:::o"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode": {
                  "entryPoint": 278,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_address": {
                  "entryPoint": 175,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address": {
                  "entryPoint": 190,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 294,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_stringliteral": {
                  "entryPoint": 1215,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_245f": {
                  "entryPoint": 998,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_5ccc": {
                  "entryPoint": 1403,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_9924": {
                  "entryPoint": 1190,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 221,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 307,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_245f": {
                  "entryPoint": 1024,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_5ccc": {
                  "entryPoint": 1429,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 115,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 911,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 142,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 713,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 797,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 131,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 1708,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 604,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 828,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 800,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 1711,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 592,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 564,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "external_fun_implementation": {
                  "entryPoint": 329,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_owner": {
                  "entryPoint": 433,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_renounceOwnership": {
                  "entryPoint": 382,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_transferOwnership": {
                  "entryPoint": 486,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_upgradeTo": {
                  "entryPoint": 227,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 724,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun__transferOwnership": {
                  "entryPoint": 1593,
                  "id": 650,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_checkOwner": {
                  "entryPoint": 1281,
                  "id": 593,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_implementation": {
                  "entryPoint": 757,
                  "id": 1086,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_isContract": {
                  "entryPoint": 1739,
                  "id": 1631,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_msgSender": {
                  "entryPoint": 1690,
                  "id": 1955,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_owner": {
                  "entryPoint": 870,
                  "id": 579,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_renounceOwnership": {
                  "entryPoint": 860,
                  "id": 607,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_renounceOwnership_inner": {
                  "entryPoint": 840,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_setImplementation": {
                  "entryPoint": 1563,
                  "id": 1122,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_transferOwnership": {
                  "entryPoint": 1139,
                  "id": 630,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_transferOwnership_inner": {
                  "entryPoint": 1090,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeTo": {
                  "entryPoint": 691,
                  "id": 1103,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeTo_inner": {
                  "entryPoint": 616,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "identity": {
                  "entryPoint": 561,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "modifier_onlyOwner": {
                  "entryPoint": 779,
                  "id": 570,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "modifier_onlyOwner_1092": {
                  "entryPoint": 542,
                  "id": 570,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_onlyOwner_613": {
                  "entryPoint": 892,
                  "id": 570,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 1528,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 744,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral": {
                  "entryPoint": 1240,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_245f": {
                  "entryPoint": 1049,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_5ccc": {
                  "entryPoint": 1454,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": 537,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 121,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 126,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "shift_left": {
                  "entryPoint": 1495,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_0_unsigned": {
                  "entryPoint": 707,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 109,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe": {
                  "entryPoint": 920,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_5ccca6b0666a32006e874c0f8fc30910124098b6e8e91ea2ea1baa45ce41f1e6": {
                  "entryPoint": 1325,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe": {
                  "entryPoint": 1150,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 1501,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 1531,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 154,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 702,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 1703,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "60806040526004361015610013575b610219565b61001e60003561006d565b80633659cfe6146100685780635c60da1b14610063578063715018a61461005e5780638da5cb5b146100595763f2fde38b0361000e576101e6565b6101b1565b61017e565b610149565b6100e3565b60e01c90565b60405190565b600080fd5b600080fd5b60018060a01b031690565b61009790610083565b90565b6100a38161008e565b036100aa57565b600080fd5b905035906100bc8261009a565b565b906020828203126100d8576100d5916000016100af565b90565b61007e565b60000190565b34610111576100fb6100f63660046100be565b6102b3565b610103610073565b8061010d816100dd565b0390f35b610079565b600091031261012157565b61007e565b61012f9061008e565b9052565b919061014790600060208501940190610126565b565b3461017957610159366004610116565b6101756101646102f5565b61016c610073565b91829182610133565b0390f35b610079565b346101ac5761018e366004610116565b61019661035c565b61019e610073565b806101a8816100dd565b0390f35b610079565b346101e1576101c1366004610116565b6101dd6101cc610366565b6101d4610073565b91829182610133565b0390f35b610079565b34610214576101fe6101f93660046100be565b610473565b610206610073565b80610210816100dd565b0390f35b610079565b600080fd5b61022f9061022a610501565b610268565b565b90565b61024861024361024d92610083565b610231565b610083565b90565b61025990610234565b90565b61026590610250565b90565b6102718161061b565b61029b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9161025c565b906102a4610073565b806102ae816100dd565b0390a2565b6102bc9061021e565b565b600090565b60001c90565b60018060a01b031690565b6102e06102e5916102c3565b6102c9565b90565b6102f290546102d4565b90565b6102fd6102be565b5061030860016102e8565b90565b610313610501565b61031b610348565b565b90565b61033461032f6103399261031d565b610231565b610083565b90565b61034590610320565b90565b61035a610355600061033c565b610639565b565b61036461030b565b565b61036e6102be565b5061037960006102e8565b90565b61038d90610388610501565b610442565b565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201520152565b6103f3602660409261038f565b6103fc81610398565b0190565b61041690602081019060008183039101526103e6565b90565b1561042057565b610428610073565b62461bcd60e51b81528061043e60048201610400565b0390fd5b6104719061046c8161046561045f61045a600061033c565b61008e565b9161008e565b1415610419565b610639565b565b61047c9061037c565b565b60007f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910152565b6104b26020809261038f565b6104bb8161047e565b0190565b6104d590602081019060008183039101526104a6565b90565b156104df57565b6104e7610073565b62461bcd60e51b8152806104fd600482016104bf565b0390fd5b61052b61050c610366565b61052561051f61051a61069a565b61008e565b9161008e565b146104d8565b565b60207f6e206973206e6f74206120636f6e747261637400000000000000000000000000917f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60008201520152565b610588603360409261038f565b6105918161052d565b0190565b6105ab906020810190600081830391015261057b565b90565b156105b557565b6105bd610073565b62461bcd60e51b8152806105d360048201610595565b0390fd5b60001b90565b906105ee60018060a01b03916105d7565b9181191691161790565b90565b9061061061060b6106179261025c565b6105f8565b82546105dd565b9055565b6106379061063061062b826106cb565b6105ae565b60016105fb565b565b61064360006102e8565b61064e8260006105fb565b9061068261067c7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361025c565b9161025c565b9161068b610073565b80610695816100dd565b0390a3565b6106a26102be565b503390565b600090565b90565b6106c36106be6106c89261031d565b610231565b6106ac565b90565b6106d36106a7565b503b6106e86106e260006106af565b916106ac565b119056fea26469706673582212203fbf94b3aa182e7120f7ee578f52eecce106fbe2a323e7e4f1511d9f27768ead64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x219 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x6D JUMP JUMPDEST DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x68 JUMPI DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x63 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x5E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x59 JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x1E6 JUMP JUMPDEST PUSH2 0x1B1 JUMP JUMPDEST PUSH2 0x17E JUMP JUMPDEST PUSH2 0x149 JUMP JUMPDEST PUSH2 0xE3 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x97 SWAP1 PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA3 DUP2 PUSH2 0x8E JUMP JUMPDEST SUB PUSH2 0xAA JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xBC DUP3 PUSH2 0x9A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xD8 JUMPI PUSH2 0xD5 SWAP2 PUSH1 0x0 ADD PUSH2 0xAF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x111 JUMPI PUSH2 0xFB PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x2B3 JUMP JUMPDEST PUSH2 0x103 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x10D DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x121 JUMPI JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH2 0x12F SWAP1 PUSH2 0x8E JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x147 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x126 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x179 JUMPI PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x164 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x16C PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1AC JUMPI PUSH2 0x18E CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x35C JUMP JUMPDEST PUSH2 0x19E PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x1A8 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1E1 JUMPI PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x1DD PUSH2 0x1CC PUSH2 0x366 JUMP JUMPDEST PUSH2 0x1D4 PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH2 0x1FE PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST PUSH2 0x206 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x210 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22F SWAP1 PUSH2 0x22A PUSH2 0x501 JUMP JUMPDEST PUSH2 0x268 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x248 PUSH2 0x243 PUSH2 0x24D SWAP3 PUSH2 0x83 JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x259 SWAP1 PUSH2 0x234 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x265 SWAP1 PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x271 DUP2 PUSH2 0x61B JUMP JUMPDEST PUSH2 0x29B PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP1 PUSH2 0x2A4 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x2AE DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH2 0x2BC SWAP1 PUSH2 0x21E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2E5 SWAP2 PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x2C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F2 SWAP1 SLOAD PUSH2 0x2D4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2FD PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x308 PUSH1 0x1 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x313 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x31B PUSH2 0x348 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x334 PUSH2 0x32F PUSH2 0x339 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x345 SWAP1 PUSH2 0x320 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x355 PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x364 PUSH2 0x30B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x36E PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x379 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38D SWAP1 PUSH2 0x388 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x442 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x3FC DUP2 PUSH2 0x398 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x416 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x3E6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x420 JUMPI JUMP JUMPDEST PUSH2 0x428 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x43E PUSH1 0x4 DUP3 ADD PUSH2 0x400 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x471 SWAP1 PUSH2 0x46C DUP2 PUSH2 0x465 PUSH2 0x45F PUSH2 0x45A PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ ISZERO PUSH2 0x419 JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x47C SWAP1 PUSH2 0x37C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x4B2 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x4BB DUP2 PUSH2 0x47E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x4D5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x4A6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x4DF JUMPI JUMP JUMPDEST PUSH2 0x4E7 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x4FD PUSH1 0x4 DUP3 ADD PUSH2 0x4BF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x52B PUSH2 0x50C PUSH2 0x366 JUMP JUMPDEST PUSH2 0x525 PUSH2 0x51F PUSH2 0x51A PUSH2 0x69A JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ PUSH2 0x4D8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6E206973206E6F74206120636F6E747261637400000000000000000000000000 SWAP2 PUSH32 0x5570677261646561626C65426561636F6E3A20696D706C656D656E746174696F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x588 PUSH1 0x33 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x591 DUP2 PUSH2 0x52D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x5AB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x57B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5B5 JUMPI JUMP JUMPDEST PUSH2 0x5BD PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x5D3 PUSH1 0x4 DUP3 ADD PUSH2 0x595 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x5EE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x5D7 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x610 PUSH2 0x60B PUSH2 0x617 SWAP3 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x5F8 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x5DD JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x637 SWAP1 PUSH2 0x630 PUSH2 0x62B DUP3 PUSH2 0x6CB JUMP JUMPDEST PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x1 PUSH2 0x5FB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x643 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0x64E DUP3 PUSH1 0x0 PUSH2 0x5FB JUMP JUMPDEST SWAP1 PUSH2 0x682 PUSH2 0x67C PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x68B PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x695 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x6A2 PUSH2 0x2BE JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C3 PUSH2 0x6BE PUSH2 0x6C8 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x6AC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6D3 PUSH2 0x6A7 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x6E8 PUSH2 0x6E2 PUSH1 0x0 PUSH2 0x6AF JUMP JUMPDEST SWAP2 PUSH2 0x6AC JUMP JUMPDEST GT SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH 0xBF SWAP5 0xB3 0xAA XOR 0x2E PUSH18 0x20F7EE578F52EECCE106FBE2A323E7E4F151 SAR SWAP16 0x27 PUSH23 0x8EAD64736F6C634300081B003300000000000000000000 ",
              "sourceMap": "543:1496:10:-:0;;;;;;;;;-1:-1:-1;543:1496:10;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;1063:62:4;1117:1;1063:62;;;:::i;:::-;1117:1;:::i;:::-;1063:62::o;543:1496:10:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;1469:167::-;1569:17;;;:::i;:::-;1602:27;;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;1469:167::o;:::-;;;;:::i;:::-;:::o;543:1496::-;;;:::o;:::-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;1098:112::-;1162:7;;:::i;:::-;1188:15;;;;:::i;:::-;1181:22;:::o;1063:62:4:-;;;:::i;:::-;1117:1;;:::i;:::-;1063:62::o;543:1496:10:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;1824:101:4:-;1907:10;;1915:1;1907:10;:::i;:::-;;:::i;:::-;1824:101::o;:::-;;;:::i;:::-;:::o;1201:85::-;1247:7;;:::i;:::-;1273:6;;;;:::i;:::-;1266:13;:::o;1063:62::-;1117:1;1063:62;;;:::i;:::-;1117:1;:::i;:::-;1063:62::o;543:1496:10:-;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;2074:198:4;2256:8;2074:198;2154:73;2162:8;:22;;2174:10;2182:1;2174:10;:::i;:::-;2162:22;:::i;:::-;;;:::i;:::-;;;2154:73;:::i;:::-;2256:8;:::i;:::-;2074:198::o;:::-;;;;:::i;:::-;:::o;543:1496:10:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;1359:130:4;1414:68;1422:7;;:::i;:::-;:23;;1433:12;;:::i;:::-;1422:23;:::i;:::-;;;:::i;:::-;;1414:68;:::i;:::-;1359:130::o;543:1496:10:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;1811:226::-;1995:35;1811:226;1884:101;1892:37;1911:17;1892:37;:::i;:::-;1884:101;:::i;:::-;1995:35;;:::i;:::-;1811:226::o;2426:187:4:-;2518:6;;;:::i;:::-;2534:17;2543:8;2534:17;;:::i;:::-;2597:8;2566:40;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;2426:187::o;640:96:15:-;693:7;;:::i;:::-;719:10;;712:17;:::o;543:1496:10:-;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;1412:320:14:-;1472:4;;:::i;:::-;1702:7;:19;:23;;1724:1;1702:23;:::i;:::-;;;:::i;:::-;;1695:30;:::o"
            },
            "methodIdentifiers": {
              "implementation()": "5c60da1b",
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b",
              "upgradeTo(address)": "3659cfe6"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their implementation contract, which is where they will delegate all function calls. An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\",\"events\":{\"Upgraded(address)\":{\"details\":\"Emitted when the implementation returned by the beacon is changed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the beacon.\"},\"implementation()\":{\"details\":\"Returns the current implementation address.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrades the beacon to a new implementation. Emits an {Upgraded} event. Requirements: - msg.sender must be the owner of the contract. - `newImplementation` must be a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\":\"UpgradeableBeacon\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "IERC20": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface of the ERC20 standard as defined in the EIP.",
            "events": {
              "Approval(address,address,uint256)": {
                "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
              },
              "Transfer(address,address,uint256)": {
                "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
              }
            },
            "kind": "dev",
            "methods": {
              "allowance(address,address)": {
                "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
              },
              "approve(address,uint256)": {
                "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
              },
              "balanceOf(address)": {
                "details": "Returns the amount of tokens owned by `account`."
              },
              "totalSupply()": {
                "details": "Returns the amount of tokens in existence."
              },
              "transfer(address,uint256)": {
                "details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
              },
              "transferFrom(address,address,uint256)": {
                "details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
        "IERC20Permit": {
          "abi": [
            {
              "inputs": [],
              "name": "DOMAIN_SEPARATOR",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                }
              ],
              "name": "nonces",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "name": "permit",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
            "kind": "dev",
            "methods": {
              "DOMAIN_SEPARATOR()": {
                "details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
              },
              "nonces(address)": {
                "details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
              },
              "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
                "details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "DOMAIN_SEPARATOR()": "3644e515",
              "nonces(address)": "7ecebe00",
              "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
        "SafeERC20": {
          "abi": [],
          "devdoc": {
            "details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
            "kind": "dev",
            "methods": {},
            "title": "SafeERC20",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220b963d7bbca40edbdaf419fd14608ba80369427b8e9304881e1b4cb41965b0d1e64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB9 PUSH4 0xD7BBCA40 0xED 0xBD 0xAF COINBASE SWAP16 0xD1 CHAINID ADDMOD 0xBA DUP1 CALLDATASIZE SWAP5 0x27 0xB8 0xE9 ADDRESS BASEFEE DUP2 0xE1 0xB4 0xCB COINBASE SWAP7 JUMPDEST 0xD 0x1E PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "701:6234:13:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220b963d7bbca40edbdaf419fd14608ba80369427b8e9304881e1b4cb41965b0d1e64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB9 PUSH4 0xD7BBCA40 0xED 0xBD 0xAF COINBASE SWAP16 0xD1 CHAINID ADDMOD 0xBA DUP1 CALLDATASIZE SWAP5 0x27 0xB8 0xE9 ADDRESS BASEFEE DUP2 0xE1 0xB4 0xCB COINBASE SWAP7 JUMPDEST 0xD 0x1E PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "701:6234:13:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "Address": {
          "abi": [],
          "devdoc": {
            "details": "Collection of functions related to the address type",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220d3abc0af33203caad0ad432e6222e8d6d0ceccd4e030fc68e3979c41224f1fb664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 0xAB 0xC0 0xAF CALLER KECCAK256 EXTCODECOPY 0xAA 0xD0 0xAD NUMBER 0x2E PUSH3 0x22E8D6 0xD0 0xCE 0xCC 0xD4 0xE0 ADDRESS 0xFC PUSH9 0xE3979C41224F1FB664 PUSH20 0x6F6C634300081B00330000000000000000000000 ",
              "sourceMap": "194:9169:14:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220d3abc0af33203caad0ad432e6222e8d6d0ceccd4e030fc68e3979c41224f1fb664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 0xAB 0xC0 0xAF CALLER KECCAK256 EXTCODECOPY 0xAA 0xD0 0xAD NUMBER 0x2E PUSH3 0x22E8D6 0xD0 0xCE 0xCC 0xD4 0xE0 ADDRESS 0xFC PUSH9 0xE3979C41224F1FB664 PUSH20 0x6F6C634300081B00330000000000000000000000 ",
              "sourceMap": "194:9169:14:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "Context": {
          "abi": [],
          "devdoc": {
            "details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/Create2.sol": {
        "Create2": {
          "abi": [],
          "devdoc": {
            "details": "Helper to make usage of the `CREATE2` EVM opcode easier and safer. `CREATE2` can be used to compute in advance the address where a smart contract will be deployed, which allows for interesting new mechanisms known as 'counterfactual interactions'. See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more information.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea264697066735822122077e98127935e88f2846383618bee3670867107bbcac7fd9a50b5a7c0801ff5a864736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0xE98127935E88F2846383618BEE3670867107BBCAC7FD9A50 0xB5 0xA7 0xC0 DUP1 0x1F CREATE2 0xA8 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "494:3457:16:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea264697066735822122077e98127935e88f2846383618bee3670867107bbcac7fd9a50b5a7c0801ff5a864736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0xE98127935E88F2846383618BEE3670867107BBCAC7FD9A50 0xB5 0xA7 0xC0 DUP1 0x1F CREATE2 0xA8 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "494:3457:16:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Helper to make usage of the `CREATE2` EVM opcode easier and safer. `CREATE2` can be used to compute in advance the address where a smart contract will be deployed, which allows for interesting new mechanisms known as 'counterfactual interactions'. See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more information.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Create2.sol\":\"Create2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
        "StorageSlot": {
          "abi": [],
          "devdoc": {
            "details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220fea4d0016025f5b5539ed9ba7edda868730b01b468a9222627078c87c88fd27d64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID LOG4 0xD0 ADD PUSH1 0x25 CREATE2 0xB5 MSTORE8 SWAP15 0xD9 0xBA PUSH31 0xDDA868730B01B468A9222627078C87C88FD27D64736F6C634300081B003300 ",
              "sourceMap": "1420:2685:17:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220fea4d0016025f5b5539ed9ba7edda868730b01b468a9222627078c87c88fd27d64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID LOG4 0xD0 ADD PUSH1 0x25 CREATE2 0xB5 MSTORE8 SWAP15 0xD9 0xBA PUSH31 0xDDA868730B01B468A9222627078C87C88FD27D64736F6C634300081B003300 ",
              "sourceMap": "1420:2685:17:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "Strings": {
          "abi": [],
          "devdoc": {
            "details": "String operations.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220e16e8e97b4990e0095cd8ebb32493f3de436302fe791387e70d534f04d35056664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 PUSH15 0x8E97B4990E0095CD8EBB32493F3DE4 CALLDATASIZE ADDRESS 0x2F 0xE7 SWAP2 CODESIZE PUSH31 0x70D534F04D35056664736F6C634300081B0033000000000000000000000000 ",
              "sourceMap": "220:2559:18:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220e16e8e97b4990e0095cd8ebb32493f3de436302fe791387e70d534f04d35056664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 PUSH15 0x8E97B4990E0095CD8EBB32493F3DE4 CALLDATASIZE ADDRESS 0x2F 0xE7 SWAP2 CODESIZE PUSH31 0x70D534F04D35056664736F6C634300081B0033000000000000000000000000 ",
              "sourceMap": "220:2559:18:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
        "MerkleProof": {
          "abi": [],
          "devdoc": {
            "details": "These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea264697066735822122014cd59e171adcd93f72e76d4f404b42766d6598c9fbcbb176d76cf1d0bde3a5864736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ 0xCD MSIZE 0xE1 PUSH18 0xADCD93F72E76D4F404B42766D6598C9FBCBB OR PUSH14 0x76CF1D0BDE3A5864736F6C634300 ADDMOD SHL STOP CALLER ",
              "sourceMap": "802:8819:19:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea264697066735822122014cd59e171adcd93f72e76d4f404b42766d6598c9fbcbb176d76cf1d0bde3a5864736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EQ 0xCD MSIZE 0xE1 PUSH18 0xADCD93F72E76D4F404B42766D6598C9FBCBB OR PUSH14 0x76CF1D0BDE3A5864736F6C634300 ADDMOD SHL STOP CALLER ",
              "sourceMap": "802:8819:19:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "ERC165": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
            "kind": "dev",
            "methods": {
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "IERC165": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
            "kind": "dev",
            "methods": {
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "Math": {
          "abi": [],
          "devdoc": {
            "details": "Standard math utilities missing in the Solidity language.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220676481f5aa8789a1b0bf561f5296bfb25a92e9cad555d352e316bee4902555b764736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH8 0x6481F5AA8789A1B0 0xBF JUMP 0x1F MSTORE SWAP7 0xBF 0xB2 GAS SWAP3 0xE9 0xCA 0xD5 SSTORE 0xD3 MSTORE 0xE3 AND 0xBE 0xE4 SWAP1 0x25 SSTORE 0xB7 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "202:12582:22:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220676481f5aa8789a1b0bf561f5296bfb25a92e9cad555d352e316bee4902555b764736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH8 0x6481F5AA8789A1B0 0xBF JUMP 0x1F MSTORE SWAP7 0xBF 0xB2 GAS SWAP3 0xE9 0xCA 0xD5 SSTORE 0xD3 MSTORE 0xE3 AND 0xBE 0xE4 SWAP1 0x25 SSTORE 0xB7 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "202:12582:22:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "SignedMath": {
          "abi": [],
          "devdoc": {
            "details": "Standard signed math utilities missing in the Solidity language.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea264697066735822122091e9af2458177a811dc5c7789df16dc4acd95f66f4cac72f86aafa46ede9435264736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 0xE9 0xAF 0x24 PC OR PUSH27 0x811DC5C7789DF16DC4ACD95F66F4CAC72F86AAFA46EDE943526473 PUSH16 0x6C634300081B00330000000000000000 ",
              "sourceMap": "215:1047:23:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea264697066735822122091e9af2458177a811dc5c7789df16dc4acd95f66f4cac72f86aafa46ede9435264736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 0xE9 0xAF 0x24 PC OR PUSH27 0x811DC5C7789DF16DC4ACD95F66F4CAC72F86AAFA46EDE943526473 PUSH16 0x6C634300081B00330000000000000000 ",
              "sourceMap": "215:1047:23:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
        "EnumerableSet": {
          "abi": [],
          "devdoc": {
            "details": "Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea26469706673582212202b929ee990d5c52293f80d23bfb8e62ce8663222af518d55741c676314b72d1964736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B SWAP3 SWAP15 0xE9 SWAP1 0xD5 0xC5 0x22 SWAP4 0xF8 0xD 0x23 0xBF 0xB8 0xE6 0x2C 0xE8 PUSH7 0x3222AF518D5574 SHR PUSH8 0x6314B72D1964736F PUSH13 0x634300081B0033000000000000 ",
              "sourceMap": "1329:11630:24:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea26469706673582212202b929ee990d5c52293f80d23bfb8e62ce8663222af518d55741c676314b72d1964736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B SWAP3 SWAP15 0xE9 SWAP1 0xD5 0xC5 0x22 SWAP4 0xF8 0xD 0x23 0xBF 0xB8 0xE6 0x2C 0xE8 PUSH7 0x3222AF518D5574 SHR PUSH8 0x6314B72D1964736F PUSH13 0x634300081B0033000000000000 ",
              "sourceMap": "1329:11630:24:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol": {
        "LibAttestation": {
          "abi": [],
          "devdoc": {
            "author": "Michael Standen",
            "kind": "dev",
            "methods": {},
            "title": "LibAttestation",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220bd25df253d044562c56b7ce685e9cf01fd41e647520276a7146d198ffafe523e64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD 0x25 0xDF 0x25 RETURNDATASIZE DIV GASLIMIT PUSH3 0xC56B7C 0xE6 DUP6 0xE9 0xCF ADD REVERT COINBASE 0xE6 SELFBALANCE MSTORE MUL PUSH23 0xA7146D198FFAFE523E64736F6C634300081B0033000000 ",
              "sourceMap": "1023:3579:25:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220bd25df253d044562c56b7ce685e9cf01fd41e647520276a7146d198ffafe523e64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD 0x25 0xDF 0x25 RETURNDATASIZE DIV GASLIMIT PUSH3 0xC56B7C 0xE6 DUP6 0xE9 0xCF ADD REVERT COINBASE 0xE6 SELFBALANCE MSTORE MUL PUSH23 0xA7146D198FFAFE523E64736F6C634300081B0033000000 ",
              "sourceMap": "1023:3579:25:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Michael Standen\",\"kind\":\"dev\",\"methods\":{},\"title\":\"LibAttestation\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library for attestation management\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":\"LibAttestation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "notice": "Library for attestation management",
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol": {
        "ISignalsImplicitMode": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "delegateCall",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "onlyFallback",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "behaviorOnError",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Payload.Call",
                  "name": "call",
                  "type": "tuple"
                }
              ],
              "name": "acceptImplicitRequest",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "magic",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Agustin Aguilar, Michael Standen",
            "kind": "dev",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "params": {
                  "attestation": "The attestation data",
                  "call": "The call to validate",
                  "wallet": "The wallet's address"
                },
                "returns": {
                  "magic": "The hash of the implicit request if valid"
                }
              }
            },
            "title": "ISignalsImplicitMode",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": "9d043a66"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delegateCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onlyFallback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"behaviorOnError\",\"type\":\"uint256\"}],\"internalType\":\"struct Payload.Call\",\"name\":\"call\",\"type\":\"tuple\"}],\"name\":\"acceptImplicitRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"magic\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Agustin Aguilar, Michael Standen\",\"kind\":\"dev\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"params\":{\"attestation\":\"The attestation data\",\"call\":\"The call to validate\",\"wallet\":\"The wallet's address\"},\"returns\":{\"magic\":\"The hash of the implicit request if valid\"}}},\"title\":\"ISignalsImplicitMode\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"notice\":\"Determines if an implicit request is valid\"}},\"notice\":\"Interface for the contracts that support implicit mode validation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":\"ISignalsImplicitMode\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "notice": "Determines if an implicit request is valid"
              }
            },
            "notice": "Interface for the contracts that support implicit mode validation",
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol": {
        "Payload": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint8",
                  "name": "kind",
                  "type": "uint8"
                }
              ],
              "name": "InvalidKind",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "BEHAVIOR_ABORT_ON_ERROR",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "BEHAVIOR_IGNORE_ERROR",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "BEHAVIOR_REVERT_ON_ERROR",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "KIND_CONFIG_UPDATE",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "KIND_DIGEST",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "KIND_MESSAGE",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "KIND_TRANSACTIONS",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Agustin Aguilar, Michael Standen, William Hua",
            "kind": "dev",
            "methods": {},
            "stateVariables": {
              "CALLS_TYPEHASH": {
                "details": "keccak256(\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\")"
              },
              "CALL_TYPEHASH": {
                "details": "keccak256(\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\")"
              },
              "CONFIG_UPDATE_TYPEHASH": {
                "details": "keccak256(\"ConfigUpdate(bytes32 imageHash,address[] wallets)\")"
              },
              "EIP712_DOMAIN_NAME_SEQUENCE": {
                "details": "keccak256(\"Sequence Wallet\")"
              },
              "EIP712_DOMAIN_TYPEHASH": {
                "details": "keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")"
              },
              "EIP712_DOMAIN_VERSION_SEQUENCE": {
                "details": "keccak256(\"3\")"
              },
              "MESSAGE_TYPEHASH": {
                "details": "keccak256(\"Message(bytes message,address[] wallets)\")"
              }
            },
            "title": "Payload",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 36,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 42,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234602057600e6024565b61036661003082393081505061036690f35b602a565b60405190565b600080fdfe60806040526004361015610013575b61032b565b61001e60003561008d565b80630739d59a14610088578063075a3d2d146100835780633d5c1f9b1461007e578063420b0c25146100795780634a7d2aa0146100745780634e5f57151461006f5763b570180a0361000e57610300565b61029e565b61025b565b610218565b6101d5565b610173565b610111565b60e01c90565b60405190565b600080fd5b60009103126100a957565b610099565b90565b60ff1690565b90565b6100ce6100c96100d3926100ae565b6100b7565b6100b1565b90565b6100e060026100ba565b90565b6100eb6100d6565b90565b6100f7906100b1565b9052565b919061010f906000602085019401906100ee565b565b61011c36600461009e565b6101386101276100e3565b61012f610093565b918291826100fb565b0390f35b90565b61015361014e6101589261013c565b6100b7565b6100b1565b90565b610165600061013f565b90565b61017061015b565b90565b61017e36600461009e565b61019a610189610168565b610191610093565b918291826100fb565b0390f35b90565b6101b56101b06101ba9261019e565b6100b7565b6100b1565b90565b6101c760016101a1565b90565b6101d26101bd565b90565b6101e036600461009e565b6101fc6101eb6101ca565b6101f3610093565b918291826100fb565b0390f35b61020a60026100ba565b90565b610215610200565b90565b61022336600461009e565b61023f61022e61020d565b610236610093565b918291826100fb565b0390f35b61024d600061013f565b90565b610258610243565b90565b61026636600461009e565b610282610271610250565b610279610093565b918291826100fb565b0390f35b61029060016101a1565b90565b61029b610286565b90565b6102a936600461009e565b6102c56102b4610293565b6102bc610093565b918291826100fb565b0390f35b90565b6102e06102db6102e5926102c9565b6100b7565b6100b1565b90565b6102f260036102cc565b90565b6102fd6102e8565b90565b61030b36600461009e565b6103276103166102f5565b61031e610093565b918291826100fb565b0390f35b600080fdfea2646970667358221220714f957bdbb5bed9ebb923b2f3ca9dcba81930f3a808fefe68fd60002a4b772364736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x20 JUMPI PUSH1 0xE PUSH1 0x24 JUMP JUMPDEST PUSH2 0x366 PUSH2 0x30 DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH2 0x366 SWAP1 RETURN JUMPDEST PUSH1 0x2A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x32B JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x8D JUMP JUMPDEST DUP1 PUSH4 0x739D59A EQ PUSH2 0x88 JUMPI DUP1 PUSH4 0x75A3D2D EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x3D5C1F9B EQ PUSH2 0x7E JUMPI DUP1 PUSH4 0x420B0C25 EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x4A7D2AA0 EQ PUSH2 0x74 JUMPI DUP1 PUSH4 0x4E5F5715 EQ PUSH2 0x6F JUMPI PUSH4 0xB570180A SUB PUSH2 0xE JUMPI PUSH2 0x300 JUMP JUMPDEST PUSH2 0x29E JUMP JUMPDEST PUSH2 0x25B JUMP JUMPDEST PUSH2 0x218 JUMP JUMPDEST PUSH2 0x1D5 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x111 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0xA9 JUMPI JUMP JUMPDEST PUSH2 0x99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCE PUSH2 0xC9 PUSH2 0xD3 SWAP3 PUSH2 0xAE JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE0 PUSH1 0x2 PUSH2 0xBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xEB PUSH2 0xD6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF7 SWAP1 PUSH2 0xB1 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x10F SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0xEE JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x138 PUSH2 0x127 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x12F PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x153 PUSH2 0x14E PUSH2 0x158 SWAP3 PUSH2 0x13C JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x165 PUSH1 0x0 PUSH2 0x13F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x15B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17E CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x19A PUSH2 0x189 PUSH2 0x168 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x1B0 PUSH2 0x1BA SWAP3 PUSH2 0x19E JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1C7 PUSH1 0x1 PUSH2 0x1A1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D2 PUSH2 0x1BD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x1FC PUSH2 0x1EB PUSH2 0x1CA JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x20A PUSH1 0x2 PUSH2 0xBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x215 PUSH2 0x200 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x223 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x23F PUSH2 0x22E PUSH2 0x20D JUMP JUMPDEST PUSH2 0x236 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x24D PUSH1 0x0 PUSH2 0x13F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x258 PUSH2 0x243 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x282 PUSH2 0x271 PUSH2 0x250 JUMP JUMPDEST PUSH2 0x279 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x290 PUSH1 0x1 PUSH2 0x1A1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x29B PUSH2 0x286 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x2C5 PUSH2 0x2B4 PUSH2 0x293 JUMP JUMPDEST PUSH2 0x2BC PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2DB PUSH2 0x2E5 SWAP3 PUSH2 0x2C9 JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F2 PUSH1 0x3 PUSH2 0x2CC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2FD PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x327 PUSH2 0x316 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x31E PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x4F957BDBB5BED9EBB923B2F3CA9DCBA81930 RETURN 0xA8 ADDMOD INVALID INVALID PUSH9 0xFD60002A4B77236473 PUSH16 0x6C634300081B00330000000000000000 ",
              "sourceMap": "275:9850:27:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode": {
                  "entryPoint": 158,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_tuple_uint8": {
                  "entryPoint": 251,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_uint8": {
                  "entryPoint": 238,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "allocate_unbounded": {
                  "entryPoint": 147,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 414,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by_1": {
                  "entryPoint": 174,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by": {
                  "entryPoint": 316,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by_1": {
                  "entryPoint": 713,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint8": {
                  "entryPoint": 177,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_BEHAVIOR_ABORT_ON_ERROR": {
                  "entryPoint": 512,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_BEHAVIOR_IGNORE_ERROR": {
                  "entryPoint": 579,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_BEHAVIOR_REVERT_ON_ERROR": {
                  "entryPoint": 646,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_KIND_CONFIG_UPDATE": {
                  "entryPoint": 214,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_KIND_DIGEST": {
                  "entryPoint": 744,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_KIND_MESSAGE": {
                  "entryPoint": 445,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_KIND_TRANSACTIONS": {
                  "entryPoint": 347,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_rational_0_by_1_to_uint8": {
                  "entryPoint": 319,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_2_by_1_to_uint8": {
                  "entryPoint": 186,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint8": {
                  "entryPoint": 716,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint8": {
                  "entryPoint": 417,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "external_fun_BEHAVIOR_ABORT_ON_ERROR": {
                  "entryPoint": 536,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_BEHAVIOR_IGNORE_ERROR": {
                  "entryPoint": 603,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_BEHAVIOR_REVERT_ON_ERROR": {
                  "entryPoint": 670,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_KIND_CONFIG_UPDATE": {
                  "entryPoint": 273,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_KIND_DIGEST": {
                  "entryPoint": 768,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_KIND_MESSAGE": {
                  "entryPoint": 469,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_KIND_TRANSACTIONS": {
                  "entryPoint": 371,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "getter_fun_BEHAVIOR_ABORT_ON_ERROR": {
                  "entryPoint": 525,
                  "id": 4963,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_BEHAVIOR_IGNORE_ERROR": {
                  "entryPoint": 592,
                  "id": 4955,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_BEHAVIOR_REVERT_ON_ERROR": {
                  "entryPoint": 659,
                  "id": 4959,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_KIND_CONFIG_UPDATE": {
                  "entryPoint": 227,
                  "id": 4947,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_KIND_DIGEST": {
                  "entryPoint": 757,
                  "id": 4951,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_KIND_MESSAGE": {
                  "entryPoint": 458,
                  "id": 4943,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_KIND_TRANSACTIONS": {
                  "entryPoint": 360,
                  "id": 4939,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 183,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": 811,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 153,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "shift_right_unsigned": {
                  "entryPoint": 141,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "60806040526004361015610013575b61032b565b61001e60003561008d565b80630739d59a14610088578063075a3d2d146100835780633d5c1f9b1461007e578063420b0c25146100795780634a7d2aa0146100745780634e5f57151461006f5763b570180a0361000e57610300565b61029e565b61025b565b610218565b6101d5565b610173565b610111565b60e01c90565b60405190565b600080fd5b60009103126100a957565b610099565b90565b60ff1690565b90565b6100ce6100c96100d3926100ae565b6100b7565b6100b1565b90565b6100e060026100ba565b90565b6100eb6100d6565b90565b6100f7906100b1565b9052565b919061010f906000602085019401906100ee565b565b61011c36600461009e565b6101386101276100e3565b61012f610093565b918291826100fb565b0390f35b90565b61015361014e6101589261013c565b6100b7565b6100b1565b90565b610165600061013f565b90565b61017061015b565b90565b61017e36600461009e565b61019a610189610168565b610191610093565b918291826100fb565b0390f35b90565b6101b56101b06101ba9261019e565b6100b7565b6100b1565b90565b6101c760016101a1565b90565b6101d26101bd565b90565b6101e036600461009e565b6101fc6101eb6101ca565b6101f3610093565b918291826100fb565b0390f35b61020a60026100ba565b90565b610215610200565b90565b61022336600461009e565b61023f61022e61020d565b610236610093565b918291826100fb565b0390f35b61024d600061013f565b90565b610258610243565b90565b61026636600461009e565b610282610271610250565b610279610093565b918291826100fb565b0390f35b61029060016101a1565b90565b61029b610286565b90565b6102a936600461009e565b6102c56102b4610293565b6102bc610093565b918291826100fb565b0390f35b90565b6102e06102db6102e5926102c9565b6100b7565b6100b1565b90565b6102f260036102cc565b90565b6102fd6102e8565b90565b61030b36600461009e565b6103276103166102f5565b61031e610093565b918291826100fb565b0390f35b600080fdfea2646970667358221220714f957bdbb5bed9ebb923b2f3ca9dcba81930f3a808fefe68fd60002a4b772364736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x32B JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x8D JUMP JUMPDEST DUP1 PUSH4 0x739D59A EQ PUSH2 0x88 JUMPI DUP1 PUSH4 0x75A3D2D EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x3D5C1F9B EQ PUSH2 0x7E JUMPI DUP1 PUSH4 0x420B0C25 EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x4A7D2AA0 EQ PUSH2 0x74 JUMPI DUP1 PUSH4 0x4E5F5715 EQ PUSH2 0x6F JUMPI PUSH4 0xB570180A SUB PUSH2 0xE JUMPI PUSH2 0x300 JUMP JUMPDEST PUSH2 0x29E JUMP JUMPDEST PUSH2 0x25B JUMP JUMPDEST PUSH2 0x218 JUMP JUMPDEST PUSH2 0x1D5 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x111 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0xA9 JUMPI JUMP JUMPDEST PUSH2 0x99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCE PUSH2 0xC9 PUSH2 0xD3 SWAP3 PUSH2 0xAE JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE0 PUSH1 0x2 PUSH2 0xBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xEB PUSH2 0xD6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF7 SWAP1 PUSH2 0xB1 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x10F SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0xEE JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x138 PUSH2 0x127 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x12F PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x153 PUSH2 0x14E PUSH2 0x158 SWAP3 PUSH2 0x13C JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x165 PUSH1 0x0 PUSH2 0x13F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x15B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17E CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x19A PUSH2 0x189 PUSH2 0x168 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x1B0 PUSH2 0x1BA SWAP3 PUSH2 0x19E JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1C7 PUSH1 0x1 PUSH2 0x1A1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D2 PUSH2 0x1BD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x1FC PUSH2 0x1EB PUSH2 0x1CA JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x20A PUSH1 0x2 PUSH2 0xBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x215 PUSH2 0x200 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x223 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x23F PUSH2 0x22E PUSH2 0x20D JUMP JUMPDEST PUSH2 0x236 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x24D PUSH1 0x0 PUSH2 0x13F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x258 PUSH2 0x243 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x282 PUSH2 0x271 PUSH2 0x250 JUMP JUMPDEST PUSH2 0x279 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x290 PUSH1 0x1 PUSH2 0x1A1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x29B PUSH2 0x286 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x2C5 PUSH2 0x2B4 PUSH2 0x293 JUMP JUMPDEST PUSH2 0x2BC PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2DB PUSH2 0x2E5 SWAP3 PUSH2 0x2C9 JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F2 PUSH1 0x3 PUSH2 0x2CC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2FD PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x327 PUSH2 0x316 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x31E PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x4F957BDBB5BED9EBB923B2F3CA9DCBA81930 RETURN 0xA8 ADDMOD INVALID INVALID PUSH9 0xFD60002A4B77236473 PUSH16 0x6C634300081B00330000000000000000 ",
              "sourceMap": "275:9850:27:-:0;;;;;;;;;-1:-1:-1;275:9850:27;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2439:47::-;2482:4;;;:::i;:::-;2439:47;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2279:46::-;2321:4;;;:::i;:::-;2279:46;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2358:41::-;2395:4;;;:::i;:::-;2358:41;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;2819:52;2867:4;;;:::i;:::-;2819:52;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;2611:50;2657:4;;;:::i;:::-;2611:50;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;2714:53;2763:4;;;:::i;:::-;2714:53;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2520:40::-;2556:4;;;:::i;:::-;2520:40;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;"
            },
            "methodIdentifiers": {
              "BEHAVIOR_ABORT_ON_ERROR()": "420b0c25",
              "BEHAVIOR_IGNORE_ERROR()": "4a7d2aa0",
              "BEHAVIOR_REVERT_ON_ERROR()": "4e5f5715",
              "KIND_CONFIG_UPDATE()": "0739d59a",
              "KIND_DIGEST()": "b570180a",
              "KIND_MESSAGE()": "3d5c1f9b",
              "KIND_TRANSACTIONS()": "075a3d2d"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"kind\",\"type\":\"uint8\"}],\"name\":\"InvalidKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BEHAVIOR_ABORT_ON_ERROR\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BEHAVIOR_IGNORE_ERROR\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BEHAVIOR_REVERT_ON_ERROR\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KIND_CONFIG_UPDATE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KIND_DIGEST\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KIND_MESSAGE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KIND_TRANSACTIONS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Agustin Aguilar, Michael Standen, William Hua\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"CALLS_TYPEHASH\":{\"details\":\"keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\"},\"CALL_TYPEHASH\":{\"details\":\"keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\"},\"CONFIG_UPDATE_TYPEHASH\":{\"details\":\"keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\"},\"EIP712_DOMAIN_NAME_SEQUENCE\":{\"details\":\"keccak256(\\\"Sequence Wallet\\\")\"},\"EIP712_DOMAIN_TYPEHASH\":{\"details\":\"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"},\"EIP712_DOMAIN_VERSION_SEQUENCE\":{\"details\":\"keccak256(\\\"3\\\")\"},\"MESSAGE_TYPEHASH\":{\"details\":\"keccak256(\\\"Message(bytes message,address[] wallets)\\\")\"}},\"title\":\"Payload\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidKind(uint8)\":[{\"notice\":\"Error thrown when the kind is invalid\"}]},\"kind\":\"user\",\"methods\":{\"BEHAVIOR_ABORT_ON_ERROR()\":{\"notice\":\"Behavior on error: abort on error\"},\"BEHAVIOR_IGNORE_ERROR()\":{\"notice\":\"Behavior on error: ignore error\"},\"BEHAVIOR_REVERT_ON_ERROR()\":{\"notice\":\"Behavior on error: revert on error\"},\"KIND_CONFIG_UPDATE()\":{\"notice\":\"Kind of config update\"},\"KIND_DIGEST()\":{\"notice\":\"Kind of message\"},\"KIND_MESSAGE()\":{\"notice\":\"Kind of digest\"},\"KIND_TRANSACTIONS()\":{\"notice\":\"Kind of transaction\"}},\"notice\":\"Library for encoding and decoding payloads\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":\"Payload\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidKind(uint8)": [
                {
                  "notice": "Error thrown when the kind is invalid"
                }
              ]
            },
            "kind": "user",
            "methods": {
              "BEHAVIOR_ABORT_ON_ERROR()": {
                "notice": "Behavior on error: abort on error"
              },
              "BEHAVIOR_IGNORE_ERROR()": {
                "notice": "Behavior on error: ignore error"
              },
              "BEHAVIOR_REVERT_ON_ERROR()": {
                "notice": "Behavior on error: revert on error"
              },
              "KIND_CONFIG_UPDATE()": {
                "notice": "Kind of config update"
              },
              "KIND_DIGEST()": {
                "notice": "Kind of message"
              },
              "KIND_MESSAGE()": {
                "notice": "Kind of digest"
              },
              "KIND_TRANSACTIONS()": {
                "notice": "Kind of transaction"
              }
            },
            "notice": "Library for encoding and decoding payloads",
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol": {
        "LibBytes": {
          "abi": [],
          "devdoc": {
            "author": "Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)",
            "details": "These functions do not check if the input index is within the bounds of the data array.Reading out of bounds may return dirty values.",
            "kind": "dev",
            "methods": {},
            "title": "Library for reading data from bytes arrays",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220b886fd9282ab0a0dfa5f7e2f338fde4d1c548db31d6419208930f13c4577fe5564736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB8 DUP7 REVERT SWAP3 DUP3 0xAB EXP 0xD STATICCALL PUSH0 PUSH31 0x2F338FDE4D1C548DB31D6419208930F13C4577FE5564736F6C634300081B00 CALLER ",
              "sourceMap": "432:3576:28:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220b886fd9282ab0a0dfa5f7e2f338fde4d1c548db31d6419208930f13c4577fe5564736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB8 DUP7 REVERT SWAP3 DUP3 0xAB EXP 0xD STATICCALL PUSH0 PUSH31 0x2F338FDE4D1C548DB31D6419208930F13C4577FE5564736F6C634300081B00 CALLER ",
              "sourceMap": "432:3576:28:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\",\"details\":\"These functions do not check if the input index is within the bounds of the data array.Reading out of bounds may return dirty values.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Library for reading data from bytes arrays\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This library contains functions for reading data from bytes arrays.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":\"LibBytes\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "notice": "This library contains functions for reading data from bytes arrays.",
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol": {
        "SignalsImplicitMode": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "delegateCall",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "onlyFallback",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "behaviorOnError",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Payload.Call",
                  "name": "call",
                  "type": "tuple"
                }
              ],
              "name": "acceptImplicitRequest",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Michael Standen",
            "kind": "dev",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "params": {
                  "attestation": "The attestation data",
                  "call": "The call to validate",
                  "wallet": "The wallet's address"
                },
                "returns": {
                  "_0": "The hash of the implicit request if valid"
                }
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              }
            },
            "title": "SignalsImplicitMode",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": "9d043a66",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delegateCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onlyFallback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"behaviorOnError\",\"type\":\"uint256\"}],\"internalType\":\"struct Payload.Call\",\"name\":\"call\",\"type\":\"tuple\"}],\"name\":\"acceptImplicitRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Standen\",\"kind\":\"dev\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"params\":{\"attestation\":\"The attestation data\",\"call\":\"The call to validate\",\"wallet\":\"The wallet's address\"},\"returns\":{\"_0\":\"The hash of the implicit request if valid\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"SignalsImplicitMode\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"notice\":\"Determines if an implicit request is valid\"}},\"notice\":\"Base contract for implicit mode validation by project\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":\"SignalsImplicitMode\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IImplicitProjectValidation } from \\\"../registry/IImplicitProjectValidation.sol\\\";\\n\\nimport { ERC165, IERC165 } from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\nimport { ISignalsImplicitMode } from \\\"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\\\";\\nimport { Payload } from \\\"sequence-v3/src/modules/Payload.sol\\\";\\n\\n/// @title SignalsImplicitMode\\n/// @author Michael Standen\\n/// @notice Base contract for implicit mode validation by project\\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\\n\\n  IImplicitProjectValidation internal _validator;\\n  bytes32 internal _projectId;\\n\\n  /// @notice Initialize implicit mode validation\\n  /// @param validator The IImplicitProjectValidation address\\n  /// @param projectId The project id\\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\\n    _validator = IImplicitProjectValidation(validator);\\n    _projectId = projectId;\\n  }\\n\\n  /// @inheritdoc ISignalsImplicitMode\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32) {\\n    _validateImplicitRequest(wallet, attestation, call);\\n    return _validator.validateAttestation(wallet, attestation, _projectId);\\n  }\\n\\n  /// @notice Validates an implicit request\\n  /// @dev Optional hook for additional validation of the implicit requests\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  function _validateImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) internal view virtual { }\\n\\n  /// @inheritdoc IERC165\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd9107be2460f7f7ec4bdfefc3d10c79aa92b9285e1b12a75cb2a8d17b150a2ec\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "notice": "Determines if an implicit request is valid"
              }
            },
            "notice": "Base contract for implicit mode validation by project",
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol": {
        "IImplicitProjectValidation": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidRedirectUrl",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "projectId",
                  "type": "bytes32"
                }
              ],
              "name": "validateAttestation",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Michael Standen",
            "kind": "dev",
            "methods": {
              "validateAttestation(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),bytes32)": {
                "params": {
                  "attestation": "The attestation",
                  "projectId": "The project id",
                  "wallet": "The wallet address"
                },
                "returns": {
                  "_0": "magic The attestation magic bytes for the wallet address"
                }
              }
            },
            "title": "IImplicitProjectValidation",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "validateAttestation(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),bytes32)": "3808a90b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidRedirectUrl\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"validateAttestation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Standen\",\"kind\":\"dev\",\"methods\":{\"validateAttestation(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),bytes32)\":{\"params\":{\"attestation\":\"The attestation\",\"projectId\":\"The project id\",\"wallet\":\"The wallet address\"},\"returns\":{\"_0\":\"magic The attestation magic bytes for the wallet address\"}}},\"title\":\"IImplicitProjectValidation\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidRedirectUrl()\":[{\"notice\":\"Invalid redirect url error\"}]},\"kind\":\"user\",\"methods\":{\"validateAttestation(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),bytes32)\":{\"notice\":\"Check if a project has a code\"}},\"notice\":\"Interface for contracts supporting validation of implicit sessions for projects\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":\"IImplicitProjectValidation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidRedirectUrl()": [
                {
                  "notice": "Invalid redirect url error"
                }
              ]
            },
            "kind": "user",
            "methods": {
              "validateAttestation(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),bytes32)": {
                "notice": "Check if a project has a code"
              }
            },
            "notice": "Interface for contracts supporting validation of implicit sessions for projects",
            "version": 1
          }
        }
      },
      "src/proxies/SequenceProxyFactory.sol": {
        "SequenceProxyFactory": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "beacon",
              "outputs": [
                {
                  "internalType": "contract UpgradeableBeacon",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "upgradeBeacon",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "The factory owner is able to upgrade the beacon implementation.Proxy deployers are able to override the beacon reference with their own.",
            "kind": "dev",
            "methods": {
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              },
              "upgradeBeacon(address)": {
                "params": {
                  "implementation": "The new beacon implementation."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "beacon()": "59659e90",
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b",
              "upgradeBeacon(address)": "1bce4583"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beacon\",\"outputs\":[{\"internalType\":\"contract UpgradeableBeacon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgradeBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The factory owner is able to upgrade the beacon implementation.Proxy deployers are able to override the beacon reference with their own.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeBeacon(address)\":{\"params\":{\"implementation\":\"The new beacon implementation.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"upgradeBeacon(address)\":{\"notice\":\"Upgrades the beacon implementation.\"}},\"notice\":\"An proxy factory that deploys upgradeable beacon proxies.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/SequenceProxyFactory.sol\":\"SequenceProxyFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/SequenceProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport {\\n    ITransparentUpgradeableBeaconProxy,\\n    TransparentUpgradeableBeaconProxy\\n} from \\\"./TransparentUpgradeableBeaconProxy.sol\\\";\\n\\nimport { Ownable } from \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport { UpgradeableBeacon } from \\\"openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport { Create2 } from \\\"openzeppelin-contracts/contracts/utils/Create2.sol\\\";\\n\\n/**\\n * An proxy factory that deploys upgradeable beacon proxies.\\n * @dev The factory owner is able to upgrade the beacon implementation.\\n * @dev Proxy deployers are able to override the beacon reference with their own.\\n */\\nabstract contract SequenceProxyFactory is Ownable {\\n\\n    UpgradeableBeacon public beacon;\\n\\n    /**\\n     * Initialize a Sequence Proxy Factory.\\n     * @param implementation The initial beacon implementation.\\n     * @param factoryOwner The owner of the factory.\\n     */\\n    function _initialize(address implementation, address factoryOwner) internal {\\n        beacon = new UpgradeableBeacon(implementation);\\n        Ownable._transferOwnership(factoryOwner);\\n    }\\n\\n    /**\\n     * Deploys and initializes a new proxy instance.\\n     * @param _salt The deployment salt.\\n     * @param _proxyOwner The owner of the proxy.\\n     * @param _data The initialization data.\\n     * @return proxyAddress The address of the deployed proxy.\\n     */\\n    function _createProxy(\\n        bytes32 _salt,\\n        address _proxyOwner,\\n        bytes memory _data\\n    ) internal returns (address proxyAddress) {\\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\\n        bytes memory bytecode = type(TransparentUpgradeableBeaconProxy).creationCode;\\n\\n        proxyAddress = Create2.deploy(0, saltedHash, bytecode);\\n        ITransparentUpgradeableBeaconProxy(payable(proxyAddress)).initialize(_proxyOwner, address(beacon), _data);\\n    }\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param _salt The deployment salt.\\n     * @param _proxyOwner The owner of the proxy.\\n     * @return proxy The expected address of the deployed proxy.\\n     */\\n    function _computeProxyAddress(\\n        bytes32 _salt,\\n        address _proxyOwner,\\n        bytes memory _data\\n    ) internal view returns (address) {\\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\\n        bytes32 bytecodeHash = keccak256(type(TransparentUpgradeableBeaconProxy).creationCode);\\n\\n        return Create2.computeAddress(saltedHash, bytecodeHash);\\n    }\\n\\n    /**\\n     * Upgrades the beacon implementation.\\n     * @param implementation The new beacon implementation.\\n     */\\n    function upgradeBeacon(\\n        address implementation\\n    ) public onlyOwner {\\n        beacon.upgradeTo(implementation);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1cfe45a8e44b7a1b8f11631da9bdd1420fe040e2322ca725d644fbb26813de73\",\"license\":\"Apache-2.0\"},\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { BeaconProxy, Proxy } from \\\"./openzeppelin/BeaconProxy.sol\\\";\\nimport { ERC1967Proxy, TransparentUpgradeableProxy } from \\\"./openzeppelin/TransparentUpgradeableProxy.sol\\\";\\n\\ninterface ITransparentUpgradeableBeaconProxy {\\n\\n    function initialize(address admin, address beacon, bytes memory data) external;\\n\\n}\\n\\nerror InvalidInitialization();\\n\\n/**\\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * The proxy selectors are:\\n * - 0xcf7a1d77: initialize\\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\\n */\\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\\n\\n    /**\\n     * Decode the initialization data from the msg.data and call the initialize function.\\n     */\\n    function _dispatchInitialize() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\\n        initialize(admin, beacon, data);\\n\\n        return \\\"\\\";\\n    }\\n\\n    function initialize(address admin, address beacon, bytes memory data) internal {\\n        if (_admin() != address(0)) {\\n            // Redundant call. This function can only be called when the admin is not set.\\n            revert InvalidInitialization();\\n        }\\n        _changeAdmin(admin);\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\\n     */\\n    function _fallback() internal override(TransparentUpgradeableProxy, Proxy) {\\n        if (_getAdmin() == address(0)) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\\n                ret = _dispatchInitialize();\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    return(add(ret, 0x20), mload(ret))\\n                }\\n            }\\n            // When the admin is not set, the fallback function is used to initialize the proxy.\\n            revert InvalidInitialization();\\n        }\\n        TransparentUpgradeableProxy._fallback();\\n    }\\n\\n    /**\\n     * Returns the current implementation address.\\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\\n     */\\n    function _implementation() internal view override(ERC1967Proxy, BeaconProxy) returns (address) {\\n        address implementation = ERC1967Proxy._implementation();\\n        if (implementation != address(0)) {\\n            return implementation;\\n        }\\n        return BeaconProxy._implementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf7c7834545a955cedbe5228c3583f72fb332337dd0b4ebcd5fdb0b6504c5a8cb\",\"license\":\"Apache-2.0\"},\"src/proxies/openzeppelin/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2aa58701eaf7336890fae8a17f5769adf764beac64f3c5873199cd56abd66d0d\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "upgradeBeacon(address)": {
                "notice": "Upgrades the beacon implementation."
              }
            },
            "notice": "An proxy factory that deploys upgradeable beacon proxies.",
            "version": 1
          }
        }
      },
      "src/proxies/TransparentUpgradeableBeaconProxy.sol": {
        "ITransparentUpgradeableBeaconProxy": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "admin",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "initialize",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "initialize(address,address,bytes)": "cf7a1d77"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":\"ITransparentUpgradeableBeaconProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { BeaconProxy, Proxy } from \\\"./openzeppelin/BeaconProxy.sol\\\";\\nimport { ERC1967Proxy, TransparentUpgradeableProxy } from \\\"./openzeppelin/TransparentUpgradeableProxy.sol\\\";\\n\\ninterface ITransparentUpgradeableBeaconProxy {\\n\\n    function initialize(address admin, address beacon, bytes memory data) external;\\n\\n}\\n\\nerror InvalidInitialization();\\n\\n/**\\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * The proxy selectors are:\\n * - 0xcf7a1d77: initialize\\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\\n */\\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\\n\\n    /**\\n     * Decode the initialization data from the msg.data and call the initialize function.\\n     */\\n    function _dispatchInitialize() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\\n        initialize(admin, beacon, data);\\n\\n        return \\\"\\\";\\n    }\\n\\n    function initialize(address admin, address beacon, bytes memory data) internal {\\n        if (_admin() != address(0)) {\\n            // Redundant call. This function can only be called when the admin is not set.\\n            revert InvalidInitialization();\\n        }\\n        _changeAdmin(admin);\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\\n     */\\n    function _fallback() internal override(TransparentUpgradeableProxy, Proxy) {\\n        if (_getAdmin() == address(0)) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\\n                ret = _dispatchInitialize();\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    return(add(ret, 0x20), mload(ret))\\n                }\\n            }\\n            // When the admin is not set, the fallback function is used to initialize the proxy.\\n            revert InvalidInitialization();\\n        }\\n        TransparentUpgradeableProxy._fallback();\\n    }\\n\\n    /**\\n     * Returns the current implementation address.\\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\\n     */\\n    function _implementation() internal view override(ERC1967Proxy, BeaconProxy) returns (address) {\\n        address implementation = ERC1967Proxy._implementation();\\n        if (implementation != address(0)) {\\n            return implementation;\\n        }\\n        return BeaconProxy._implementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf7c7834545a955cedbe5228c3583f72fb332337dd0b4ebcd5fdb0b6504c5a8cb\",\"license\":\"Apache-2.0\"},\"src/proxies/openzeppelin/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2aa58701eaf7336890fae8a17f5769adf764beac64f3c5873199cd56abd66d0d\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "TransparentUpgradeableBeaconProxy": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidInitialization",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "details": "As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation, care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors. See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing]. The proxy selectors are: - 0xcf7a1d77: initialize - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy) - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy) - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy) - 0xf851a440: admin (from TransparentUpgradeableProxy) - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601c57600e6020565b61145e61002c823961145e90f35b6026565b60405190565b600080fdfe6080604052361561006b5761006b565b90565b60018060a01b031690565b90565b61003461002f6100399261000f565b61001d565b610012565b90565b61004590610020565b90565b61005190610012565b90565b606090565b63ffffffff60e01b1690565b60000190565b61007361017e565b61008e610088610083600061003c565b610048565b91610048565b0361046c5761009b610054565b5063ffffffff60e01b600035166100c16100bb63cf7a1d7760e01b610059565b91610059565b146100e357600063f92ee8a960e01b8152806100df60048201610065565b0390fd5b6100eb610401565b602081519101f35b600090565b90565b90565b60001b90565b61011861011361011d926100f8565b6100fe565b6100fb565b90565b6101497fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103610104565b90565b60001c90565b60018060a01b031690565b61016961016e9161014c565b610152565b90565b61017b905461015d565b90565b6101866100f3565b506101a2600061019c610197610120565b6105a2565b01610171565b90565b90565b90565b6101bf6101ba6101c4926101a5565b61001d565b6101a8565b90565b60405190565b600080fd5b600080fd5b909392938483116101f75784116101f2576001820201920390565b6101d2565b6101cd565b91565b600080fd5b600080fd5b61021290610012565b90565b61021e81610209565b0361022557565b600080fd5b9050359061023782610215565b565b600080fd5b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061026d90610243565b810190811067ffffffffffffffff82111761028757604052565b61024d565b9061029f6102986101c7565b9283610263565b565b67ffffffffffffffff81116102bf576102bb602091610243565b0190565b61024d565b90826000939282370152565b909291926102e56102e0826102a1565b61028c565b93818552602085019082840111610301576102ff926102c4565b565b61023e565b9080601f8301121561032457816020610321933591016102d0565b90565b610239565b9160608383031261037657610341826000850161022a565b9261034f836020830161022a565b92604082013567ffffffffffffffff81116103715761036e9201610306565b90565b610204565b6101ff565b61038f61038a61039492610012565b61001d565b610012565b90565b6103a09061037b565b90565b6103ac90610397565b90565b67ffffffffffffffff81116103cd576103c9602091610243565b0190565b61024d565b906103e46103df836103af565b61028c565b918252565b6103f360006103d2565b90565b6103fe6103e9565b90565b610409610054565b506104126105cd565b61046161045761045161044761043f61043960003661043160046101ab565b9080926101d7565b906101fc565b810190610329565b93919290926103a3565b916103a3565b91909190916105ec565b6104696103f6565b90565b3361048661048061047b61017e565b610048565b91610048565b1460001461059d57610496610054565b5063ffffffff60e01b60003516806104bd6104b7631b2ce7f360e11b610059565b91610059565b146000146104d757506104ce610817565b5b602081519101f35b806104f16104eb63278f794360e11b610059565b91610059565b1460001461050857506105026107c1565b5b6104cf565b8061052261051c6308f2839760e41b610059565b91610059565b146000146105395750610533610723565b5b610503565b8061055361054d6303e1469160e61b610059565b91610059565b1460001461056a57506105646106bf565b5b610534565b61058361057d635c60da1b60e01b610059565b91610059565b146000146105985761059361067a565b610565565b61064a565b61064a565b90565b6105b96105b46105be9261000f565b61001d565b6101a8565b90565b156105c857565b600080fd5b6105ea346105e46105de60006105a5565b916101a8565b146105c1565b565b91906105f661087a565b61061161060b610606600061003c565b610048565b91610048565b0361062d5761062261062b936108b2565b9060009161098d565b565b600063f92ee8a960e01b81528061064660048201610065565b0390fd5b610652610aa6565b610ae7565b61066090610048565b9052565b919061067890600060208501940190610657565b565b610682610054565b5061068b6105cd565b6106ad6106bc610699610aa6565b6106a16101c7565b92839160208301610664565b60208201810382520382610263565b90565b6106c7610054565b506106d06105cd565b6106f26107016106de61017e565b6106e66101c7565b92839160208301610664565b60208201810382520382610263565b90565b9060208282031261071e5761071b9160000161022a565b90565b6101ff565b61072b610054565b506107346105cd565b61077061076b61076661075e61075860003661075060046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108b2565b6107786103f6565b90565b9190916040818403126107bc57610795836000830161022a565b92602082013567ffffffffffffffff81116107b7576107b49201610306565b90565b610204565b6101ff565b6107c9610054565b5061080c6108036107fc6107f46107ee6000366107e660046101ab565b9080926101d7565b906101fc565b81019061077b565b91906103a3565b90600191610b0a565b6108146103f6565b90565b61081f610054565b506108286105cd565b61086f61085f61085a61085261084c60003661084460046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108676103f6565b600091610b0a565b6108776103f6565b90565b6108826100f3565b5061088b61017e565b90565b9160206108b09294936108a960408201966000830190610657565b0190610657565b565b6108fd906108be61017e565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f916108f56108ec6101c7565b9283928361088e565b0390a1610c4d565b565b61090890610397565b90565b5190565b6109189061037b565b90565b6109249061090f565b90565b61093090610397565b90565b60e01b90565b61094281610048565b0361094957565b600080fd5b9050519061095b82610939565b565b90602082820312610977576109749160000161094e565b90565b6101ff565b6109846101c7565b3d6000823e3d90fd5b9161099783610e30565b826109c27f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e916108ff565b906109cb6101c7565b806109d581610065565b0390a26109e18261090b565b6109f46109ee60006105a5565b916101a8565b11908115610a9e575b50610a07575b5050565b6020610a1d610a18610a339461091b565b610927565b635c60da1b90610a2b6101c7565b948592610933565b82528180610a4360048201610065565b03915afa908115610a9957610a6192600092610a69575b5090610f65565b503880610a03565b610a8b91925060203d8111610a92575b610a838183610263565b81019061095d565b9038610a5a565b503d610a79565b61097c565b9050386109fd565b610aae6100f3565b50610ab7610f85565b80610ad3610acd610ac8600061003c565b610048565b91610048565b03610ae45750610ae1610f99565b90565b90565b60008091368280378136915af43d6000803e600014610b05573d6000f35b3d6000fd5b91610b148361102f565b610b1d8261090b565b610b30610b2a60006105a5565b916101a8565b11908115610b54575b50610b43575b5050565b610b4c91610f65565b503880610b3f565b905038610b39565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b610bc06026604092610b5c565b610bc981610b65565b0190565b610be39060208101906000818303910152610bb3565b90565b15610bed57565b610bf56101c7565b62461bcd60e51b815280610c0b60048201610bcd565b0390fd5b90610c2060018060a01b03916100fe565b9181191691161790565b90565b90610c42610c3d610c49926108ff565b610c2a565b8254610c0f565b9055565b610c8f90610c7781610c70610c6a610c65600061003c565b610048565b91610048565b1415610be6565b6000610c89610c84610120565b6105a2565b01610c2d565b565b60207f7472616374000000000000000000000000000000000000000000000000000000917f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e60008201520152565b610cec6025604092610b5c565b610cf581610c91565b0190565b610d0f9060208101906000818303910152610cdf565b90565b15610d1957565b610d216101c7565b62461bcd60e51b815280610d3760048201610cf9565b0390fd5b60207f73206e6f74206120636f6e747261637400000000000000000000000000000000917f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960008201520152565b610d966030604092610b5c565b610d9f81610d3b565b0190565b610db99060208101906000818303910152610d89565b90565b15610dc357565b610dcb6101c7565b62461bcd60e51b815280610de160048201610da3565b0390fd5b90565b610dfc610df7610e0192610de5565b6100fe565b6100fb565b90565b610e2d7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50610de8565b90565b610e6e90610e45610e408261107f565b610d12565b6020610e58610e538361091b565b610927565b635c60da1b90610e666101c7565b948592610933565b82528180610e7e60048201610065565b03915afa8015610eee57610ea1610ea691610ebe94600091610ec0575b5061107f565b610dbc565b6000610eb8610eb3610e04565b6105a2565b01610c2d565b565b610ee1915060203d8111610ee7575b610ed98183610263565b81019061095d565b38610e9b565b503d610ecf565b61097c565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610f4b60276103d2565b90610f5860208301610ef3565b565b610f62610f41565b90565b90610f8291610f72610054565b5090610f7c610f5a565b916110e2565b90565b610f8d6100f3565b50610f96611160565b90565b610fa16100f3565b50610fd56020610fbf610fba610fb5611187565b61091b565b610927565b635c60da1b90610fcd6101c7565b938492610933565b82528180610fe560048201610065565b03915afa90811561102a57600091610ffc575b5090565b61101d915060203d8111611023575b6110158183610263565b81019061095d565b38610ff8565b503d61100b565b61097c565b61103881611258565b6110627fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b916108ff565b9061106b6101c7565b8061107581610065565b0390a2565b600090565b61108761107a565b503b61109c61109660006105a5565b916101a8565b1190565b906110b26110ad836102a1565b61028c565b918252565b3d6000146110d4576110c83d6110a0565b903d6000602084013e5b565b6110dc610054565b906110d2565b9091600080611112946110f3610054565b508490602081019051915af4916111086110b7565b909290919261130b565b90565b90565b61112c61112761113192611115565b6100fe565b6100fb565b90565b61115d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611118565b90565b6111686100f3565b50611184600061117e611179611134565b6105a2565b01610171565b90565b61118f6100f3565b506111ab60006111a56111a0610e04565b6105a2565b01610171565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b611209602d604092610b5c565b611212816111ae565b0190565b61122c90602081019060008183039101526111fc565b90565b1561123657565b61123e6101c7565b62461bcd60e51b81528061125460048201611216565b0390fd5b6112859061126d6112688261107f565b61122f565b600061127f61127a611134565b6105a2565b01610c2d565b565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b6112bc601d602092610b5c565b6112c581611287565b0190565b6112df90602081019060008183039101526112af565b90565b156112e957565b6112f16101c7565b62461bcd60e51b815280611307600482016112c9565b0390fd5b919290611316610054565b5060001461135c57506113288261090b565b61133b61133560006105a5565b916101a8565b14611345575b5090565b6113516113569161107f565b6112e2565b38611341565b826113d5565b5190565b60005b83811061137a575050906000910152565b806020918301518185015201611369565b6113aa6113b36020936113b8936113a181611362565b93848093610b5c565b95869101611366565b610243565b0190565b6113d2916020820191600081840391015261138b565b90565b906113df8261090b565b6113f26113ec60006105a5565b916101a8565b116000146114035750805190602001fd5b6114249061140f6101c7565b91829162461bcd60e51b8352600483016113bc565b0390fdfea2646970667358221220fb1899e61f38faa78bfbab79b8dc2fa613357c2fce2699411f9fee80b624365564736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x145E PUSH2 0x2C DUP3 CODECOPY PUSH2 0x145E SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x6B JUMPI PUSH2 0x6B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x34 PUSH2 0x2F PUSH2 0x39 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x45 SWAP1 PUSH2 0x20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x51 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x73 PUSH2 0x17E JUMP JUMPDEST PUSH2 0x8E PUSH2 0x88 PUSH2 0x83 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x46C JUMPI PUSH2 0x9B PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND PUSH2 0xC1 PUSH2 0xBB PUSH4 0xCF7A1D77 PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH2 0xE3 JUMPI PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0xDF PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xEB PUSH2 0x401 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x113 PUSH2 0x11D SWAP3 PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x149 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x104 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x16E SWAP2 PUSH2 0x14C JUMP JUMPDEST PUSH2 0x152 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17B SWAP1 SLOAD PUSH2 0x15D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1A2 PUSH1 0x0 PUSH2 0x19C PUSH2 0x197 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1BF PUSH2 0x1BA PUSH2 0x1C4 SWAP3 PUSH2 0x1A5 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x1F7 JUMPI DUP5 GT PUSH2 0x1F2 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1CD JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x212 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x21E DUP2 PUSH2 0x209 JUMP JUMPDEST SUB PUSH2 0x225 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x237 DUP3 PUSH2 0x215 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x26D SWAP1 PUSH2 0x243 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x287 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x29F PUSH2 0x298 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x263 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2BF JUMPI PUSH2 0x2BB PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2E5 PUSH2 0x2E0 DUP3 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x301 JUMPI PUSH2 0x2FF SWAP3 PUSH2 0x2C4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x23E JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x324 JUMPI DUP2 PUSH1 0x20 PUSH2 0x321 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2D0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x239 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x376 JUMPI PUSH2 0x341 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH2 0x34F DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x371 JUMPI PUSH2 0x36E SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x38F PUSH2 0x38A PUSH2 0x394 SWAP3 PUSH2 0x12 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A0 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3AC SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3CD JUMPI PUSH2 0x3C9 PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x3E4 PUSH2 0x3DF DUP4 PUSH2 0x3AF JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x0 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FE PUSH2 0x3E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x412 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x461 PUSH2 0x457 PUSH2 0x451 PUSH2 0x447 PUSH2 0x43F PUSH2 0x439 PUSH1 0x0 CALLDATASIZE PUSH2 0x431 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x329 JUMP JUMPDEST SWAP4 SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x469 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLER PUSH2 0x486 PUSH2 0x480 PUSH2 0x47B PUSH2 0x17E JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x59D JUMPI PUSH2 0x496 PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x4BD PUSH2 0x4B7 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x4D7 JUMPI POP PUSH2 0x4CE PUSH2 0x817 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0x4F1 PUSH2 0x4EB PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x508 JUMPI POP PUSH2 0x502 PUSH2 0x7C1 JUMP JUMPDEST JUMPDEST PUSH2 0x4CF JUMP JUMPDEST DUP1 PUSH2 0x522 PUSH2 0x51C PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x539 JUMPI POP PUSH2 0x533 PUSH2 0x723 JUMP JUMPDEST JUMPDEST PUSH2 0x503 JUMP JUMPDEST DUP1 PUSH2 0x553 PUSH2 0x54D PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x56A JUMPI POP PUSH2 0x564 PUSH2 0x6BF JUMP JUMPDEST JUMPDEST PUSH2 0x534 JUMP JUMPDEST PUSH2 0x583 PUSH2 0x57D PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x598 JUMPI PUSH2 0x593 PUSH2 0x67A JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5B9 PUSH2 0x5B4 PUSH2 0x5BE SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5C8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5EA CALLVALUE PUSH2 0x5E4 PUSH2 0x5DE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x5C1 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5F6 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x611 PUSH2 0x60B PUSH2 0x606 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x62D JUMPI PUSH2 0x622 PUSH2 0x62B SWAP4 PUSH2 0x8B2 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH2 0x98D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x646 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x652 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST PUSH2 0x660 SWAP1 PUSH2 0x48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x678 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x682 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x68B PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6BC PUSH2 0x699 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x6A1 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C7 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x6D0 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6F2 PUSH2 0x701 PUSH2 0x6DE PUSH2 0x17E JUMP JUMPDEST PUSH2 0x6E6 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x71E JUMPI PUSH2 0x71B SWAP2 PUSH1 0x0 ADD PUSH2 0x22A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x72B PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x734 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x770 PUSH2 0x76B PUSH2 0x766 PUSH2 0x75E PUSH2 0x758 PUSH1 0x0 CALLDATASIZE PUSH2 0x750 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x8B2 JUMP JUMPDEST PUSH2 0x778 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x7BC JUMPI PUSH2 0x795 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7B7 JUMPI PUSH2 0x7B4 SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x7C9 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x80C PUSH2 0x803 PUSH2 0x7FC PUSH2 0x7F4 PUSH2 0x7EE PUSH1 0x0 CALLDATASIZE PUSH2 0x7E6 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x77B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3A3 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x814 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x81F PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x828 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x86F PUSH2 0x85F PUSH2 0x85A PUSH2 0x852 PUSH2 0x84C PUSH1 0x0 CALLDATASIZE PUSH2 0x844 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x867 PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x877 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x882 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x88B PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x8B0 SWAP3 SWAP5 SWAP4 PUSH2 0x8A9 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8FD SWAP1 PUSH2 0x8BE PUSH2 0x17E JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x8F5 PUSH2 0x8EC PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x88E JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0xC4D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x908 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x924 SWAP1 PUSH2 0x90F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x930 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x942 DUP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x949 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x95B DUP3 PUSH2 0x939 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x977 JUMPI PUSH2 0x974 SWAP2 PUSH1 0x0 ADD PUSH2 0x94E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x984 PUSH2 0x1C7 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 PUSH2 0x997 DUP4 PUSH2 0xE30 JUMP JUMPDEST DUP3 PUSH2 0x9C2 PUSH32 0x1CF3B03A6CF19FA2BABA4DF148E9DCABEDEA7F8A5C07840E207E5C089BE95D3E SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x9CB PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x9D5 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH2 0x9E1 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x9F4 PUSH2 0x9EE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xA9E JUMPI JUMPDEST POP PUSH2 0xA07 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x20 PUSH2 0xA1D PUSH2 0xA18 PUSH2 0xA33 SWAP5 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xA2B PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xA43 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA99 JUMPI PUSH2 0xA61 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0xA69 JUMPI JUMPDEST POP SWAP1 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0xA8B SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xA92 JUMPI JUMPDEST PUSH2 0xA83 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xA5A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA79 JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x9FD JUMP JUMPDEST PUSH2 0xAAE PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xAB7 PUSH2 0xF85 JUMP JUMPDEST DUP1 PUSH2 0xAD3 PUSH2 0xACD PUSH2 0xAC8 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0xAE4 JUMPI POP PUSH2 0xAE1 PUSH2 0xF99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0xB05 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH2 0xB14 DUP4 PUSH2 0x102F JUMP JUMPDEST PUSH2 0xB1D DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0xB30 PUSH2 0xB2A PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xB54 JUMPI JUMPDEST POP PUSH2 0xB43 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xB4C SWAP2 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xB3F JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xBC0 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xBC9 DUP2 PUSH2 0xB65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xBE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xBB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xBED JUMPI JUMP JUMPDEST PUSH2 0xBF5 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC0B PUSH1 0x4 DUP3 ADD PUSH2 0xBCD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xC20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xFE JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xC42 PUSH2 0xC3D PUSH2 0xC49 SWAP3 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0xC2A JUMP JUMPDEST DUP3 SLOAD PUSH2 0xC0F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC8F SWAP1 PUSH2 0xC77 DUP2 PUSH2 0xC70 PUSH2 0xC6A PUSH2 0xC65 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ ISZERO PUSH2 0xBE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC89 PUSH2 0xC84 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7472616374000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720626561636F6E206973206E6F74206120636F6E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xCEC PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xCF5 DUP2 PUSH2 0xC91 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD0F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xCDF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xD19 JUMPI JUMP JUMPDEST PUSH2 0xD21 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xD37 PUSH1 0x4 DUP3 ADD PUSH2 0xCF9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x73206E6F74206120636F6E747261637400000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A20626561636F6E20696D706C656D656E746174696F6E2069 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xD96 PUSH1 0x30 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xD9F DUP2 PUSH2 0xD3B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xDB9 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xD89 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xDC3 JUMPI JUMP JUMPDEST PUSH2 0xDCB PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xDE1 PUSH1 0x4 DUP3 ADD PUSH2 0xDA3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDFC PUSH2 0xDF7 PUSH2 0xE01 SWAP3 PUSH2 0xDE5 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE2D PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0xDE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE6E SWAP1 PUSH2 0xE45 PUSH2 0xE40 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x20 PUSH2 0xE58 PUSH2 0xE53 DUP4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xE66 PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xE7E PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL DUP1 ISZERO PUSH2 0xEEE JUMPI PUSH2 0xEA1 PUSH2 0xEA6 SWAP2 PUSH2 0xEBE SWAP5 PUSH1 0x0 SWAP2 PUSH2 0xEC0 JUMPI JUMPDEST POP PUSH2 0x107F JUMP JUMPDEST PUSH2 0xDBC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB8 PUSH2 0xEB3 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEE1 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xEE7 JUMPI JUMPDEST PUSH2 0xED9 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xE9B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xECF JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xF4B PUSH1 0x27 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 PUSH2 0xF58 PUSH1 0x20 DUP4 ADD PUSH2 0xEF3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF62 PUSH2 0xF41 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF82 SWAP2 PUSH2 0xF72 PUSH2 0x54 JUMP JUMPDEST POP SWAP1 PUSH2 0xF7C PUSH2 0xF5A JUMP JUMPDEST SWAP2 PUSH2 0x10E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF8D PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xF96 PUSH2 0x1160 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFA1 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xFD5 PUSH1 0x20 PUSH2 0xFBF PUSH2 0xFBA PUSH2 0xFB5 PUSH2 0x1187 JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xFCD PUSH2 0x1C7 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xFE5 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x102A JUMPI PUSH1 0x0 SWAP2 PUSH2 0xFFC JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x101D SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1023 JUMPI JUMPDEST PUSH2 0x1015 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xFF8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x100B JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH2 0x1038 DUP2 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x1062 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x106B PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x1075 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1087 PUSH2 0x107A JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x109C PUSH2 0x1096 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10B2 PUSH2 0x10AD DUP4 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0x10D4 JUMPI PUSH2 0x10C8 RETURNDATASIZE PUSH2 0x10A0 JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0x10DC PUSH2 0x54 JUMP JUMPDEST SWAP1 PUSH2 0x10D2 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0x1112 SWAP5 PUSH2 0x10F3 PUSH2 0x54 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0x1108 PUSH2 0x10B7 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x130B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x112C PUSH2 0x1127 PUSH2 0x1131 SWAP3 PUSH2 0x1115 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x115D PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x1118 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1168 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1184 PUSH1 0x0 PUSH2 0x117E PUSH2 0x1179 PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x118F PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x11AB PUSH1 0x0 PUSH2 0x11A5 PUSH2 0x11A0 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1209 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x1212 DUP2 PUSH2 0x11AE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x122C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x11FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1236 JUMPI JUMP JUMPDEST PUSH2 0x123E PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1254 PUSH1 0x4 DUP3 ADD PUSH2 0x1216 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x1285 SWAP1 PUSH2 0x126D PUSH2 0x1268 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127F PUSH2 0x127A PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x12BC PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x12C5 DUP2 PUSH2 0x1287 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x12DF SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x12AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12E9 JUMPI JUMP JUMPDEST PUSH2 0x12F1 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1307 PUSH1 0x4 DUP3 ADD PUSH2 0x12C9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0x1316 PUSH2 0x54 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0x135C JUMPI POP PUSH2 0x1328 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x133B PUSH2 0x1335 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x1345 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1351 PUSH2 0x1356 SWAP2 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x12E2 JUMP JUMPDEST CODESIZE PUSH2 0x1341 JUMP JUMPDEST DUP3 PUSH2 0x13D5 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x137A JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x1369 JUMP JUMPDEST PUSH2 0x13AA PUSH2 0x13B3 PUSH1 0x20 SWAP4 PUSH2 0x13B8 SWAP4 PUSH2 0x13A1 DUP2 PUSH2 0x1362 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xB5C JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x1366 JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x13D2 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x138B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x13DF DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x13F2 PUSH2 0x13EC PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x1403 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0x1424 SWAP1 PUSH2 0x140F PUSH2 0x1C7 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x13BC JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB XOR SWAP10 0xE6 0x1F CODESIZE STATICCALL 0xA7 DUP12 0xFB 0xAB PUSH26 0xB8DC2FA613357C2FCE2699411F9FEE80B624365564736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "1165:2219:32:-:0;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode_address_fromMemory": {
                  "entryPoint": 2382,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_address_payable": {
                  "entryPoint": 554,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_address_payablet_address_payablet_bytes": {
                  "entryPoint": 809,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_decode_address_payablet_bytes": {
                  "entryPoint": 1915,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_available_length_bytes": {
                  "entryPoint": 720,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_bytes": {
                  "entryPoint": 774,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_fromMemory": {
                  "entryPoint": 2397,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_payable": {
                  "entryPoint": 1796,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 1623,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_address": {
                  "entryPoint": 2190,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 5052,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_memory_ptr": {
                  "entryPoint": 5003,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral": {
                  "entryPoint": 3321,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_3820": {
                  "entryPoint": 2995,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_9589": {
                  "entryPoint": 3295,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_972b": {
                  "entryPoint": 4604,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_cc2e": {
                  "entryPoint": 4809,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
                  "entryPoint": 4783,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f95f": {
                  "entryPoint": 3491,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8": {
                  "entryPoint": 3465,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 101,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 1636,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral": {
                  "entryPoint": 3021,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_972b": {
                  "entryPoint": 4630,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 652,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_bytes": {
                  "entryPoint": 4256,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_string": {
                  "entryPoint": 978,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 455,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_bytes": {
                  "entryPoint": 673,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_allocation_size_string": {
                  "entryPoint": 943,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_bytes": {
                  "entryPoint": 2315,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_string": {
                  "entryPoint": 4962,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 2908,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_array_index_range_access_bytes_calldata": {
                  "entryPoint": 471,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 2
                },
                "cleanup_address": {
                  "entryPoint": 72,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_address_payable": {
                  "entryPoint": 521,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes32": {
                  "entryPoint": 251,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes4": {
                  "entryPoint": 89,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 338,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by": {
                  "entryPoint": 4373,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 3557,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by_1": {
                  "entryPoint": 248,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by": {
                  "entryPoint": 421,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by_1": {
                  "entryPoint": 15,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 18,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 424,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_ADMIN_SLOT": {
                  "entryPoint": 288,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_BEACON_SLOT": {
                  "entryPoint": 3588,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_IMPLEMENTATION_SLOT": {
                  "entryPoint": 4404,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_address_payable_to_address": {
                  "entryPoint": 931,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 2303,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_contract_IBeacon": {
                  "entryPoint": 2331,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_bytes_calldata_slice_to_bytes_calldata": {
                  "entryPoint": 508,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "convert_contract_IBeacon_to_address": {
                  "entryPoint": 2343,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1_to_bytes32": {
                  "entryPoint": 3560,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 60,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_bytes32": {
                  "entryPoint": 4376,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 427,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_stringliteral_9fdc_to_string": {
                  "entryPoint": 3930,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_c5d2_to_bytes": {
                  "entryPoint": 1014,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_bytes32": {
                  "entryPoint": 260,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint256": {
                  "entryPoint": 1445,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 919,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_IBeacon": {
                  "entryPoint": 2319,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 891,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_calldata_to_memory_with_cleanup": {
                  "entryPoint": 708,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_literal_to_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398": {
                  "entryPoint": 3905,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_literal_to_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470": {
                  "entryPoint": 1001,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 4966,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 349,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_returndata": {
                  "entryPoint": 4279,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 611,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun": {
                  "entryPoint": null,
                  "id": 1032,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_": {
                  "entryPoint": null,
                  "id": 1024,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun__fallback": {
                  "entryPoint": 1132,
                  "id": 6507,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun__implementation": {
                  "entryPoint": 3993,
                  "id": 6323,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_admin": {
                  "entryPoint": 2170,
                  "id": 6652,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_changeAdmin": {
                  "entryPoint": 2226,
                  "id": 894,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_delegate": {
                  "entryPoint": 2791,
                  "id": 997,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_dispatchAdmin": {
                  "entryPoint": 1727,
                  "id": 6527,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchChangeAdmin": {
                  "entryPoint": 1827,
                  "id": 6576,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchImplementation": {
                  "entryPoint": 1658,
                  "id": 6547,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchInitialize": {
                  "entryPoint": 1025,
                  "id": 6179,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchUpgradeTo": {
                  "entryPoint": 2071,
                  "id": 6610,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchUpgradeToAndCall": {
                  "entryPoint": 1985,
                  "id": 6642,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_fallback": {
                  "entryPoint": 107,
                  "id": 6257,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_fallback_1016": {
                  "entryPoint": 1610,
                  "id": 1016,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_functionDelegateCall": {
                  "entryPoint": 3941,
                  "id": 1830,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_functionDelegateCall_1859": {
                  "entryPoint": 4322,
                  "id": 1859,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_getAddressSlot": {
                  "entryPoint": 1442,
                  "id": 2078,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getAdmin": {
                  "entryPoint": 382,
                  "id": 851,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_getBeacon": {
                  "entryPoint": 4487,
                  "id": 911,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_getImplementation": {
                  "entryPoint": 4448,
                  "id": 712,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_implementation": {
                  "entryPoint": 3973,
                  "id": 6360,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_implementation_6287": {
                  "entryPoint": 2726,
                  "id": 6287,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_initialize": {
                  "entryPoint": 1516,
                  "id": 6211,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_isContract": {
                  "entryPoint": 4223,
                  "id": 1631,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_requireZeroValue": {
                  "entryPoint": 1485,
                  "id": 6664,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_revert": {
                  "entryPoint": 5077,
                  "id": 1942,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_setAdmin": {
                  "entryPoint": 3149,
                  "id": 877,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setBeacon": {
                  "entryPoint": 3632,
                  "id": 947,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setImplementation": {
                  "entryPoint": 4696,
                  "id": 736,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeBeaconToAndCall": {
                  "entryPoint": 2445,
                  "id": 985,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_upgradeTo": {
                  "entryPoint": 4143,
                  "id": 751,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeToAndCall": {
                  "entryPoint": 2826,
                  "id": 781,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_verifyCallResultFromTarget": {
                  "entryPoint": 4875,
                  "id": 1898,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 29,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 589,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 3114,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 369,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper": {
                  "entryPoint": 1473,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral": {
                  "entryPoint": 3046,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_9589": {
                  "entryPoint": 3346,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_972b": {
                  "entryPoint": 4655,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_cc2e": {
                  "entryPoint": 4834,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_f95f": {
                  "entryPoint": 3516,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
                  "entryPoint": 569,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_46e3e63c93837e9efa638abb3b4e76ced8c11259a873f1381a0abdf6ae6a823c": {
                  "entryPoint": 466,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_7678404c0552a58cf14944d1a786cf4c81aab3563e2735cb332aee47bbb57c4a": {
                  "entryPoint": 461,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
                  "entryPoint": 574,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
                  "entryPoint": 516,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 511,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 2428,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 579,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 254,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_224": {
                  "entryPoint": 2355,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 332,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "store_literal_in_memory_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5": {
                  "entryPoint": 2917,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470": {
                  "entryPoint": 3217,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65": {
                  "entryPoint": 4526,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398": {
                  "entryPoint": 3827,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
                  "entryPoint": 4743,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8": {
                  "entryPoint": 3387,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 3087,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 3117,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 2361,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_address_payable": {
                  "entryPoint": 533,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 243,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 4218,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bytes": {
                  "entryPoint": 84,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052361561006b5761006b565b90565b60018060a01b031690565b90565b61003461002f6100399261000f565b61001d565b610012565b90565b61004590610020565b90565b61005190610012565b90565b606090565b63ffffffff60e01b1690565b60000190565b61007361017e565b61008e610088610083600061003c565b610048565b91610048565b0361046c5761009b610054565b5063ffffffff60e01b600035166100c16100bb63cf7a1d7760e01b610059565b91610059565b146100e357600063f92ee8a960e01b8152806100df60048201610065565b0390fd5b6100eb610401565b602081519101f35b600090565b90565b90565b60001b90565b61011861011361011d926100f8565b6100fe565b6100fb565b90565b6101497fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103610104565b90565b60001c90565b60018060a01b031690565b61016961016e9161014c565b610152565b90565b61017b905461015d565b90565b6101866100f3565b506101a2600061019c610197610120565b6105a2565b01610171565b90565b90565b90565b6101bf6101ba6101c4926101a5565b61001d565b6101a8565b90565b60405190565b600080fd5b600080fd5b909392938483116101f75784116101f2576001820201920390565b6101d2565b6101cd565b91565b600080fd5b600080fd5b61021290610012565b90565b61021e81610209565b0361022557565b600080fd5b9050359061023782610215565b565b600080fd5b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061026d90610243565b810190811067ffffffffffffffff82111761028757604052565b61024d565b9061029f6102986101c7565b9283610263565b565b67ffffffffffffffff81116102bf576102bb602091610243565b0190565b61024d565b90826000939282370152565b909291926102e56102e0826102a1565b61028c565b93818552602085019082840111610301576102ff926102c4565b565b61023e565b9080601f8301121561032457816020610321933591016102d0565b90565b610239565b9160608383031261037657610341826000850161022a565b9261034f836020830161022a565b92604082013567ffffffffffffffff81116103715761036e9201610306565b90565b610204565b6101ff565b61038f61038a61039492610012565b61001d565b610012565b90565b6103a09061037b565b90565b6103ac90610397565b90565b67ffffffffffffffff81116103cd576103c9602091610243565b0190565b61024d565b906103e46103df836103af565b61028c565b918252565b6103f360006103d2565b90565b6103fe6103e9565b90565b610409610054565b506104126105cd565b61046161045761045161044761043f61043960003661043160046101ab565b9080926101d7565b906101fc565b810190610329565b93919290926103a3565b916103a3565b91909190916105ec565b6104696103f6565b90565b3361048661048061047b61017e565b610048565b91610048565b1460001461059d57610496610054565b5063ffffffff60e01b60003516806104bd6104b7631b2ce7f360e11b610059565b91610059565b146000146104d757506104ce610817565b5b602081519101f35b806104f16104eb63278f794360e11b610059565b91610059565b1460001461050857506105026107c1565b5b6104cf565b8061052261051c6308f2839760e41b610059565b91610059565b146000146105395750610533610723565b5b610503565b8061055361054d6303e1469160e61b610059565b91610059565b1460001461056a57506105646106bf565b5b610534565b61058361057d635c60da1b60e01b610059565b91610059565b146000146105985761059361067a565b610565565b61064a565b61064a565b90565b6105b96105b46105be9261000f565b61001d565b6101a8565b90565b156105c857565b600080fd5b6105ea346105e46105de60006105a5565b916101a8565b146105c1565b565b91906105f661087a565b61061161060b610606600061003c565b610048565b91610048565b0361062d5761062261062b936108b2565b9060009161098d565b565b600063f92ee8a960e01b81528061064660048201610065565b0390fd5b610652610aa6565b610ae7565b61066090610048565b9052565b919061067890600060208501940190610657565b565b610682610054565b5061068b6105cd565b6106ad6106bc610699610aa6565b6106a16101c7565b92839160208301610664565b60208201810382520382610263565b90565b6106c7610054565b506106d06105cd565b6106f26107016106de61017e565b6106e66101c7565b92839160208301610664565b60208201810382520382610263565b90565b9060208282031261071e5761071b9160000161022a565b90565b6101ff565b61072b610054565b506107346105cd565b61077061076b61076661075e61075860003661075060046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108b2565b6107786103f6565b90565b9190916040818403126107bc57610795836000830161022a565b92602082013567ffffffffffffffff81116107b7576107b49201610306565b90565b610204565b6101ff565b6107c9610054565b5061080c6108036107fc6107f46107ee6000366107e660046101ab565b9080926101d7565b906101fc565b81019061077b565b91906103a3565b90600191610b0a565b6108146103f6565b90565b61081f610054565b506108286105cd565b61086f61085f61085a61085261084c60003661084460046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108676103f6565b600091610b0a565b6108776103f6565b90565b6108826100f3565b5061088b61017e565b90565b9160206108b09294936108a960408201966000830190610657565b0190610657565b565b6108fd906108be61017e565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f916108f56108ec6101c7565b9283928361088e565b0390a1610c4d565b565b61090890610397565b90565b5190565b6109189061037b565b90565b6109249061090f565b90565b61093090610397565b90565b60e01b90565b61094281610048565b0361094957565b600080fd5b9050519061095b82610939565b565b90602082820312610977576109749160000161094e565b90565b6101ff565b6109846101c7565b3d6000823e3d90fd5b9161099783610e30565b826109c27f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e916108ff565b906109cb6101c7565b806109d581610065565b0390a26109e18261090b565b6109f46109ee60006105a5565b916101a8565b11908115610a9e575b50610a07575b5050565b6020610a1d610a18610a339461091b565b610927565b635c60da1b90610a2b6101c7565b948592610933565b82528180610a4360048201610065565b03915afa908115610a9957610a6192600092610a69575b5090610f65565b503880610a03565b610a8b91925060203d8111610a92575b610a838183610263565b81019061095d565b9038610a5a565b503d610a79565b61097c565b9050386109fd565b610aae6100f3565b50610ab7610f85565b80610ad3610acd610ac8600061003c565b610048565b91610048565b03610ae45750610ae1610f99565b90565b90565b60008091368280378136915af43d6000803e600014610b05573d6000f35b3d6000fd5b91610b148361102f565b610b1d8261090b565b610b30610b2a60006105a5565b916101a8565b11908115610b54575b50610b43575b5050565b610b4c91610f65565b503880610b3f565b905038610b39565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b610bc06026604092610b5c565b610bc981610b65565b0190565b610be39060208101906000818303910152610bb3565b90565b15610bed57565b610bf56101c7565b62461bcd60e51b815280610c0b60048201610bcd565b0390fd5b90610c2060018060a01b03916100fe565b9181191691161790565b90565b90610c42610c3d610c49926108ff565b610c2a565b8254610c0f565b9055565b610c8f90610c7781610c70610c6a610c65600061003c565b610048565b91610048565b1415610be6565b6000610c89610c84610120565b6105a2565b01610c2d565b565b60207f7472616374000000000000000000000000000000000000000000000000000000917f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e60008201520152565b610cec6025604092610b5c565b610cf581610c91565b0190565b610d0f9060208101906000818303910152610cdf565b90565b15610d1957565b610d216101c7565b62461bcd60e51b815280610d3760048201610cf9565b0390fd5b60207f73206e6f74206120636f6e747261637400000000000000000000000000000000917f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960008201520152565b610d966030604092610b5c565b610d9f81610d3b565b0190565b610db99060208101906000818303910152610d89565b90565b15610dc357565b610dcb6101c7565b62461bcd60e51b815280610de160048201610da3565b0390fd5b90565b610dfc610df7610e0192610de5565b6100fe565b6100fb565b90565b610e2d7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50610de8565b90565b610e6e90610e45610e408261107f565b610d12565b6020610e58610e538361091b565b610927565b635c60da1b90610e666101c7565b948592610933565b82528180610e7e60048201610065565b03915afa8015610eee57610ea1610ea691610ebe94600091610ec0575b5061107f565b610dbc565b6000610eb8610eb3610e04565b6105a2565b01610c2d565b565b610ee1915060203d8111610ee7575b610ed98183610263565b81019061095d565b38610e9b565b503d610ecf565b61097c565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610f4b60276103d2565b90610f5860208301610ef3565b565b610f62610f41565b90565b90610f8291610f72610054565b5090610f7c610f5a565b916110e2565b90565b610f8d6100f3565b50610f96611160565b90565b610fa16100f3565b50610fd56020610fbf610fba610fb5611187565b61091b565b610927565b635c60da1b90610fcd6101c7565b938492610933565b82528180610fe560048201610065565b03915afa90811561102a57600091610ffc575b5090565b61101d915060203d8111611023575b6110158183610263565b81019061095d565b38610ff8565b503d61100b565b61097c565b61103881611258565b6110627fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b916108ff565b9061106b6101c7565b8061107581610065565b0390a2565b600090565b61108761107a565b503b61109c61109660006105a5565b916101a8565b1190565b906110b26110ad836102a1565b61028c565b918252565b3d6000146110d4576110c83d6110a0565b903d6000602084013e5b565b6110dc610054565b906110d2565b9091600080611112946110f3610054565b508490602081019051915af4916111086110b7565b909290919261130b565b90565b90565b61112c61112761113192611115565b6100fe565b6100fb565b90565b61115d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611118565b90565b6111686100f3565b50611184600061117e611179611134565b6105a2565b01610171565b90565b61118f6100f3565b506111ab60006111a56111a0610e04565b6105a2565b01610171565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b611209602d604092610b5c565b611212816111ae565b0190565b61122c90602081019060008183039101526111fc565b90565b1561123657565b61123e6101c7565b62461bcd60e51b81528061125460048201611216565b0390fd5b6112859061126d6112688261107f565b61122f565b600061127f61127a611134565b6105a2565b01610c2d565b565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b6112bc601d602092610b5c565b6112c581611287565b0190565b6112df90602081019060008183039101526112af565b90565b156112e957565b6112f16101c7565b62461bcd60e51b815280611307600482016112c9565b0390fd5b919290611316610054565b5060001461135c57506113288261090b565b61133b61133560006105a5565b916101a8565b14611345575b5090565b6113516113569161107f565b6112e2565b38611341565b826113d5565b5190565b60005b83811061137a575050906000910152565b806020918301518185015201611369565b6113aa6113b36020936113b8936113a181611362565b93848093610b5c565b95869101611366565b610243565b0190565b6113d2916020820191600081840391015261138b565b90565b906113df8261090b565b6113f26113ec60006105a5565b916101a8565b116000146114035750805190602001fd5b6114249061140f6101c7565b91829162461bcd60e51b8352600483016113bc565b0390fdfea2646970667358221220fb1899e61f38faa78bfbab79b8dc2fa613357c2fce2699411f9fee80b624365564736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x6B JUMPI PUSH2 0x6B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x34 PUSH2 0x2F PUSH2 0x39 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x45 SWAP1 PUSH2 0x20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x51 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x73 PUSH2 0x17E JUMP JUMPDEST PUSH2 0x8E PUSH2 0x88 PUSH2 0x83 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x46C JUMPI PUSH2 0x9B PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND PUSH2 0xC1 PUSH2 0xBB PUSH4 0xCF7A1D77 PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH2 0xE3 JUMPI PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0xDF PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xEB PUSH2 0x401 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x113 PUSH2 0x11D SWAP3 PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x149 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x104 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x16E SWAP2 PUSH2 0x14C JUMP JUMPDEST PUSH2 0x152 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17B SWAP1 SLOAD PUSH2 0x15D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1A2 PUSH1 0x0 PUSH2 0x19C PUSH2 0x197 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1BF PUSH2 0x1BA PUSH2 0x1C4 SWAP3 PUSH2 0x1A5 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x1F7 JUMPI DUP5 GT PUSH2 0x1F2 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1CD JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x212 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x21E DUP2 PUSH2 0x209 JUMP JUMPDEST SUB PUSH2 0x225 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x237 DUP3 PUSH2 0x215 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x26D SWAP1 PUSH2 0x243 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x287 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x29F PUSH2 0x298 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x263 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2BF JUMPI PUSH2 0x2BB PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2E5 PUSH2 0x2E0 DUP3 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x301 JUMPI PUSH2 0x2FF SWAP3 PUSH2 0x2C4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x23E JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x324 JUMPI DUP2 PUSH1 0x20 PUSH2 0x321 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2D0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x239 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x376 JUMPI PUSH2 0x341 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH2 0x34F DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x371 JUMPI PUSH2 0x36E SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x38F PUSH2 0x38A PUSH2 0x394 SWAP3 PUSH2 0x12 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A0 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3AC SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3CD JUMPI PUSH2 0x3C9 PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x3E4 PUSH2 0x3DF DUP4 PUSH2 0x3AF JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x0 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FE PUSH2 0x3E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x412 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x461 PUSH2 0x457 PUSH2 0x451 PUSH2 0x447 PUSH2 0x43F PUSH2 0x439 PUSH1 0x0 CALLDATASIZE PUSH2 0x431 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x329 JUMP JUMPDEST SWAP4 SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x469 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLER PUSH2 0x486 PUSH2 0x480 PUSH2 0x47B PUSH2 0x17E JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x59D JUMPI PUSH2 0x496 PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x4BD PUSH2 0x4B7 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x4D7 JUMPI POP PUSH2 0x4CE PUSH2 0x817 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0x4F1 PUSH2 0x4EB PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x508 JUMPI POP PUSH2 0x502 PUSH2 0x7C1 JUMP JUMPDEST JUMPDEST PUSH2 0x4CF JUMP JUMPDEST DUP1 PUSH2 0x522 PUSH2 0x51C PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x539 JUMPI POP PUSH2 0x533 PUSH2 0x723 JUMP JUMPDEST JUMPDEST PUSH2 0x503 JUMP JUMPDEST DUP1 PUSH2 0x553 PUSH2 0x54D PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x56A JUMPI POP PUSH2 0x564 PUSH2 0x6BF JUMP JUMPDEST JUMPDEST PUSH2 0x534 JUMP JUMPDEST PUSH2 0x583 PUSH2 0x57D PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x598 JUMPI PUSH2 0x593 PUSH2 0x67A JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5B9 PUSH2 0x5B4 PUSH2 0x5BE SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5C8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5EA CALLVALUE PUSH2 0x5E4 PUSH2 0x5DE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x5C1 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5F6 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x611 PUSH2 0x60B PUSH2 0x606 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x62D JUMPI PUSH2 0x622 PUSH2 0x62B SWAP4 PUSH2 0x8B2 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH2 0x98D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x646 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x652 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST PUSH2 0x660 SWAP1 PUSH2 0x48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x678 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x682 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x68B PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6BC PUSH2 0x699 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x6A1 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C7 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x6D0 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6F2 PUSH2 0x701 PUSH2 0x6DE PUSH2 0x17E JUMP JUMPDEST PUSH2 0x6E6 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x71E JUMPI PUSH2 0x71B SWAP2 PUSH1 0x0 ADD PUSH2 0x22A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x72B PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x734 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x770 PUSH2 0x76B PUSH2 0x766 PUSH2 0x75E PUSH2 0x758 PUSH1 0x0 CALLDATASIZE PUSH2 0x750 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x8B2 JUMP JUMPDEST PUSH2 0x778 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x7BC JUMPI PUSH2 0x795 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7B7 JUMPI PUSH2 0x7B4 SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x7C9 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x80C PUSH2 0x803 PUSH2 0x7FC PUSH2 0x7F4 PUSH2 0x7EE PUSH1 0x0 CALLDATASIZE PUSH2 0x7E6 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x77B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3A3 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x814 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x81F PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x828 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x86F PUSH2 0x85F PUSH2 0x85A PUSH2 0x852 PUSH2 0x84C PUSH1 0x0 CALLDATASIZE PUSH2 0x844 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x867 PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x877 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x882 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x88B PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x8B0 SWAP3 SWAP5 SWAP4 PUSH2 0x8A9 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8FD SWAP1 PUSH2 0x8BE PUSH2 0x17E JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x8F5 PUSH2 0x8EC PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x88E JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0xC4D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x908 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x924 SWAP1 PUSH2 0x90F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x930 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x942 DUP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x949 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x95B DUP3 PUSH2 0x939 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x977 JUMPI PUSH2 0x974 SWAP2 PUSH1 0x0 ADD PUSH2 0x94E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x984 PUSH2 0x1C7 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 PUSH2 0x997 DUP4 PUSH2 0xE30 JUMP JUMPDEST DUP3 PUSH2 0x9C2 PUSH32 0x1CF3B03A6CF19FA2BABA4DF148E9DCABEDEA7F8A5C07840E207E5C089BE95D3E SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x9CB PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x9D5 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH2 0x9E1 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x9F4 PUSH2 0x9EE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xA9E JUMPI JUMPDEST POP PUSH2 0xA07 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x20 PUSH2 0xA1D PUSH2 0xA18 PUSH2 0xA33 SWAP5 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xA2B PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xA43 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA99 JUMPI PUSH2 0xA61 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0xA69 JUMPI JUMPDEST POP SWAP1 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0xA8B SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xA92 JUMPI JUMPDEST PUSH2 0xA83 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xA5A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA79 JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x9FD JUMP JUMPDEST PUSH2 0xAAE PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xAB7 PUSH2 0xF85 JUMP JUMPDEST DUP1 PUSH2 0xAD3 PUSH2 0xACD PUSH2 0xAC8 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0xAE4 JUMPI POP PUSH2 0xAE1 PUSH2 0xF99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0xB05 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH2 0xB14 DUP4 PUSH2 0x102F JUMP JUMPDEST PUSH2 0xB1D DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0xB30 PUSH2 0xB2A PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xB54 JUMPI JUMPDEST POP PUSH2 0xB43 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xB4C SWAP2 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xB3F JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xBC0 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xBC9 DUP2 PUSH2 0xB65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xBE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xBB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xBED JUMPI JUMP JUMPDEST PUSH2 0xBF5 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC0B PUSH1 0x4 DUP3 ADD PUSH2 0xBCD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xC20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xFE JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xC42 PUSH2 0xC3D PUSH2 0xC49 SWAP3 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0xC2A JUMP JUMPDEST DUP3 SLOAD PUSH2 0xC0F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC8F SWAP1 PUSH2 0xC77 DUP2 PUSH2 0xC70 PUSH2 0xC6A PUSH2 0xC65 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ ISZERO PUSH2 0xBE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC89 PUSH2 0xC84 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7472616374000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720626561636F6E206973206E6F74206120636F6E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xCEC PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xCF5 DUP2 PUSH2 0xC91 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD0F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xCDF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xD19 JUMPI JUMP JUMPDEST PUSH2 0xD21 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xD37 PUSH1 0x4 DUP3 ADD PUSH2 0xCF9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x73206E6F74206120636F6E747261637400000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A20626561636F6E20696D706C656D656E746174696F6E2069 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xD96 PUSH1 0x30 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xD9F DUP2 PUSH2 0xD3B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xDB9 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xD89 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xDC3 JUMPI JUMP JUMPDEST PUSH2 0xDCB PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xDE1 PUSH1 0x4 DUP3 ADD PUSH2 0xDA3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDFC PUSH2 0xDF7 PUSH2 0xE01 SWAP3 PUSH2 0xDE5 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE2D PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0xDE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE6E SWAP1 PUSH2 0xE45 PUSH2 0xE40 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x20 PUSH2 0xE58 PUSH2 0xE53 DUP4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xE66 PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xE7E PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL DUP1 ISZERO PUSH2 0xEEE JUMPI PUSH2 0xEA1 PUSH2 0xEA6 SWAP2 PUSH2 0xEBE SWAP5 PUSH1 0x0 SWAP2 PUSH2 0xEC0 JUMPI JUMPDEST POP PUSH2 0x107F JUMP JUMPDEST PUSH2 0xDBC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB8 PUSH2 0xEB3 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEE1 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xEE7 JUMPI JUMPDEST PUSH2 0xED9 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xE9B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xECF JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xF4B PUSH1 0x27 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 PUSH2 0xF58 PUSH1 0x20 DUP4 ADD PUSH2 0xEF3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF62 PUSH2 0xF41 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF82 SWAP2 PUSH2 0xF72 PUSH2 0x54 JUMP JUMPDEST POP SWAP1 PUSH2 0xF7C PUSH2 0xF5A JUMP JUMPDEST SWAP2 PUSH2 0x10E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF8D PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xF96 PUSH2 0x1160 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFA1 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xFD5 PUSH1 0x20 PUSH2 0xFBF PUSH2 0xFBA PUSH2 0xFB5 PUSH2 0x1187 JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xFCD PUSH2 0x1C7 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xFE5 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x102A JUMPI PUSH1 0x0 SWAP2 PUSH2 0xFFC JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x101D SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1023 JUMPI JUMPDEST PUSH2 0x1015 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xFF8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x100B JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH2 0x1038 DUP2 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x1062 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x106B PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x1075 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1087 PUSH2 0x107A JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x109C PUSH2 0x1096 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10B2 PUSH2 0x10AD DUP4 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0x10D4 JUMPI PUSH2 0x10C8 RETURNDATASIZE PUSH2 0x10A0 JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0x10DC PUSH2 0x54 JUMP JUMPDEST SWAP1 PUSH2 0x10D2 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0x1112 SWAP5 PUSH2 0x10F3 PUSH2 0x54 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0x1108 PUSH2 0x10B7 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x130B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x112C PUSH2 0x1127 PUSH2 0x1131 SWAP3 PUSH2 0x1115 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x115D PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x1118 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1168 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1184 PUSH1 0x0 PUSH2 0x117E PUSH2 0x1179 PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x118F PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x11AB PUSH1 0x0 PUSH2 0x11A5 PUSH2 0x11A0 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1209 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x1212 DUP2 PUSH2 0x11AE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x122C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x11FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1236 JUMPI JUMP JUMPDEST PUSH2 0x123E PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1254 PUSH1 0x4 DUP3 ADD PUSH2 0x1216 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x1285 SWAP1 PUSH2 0x126D PUSH2 0x1268 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127F PUSH2 0x127A PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x12BC PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x12C5 DUP2 PUSH2 0x1287 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x12DF SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x12AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12E9 JUMPI JUMP JUMPDEST PUSH2 0x12F1 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1307 PUSH1 0x4 DUP3 ADD PUSH2 0x12C9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0x1316 PUSH2 0x54 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0x135C JUMPI POP PUSH2 0x1328 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x133B PUSH2 0x1335 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x1345 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1351 PUSH2 0x1356 SWAP2 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x12E2 JUMP JUMPDEST CODESIZE PUSH2 0x1341 JUMP JUMPDEST DUP3 PUSH2 0x13D5 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x137A JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x1369 JUMP JUMPDEST PUSH2 0x13AA PUSH2 0x13B3 PUSH1 0x20 SWAP4 PUSH2 0x13B8 SWAP4 PUSH2 0x13A1 DUP2 PUSH2 0x1362 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xB5C JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x1366 JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x13D2 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x138B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x13DF DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x13F2 PUSH2 0x13EC PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x1403 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0x1424 SWAP1 PUSH2 0x140F PUSH2 0x1C7 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x13BC JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB XOR SWAP10 0xE6 0x1F CODESIZE STATICCALL 0xA7 DUP12 0xFB 0xAB PUSH26 0xB8DC2FA613357C2FCE2699411F9FEE80B624365564736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "1165:2219:32:-:0;;;;;2853:63:8;1165:2219:32;2629:64:8;:::i;1165:2219:32:-;;:::o;:::-;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::o;:::-;;;;;;:::o;:::-;;;;:::o;2210:701::-;2299:11;;:::i;:::-;:25;;2314:10;2322:1;2314:10;:::i;:::-;2299:25;:::i;:::-;;;:::i;:::-;;2295:561;;2340:16;;:::i;:::-;1165:2219;;;;2388:7;;;2413:66;;2425:54;;;2413:66;:::i;:::-;;;:::i;:::-;;2409:296;;2822:23;;;;;;;;;;;;:::i;:::-;;;;2409:296;2505:21;;:::i;:::-;2608:83;;;;;;1165:2219;;;:::o;:::-;;:::o;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;3616:106:7:-;3656:66;;;:::i;:::-;3616:106;:::o;3656:66::-;;;;:::o;:::-;1165:2219:32;;;;;3656:66:7;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;3784:122::-;3828:7;;:::i;:::-;3881:11;3854:45;;:39;3881:11;;:::i;:::-;3854:39;:::i;:::-;:45;;:::i;:::-;3847:52;:::o;1165:2219:32:-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::i;:::-;;:::o;1365:274::-;1413:12;;:::i;:::-;;;;:::i;:::-;1607:4;1467:104;;1520:51;;1531:12;:8;;:12;1540:1;1531:12;:::i;:::-;;;;;:::i;:::-;1520:51;;:::i;:::-;;;;;:::i;:::-;1467:104;;;;;;:::i;:::-;;;:::i;:::-;;1592:5;1599:6;1607:4;;;:::i;:::-;1623:9;;:::i;:::-;;:::o;3518:1089:35:-;3579:10;:25;;3593:11;;:::i;:::-;3579:25;:::i;:::-;;;:::i;:::-;;3575:1026;;;;3620:16;;:::i;:::-;1165:2219:32;;;;3668:7:35;;;3693:8;:59;;3705:47;;;3693:59;:::i;:::-;;;:::i;:::-;;3689:766;;;;3778:20;;;:::i;:::-;3689:766;4468:75;;;;;;3689:766;3823:8;:66;;3835:54;;;3823:66;:::i;:::-;;;:::i;:::-;;3819:636;;;;3915:27;;;:::i;:::-;3819:636;3689:766;;3819:636;3967:8;:61;;3979:49;;;3967:61;:::i;:::-;;;:::i;:::-;;3963:492;;;;4054:22;;;:::i;:::-;3963:492;3819:636;;3963:492;4101:8;:55;;4113:43;;;4101:55;:::i;:::-;;;:::i;:::-;;4097:358;;;;4182:16;;;:::i;:::-;4097:358;3963:492;;4097:358;4223:64;;4235:52;;;4223:64;:::i;:::-;;;:::i;:::-;;4219:236;;;;4313:25;;:::i;:::-;4097:358;;4219:236;;:::i;3575:1026::-;;:::i;1859:190:17:-;;:::o;1165:2219:32:-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;7359:78:35;7407:23;7415:9;:14;;7428:1;7415:14;:::i;:::-;;;:::i;:::-;;7407:23;:::i;:::-;7359:78::o;1645:352:32:-;;;1738:8;;:::i;:::-;:22;;1750:10;1758:1;1750:10;:::i;:::-;1738:22;:::i;:::-;;;:::i;:::-;;1734:174;;1930:5;1984;1930;;:::i;:::-;1978:4;1984:5;;;:::i;:::-;1645:352::o;1734:174::-;1874:23;2822;;;1874;;;;;;;;:::i;:::-;;;;2322:110:8;2407:17;;:::i;:::-;;:::i;1165:2219:32:-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;5483:198:35:-;5535:12;;:::i;:::-;;;;:::i;:::-;5648:26;;5614:17;;:::i;:::-;5648:26;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;5641:33;:::o;4958:165::-;5001:12;;:::i;:::-;;;;:::i;:::-;5099:17;;5071:11;;:::i;:::-;5099:17;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;5092:24;:::o;1165:2219:32:-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;5792:216:35:-;5841:12;;:::i;:::-;;;;:::i;:::-;5972:8;5895:54;5914:35;;5925:12;:8;;:12;5934:1;5925:12;:::i;:::-;;;;;:::i;:::-;5914:35;;:::i;:::-;;;;;:::i;:::-;5895:54;:::i;:::-;5972:8;:::i;:::-;5992:9;;:::i;:::-;;:::o;1165:2219:32:-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;6622:254:35:-;6676:12;;:::i;:::-;6760:8;6844:4;6700:91;6749:42;;6760:12;:8;;:12;6769:1;6760:12;:::i;:::-;;;;;:::i;:::-;6749:42;;:::i;:::-;;;;;:::i;:::-;6700:91;;;:::i;:::-;6838:4;6844;;;:::i;:::-;6860:9;;:::i;:::-;;:::o;6083:255::-;6130:12;;:::i;:::-;;;;:::i;:::-;6305:5;6184:63;6212:35;;6223:12;:8;;:12;6232:1;6223:12;:::i;:::-;;;;;:::i;:::-;6212:35;;:::i;:::-;;;;;:::i;:::-;6184:63;:::i;:::-;6294:9;;:::i;:::-;6305:5;;;:::i;:::-;6322:9;;:::i;:::-;;:::o;7029:93::-;7078:7;;:::i;:::-;7104:11;;;:::i;:::-;7097:18;:::o;1165:2219:32:-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;:::o;4300:135:7:-;4419:8;4300:135;4377:11;;:::i;:::-;4390:8;4364:35;;;;;:::i;:::-;;;;;;:::i;:::-;;;;4419:8;:::i;:::-;4300:135::o;1165:2219:32:-;;;;:::i;:::-;;:::o;:::-;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;:::i;:::-;;;;;;;;5728:313:7;;5845:9;;;:::i;:::-;5885;5870:25;;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;5909:11;:4;:11;:::i;:::-;:15;;5923:1;5909:15;:::i;:::-;;;:::i;:::-;;:28;;;;;5728:313;5905:130;;;5728:313;;;:::o;5905:130::-;5982:35;:33;:18;:35;5990:9;5982:18;:::i;:::-;:33;:::i;:::-;;:35;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;5953:71;5982:35;;;;;5905:130;6019:4;5953:71;;:::i;:::-;;5905:130;;;;5982:35;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;:::i;5909:28::-;5928:9;;5909:28;;;3079:302:32;3165:7;;:::i;:::-;3209:30;;;:::i;:::-;3253:14;:28;;3271:10;3279:1;3271:10;:::i;:::-;3253:28;:::i;:::-;;;:::i;:::-;;3249:80;;3345:29;;;:::i;:::-;3338:36;:::o;3249:80::-;3297:21;:::o;948:895:8:-;1018:819;948:895;;1018:819;;;;;;;;;;;;;;;;;;;;;;;;2057:265:7;;2176:17;;;:::i;:::-;2208:11;:4;:11;:::i;:::-;:15;;2222:1;2208:15;:::i;:::-;;;:::i;:::-;;:28;;;;;2057:265;2204:112;;;2057:265;;;:::o;2204:112::-;2252:53;2281:17;2252:53;:::i;:::-;;2204:112;;;;2208:28;2227:9;;2208:28;;;1165:2219:32;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;3988:201:7:-;4126:56;3988:201;4043:73;4051:8;:22;;4063:10;4071:1;4063:10;:::i;:::-;4051:22;:::i;:::-;;;:::i;:::-;;;4043:73;:::i;:::-;4126:45;:39;4153:11;;:::i;:::-;4126:39;:::i;:::-;:45;:56;:::i;:::-;3988:201::o;1165:2219:32:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;4678:107:7:-;4719:66;;;:::i;:::-;4678:107;:::o;5054:371::-;5240:35;5054:371;5111:79;5119:29;5138:9;5119:29;:::i;:::-;5111:79;:::i;:::-;5240:35;:33;:18;5248:9;5240:18;:::i;:::-;:33;:::i;:::-;;:35;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;5221:55;5200:150;5240:35;5360:58;5240:35;;;;;5054:371;5221:55;;:::i;:::-;5200:150;:::i;:::-;5360:46;:40;5387:12;;:::i;:::-;5360:40;:::i;:::-;:46;:58;:::i;:::-;5054:371::o;5240:35::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;1165:2219:32:-;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;;;;;;:::i;:::-;:::o;:::-;;;:::i;:::-;;:::o;6674:198:14:-;;6788:77;6674:198;6757:12;;:::i;:::-;6809:6;6817:4;6788:77;;:::i;:::-;;;:::i;:::-;6781:84;:::o;884:140:34:-;951:12;;:::i;:::-;982:35;;;:::i;:::-;975:42;:::o;1121:138:33:-;1188:7;;:::i;:::-;1222:12;1214:38;;:36;:21;1222:12;;:::i;:::-;1214:21;:::i;:::-;:36;:::i;:::-;;:38;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;1121:138;1207:45;;:::o;1214:38::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;1771:152:7:-;1856:17;;;:::i;:::-;1889:27;;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;1771:152::o;1165:2219:32:-;;;:::o;1412:320:14:-;1472:4;;:::i;:::-;1702:7;:19;:23;;1724:1;1702:23;:::i;:::-;;;:::i;:::-;;1695:30;:::o;1165:2219:32:-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;7058:325:14;;;7265:25;7058:325;7307:69;7058:325;7199:12;;:::i;:::-;7265:6;;7285:4;7265:25;;;;;;;;;;;:::i;:::-;7334:6;7342:7;7351:10;7363:12;7307:69;;:::i;:::-;7300:76;:::o;1165:2219:32:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;981:115:7:-;1030:66;;;:::i;:::-;981:115;:::o;1175:140::-;1228:7;;:::i;:::-;1281:20;1254:54;;:48;1281:20;;:::i;:::-;1254:48;:::i;:::-;:54;;:::i;:::-;1247:61;:::o;4848:124::-;4893:7;;:::i;:::-;4946:12;4919:46;;:40;4946:12;;:::i;:::-;4919:40;:::i;:::-;:46;;:::i;:::-;4912:53;:::o;1165:2219:32:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;1406:259:7;1584:74;1406:259;1479:95;1487:37;1506:17;1487:37;:::i;:::-;1479:95;:::i;:::-;1584:54;:48;1611:20;;:::i;:::-;1584:48;:::i;:::-;:54;:74;:::i;:::-;1406:259::o;1165:2219:32:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;7671:628:14;;;;7851:12;;:::i;:::-;7879:7;7875:418;;;;7906:10;:17;:10;:17;:::i;:::-;:22;;7927:1;7906:22;:::i;:::-;;;:::i;:::-;;7902:286;;7875:418;8208:10;8201:17;:::o;7902:286::-;8121:18;8113:60;8132:6;8121:18;:::i;:::-;8113:60;:::i;:::-;7902:286;;;7875:418;8257:10;8269:12;:::i;1165:2219:32:-;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;8821:540:14:-;;8980:17;:10;:17;:::i;:::-;:21;;9000:1;8980:21;:::i;:::-;;;:::i;:::-;;8976:379;;;;9152:142;;;;;;;8976:379;9324:20;9331:12;9324:20;;:::i;:::-;1165:2219:32;;;;;;9324:20:14;;;;;;:::i;:::-;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation, care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors. See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing]. The proxy selectors are: - 0xcf7a1d77: initialize - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy) - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy) - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy) - 0xf851a440: admin (from TransparentUpgradeableProxy) - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":\"TransparentUpgradeableBeaconProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { BeaconProxy, Proxy } from \\\"./openzeppelin/BeaconProxy.sol\\\";\\nimport { ERC1967Proxy, TransparentUpgradeableProxy } from \\\"./openzeppelin/TransparentUpgradeableProxy.sol\\\";\\n\\ninterface ITransparentUpgradeableBeaconProxy {\\n\\n    function initialize(address admin, address beacon, bytes memory data) external;\\n\\n}\\n\\nerror InvalidInitialization();\\n\\n/**\\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * The proxy selectors are:\\n * - 0xcf7a1d77: initialize\\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\\n */\\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\\n\\n    /**\\n     * Decode the initialization data from the msg.data and call the initialize function.\\n     */\\n    function _dispatchInitialize() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\\n        initialize(admin, beacon, data);\\n\\n        return \\\"\\\";\\n    }\\n\\n    function initialize(address admin, address beacon, bytes memory data) internal {\\n        if (_admin() != address(0)) {\\n            // Redundant call. This function can only be called when the admin is not set.\\n            revert InvalidInitialization();\\n        }\\n        _changeAdmin(admin);\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\\n     */\\n    function _fallback() internal override(TransparentUpgradeableProxy, Proxy) {\\n        if (_getAdmin() == address(0)) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\\n                ret = _dispatchInitialize();\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    return(add(ret, 0x20), mload(ret))\\n                }\\n            }\\n            // When the admin is not set, the fallback function is used to initialize the proxy.\\n            revert InvalidInitialization();\\n        }\\n        TransparentUpgradeableProxy._fallback();\\n    }\\n\\n    /**\\n     * Returns the current implementation address.\\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\\n     */\\n    function _implementation() internal view override(ERC1967Proxy, BeaconProxy) returns (address) {\\n        address implementation = ERC1967Proxy._implementation();\\n        if (implementation != address(0)) {\\n            return implementation;\\n        }\\n        return BeaconProxy._implementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf7c7834545a955cedbe5228c3583f72fb332337dd0b4ebcd5fdb0b6504c5a8cb\",\"license\":\"Apache-2.0\"},\"src/proxies/openzeppelin/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2aa58701eaf7336890fae8a17f5769adf764beac64f3c5873199cd56abd66d0d\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/proxies/openzeppelin/BeaconProxy.sol": {
        "BeaconProxy": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "details": "This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}. The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't conflict with the storage layout of the implementation behind the proxy. _Available since v3.4._",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601c57600e6020565b6102cf61002c82396102cf90f35b6026565b60405190565b600080fdfe608060405261000c610130565b6101c6565b600090565b60018060a01b031690565b90565b61003861003361003d92610016565b610021565b610016565b90565b61004990610024565b90565b61005590610040565b90565b61006190610024565b90565b61006d90610058565b90565b60405190565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100a090610076565b810190811067ffffffffffffffff8211176100ba57604052565b610080565b60e01b90565b600080fd5b6100d390610016565b90565b6100df816100ca565b036100e657565b600080fd5b905051906100f8826100d6565b565b9060208282031261011457610111916000016100eb565b90565b6100c5565b60000190565b610127610070565b3d6000823e3d90fd5b610138610011565b5061016c602061015661015161014c61026f565b61004c565b610064565b635c60da1b90610164610070565b9384926100bf565b8252818061017c60048201610119565b03915afa9081156101c157600091610193575b5090565b6101b4915060203d81116101ba575b6101ac8183610096565b8101906100fa565b3861018f565b503d6101a2565b61011f565b60008091368280378136915af43d6000803e6000146101e4573d6000f35b3d6000fd5b90565b90565b60001b90565b61020961020461020e926101e9565b6101ef565b6101ec565b90565b61023a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d506101f5565b90565b60001c90565b60018060a01b031690565b61025a61025f9161023d565b610243565b90565b61026c905461024e565b90565b610277610011565b50610293600061028d610288610211565b610296565b01610262565b90565b9056fea26469706673582212200bd23754fe04dc6388cd032ca6024d3edbf6b7e68c22b0013e8bf70e853734c664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x2C DUP3 CODECOPY PUSH2 0x2CF SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH2 0xC PUSH2 0x130 JUMP JUMPDEST PUSH2 0x1C6 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38 PUSH2 0x33 PUSH2 0x3D SWAP3 PUSH2 0x16 JUMP JUMPDEST PUSH2 0x21 JUMP JUMPDEST PUSH2 0x16 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x49 SWAP1 PUSH2 0x24 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x55 SWAP1 PUSH2 0x40 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x61 SWAP1 PUSH2 0x24 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6D SWAP1 PUSH2 0x58 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0xA0 SWAP1 PUSH2 0x76 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xBA JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x80 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD3 SWAP1 PUSH2 0x16 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDF DUP2 PUSH2 0xCA JUMP JUMPDEST SUB PUSH2 0xE6 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0xF8 DUP3 PUSH2 0xD6 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x114 JUMPI PUSH2 0x111 SWAP2 PUSH1 0x0 ADD PUSH2 0xEB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC5 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x127 PUSH2 0x70 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x138 PUSH2 0x11 JUMP JUMPDEST POP PUSH2 0x16C PUSH1 0x20 PUSH2 0x156 PUSH2 0x151 PUSH2 0x14C PUSH2 0x26F JUMP JUMPDEST PUSH2 0x4C JUMP JUMPDEST PUSH2 0x64 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0x164 PUSH2 0x70 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0xBF JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0x17C PUSH1 0x4 DUP3 ADD PUSH2 0x119 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1C1 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x193 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1B4 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1BA JUMPI JUMPDEST PUSH2 0x1AC DUP2 DUP4 PUSH2 0x96 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xFA JUMP JUMPDEST CODESIZE PUSH2 0x18F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1A2 JUMP JUMPDEST PUSH2 0x11F JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0x1E4 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x209 PUSH2 0x204 PUSH2 0x20E SWAP3 PUSH2 0x1E9 JUMP JUMPDEST PUSH2 0x1EF JUMP JUMPDEST PUSH2 0x1EC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23A PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0x1F5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x25A PUSH2 0x25F SWAP2 PUSH2 0x23D JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26C SWAP1 SLOAD PUSH2 0x24E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x277 PUSH2 0x11 JUMP JUMPDEST POP PUSH2 0x293 PUSH1 0x0 PUSH2 0x28D PUSH2 0x288 PUSH2 0x211 JUMP JUMPDEST PUSH2 0x296 JUMP JUMPDEST ADD PUSH2 0x262 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND 0xD2 CALLDATACOPY SLOAD INVALID DIV 0xDC PUSH4 0x88CD032C 0xA6 MUL 0x4D RETURNDATACOPY 0xDB 0xF6 0xB7 0xE6 DUP13 0x22 0xB0 ADD RETURNDATACOPY DUP12 0xF7 0xE DUP6 CALLDATACOPY CALLVALUE 0xC6 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "806:967:33:-:0;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode_address_fromMemory": {
                  "entryPoint": 235,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_fromMemory": {
                  "entryPoint": 250,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 281,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 112,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 202,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes32": {
                  "entryPoint": 492,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 579,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 489,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 22,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_BEACON_SLOT": {
                  "entryPoint": 529,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_address_to_contract_IBeacon": {
                  "entryPoint": 76,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_IBeacon_to_address": {
                  "entryPoint": 100,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_bytes32": {
                  "entryPoint": 501,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 88,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_IBeacon": {
                  "entryPoint": 64,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 36,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 590,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 150,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun": {
                  "entryPoint": null,
                  "id": 1032,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_": {
                  "entryPoint": null,
                  "id": 1024,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_delegate": {
                  "entryPoint": 454,
                  "id": 997,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_fallback": {
                  "entryPoint": null,
                  "id": 1016,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_getAddressSlot": {
                  "entryPoint": 662,
                  "id": 2078,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getBeacon": {
                  "entryPoint": 623,
                  "id": 911,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_implementation": {
                  "entryPoint": 304,
                  "id": 6323,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 128,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 610,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 197,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 287,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 118,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 495,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_224": {
                  "entryPoint": 191,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 573,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "validator_revert_address": {
                  "entryPoint": 214,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 17,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "608060405261000c610130565b6101c6565b600090565b60018060a01b031690565b90565b61003861003361003d92610016565b610021565b610016565b90565b61004990610024565b90565b61005590610040565b90565b61006190610024565b90565b61006d90610058565b90565b60405190565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100a090610076565b810190811067ffffffffffffffff8211176100ba57604052565b610080565b60e01b90565b600080fd5b6100d390610016565b90565b6100df816100ca565b036100e657565b600080fd5b905051906100f8826100d6565b565b9060208282031261011457610111916000016100eb565b90565b6100c5565b60000190565b610127610070565b3d6000823e3d90fd5b610138610011565b5061016c602061015661015161014c61026f565b61004c565b610064565b635c60da1b90610164610070565b9384926100bf565b8252818061017c60048201610119565b03915afa9081156101c157600091610193575b5090565b6101b4915060203d81116101ba575b6101ac8183610096565b8101906100fa565b3861018f565b503d6101a2565b61011f565b60008091368280378136915af43d6000803e6000146101e4573d6000f35b3d6000fd5b90565b90565b60001b90565b61020961020461020e926101e9565b6101ef565b6101ec565b90565b61023a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d506101f5565b90565b60001c90565b60018060a01b031690565b61025a61025f9161023d565b610243565b90565b61026c905461024e565b90565b610277610011565b50610293600061028d610288610211565b610296565b01610262565b90565b9056fea26469706673582212200bd23754fe04dc6388cd032ca6024d3edbf6b7e68c22b0013e8bf70e853734c664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH2 0xC PUSH2 0x130 JUMP JUMPDEST PUSH2 0x1C6 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38 PUSH2 0x33 PUSH2 0x3D SWAP3 PUSH2 0x16 JUMP JUMPDEST PUSH2 0x21 JUMP JUMPDEST PUSH2 0x16 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x49 SWAP1 PUSH2 0x24 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x55 SWAP1 PUSH2 0x40 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x61 SWAP1 PUSH2 0x24 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6D SWAP1 PUSH2 0x58 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0xA0 SWAP1 PUSH2 0x76 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xBA JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x80 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD3 SWAP1 PUSH2 0x16 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDF DUP2 PUSH2 0xCA JUMP JUMPDEST SUB PUSH2 0xE6 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0xF8 DUP3 PUSH2 0xD6 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x114 JUMPI PUSH2 0x111 SWAP2 PUSH1 0x0 ADD PUSH2 0xEB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC5 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x127 PUSH2 0x70 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x138 PUSH2 0x11 JUMP JUMPDEST POP PUSH2 0x16C PUSH1 0x20 PUSH2 0x156 PUSH2 0x151 PUSH2 0x14C PUSH2 0x26F JUMP JUMPDEST PUSH2 0x4C JUMP JUMPDEST PUSH2 0x64 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0x164 PUSH2 0x70 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0xBF JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0x17C PUSH1 0x4 DUP3 ADD PUSH2 0x119 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1C1 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x193 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1B4 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1BA JUMPI JUMPDEST PUSH2 0x1AC DUP2 DUP4 PUSH2 0x96 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xFA JUMP JUMPDEST CODESIZE PUSH2 0x18F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1A2 JUMP JUMPDEST PUSH2 0x11F JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0x1E4 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x209 PUSH2 0x204 PUSH2 0x20E SWAP3 PUSH2 0x1E9 JUMP JUMPDEST PUSH2 0x1EF JUMP JUMPDEST PUSH2 0x1EC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23A PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0x1F5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x25A PUSH2 0x25F SWAP2 PUSH2 0x23D JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26C SWAP1 SLOAD PUSH2 0x24E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x277 PUSH2 0x11 JUMP JUMPDEST POP PUSH2 0x293 PUSH1 0x0 PUSH2 0x28D PUSH2 0x288 PUSH2 0x211 JUMP JUMPDEST PUSH2 0x296 JUMP JUMPDEST ADD PUSH2 0x262 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND 0xD2 CALLDATACOPY SLOAD INVALID DIV 0xDC PUSH4 0x88CD032C 0xA6 MUL 0x4D RETURNDATACOPY 0xDB 0xF6 0xB7 0xE6 DUP13 0x22 0xB0 ADD RETURNDATACOPY DUP12 0xF7 0xE DUP6 CALLDATACOPY CALLVALUE 0xC6 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "806:967:33:-:0;;;2407:17:8;;:::i;:::-;;:::i;806:967:33:-;;;:::o;:::-;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;1121:138;1188:7;;:::i;:::-;1222:12;1214:38;;:36;:21;1222:12;;:::i;:::-;1214:21;:::i;:::-;:36;:::i;:::-;;:38;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;1121:138;1207:45;;:::o;1214:38::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;948:895:8:-;1018:819;948:895;;1018:819;;;;;;;;;;;;;;;;;;;;;;;;806:967:33;;:::o;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;4678:107:7:-;4719:66;;;:::i;:::-;4678:107;:::o;4719:66::-;;;;:::o;:::-;806:967:33;;;;;4719:66:7;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;4848:124::-;4893:7;;:::i;:::-;4946:12;4919:46;;:40;4946:12;;:::i;:::-;4919:40;:::i;:::-;:46;;:::i;:::-;4912:53;:::o;1859:190:17:-;;:::o"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}. The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't conflict with the storage layout of the implementation behind the proxy. _Available since v3.4._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/openzeppelin/BeaconProxy.sol\":\"BeaconProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2aa58701eaf7336890fae8a17f5769adf764beac64f3c5873199cd56abd66d0d\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/proxies/openzeppelin/ERC1967Proxy.sol": {
        "ERC1967Proxy": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "details": "This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an implementation address that can be changed. This address is stored in storage in the location specified by https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the implementation behind the proxy.",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601c57600e6020565b61011561002c823961011590f35b6026565b60405190565b600080fdfe6080604052600a6013565b6023565b600090565b6019600e565b50602060bd565b90565b60008091368280378136915af43d6000803e6000146040573d6000f35b3d6000fd5b90565b90565b60001b90565b6060605c6064926045565b604b565b6048565b90565b608e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6051565b90565b60001c90565b60018060a01b031690565b60ab60af916091565b6097565b90565b60ba905460a2565b90565b60c3600e565b5060d9600060d460d06067565b60dc565b0160b2565b90565b9056fea2646970667358221220c4774b3f82388b8e099324853fb11a387930ccc2b0039d7d5e38799126adc14264736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x115 PUSH2 0x2C DUP3 CODECOPY PUSH2 0x115 SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0xA PUSH1 0x13 JUMP JUMPDEST PUSH1 0x23 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x19 PUSH1 0xE JUMP JUMPDEST POP PUSH1 0x20 PUSH1 0xBD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH1 0x40 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5C PUSH1 0x64 SWAP3 PUSH1 0x45 JUMP JUMPDEST PUSH1 0x4B JUMP JUMPDEST PUSH1 0x48 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x8E PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x51 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xAB PUSH1 0xAF SWAP2 PUSH1 0x91 JUMP JUMPDEST PUSH1 0x97 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xBA SWAP1 SLOAD PUSH1 0xA2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xC3 PUSH1 0xE JUMP JUMPDEST POP PUSH1 0xD9 PUSH1 0x0 PUSH1 0xD4 PUSH1 0xD0 PUSH1 0x67 JUMP JUMPDEST PUSH1 0xDC JUMP JUMPDEST ADD PUSH1 0xB2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC4 PUSH24 0x4B3F82388B8E099324853FB11A387930CCC2B0039D7D5E38 PUSH26 0x9126ADC14264736F6C634300081B003300000000000000000000 ",
              "sourceMap": "758:269:34:-:0;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "cleanup_bytes32": {
                  "entryPoint": 72,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 151,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 69,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_IMPLEMENTATION_SLOT": {
                  "entryPoint": 103,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_rational_by_to_bytes32": {
                  "entryPoint": 81,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 162,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun": {
                  "entryPoint": null,
                  "id": 1032,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_": {
                  "entryPoint": null,
                  "id": 1024,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_delegate": {
                  "entryPoint": 35,
                  "id": 997,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_fallback": {
                  "entryPoint": null,
                  "id": 1016,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_getAddressSlot": {
                  "entryPoint": 220,
                  "id": 2078,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getImplementation": {
                  "entryPoint": 189,
                  "id": 712,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_implementation": {
                  "entryPoint": 19,
                  "id": 6360,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 178,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 75,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 145,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "zero_value_for_split_address": {
                  "entryPoint": 14,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600a6013565b6023565b600090565b6019600e565b50602060bd565b90565b60008091368280378136915af43d6000803e6000146040573d6000f35b3d6000fd5b90565b90565b60001b90565b6060605c6064926045565b604b565b6048565b90565b608e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6051565b90565b60001c90565b60018060a01b031690565b60ab60af916091565b6097565b90565b60ba905460a2565b90565b60c3600e565b5060d9600060d460d06067565b60dc565b0160b2565b90565b9056fea2646970667358221220c4774b3f82388b8e099324853fb11a387930ccc2b0039d7d5e38799126adc14264736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0xA PUSH1 0x13 JUMP JUMPDEST PUSH1 0x23 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x19 PUSH1 0xE JUMP JUMPDEST POP PUSH1 0x20 PUSH1 0xBD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH1 0x40 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5C PUSH1 0x64 SWAP3 PUSH1 0x45 JUMP JUMPDEST PUSH1 0x4B JUMP JUMPDEST PUSH1 0x48 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x8E PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x51 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xAB PUSH1 0xAF SWAP2 PUSH1 0x91 JUMP JUMPDEST PUSH1 0x97 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xBA SWAP1 SLOAD PUSH1 0xA2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xC3 PUSH1 0xE JUMP JUMPDEST POP PUSH1 0xD9 PUSH1 0x0 PUSH1 0xD4 PUSH1 0xD0 PUSH1 0x67 JUMP JUMPDEST PUSH1 0xDC JUMP JUMPDEST ADD PUSH1 0xB2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC4 PUSH24 0x4B3F82388B8E099324853FB11A387930CCC2B0039D7D5E38 PUSH26 0x9126ADC14264736F6C634300081B003300000000000000000000 ",
              "sourceMap": "758:269:34:-:0;;;2407:17:8;;:::i;:::-;;:::i;758:269:34:-;;;:::o;884:140::-;951:12;;:::i;:::-;982:35;;;:::i;:::-;975:42;:::o;948:895:8:-;1018:819;948:895;;1018:819;;;;;;;;;;;;;;;;;;;;;;;;758:269:34;;:::o;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;981:115:7:-;1030:66;;;:::i;:::-;981:115;:::o;1030:66::-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;1175:140::-;1228:7;;:::i;:::-;1281:20;1254:54;;:48;1281:20;;:::i;:::-;1254:48;:::i;:::-;:54;;:::i;:::-;1247:61;:::o;1859:190:17:-;;:::o"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an implementation address that can be changed. This address is stored in storage in the location specified by https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the implementation behind the proxy.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/openzeppelin/ERC1967Proxy.sol\":\"ERC1967Proxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/proxies/openzeppelin/TransparentUpgradeableProxy.sol": {
        "ITransparentUpgradeableProxy": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "admin",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "changeAdmin",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "implementation",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "upgradeTo",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "name": "upgradeToAndCall",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy} does not implement this interface directly, and some of its functions are implemented by an internal dispatch mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not include them in the ABI so this interface must be used to interact with it.",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "admin()": "f851a440",
              "changeAdmin(address)": "8f283970",
              "implementation()": "5c60da1b",
              "upgradeTo(address)": "3659cfe6",
              "upgradeToAndCall(address,bytes)": "4f1ef286"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy} does not implement this interface directly, and some of its functions are implemented by an internal dispatch mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not include them in the ABI so this interface must be used to interact with it.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":\"ITransparentUpgradeableProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "TransparentUpgradeableProxy": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "details": "This contract implements a proxy that is upgradeable by an admin. Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation. This potentially exposes the admin to a proxy selector attack. See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing]. When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors. The proxy selectors are: - 0x3659cfe6: upgradeTo - 0x4f1ef286: upgradeToAndCall - 0x8f283970: changeAdmin - 0xf851a440: admin - 0x5c60da1b: implementation NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to fully implement transparency without decoding reverts caused by selector clashes between the proxy and the implementation. WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler will not check that there are no selector conflicts, due to the note above. A selector clash between any new function and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601c57600e6020565b610db061002c8239610db090f35b6026565b60405190565b600080fdfe6080604052361561003757610037565b60018060a01b031690565b6100239061000f565b90565b606090565b63ffffffff60e01b1690565b3361005161004b6100466101f8565b61001a565b9161001a565b1460001461016857610061610026565b5063ffffffff60e01b6000351680610088610082631b2ce7f360e11b61002b565b9161002b565b146000146100a257506100996105f9565b5b602081519101f35b806100bc6100b663278f794360e11b61002b565b9161002b565b146000146100d357506100cd6105a3565b5b61009a565b806100ed6100e76308f2839760e41b61002b565b9161002b565b1460001461010457506100fe610473565b5b6100ce565b8061011e6101186303e1469160e61b61002b565b9161002b565b14600014610135575061012f6102e3565b5b6100ff565b61014e610148635c60da1b60e01b61002b565b9161002b565b146000146101635761015e61029e565b610130565b61021f565b61021f565b600090565b90565b90565b60001b90565b61019261018d61019792610172565b610178565b610175565b90565b6101c37fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610361017e565b90565b60001c90565b60018060a01b031690565b6101e36101e8916101c6565b6101cc565b90565b6101f590546101d7565b90565b61020061016d565b5061021c600061021661021161019a565b61065c565b016101eb565b90565b61022761065f565b610673565b60405190565b61023b9061001a565b9052565b919061025390600060208501940190610232565b565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061027f90610255565b810190811067ffffffffffffffff82111761029957604052565b61025f565b6102a6610026565b506102af6106c1565b6102d16102e06102bd61065f565b6102c561022c565b9283916020830161023f565b60208201810382520382610275565b90565b6102eb610026565b506102f46106c1565b6103166103256103026101f8565b61030a61022c565b9283916020830161023f565b60208201810382520382610275565b90565b90565b90565b90565b61034561034061034a92610328565b61032e565b61032b565b90565b600080fd5b600080fd5b90939293848311610377578411610372576001820201920390565b610352565b61034d565b91565b600080fd5b600080fd5b6103929061000f565b90565b61039e81610389565b036103a557565b600080fd5b905035906103b782610395565b565b906020828203126103d3576103d0916000016103aa565b90565b61037f565b6103ec6103e76103f19261000f565b61032e565b61000f565b90565b6103fd906103d8565b90565b610409906103f4565b90565b9061041f61041861022c565b9283610275565b565b67ffffffffffffffff811161043f5761043b602091610255565b0190565b61025f565b9061045661045183610421565b61040c565b918252565b6104656000610444565b90565b61047061045b565b90565b61047b610026565b506104846106c1565b6104c06104bb6104b66104ae6104a86000366104a06004610331565b908092610357565b9061037c565b8101906103b9565b610400565b610704565b6104c8610468565b90565b600080fd5b600080fd5b67ffffffffffffffff81116104f3576104ef602091610255565b0190565b61025f565b90826000939282370152565b90929192610519610514826104d5565b61040c565b9381855260208501908284011161053557610533926104f8565b565b6104d0565b9080601f830112156105585781602061055593359101610504565b90565b6104cb565b91909160408184031261059e5761057783600083016103aa565b92602082013567ffffffffffffffff811161059957610596920161053a565b90565b610384565b61037f565b6105ab610026565b506105ee6105e56105de6105d66105d06000366105c86004610331565b908092610357565b9061037c565b81019061055d565b9190610400565b90600191610755565b6105f6610468565b90565b610601610026565b5061060a6106c1565b61065161064161063c61063461062e6000366106266004610331565b908092610357565b9061037c565b8101906103b9565b610400565b610649610468565b600091610755565b610659610468565b90565b90565b61066761016d565b506106706107f2565b90565b60008091368280378136915af43d6000803e600014610691573d6000f35b3d6000fd5b90565b6106ad6106a86106b292610696565b61032e565b61032b565b90565b156106bc57565b600080fd5b6106de346106d86106d26000610699565b9161032b565b146106b5565b565b9160206107029294936106fb60408201966000830190610232565b0190610232565b565b61074f906107106101f8565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9161074761073e61022c565b928392836106e0565b0390a161093e565b565b5190565b9161075f83610988565b61076882610751565b61077b6107756000610699565b9161032b565b1190811561079f575b5061078e575b5050565b61079791610a45565b50388061078a565b905038610784565b90565b6107be6107b96107c3926107a7565b610178565b610175565b90565b6107ef7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6107aa565b90565b6107fa61016d565b50610816600061081061080b6107c6565b61065c565b016101eb565b90565b61082d61082861083292610696565b61032e565b61000f565b90565b61083e90610819565b90565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b6108a56026604092610841565b6108ae8161084a565b0190565b6108c89060208101906000818303910152610898565b90565b156108d257565b6108da61022c565b62461bcd60e51b8152806108f0600482016108b2565b0390fd5b9061090560018060a01b0391610178565b9181191691161790565b610918906103f4565b90565b90565b9061093361092e61093a9261090f565b61091b565b82546108f4565b9055565b610980906109688161096161095b6109566000610835565b61001a565b9161001a565b14156108cb565b600061097a61097561019a565b61065c565b0161091e565b565b60000190565b61099181610b0f565b6109bb7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9161090f565b906109c461022c565b806109ce81610982565b0390a2565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610a2b6027610444565b90610a38602083016109d3565b565b610a42610a21565b90565b90610a6291610a52610026565b5090610a5c610a3a565b91610b80565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b610ac0602d604092610841565b610ac981610a65565b0190565b610ae39060208101906000818303910152610ab3565b90565b15610aed57565b610af561022c565b62461bcd60e51b815280610b0b60048201610acd565b0390fd5b610b3c90610b24610b1f82610bb8565b610ae6565b6000610b36610b316107c6565b61065c565b0161091e565b565b90610b50610b4b836104d5565b61040c565b918252565b3d600014610b7257610b663d610b3e565b903d6000602084013e5b565b610b7a610026565b90610b70565b9091600080610bb094610b91610026565b508490602081019051915af491610ba6610b55565b9092909192610c5d565b90565b600090565b610bc0610bb3565b503b610bd5610bcf6000610699565b9161032b565b1190565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610c0e601d602092610841565b610c1781610bd9565b0190565b610c319060208101906000818303910152610c01565b90565b15610c3b57565b610c4361022c565b62461bcd60e51b815280610c5960048201610c1b565b0390fd5b919290610c68610026565b50600014610cae5750610c7a82610751565b610c8d610c876000610699565b9161032b565b14610c97575b5090565b610ca3610ca891610bb8565b610c34565b38610c93565b82610d27565b5190565b60005b838110610ccc575050906000910152565b806020918301518185015201610cbb565b610cfc610d05602093610d0a93610cf381610cb4565b93848093610841565b95869101610cb8565b610255565b0190565b610d249160208201916000818403910152610cdd565b90565b90610d3182610751565b610d44610d3e6000610699565b9161032b565b11600014610d555750805190602001fd5b610d7690610d6161022c565b91829162461bcd60e51b835260048301610d0e565b0390fdfea26469706673582212204e42c1b81ea1dd5dcc8fbcb8bfdf933e9239705676a402a624342386fe3fb73064736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0xDB0 PUSH2 0x2C DUP3 CODECOPY PUSH2 0xDB0 SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x37 JUMPI PUSH2 0x37 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x23 SWAP1 PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST CALLER PUSH2 0x51 PUSH2 0x4B PUSH2 0x46 PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x1A JUMP JUMPDEST SWAP2 PUSH2 0x1A JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x168 JUMPI PUSH2 0x61 PUSH2 0x26 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x88 PUSH2 0x82 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0xA2 JUMPI POP PUSH2 0x99 PUSH2 0x5F9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0xBC PUSH2 0xB6 PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0xD3 JUMPI POP PUSH2 0xCD PUSH2 0x5A3 JUMP JUMPDEST JUMPDEST PUSH2 0x9A JUMP JUMPDEST DUP1 PUSH2 0xED PUSH2 0xE7 PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x104 JUMPI POP PUSH2 0xFE PUSH2 0x473 JUMP JUMPDEST JUMPDEST PUSH2 0xCE JUMP JUMPDEST DUP1 PUSH2 0x11E PUSH2 0x118 PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x135 JUMPI POP PUSH2 0x12F PUSH2 0x2E3 JUMP JUMPDEST JUMPDEST PUSH2 0xFF JUMP JUMPDEST PUSH2 0x14E PUSH2 0x148 PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x163 JUMPI PUSH2 0x15E PUSH2 0x29E JUMP JUMPDEST PUSH2 0x130 JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x192 PUSH2 0x18D PUSH2 0x197 SWAP3 PUSH2 0x172 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST PUSH2 0x175 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1C3 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x1E8 SWAP2 PUSH2 0x1C6 JUMP JUMPDEST PUSH2 0x1CC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F5 SWAP1 SLOAD PUSH2 0x1D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x200 PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x21C PUSH1 0x0 PUSH2 0x216 PUSH2 0x211 PUSH2 0x19A JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x1EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x227 PUSH2 0x65F JUMP JUMPDEST PUSH2 0x673 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x23B SWAP1 PUSH2 0x1A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x253 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x27F SWAP1 PUSH2 0x255 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x299 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST PUSH2 0x2A6 PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x2AF PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x2E0 PUSH2 0x2BD PUSH2 0x65F JUMP JUMPDEST PUSH2 0x2C5 PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x23F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x275 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2EB PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x2F4 PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x325 PUSH2 0x302 PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x30A PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x23F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x275 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x345 PUSH2 0x340 PUSH2 0x34A SWAP3 PUSH2 0x328 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0x32B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x377 JUMPI DUP5 GT PUSH2 0x372 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST PUSH2 0x34D JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x392 SWAP1 PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x39E DUP2 PUSH2 0x389 JUMP JUMPDEST SUB PUSH2 0x3A5 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x3B7 DUP3 PUSH2 0x395 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x3D3 JUMPI PUSH2 0x3D0 SWAP2 PUSH1 0x0 ADD PUSH2 0x3AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x37F JUMP JUMPDEST PUSH2 0x3EC PUSH2 0x3E7 PUSH2 0x3F1 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FD SWAP1 PUSH2 0x3D8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 SWAP1 PUSH2 0x3F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x41F PUSH2 0x418 PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x275 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x43F JUMPI PUSH2 0x43B PUSH1 0x20 SWAP2 PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 PUSH2 0x456 PUSH2 0x451 DUP4 PUSH2 0x421 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x465 PUSH1 0x0 PUSH2 0x444 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x470 PUSH2 0x45B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x47B PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x484 PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x4C0 PUSH2 0x4BB PUSH2 0x4B6 PUSH2 0x4AE PUSH2 0x4A8 PUSH1 0x0 CALLDATASIZE PUSH2 0x4A0 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3B9 JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH2 0x704 JUMP JUMPDEST PUSH2 0x4C8 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4F3 JUMPI PUSH2 0x4EF PUSH1 0x20 SWAP2 PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x519 PUSH2 0x514 DUP3 PUSH2 0x4D5 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x535 JUMPI PUSH2 0x533 SWAP3 PUSH2 0x4F8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4D0 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x558 JUMPI DUP2 PUSH1 0x20 PUSH2 0x555 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x504 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4CB JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x59E JUMPI PUSH2 0x577 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x3AA JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x599 JUMPI PUSH2 0x596 SWAP3 ADD PUSH2 0x53A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x384 JUMP JUMPDEST PUSH2 0x37F JUMP JUMPDEST PUSH2 0x5AB PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x5EE PUSH2 0x5E5 PUSH2 0x5DE PUSH2 0x5D6 PUSH2 0x5D0 PUSH1 0x0 CALLDATASIZE PUSH2 0x5C8 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x55D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x400 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0x755 JUMP JUMPDEST PUSH2 0x5F6 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x601 PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x60A PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x651 PUSH2 0x641 PUSH2 0x63C PUSH2 0x634 PUSH2 0x62E PUSH1 0x0 CALLDATASIZE PUSH2 0x626 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3B9 JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH2 0x649 PUSH2 0x468 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x755 JUMP JUMPDEST PUSH2 0x659 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x667 PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x670 PUSH2 0x7F2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0x691 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6A8 PUSH2 0x6B2 SWAP3 PUSH2 0x696 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0x32B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x6BC JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6DE CALLVALUE PUSH2 0x6D8 PUSH2 0x6D2 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST EQ PUSH2 0x6B5 JUMP JUMPDEST JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x702 SWAP3 SWAP5 SWAP4 PUSH2 0x6FB PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x74F SWAP1 PUSH2 0x710 PUSH2 0x1F8 JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x747 PUSH2 0x73E PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x6E0 JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0x93E JUMP JUMPDEST JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x75F DUP4 PUSH2 0x988 JUMP JUMPDEST PUSH2 0x768 DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0x77B PUSH2 0x775 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0x79F JUMPI JUMPDEST POP PUSH2 0x78E JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x797 SWAP2 PUSH2 0xA45 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0x78A JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x784 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7BE PUSH2 0x7B9 PUSH2 0x7C3 SWAP3 PUSH2 0x7A7 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST PUSH2 0x175 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7EF PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x7AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7FA PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x816 PUSH1 0x0 PUSH2 0x810 PUSH2 0x80B PUSH2 0x7C6 JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x1EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x82D PUSH2 0x828 PUSH2 0x832 SWAP3 PUSH2 0x696 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x83E SWAP1 PUSH2 0x819 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x8A5 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0x8AE DUP2 PUSH2 0x84A JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x8C8 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x898 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x8D2 JUMPI JUMP JUMPDEST PUSH2 0x8DA PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x8F0 PUSH1 0x4 DUP3 ADD PUSH2 0x8B2 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x905 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x178 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x3F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x933 PUSH2 0x92E PUSH2 0x93A SWAP3 PUSH2 0x90F JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST DUP3 SLOAD PUSH2 0x8F4 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x980 SWAP1 PUSH2 0x968 DUP2 PUSH2 0x961 PUSH2 0x95B PUSH2 0x956 PUSH1 0x0 PUSH2 0x835 JUMP JUMPDEST PUSH2 0x1A JUMP JUMPDEST SWAP2 PUSH2 0x1A JUMP JUMPDEST EQ ISZERO PUSH2 0x8CB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x97A PUSH2 0x975 PUSH2 0x19A JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x91E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x991 DUP2 PUSH2 0xB0F JUMP JUMPDEST PUSH2 0x9BB PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x90F JUMP JUMPDEST SWAP1 PUSH2 0x9C4 PUSH2 0x22C JUMP JUMPDEST DUP1 PUSH2 0x9CE DUP2 PUSH2 0x982 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xA2B PUSH1 0x27 PUSH2 0x444 JUMP JUMPDEST SWAP1 PUSH2 0xA38 PUSH1 0x20 DUP4 ADD PUSH2 0x9D3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xA42 PUSH2 0xA21 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xA62 SWAP2 PUSH2 0xA52 PUSH2 0x26 JUMP JUMPDEST POP SWAP1 PUSH2 0xA5C PUSH2 0xA3A JUMP JUMPDEST SWAP2 PUSH2 0xB80 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xAC0 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0xAC9 DUP2 PUSH2 0xA65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xAE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xAB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xAED JUMPI JUMP JUMPDEST PUSH2 0xAF5 PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xB0B PUSH1 0x4 DUP3 ADD PUSH2 0xACD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xB3C SWAP1 PUSH2 0xB24 PUSH2 0xB1F DUP3 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB36 PUSH2 0xB31 PUSH2 0x7C6 JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x91E JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0xB50 PUSH2 0xB4B DUP4 PUSH2 0x4D5 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0xB72 JUMPI PUSH2 0xB66 RETURNDATASIZE PUSH2 0xB3E JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0xB7A PUSH2 0x26 JUMP JUMPDEST SWAP1 PUSH2 0xB70 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0xBB0 SWAP5 PUSH2 0xB91 PUSH2 0x26 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0xBA6 PUSH2 0xB55 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0xC5D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xBC0 PUSH2 0xBB3 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0xBD5 PUSH2 0xBCF PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xC0E PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0xC17 DUP2 PUSH2 0xBD9 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xC31 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xC01 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xC3B JUMPI JUMP JUMPDEST PUSH2 0xC43 PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC59 PUSH1 0x4 DUP3 ADD PUSH2 0xC1B JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0xC68 PUSH2 0x26 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0xCAE JUMPI POP PUSH2 0xC7A DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0xC8D PUSH2 0xC87 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST EQ PUSH2 0xC97 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0xCA3 PUSH2 0xCA8 SWAP2 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0xC34 JUMP JUMPDEST CODESIZE PUSH2 0xC93 JUMP JUMPDEST DUP3 PUSH2 0xD27 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0xCCC JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0xCBB JUMP JUMPDEST PUSH2 0xCFC PUSH2 0xD05 PUSH1 0x20 SWAP4 PUSH2 0xD0A SWAP4 PUSH2 0xCF3 DUP2 PUSH2 0xCB4 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x841 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0xCB8 JUMP JUMPDEST PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD24 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xCDD JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xD31 DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0xD44 PUSH2 0xD3E PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0xD55 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0xD76 SWAP1 PUSH2 0xD61 PUSH2 0x22C JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0xD0E JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E TIMESTAMP 0xC1 0xB8 0x1E LOG1 0xDD TSTORE 0xCC DUP16 0xBC 0xB8 0xBF 0xDF SWAP4 RETURNDATACOPY SWAP3 CODECOPY PUSH17 0x5676A402A624342386FE3FB73064736F6C PUSH4 0x4300081B STOP CALLER ",
              "sourceMap": "2857:4583:35:-:0;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode_address_payable": {
                  "entryPoint": 938,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_address_payablet_bytes": {
                  "entryPoint": 1373,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_available_length_bytes": {
                  "entryPoint": 1284,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_bytes": {
                  "entryPoint": 1338,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_payable": {
                  "entryPoint": 953,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 562,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_address": {
                  "entryPoint": 1760,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 3342,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_memory_ptr": {
                  "entryPoint": 3293,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral": {
                  "entryPoint": 2200,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_972b": {
                  "entryPoint": 2739,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_cc2e": {
                  "entryPoint": 3099,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
                  "entryPoint": 3073,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 2434,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 575,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral": {
                  "entryPoint": 2226,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_972b": {
                  "entryPoint": 2765,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 1036,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_bytes": {
                  "entryPoint": 2878,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_string": {
                  "entryPoint": 1092,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 556,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_bytes": {
                  "entryPoint": 1237,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_allocation_size_string": {
                  "entryPoint": 1057,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_bytes": {
                  "entryPoint": 1873,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_string": {
                  "entryPoint": 3252,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 2113,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_array_index_range_access_bytes_calldata": {
                  "entryPoint": 855,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 2
                },
                "cleanup_address": {
                  "entryPoint": 26,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_address_payable": {
                  "entryPoint": 905,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes32": {
                  "entryPoint": 373,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes4": {
                  "entryPoint": 43,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 460,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 808,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by_1": {
                  "entryPoint": 1686,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by": {
                  "entryPoint": 370,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by_1": {
                  "entryPoint": 1959,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 15,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 811,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_ADMIN_SLOT": {
                  "entryPoint": 410,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_IMPLEMENTATION_SLOT": {
                  "entryPoint": 1990,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_address_payable_to_address": {
                  "entryPoint": 1024,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 2319,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_bytes_calldata_slice_to_bytes_calldata": {
                  "entryPoint": 892,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 2101,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_bytes32": {
                  "entryPoint": 1962,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 2073,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 817,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_stringliteral_9fdc_to_string": {
                  "entryPoint": 2618,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_c5d2_to_bytes": {
                  "entryPoint": 1128,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_bytes32": {
                  "entryPoint": 382,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint256": {
                  "entryPoint": 1689,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 1012,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 984,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_calldata_to_memory_with_cleanup": {
                  "entryPoint": 1272,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_literal_to_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398": {
                  "entryPoint": 2593,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_literal_to_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470": {
                  "entryPoint": 1115,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 3256,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 471,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_returndata": {
                  "entryPoint": 2901,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 629,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun": {
                  "entryPoint": null,
                  "id": 1032,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_": {
                  "entryPoint": null,
                  "id": 1024,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun__fallback": {
                  "entryPoint": 543,
                  "id": 1016,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_changeAdmin": {
                  "entryPoint": 1796,
                  "id": 894,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_delegate": {
                  "entryPoint": 1651,
                  "id": 997,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_dispatchAdmin": {
                  "entryPoint": 739,
                  "id": 6527,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchChangeAdmin": {
                  "entryPoint": 1139,
                  "id": 6576,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchImplementation": {
                  "entryPoint": 670,
                  "id": 6547,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchUpgradeTo": {
                  "entryPoint": 1529,
                  "id": 6610,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchUpgradeToAndCall": {
                  "entryPoint": 1443,
                  "id": 6642,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_fallback": {
                  "entryPoint": 55,
                  "id": 6507,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_functionDelegateCall": {
                  "entryPoint": 2629,
                  "id": 1830,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_functionDelegateCall_1859": {
                  "entryPoint": 2944,
                  "id": 1859,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_getAddressSlot": {
                  "entryPoint": 1628,
                  "id": 2078,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getAdmin": {
                  "entryPoint": 504,
                  "id": 851,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_getImplementation": {
                  "entryPoint": 2034,
                  "id": 712,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_implementation": {
                  "entryPoint": 1631,
                  "id": 6360,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_isContract": {
                  "entryPoint": 3000,
                  "id": 1631,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_requireZeroValue": {
                  "entryPoint": 1729,
                  "id": 6664,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_revert": {
                  "entryPoint": 3367,
                  "id": 1942,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_setAdmin": {
                  "entryPoint": 2366,
                  "id": 877,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setImplementation": {
                  "entryPoint": 2831,
                  "id": 736,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeTo": {
                  "entryPoint": 2440,
                  "id": 751,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeToAndCall": {
                  "entryPoint": 1877,
                  "id": 781,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_verifyCallResultFromTarget": {
                  "entryPoint": 3165,
                  "id": 1898,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 814,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 607,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 2331,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 491,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper": {
                  "entryPoint": 1717,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral": {
                  "entryPoint": 2251,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_972b": {
                  "entryPoint": 2790,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_cc2e": {
                  "entryPoint": 3124,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
                  "entryPoint": 1227,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_46e3e63c93837e9efa638abb3b4e76ced8c11259a873f1381a0abdf6ae6a823c": {
                  "entryPoint": 850,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_7678404c0552a58cf14944d1a786cf4c81aab3563e2735cb332aee47bbb57c4a": {
                  "entryPoint": 845,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
                  "entryPoint": 1232,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
                  "entryPoint": 900,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 895,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 597,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 376,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 454,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "store_literal_in_memory_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5": {
                  "entryPoint": 2122,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65": {
                  "entryPoint": 2661,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398": {
                  "entryPoint": 2515,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
                  "entryPoint": 3033,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 2292,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 2334,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address_payable": {
                  "entryPoint": 917,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 365,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 2995,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bytes": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052361561003757610037565b60018060a01b031690565b6100239061000f565b90565b606090565b63ffffffff60e01b1690565b3361005161004b6100466101f8565b61001a565b9161001a565b1460001461016857610061610026565b5063ffffffff60e01b6000351680610088610082631b2ce7f360e11b61002b565b9161002b565b146000146100a257506100996105f9565b5b602081519101f35b806100bc6100b663278f794360e11b61002b565b9161002b565b146000146100d357506100cd6105a3565b5b61009a565b806100ed6100e76308f2839760e41b61002b565b9161002b565b1460001461010457506100fe610473565b5b6100ce565b8061011e6101186303e1469160e61b61002b565b9161002b565b14600014610135575061012f6102e3565b5b6100ff565b61014e610148635c60da1b60e01b61002b565b9161002b565b146000146101635761015e61029e565b610130565b61021f565b61021f565b600090565b90565b90565b60001b90565b61019261018d61019792610172565b610178565b610175565b90565b6101c37fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610361017e565b90565b60001c90565b60018060a01b031690565b6101e36101e8916101c6565b6101cc565b90565b6101f590546101d7565b90565b61020061016d565b5061021c600061021661021161019a565b61065c565b016101eb565b90565b61022761065f565b610673565b60405190565b61023b9061001a565b9052565b919061025390600060208501940190610232565b565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061027f90610255565b810190811067ffffffffffffffff82111761029957604052565b61025f565b6102a6610026565b506102af6106c1565b6102d16102e06102bd61065f565b6102c561022c565b9283916020830161023f565b60208201810382520382610275565b90565b6102eb610026565b506102f46106c1565b6103166103256103026101f8565b61030a61022c565b9283916020830161023f565b60208201810382520382610275565b90565b90565b90565b90565b61034561034061034a92610328565b61032e565b61032b565b90565b600080fd5b600080fd5b90939293848311610377578411610372576001820201920390565b610352565b61034d565b91565b600080fd5b600080fd5b6103929061000f565b90565b61039e81610389565b036103a557565b600080fd5b905035906103b782610395565b565b906020828203126103d3576103d0916000016103aa565b90565b61037f565b6103ec6103e76103f19261000f565b61032e565b61000f565b90565b6103fd906103d8565b90565b610409906103f4565b90565b9061041f61041861022c565b9283610275565b565b67ffffffffffffffff811161043f5761043b602091610255565b0190565b61025f565b9061045661045183610421565b61040c565b918252565b6104656000610444565b90565b61047061045b565b90565b61047b610026565b506104846106c1565b6104c06104bb6104b66104ae6104a86000366104a06004610331565b908092610357565b9061037c565b8101906103b9565b610400565b610704565b6104c8610468565b90565b600080fd5b600080fd5b67ffffffffffffffff81116104f3576104ef602091610255565b0190565b61025f565b90826000939282370152565b90929192610519610514826104d5565b61040c565b9381855260208501908284011161053557610533926104f8565b565b6104d0565b9080601f830112156105585781602061055593359101610504565b90565b6104cb565b91909160408184031261059e5761057783600083016103aa565b92602082013567ffffffffffffffff811161059957610596920161053a565b90565b610384565b61037f565b6105ab610026565b506105ee6105e56105de6105d66105d06000366105c86004610331565b908092610357565b9061037c565b81019061055d565b9190610400565b90600191610755565b6105f6610468565b90565b610601610026565b5061060a6106c1565b61065161064161063c61063461062e6000366106266004610331565b908092610357565b9061037c565b8101906103b9565b610400565b610649610468565b600091610755565b610659610468565b90565b90565b61066761016d565b506106706107f2565b90565b60008091368280378136915af43d6000803e600014610691573d6000f35b3d6000fd5b90565b6106ad6106a86106b292610696565b61032e565b61032b565b90565b156106bc57565b600080fd5b6106de346106d86106d26000610699565b9161032b565b146106b5565b565b9160206107029294936106fb60408201966000830190610232565b0190610232565b565b61074f906107106101f8565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9161074761073e61022c565b928392836106e0565b0390a161093e565b565b5190565b9161075f83610988565b61076882610751565b61077b6107756000610699565b9161032b565b1190811561079f575b5061078e575b5050565b61079791610a45565b50388061078a565b905038610784565b90565b6107be6107b96107c3926107a7565b610178565b610175565b90565b6107ef7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6107aa565b90565b6107fa61016d565b50610816600061081061080b6107c6565b61065c565b016101eb565b90565b61082d61082861083292610696565b61032e565b61000f565b90565b61083e90610819565b90565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b6108a56026604092610841565b6108ae8161084a565b0190565b6108c89060208101906000818303910152610898565b90565b156108d257565b6108da61022c565b62461bcd60e51b8152806108f0600482016108b2565b0390fd5b9061090560018060a01b0391610178565b9181191691161790565b610918906103f4565b90565b90565b9061093361092e61093a9261090f565b61091b565b82546108f4565b9055565b610980906109688161096161095b6109566000610835565b61001a565b9161001a565b14156108cb565b600061097a61097561019a565b61065c565b0161091e565b565b60000190565b61099181610b0f565b6109bb7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9161090f565b906109c461022c565b806109ce81610982565b0390a2565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610a2b6027610444565b90610a38602083016109d3565b565b610a42610a21565b90565b90610a6291610a52610026565b5090610a5c610a3a565b91610b80565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b610ac0602d604092610841565b610ac981610a65565b0190565b610ae39060208101906000818303910152610ab3565b90565b15610aed57565b610af561022c565b62461bcd60e51b815280610b0b60048201610acd565b0390fd5b610b3c90610b24610b1f82610bb8565b610ae6565b6000610b36610b316107c6565b61065c565b0161091e565b565b90610b50610b4b836104d5565b61040c565b918252565b3d600014610b7257610b663d610b3e565b903d6000602084013e5b565b610b7a610026565b90610b70565b9091600080610bb094610b91610026565b508490602081019051915af491610ba6610b55565b9092909192610c5d565b90565b600090565b610bc0610bb3565b503b610bd5610bcf6000610699565b9161032b565b1190565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610c0e601d602092610841565b610c1781610bd9565b0190565b610c319060208101906000818303910152610c01565b90565b15610c3b57565b610c4361022c565b62461bcd60e51b815280610c5960048201610c1b565b0390fd5b919290610c68610026565b50600014610cae5750610c7a82610751565b610c8d610c876000610699565b9161032b565b14610c97575b5090565b610ca3610ca891610bb8565b610c34565b38610c93565b82610d27565b5190565b60005b838110610ccc575050906000910152565b806020918301518185015201610cbb565b610cfc610d05602093610d0a93610cf381610cb4565b93848093610841565b95869101610cb8565b610255565b0190565b610d249160208201916000818403910152610cdd565b90565b90610d3182610751565b610d44610d3e6000610699565b9161032b565b11600014610d555750805190602001fd5b610d7690610d6161022c565b91829162461bcd60e51b835260048301610d0e565b0390fdfea26469706673582212204e42c1b81ea1dd5dcc8fbcb8bfdf933e9239705676a402a624342386fe3fb73064736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x37 JUMPI PUSH2 0x37 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x23 SWAP1 PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST CALLER PUSH2 0x51 PUSH2 0x4B PUSH2 0x46 PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x1A JUMP JUMPDEST SWAP2 PUSH2 0x1A JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x168 JUMPI PUSH2 0x61 PUSH2 0x26 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x88 PUSH2 0x82 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0xA2 JUMPI POP PUSH2 0x99 PUSH2 0x5F9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0xBC PUSH2 0xB6 PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0xD3 JUMPI POP PUSH2 0xCD PUSH2 0x5A3 JUMP JUMPDEST JUMPDEST PUSH2 0x9A JUMP JUMPDEST DUP1 PUSH2 0xED PUSH2 0xE7 PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x104 JUMPI POP PUSH2 0xFE PUSH2 0x473 JUMP JUMPDEST JUMPDEST PUSH2 0xCE JUMP JUMPDEST DUP1 PUSH2 0x11E PUSH2 0x118 PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x135 JUMPI POP PUSH2 0x12F PUSH2 0x2E3 JUMP JUMPDEST JUMPDEST PUSH2 0xFF JUMP JUMPDEST PUSH2 0x14E PUSH2 0x148 PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x163 JUMPI PUSH2 0x15E PUSH2 0x29E JUMP JUMPDEST PUSH2 0x130 JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x192 PUSH2 0x18D PUSH2 0x197 SWAP3 PUSH2 0x172 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST PUSH2 0x175 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1C3 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x1E8 SWAP2 PUSH2 0x1C6 JUMP JUMPDEST PUSH2 0x1CC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F5 SWAP1 SLOAD PUSH2 0x1D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x200 PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x21C PUSH1 0x0 PUSH2 0x216 PUSH2 0x211 PUSH2 0x19A JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x1EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x227 PUSH2 0x65F JUMP JUMPDEST PUSH2 0x673 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x23B SWAP1 PUSH2 0x1A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x253 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x27F SWAP1 PUSH2 0x255 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x299 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST PUSH2 0x2A6 PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x2AF PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x2E0 PUSH2 0x2BD PUSH2 0x65F JUMP JUMPDEST PUSH2 0x2C5 PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x23F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x275 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2EB PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x2F4 PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x325 PUSH2 0x302 PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x30A PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x23F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x275 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x345 PUSH2 0x340 PUSH2 0x34A SWAP3 PUSH2 0x328 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0x32B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x377 JUMPI DUP5 GT PUSH2 0x372 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST PUSH2 0x34D JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x392 SWAP1 PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x39E DUP2 PUSH2 0x389 JUMP JUMPDEST SUB PUSH2 0x3A5 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x3B7 DUP3 PUSH2 0x395 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x3D3 JUMPI PUSH2 0x3D0 SWAP2 PUSH1 0x0 ADD PUSH2 0x3AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x37F JUMP JUMPDEST PUSH2 0x3EC PUSH2 0x3E7 PUSH2 0x3F1 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FD SWAP1 PUSH2 0x3D8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 SWAP1 PUSH2 0x3F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x41F PUSH2 0x418 PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x275 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x43F JUMPI PUSH2 0x43B PUSH1 0x20 SWAP2 PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 PUSH2 0x456 PUSH2 0x451 DUP4 PUSH2 0x421 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x465 PUSH1 0x0 PUSH2 0x444 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x470 PUSH2 0x45B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x47B PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x484 PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x4C0 PUSH2 0x4BB PUSH2 0x4B6 PUSH2 0x4AE PUSH2 0x4A8 PUSH1 0x0 CALLDATASIZE PUSH2 0x4A0 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3B9 JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH2 0x704 JUMP JUMPDEST PUSH2 0x4C8 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4F3 JUMPI PUSH2 0x4EF PUSH1 0x20 SWAP2 PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x519 PUSH2 0x514 DUP3 PUSH2 0x4D5 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x535 JUMPI PUSH2 0x533 SWAP3 PUSH2 0x4F8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4D0 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x558 JUMPI DUP2 PUSH1 0x20 PUSH2 0x555 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x504 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4CB JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x59E JUMPI PUSH2 0x577 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x3AA JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x599 JUMPI PUSH2 0x596 SWAP3 ADD PUSH2 0x53A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x384 JUMP JUMPDEST PUSH2 0x37F JUMP JUMPDEST PUSH2 0x5AB PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x5EE PUSH2 0x5E5 PUSH2 0x5DE PUSH2 0x5D6 PUSH2 0x5D0 PUSH1 0x0 CALLDATASIZE PUSH2 0x5C8 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x55D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x400 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0x755 JUMP JUMPDEST PUSH2 0x5F6 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x601 PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x60A PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x651 PUSH2 0x641 PUSH2 0x63C PUSH2 0x634 PUSH2 0x62E PUSH1 0x0 CALLDATASIZE PUSH2 0x626 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3B9 JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH2 0x649 PUSH2 0x468 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x755 JUMP JUMPDEST PUSH2 0x659 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x667 PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x670 PUSH2 0x7F2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0x691 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6A8 PUSH2 0x6B2 SWAP3 PUSH2 0x696 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0x32B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x6BC JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6DE CALLVALUE PUSH2 0x6D8 PUSH2 0x6D2 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST EQ PUSH2 0x6B5 JUMP JUMPDEST JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x702 SWAP3 SWAP5 SWAP4 PUSH2 0x6FB PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x74F SWAP1 PUSH2 0x710 PUSH2 0x1F8 JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x747 PUSH2 0x73E PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x6E0 JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0x93E JUMP JUMPDEST JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x75F DUP4 PUSH2 0x988 JUMP JUMPDEST PUSH2 0x768 DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0x77B PUSH2 0x775 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0x79F JUMPI JUMPDEST POP PUSH2 0x78E JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x797 SWAP2 PUSH2 0xA45 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0x78A JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x784 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7BE PUSH2 0x7B9 PUSH2 0x7C3 SWAP3 PUSH2 0x7A7 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST PUSH2 0x175 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7EF PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x7AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7FA PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x816 PUSH1 0x0 PUSH2 0x810 PUSH2 0x80B PUSH2 0x7C6 JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x1EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x82D PUSH2 0x828 PUSH2 0x832 SWAP3 PUSH2 0x696 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x83E SWAP1 PUSH2 0x819 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x8A5 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0x8AE DUP2 PUSH2 0x84A JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x8C8 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x898 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x8D2 JUMPI JUMP JUMPDEST PUSH2 0x8DA PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x8F0 PUSH1 0x4 DUP3 ADD PUSH2 0x8B2 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x905 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x178 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x3F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x933 PUSH2 0x92E PUSH2 0x93A SWAP3 PUSH2 0x90F JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST DUP3 SLOAD PUSH2 0x8F4 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x980 SWAP1 PUSH2 0x968 DUP2 PUSH2 0x961 PUSH2 0x95B PUSH2 0x956 PUSH1 0x0 PUSH2 0x835 JUMP JUMPDEST PUSH2 0x1A JUMP JUMPDEST SWAP2 PUSH2 0x1A JUMP JUMPDEST EQ ISZERO PUSH2 0x8CB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x97A PUSH2 0x975 PUSH2 0x19A JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x91E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x991 DUP2 PUSH2 0xB0F JUMP JUMPDEST PUSH2 0x9BB PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x90F JUMP JUMPDEST SWAP1 PUSH2 0x9C4 PUSH2 0x22C JUMP JUMPDEST DUP1 PUSH2 0x9CE DUP2 PUSH2 0x982 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xA2B PUSH1 0x27 PUSH2 0x444 JUMP JUMPDEST SWAP1 PUSH2 0xA38 PUSH1 0x20 DUP4 ADD PUSH2 0x9D3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xA42 PUSH2 0xA21 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xA62 SWAP2 PUSH2 0xA52 PUSH2 0x26 JUMP JUMPDEST POP SWAP1 PUSH2 0xA5C PUSH2 0xA3A JUMP JUMPDEST SWAP2 PUSH2 0xB80 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xAC0 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0xAC9 DUP2 PUSH2 0xA65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xAE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xAB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xAED JUMPI JUMP JUMPDEST PUSH2 0xAF5 PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xB0B PUSH1 0x4 DUP3 ADD PUSH2 0xACD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xB3C SWAP1 PUSH2 0xB24 PUSH2 0xB1F DUP3 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB36 PUSH2 0xB31 PUSH2 0x7C6 JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x91E JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0xB50 PUSH2 0xB4B DUP4 PUSH2 0x4D5 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0xB72 JUMPI PUSH2 0xB66 RETURNDATASIZE PUSH2 0xB3E JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0xB7A PUSH2 0x26 JUMP JUMPDEST SWAP1 PUSH2 0xB70 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0xBB0 SWAP5 PUSH2 0xB91 PUSH2 0x26 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0xBA6 PUSH2 0xB55 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0xC5D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xBC0 PUSH2 0xBB3 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0xBD5 PUSH2 0xBCF PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xC0E PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0xC17 DUP2 PUSH2 0xBD9 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xC31 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xC01 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xC3B JUMPI JUMP JUMPDEST PUSH2 0xC43 PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC59 PUSH1 0x4 DUP3 ADD PUSH2 0xC1B JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0xC68 PUSH2 0x26 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0xCAE JUMPI POP PUSH2 0xC7A DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0xC8D PUSH2 0xC87 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST EQ PUSH2 0xC97 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0xCA3 PUSH2 0xCA8 SWAP2 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0xC34 JUMP JUMPDEST CODESIZE PUSH2 0xC93 JUMP JUMPDEST DUP3 PUSH2 0xD27 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0xCCC JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0xCBB JUMP JUMPDEST PUSH2 0xCFC PUSH2 0xD05 PUSH1 0x20 SWAP4 PUSH2 0xD0A SWAP4 PUSH2 0xCF3 DUP2 PUSH2 0xCB4 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x841 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0xCB8 JUMP JUMPDEST PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD24 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xCDD JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xD31 DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0xD44 PUSH2 0xD3E PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0xD55 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0xD76 SWAP1 PUSH2 0xD61 PUSH2 0x22C JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0xD0E JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E TIMESTAMP 0xC1 0xB8 0x1E LOG1 0xDD TSTORE 0xCC DUP16 0xBC 0xB8 0xBF 0xDF SWAP4 RETURNDATACOPY SWAP3 CODECOPY PUSH17 0x5676A402A624342386FE3FB73064736F6C PUSH4 0x4300081B STOP CALLER ",
              "sourceMap": "2857:4583:35:-:0;;;;;2853:63:8;2857:4583:35;2629:64:8;:::i;2857:4583:35:-;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::o;:::-;;;;;;:::o;3518:1089::-;3579:10;:25;;3593:11;;:::i;:::-;3579:25;:::i;:::-;;;:::i;:::-;;3575:1026;;;;3620:16;;:::i;:::-;2857:4583;;;;3668:7;;;3693:8;:59;;3705:47;;;3693:59;:::i;:::-;;;:::i;:::-;;3689:766;;;;3778:20;;;:::i;:::-;3689:766;4468:75;;;;;;3689:766;3823:8;:66;;3835:54;;;3823:66;:::i;:::-;;;:::i;:::-;;3819:636;;;;3915:27;;;:::i;:::-;3819:636;3689:766;;3819:636;3967:8;:61;;3979:49;;;3967:61;:::i;:::-;;;:::i;:::-;;3963:492;;;;4054:22;;;:::i;:::-;3963:492;3819:636;;3963:492;4101:8;:55;;4113:43;;;4101:55;:::i;:::-;;;:::i;:::-;;4097:358;;;;4182:16;;;:::i;:::-;4097:358;3963:492;;4097:358;4223:64;;4235:52;;;4223:64;:::i;:::-;;;:::i;:::-;;4219:236;;;;4313:25;;:::i;:::-;4097:358;;4219:236;;:::i;3575:1026::-;;:::i;2857:4583::-;;;:::o;:::-;;:::o;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;3616:106:7:-;3656:66;;;:::i;:::-;3616:106;:::o;3656:66::-;;;;:::o;:::-;2857:4583:35;;;;;3656:66:7;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;3784:122::-;3828:7;;:::i;:::-;3881:11;3854:45;;:39;3881:11;;:::i;:::-;3854:39;:::i;:::-;:45;;:::i;:::-;3847:52;:::o;2322:110:8:-;2407:17;;:::i;:::-;;:::i;2857:4583:35:-;;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;5483:198::-;5535:12;;:::i;:::-;;;;:::i;:::-;5648:26;;5614:17;;:::i;:::-;5648:26;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;5641:33;:::o;4958:165::-;5001:12;;:::i;:::-;;;;:::i;:::-;5099:17;;5071:11;;:::i;:::-;5099:17;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;5092:24;:::o;2857:4583::-;;:::o;:::-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::i;:::-;;:::o;5792:216::-;5841:12;;:::i;:::-;;;;:::i;:::-;5972:8;5895:54;5914:35;;5925:12;:8;;:12;5934:1;5925:12;:::i;:::-;;;;;:::i;:::-;5914:35;;:::i;:::-;;;;;:::i;:::-;5895:54;:::i;:::-;5972:8;:::i;:::-;5992:9;;:::i;:::-;;:::o;2857:4583::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;6622:254::-;6676:12;;:::i;:::-;6760:8;6844:4;6700:91;6749:42;;6760:12;:8;;:12;6769:1;6760:12;:::i;:::-;;;;;:::i;:::-;6749:42;;:::i;:::-;;;;;:::i;:::-;6700:91;;;:::i;:::-;6838:4;6844;;;:::i;:::-;6860:9;;:::i;:::-;;:::o;6083:255::-;6130:12;;:::i;:::-;;;;:::i;:::-;6305:5;6184:63;6212:35;;6223:12;:8;;:12;6232:1;6223:12;:::i;:::-;;;;;:::i;:::-;6212:35;;:::i;:::-;;;;;:::i;:::-;6184:63;:::i;:::-;6294:9;;:::i;:::-;6305:5;;;:::i;:::-;6322:9;;:::i;:::-;;:::o;1859:190:17:-;;:::o;884:140:34:-;951:12;;:::i;:::-;982:35;;;:::i;:::-;975:42;:::o;948:895:8:-;1018:819;948:895;;1018:819;;;;;;;;;;;;;;;;;;;;;;;;2857:4583:35;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;7359:78;7407:23;7415:9;:14;;7428:1;7415:14;:::i;:::-;;;:::i;:::-;;7407:23;:::i;:::-;7359:78::o;2857:4583::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;:::o;4300:135:7:-;4419:8;4300:135;4377:11;;:::i;:::-;4390:8;4364:35;;;;;:::i;:::-;;;;;;:::i;:::-;;;;4419:8;:::i;:::-;4300:135::o;2857:4583:35:-;;;:::o;2057:265:7:-;;2176:17;;;:::i;:::-;2208:11;:4;:11;:::i;:::-;:15;;2222:1;2208:15;:::i;:::-;;;:::i;:::-;;:28;;;;;2057:265;2204:112;;;2057:265;;;:::o;2204:112::-;2252:53;2281:17;2252:53;:::i;:::-;;2204:112;;;;2208:28;2227:9;;2208:28;;;2857:4583:35;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;981:115:7:-;1030:66;;;:::i;:::-;981:115;:::o;1175:140::-;1228:7;;:::i;:::-;1281:20;1254:54;;:48;1281:20;;:::i;:::-;1254:48;:::i;:::-;:54;;:::i;:::-;1247:61;:::o;2857:4583:35:-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;3988:201:7:-;4126:56;3988:201;4043:73;4051:8;:22;;4063:10;4071:1;4063:10;:::i;:::-;4051:22;:::i;:::-;;;:::i;:::-;;;4043:73;:::i;:::-;4126:45;:39;4153:11;;:::i;:::-;4126:39;:::i;:::-;:45;:56;:::i;:::-;3988:201::o;2857:4583:35:-;;;;:::o;1771:152:7:-;1856:17;;;:::i;:::-;1889:27;;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;1771:152::o;2857:4583:35:-;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;;;;;;:::i;:::-;:::o;:::-;;;:::i;:::-;;:::o;6674:198:14:-;;6788:77;6674:198;6757:12;;:::i;:::-;6809:6;6817:4;6788:77;;:::i;:::-;;;:::i;:::-;6781:84;:::o;2857:4583:35:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;1406:259:7;1584:74;1406:259;1479:95;1487:37;1506:17;1487:37;:::i;:::-;1479:95;:::i;:::-;1584:54;:48;1611:20;;:::i;:::-;1584:48;:::i;:::-;:54;:74;:::i;:::-;1406:259::o;2857:4583:35:-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;7058:325:14;;;7265:25;7058:325;7307:69;7058:325;7199:12;;:::i;:::-;7265:6;;7285:4;7265:25;;;;;;;;;;;:::i;:::-;7334:6;7342:7;7351:10;7363:12;7307:69;;:::i;:::-;7300:76;:::o;2857:4583:35:-;;;:::o;1412:320:14:-;1472:4;;:::i;:::-;1702:7;:19;:23;;1724:1;1702:23;:::i;:::-;;;:::i;:::-;;1695:30;:::o;2857:4583:35:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;7671:628:14;;;;7851:12;;:::i;:::-;7879:7;7875:418;;;;7906:10;:17;:10;:17;:::i;:::-;:22;;7927:1;7906:22;:::i;:::-;;;:::i;:::-;;7902:286;;7875:418;8208:10;8201:17;:::o;7902:286::-;8121:18;8113:60;8132:6;8121:18;:::i;:::-;8113:60;:::i;:::-;7902:286;;;7875:418;8257:10;8269:12;:::i;2857:4583:35:-;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;8821:540:14:-;;8980:17;:10;:17;:::i;:::-;:21;;9000:1;8980:21;:::i;:::-;;;:::i;:::-;;8976:379;;;;9152:142;;;;;;;8976:379;9324:20;9331:12;9324:20;;:::i;:::-;2857:4583:35;;;;;;9324:20:14;;;;;;:::i;:::-;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract implements a proxy that is upgradeable by an admin. Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation. This potentially exposes the admin to a proxy selector attack. See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing]. When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors. The proxy selectors are: - 0x3659cfe6: upgradeTo - 0x4f1ef286: upgradeToAndCall - 0x8f283970: changeAdmin - 0xf851a440: admin - 0x5c60da1b: implementation NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to fully implement transparency without decoding reverts caused by selector clashes between the proxy and the implementation. WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler will not check that there are no selector conflicts, due to the note above. A selector clash between any new function and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":\"TransparentUpgradeableProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/tokens/ERC721/presets/items/IERC721Items.sol": {
        "IERC721Items": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidInitialization",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "mintSequential",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "totalSupply",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "mint(address,uint256)": {
                "params": {
                  "to": "Address to mint tokens to.",
                  "tokenId": "Token id to mint."
                }
              },
              "mintSequential(address,uint256)": {
                "params": {
                  "amount": "Amount of tokens to mint.",
                  "to": "Address to mint token to."
                }
              },
              "totalSupply()": {
                "returns": {
                  "totalSupply": "The total supply of tokens."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "mint(address,uint256)": "40c10f19",
              "mintSequential(address,uint256)": "2e73e0fd",
              "totalSupply()": "18160ddd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintSequential\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"mint(address,uint256)\":{\"params\":{\"to\":\"Address to mint tokens to.\",\"tokenId\":\"Token id to mint.\"}},\"mintSequential(address,uint256)\":{\"params\":{\"amount\":\"Amount of tokens to mint.\",\"to\":\"Address to mint token to.\"}},\"totalSupply()\":{\"returns\":{\"totalSupply\":\"The total supply of tokens.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"notice\":\"Invalid initialization error.\"}]},\"kind\":\"user\",\"methods\":{\"mint(address,uint256)\":{\"notice\":\"Mint tokens.\"},\"mintSequential(address,uint256)\":{\"notice\":\"Mint a sequential token.\"},\"totalSupply()\":{\"notice\":\"Get the total supply of tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/presets/items/IERC721Items.sol\":\"IERC721Items\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC721/presets/items/IERC721Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721ItemsFunctions {\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenId Token id to mint.\\n     */\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /**\\n     * Mint a sequential token.\\n     * @param to Address to mint token to.\\n     * @param amount Amount of tokens to mint.\\n     */\\n    function mintSequential(address to, uint256 amount) external;\\n\\n    /**\\n     * Get the total supply of tokens.\\n     * @return totalSupply The total supply of tokens.\\n     */\\n    function totalSupply() external view returns (uint256 totalSupply);\\n\\n}\\n\\ninterface IERC721ItemsSignals {\\n\\n    /**\\n     * Invalid initialization error.\\n     */\\n    error InvalidInitialization();\\n\\n}\\n\\ninterface IERC721Items is IERC721ItemsFunctions, IERC721ItemsSignals { }\\n\",\"keccak256\":\"0x3170e3d97e03d070d03c50cbe5a77ea84209bb8e2bcff3bd8fc55b88cc7f2ba1\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidInitialization()": [
                {
                  "notice": "Invalid initialization error."
                }
              ]
            },
            "kind": "user",
            "methods": {
              "mint(address,uint256)": {
                "notice": "Mint tokens."
              },
              "mintSequential(address,uint256)": {
                "notice": "Mint a sequential token."
              },
              "totalSupply()": {
                "notice": "Get the total supply of tokens."
              }
            },
            "version": 1
          }
        },
        "IERC721ItemsFunctions": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "mintSequential",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "totalSupply",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "mint(address,uint256)": {
                "params": {
                  "to": "Address to mint tokens to.",
                  "tokenId": "Token id to mint."
                }
              },
              "mintSequential(address,uint256)": {
                "params": {
                  "amount": "Amount of tokens to mint.",
                  "to": "Address to mint token to."
                }
              },
              "totalSupply()": {
                "returns": {
                  "totalSupply": "The total supply of tokens."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "mint(address,uint256)": "40c10f19",
              "mintSequential(address,uint256)": "2e73e0fd",
              "totalSupply()": "18160ddd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintSequential\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"mint(address,uint256)\":{\"params\":{\"to\":\"Address to mint tokens to.\",\"tokenId\":\"Token id to mint.\"}},\"mintSequential(address,uint256)\":{\"params\":{\"amount\":\"Amount of tokens to mint.\",\"to\":\"Address to mint token to.\"}},\"totalSupply()\":{\"returns\":{\"totalSupply\":\"The total supply of tokens.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mint(address,uint256)\":{\"notice\":\"Mint tokens.\"},\"mintSequential(address,uint256)\":{\"notice\":\"Mint a sequential token.\"},\"totalSupply()\":{\"notice\":\"Get the total supply of tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/presets/items/IERC721Items.sol\":\"IERC721ItemsFunctions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC721/presets/items/IERC721Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721ItemsFunctions {\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenId Token id to mint.\\n     */\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /**\\n     * Mint a sequential token.\\n     * @param to Address to mint token to.\\n     * @param amount Amount of tokens to mint.\\n     */\\n    function mintSequential(address to, uint256 amount) external;\\n\\n    /**\\n     * Get the total supply of tokens.\\n     * @return totalSupply The total supply of tokens.\\n     */\\n    function totalSupply() external view returns (uint256 totalSupply);\\n\\n}\\n\\ninterface IERC721ItemsSignals {\\n\\n    /**\\n     * Invalid initialization error.\\n     */\\n    error InvalidInitialization();\\n\\n}\\n\\ninterface IERC721Items is IERC721ItemsFunctions, IERC721ItemsSignals { }\\n\",\"keccak256\":\"0x3170e3d97e03d070d03c50cbe5a77ea84209bb8e2bcff3bd8fc55b88cc7f2ba1\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "mint(address,uint256)": {
                "notice": "Mint tokens."
              },
              "mintSequential(address,uint256)": {
                "notice": "Mint a sequential token."
              },
              "totalSupply()": {
                "notice": "Get the total supply of tokens."
              }
            },
            "version": 1
          }
        },
        "IERC721ItemsSignals": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidInitialization",
              "type": "error"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"notice\":\"Invalid initialization error.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/presets/items/IERC721Items.sol\":\"IERC721ItemsSignals\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC721/presets/items/IERC721Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721ItemsFunctions {\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenId Token id to mint.\\n     */\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /**\\n     * Mint a sequential token.\\n     * @param to Address to mint token to.\\n     * @param amount Amount of tokens to mint.\\n     */\\n    function mintSequential(address to, uint256 amount) external;\\n\\n    /**\\n     * Get the total supply of tokens.\\n     * @return totalSupply The total supply of tokens.\\n     */\\n    function totalSupply() external view returns (uint256 totalSupply);\\n\\n}\\n\\ninterface IERC721ItemsSignals {\\n\\n    /**\\n     * Invalid initialization error.\\n     */\\n    error InvalidInitialization();\\n\\n}\\n\\ninterface IERC721Items is IERC721ItemsFunctions, IERC721ItemsSignals { }\\n\",\"keccak256\":\"0x3170e3d97e03d070d03c50cbe5a77ea84209bb8e2bcff3bd8fc55b88cc7f2ba1\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidInitialization()": [
                {
                  "notice": "Invalid initialization error."
                }
              ]
            },
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/tokens/ERC721/utility/sale/ERC721Sale.sol": {
        "ERC721Sale": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "expected",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "actual",
                  "type": "uint256"
                }
              ],
              "name": "InsufficientPayment",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "remainingSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "InsufficientSupply",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidInitialization",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidSaleDetails",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "root",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "salt",
                  "type": "bytes32"
                }
              ],
              "name": "MerkleProofInvalid",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "SaleInactive",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "WithdrawFailed",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "ItemsMinted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "remainingSupply",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "cost",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "paymentToken",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint64",
                  "name": "startTime",
                  "type": "uint64"
                },
                {
                  "indexed": false,
                  "internalType": "uint64",
                  "name": "endTime",
                  "type": "uint64"
                },
                {
                  "indexed": false,
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                }
              ],
              "name": "SaleDetailsUpdated",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "delegateCall",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "onlyFallback",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "behaviorOnError",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Payload.Call",
                  "name": "call",
                  "type": "tuple"
                }
              ],
              "name": "acceptImplicitRequest",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "root",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "salt",
                  "type": "bytes32"
                }
              ],
              "name": "checkMerkleProof",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "items",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "initialize",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "itemsContract",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "paymentToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "maxTotal",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "saleDetails",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "remainingSupply",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "cost",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "paymentToken",
                      "type": "address"
                    },
                    {
                      "internalType": "uint64",
                      "name": "startTime",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "endTime",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "merkleRoot",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct IERC721SaleFunctions.SaleDetails",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "projectId",
                  "type": "bytes32"
                }
              ],
              "name": "setImplicitModeProjectId",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "validator",
                  "type": "address"
                }
              ],
              "name": "setImplicitModeValidator",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "remainingSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "cost",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "paymentToken",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "startTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "endTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                }
              ],
              "name": "setSaleDetails",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "withdrawERC20",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "withdrawETH",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "errors": {
              "InsufficientPayment(address,uint256,uint256)": [
                {
                  "params": {
                    "actual": "Actual amount of tokens.",
                    "currency": "Currency address. address(0) indicates ETH.",
                    "expected": "Expected amount of tokens."
                  }
                }
              ],
              "InsufficientSupply(uint256,uint256)": [
                {
                  "params": {
                    "amount": "Amount to mint.",
                    "remainingSupply": "Remaining supply."
                  }
                }
              ],
              "MerkleProofInvalid(bytes32,bytes32[],address,bytes32)": [
                {
                  "params": {
                    "addr": "Address to check.",
                    "proof": "Merkle proof.",
                    "root": "Merkle root.",
                    "salt": "Salt used to generate the merkle leaf."
                  }
                }
              ]
            },
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "params": {
                  "attestation": "The attestation data",
                  "call": "The call to validate",
                  "wallet": "The wallet's address"
                },
                "returns": {
                  "_0": "The hash of the implicit request if valid"
                }
              },
              "checkMerkleProof(bytes32,bytes32[],address,bytes32)": {
                "params": {
                  "addr": "Address to check.",
                  "proof": "Merkle proof.",
                  "root": "Merkle root.",
                  "salt": "Salt used to generate the merkle leaf."
                },
                "returns": {
                  "_0": "True if the proof is valid and has not yet been used by {addr}."
                }
              },
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "initialize(address,address,address,bytes32)": {
                "details": "This should be called immediately after deployment.",
                "params": {
                  "implicitModeProjectId": "Implicit session project id",
                  "implicitModeValidator": "Implicit session validator address",
                  "items": "The ERC-721 Items contract address",
                  "owner": "The owner of the contract"
                }
              },
              "mint(address,uint256,address,uint256,bytes32[])": {
                "details": "An empty proof is supplied when no proof is required.`paymentToken` must match the `paymentToken` in the sale details.",
                "params": {
                  "amount": "Amount of tokens to mint.",
                  "maxTotal": "Maximum amount of payment tokens.",
                  "paymentToken": "ERC20 token address to accept payment in. address(0) indicates ETH.",
                  "proof": "Merkle proof for allowlist minting.",
                  "to": "Address to mint tokens to."
                }
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "saleDetails()": {
                "returns": {
                  "_0": "Sale details."
                }
              },
              "setImplicitModeProjectId(bytes32)": {
                "params": {
                  "projectId": "The project id."
                }
              },
              "setImplicitModeValidator(address)": {
                "params": {
                  "validator": "The validator address."
                }
              },
              "setSaleDetails(uint256,uint256,address,uint64,uint64,bytes32)": {
                "details": "A zero end time indicates an inactive sale.",
                "params": {
                  "cost": "The amount of payment tokens to accept for each token minted.",
                  "endTime": "The end time of the sale. Tokens cannot be minted after this time.",
                  "merkleRoot": "The merkle root for allowlist minting.",
                  "paymentToken": "The ERC20 token address to accept payment in. address(0) indicates ETH.",
                  "remainingSupply": "The remaining number of tokens that can be minted by the items contract. 0 indicates unlimited supply.",
                  "startTime": "The start time of the sale. Tokens cannot be minted before this time."
                }
              },
              "supportsInterface(bytes4)": {
                "params": {
                  "interfaceId": "Interface id"
                },
                "returns": {
                  "_0": "True if supported"
                }
              },
              "withdrawERC20(address,address,uint256)": {
                "params": {
                  "to": "Address to withdraw to.",
                  "token": "The ERC20 token address.",
                  "value": "Amount to withdraw."
                }
              },
              "withdrawETH(address,uint256)": {
                "params": {
                  "to": "Address to withdraw to.",
                  "value": "Amount to withdraw."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601c57600e6020565b613afe61002c8239613afe90f35b6026565b60405190565b600080fdfe60806040526004361015610013575b610ba7565b61001e60003561015d565b806301ffc9a7146101585780630668d0bb146101535780630bb310de1461014e578063248a9ca3146101495780632f2ff15d146101445780633474a4a61461013f57806336568abe1461013a57806344004cc1146101355780634782f7791461013057806363acc14d1461012b5780638c17030f146101265780639010d07c1461012157806391d148541461011c5780639d043a6614610117578063a217fddf14610112578063a971e8421461010d578063bad4366114610108578063ca15c87314610103578063d547741f146100fe5763ed4c2ac70361000e57610b74565b610b40565b610b0b565b610aaf565b610a17565b6109e2565b61096f565b6108a4565b61086e565b6107e3565b610723565b6106a8565b610646565b6105d7565b6105a2565b610499565b610436565b61039a565b61034b565b6101ef565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b63ffffffff60e01b1690565b61018d81610178565b0361019457565b600080fd5b905035906101a682610184565b565b906020828203126101c2576101bf91600001610199565b90565b61016e565b151590565b6101d5906101c7565b9052565b91906101ed906000602085019401906101cc565b565b3461021f5761021b61020a6102053660046101a8565b610bb1565b610212610163565b918291826101d9565b0390f35b610169565b60018060a01b031690565b61023890610224565b90565b6102448161022f565b0361024b57565b600080fd5b9050359061025d8261023b565b565b90565b61026b8161025f565b0361027257565b600080fd5b9050359061028482610262565b565b600080fd5b600080fd5b600080fd5b909182601f830112156102cf5781359167ffffffffffffffff83116102ca5760200192602083028401116102c557565b610290565b61028b565b610286565b91909160a081840312610340576102ee8360008301610250565b926102fc8160208401610277565b9261030a8260408501610250565b926103188360608301610277565b92608082013567ffffffffffffffff811161033b576103379201610295565b9091565b610173565b61016e565b60000190565b6103656103593660046102d4565b94939093929192610d21565b61036d610163565b8061037781610345565b0390f35b906020828203126103955761039291600001610250565b90565b61016e565b346103c8576103b26103ad36600461037b565b610f69565b6103ba610163565b806103c481610345565b0390f35b610169565b90565b6103d9816103cd565b036103e057565b600080fd5b905035906103f2826103d0565b565b9060208282031261040e5761040b916000016103e5565b90565b61016e565b61041c906103cd565b9052565b919061043490600060208501940190610413565b565b346104665761046261045161044c3660046103f4565b610fc7565b610459610163565b91829182610420565b0390f35b610169565b9190604083820312610494578061048861049192600086016103e5565b93602001610250565b90565b61016e565b346104c8576104b26104ac36600461046b565b90611012565b6104ba610163565b806104c481610345565b0390f35b610169565b60009103126104d857565b61016e565b6104e69061025f565b9052565b6104f39061022f565b9052565b67ffffffffffffffff1690565b61050d906104f7565b9052565b61051a906103cd565b9052565b9060a08061058a93610538600082015160008601906104dd565b61054a602082015160208601906104dd565b61055c604082015160408601906104ea565b61056e60608201516060860190610504565b61058060808201516080860190610504565b0151910190610511565b565b91906105a090600060c0850194019061051e565b565b346105d2576105b23660046104cd565b6105ce6105bd61122e565b6105c5610163565b9182918261058c565b0390f35b610169565b34610606576105f06105ea36600461046b565b906112f7565b6105f8610163565b8061060281610345565b0390f35b610169565b90916060828403126106415761063e6106278460008501610250565b936106358160208601610250565b93604001610277565b90565b61016e565b346106755761065f61065936600461060b565b91611396565b610667610163565b8061067181610345565b0390f35b610169565b91906040838203126106a357806106976106a09260008601610250565b93602001610277565b90565b61016e565b346106d7576106c16106bb36600461067a565b9061149c565b6106c9610163565b806106d381610345565b0390f35b610169565b60808183031261071e576106f38260008301610250565b9261071b6107048460208501610250565b936107128160408601610250565b936060016103e5565b90565b61016e565b346107555761073f6107363660046106dc565b9291909161158a565b610747610163565b8061075181610345565b0390f35b610169565b610763816104f7565b0361076a57565b600080fd5b9050359061077c8261075a565b565b909160c0828403126107de576107978360008401610277565b926107a58160208501610277565b926107b38260408301610250565b926107db6107c4846060850161076f565b936107d2816080860161076f565b9360a0016103e5565b90565b61016e565b34610818576108026107f636600461077e565b94939093929192611a34565b61080a610163565b8061081481610345565b0390f35b610169565b9190604083820312610846578061083a61084392600086016103e5565b93602001610277565b90565b61016e565b6108549061022f565b9052565b919061086c9060006020850194019061084b565b565b3461089f5761089b61088a61088436600461081d565b90611a64565b610892610163565b91829182610858565b0390f35b610169565b346108d5576108d16108c06108ba36600461046b565b90611aa4565b6108c8610163565b918291826101d9565b0390f35b610169565b600080fd5b908160c09103126108ed5790565b6108da565b908160e09103126109005790565b6108da565b9160608383031261096a5761091d8260008501610250565b92602081013567ffffffffffffffff8111610965578361093e9183016108df565b92604082013567ffffffffffffffff81116109605761095d92016108f2565b90565b610173565b610173565b61016e565b346109a05761099c61098b610985366004610905565b91611dc7565b610993610163565b91829182610420565b0390f35b610169565b90565b60001b90565b6109c26109bd6109c7926109a5565b6109a8565b6103cd565b90565b6109d460006109ae565b90565b6109df6109ca565b90565b34610a12576109f23660046104cd565b610a0e6109fd6109d7565b610a05610163565b91829182610420565b0390f35b610169565b34610a4757610a273660046104cd565b610a43610a32611e68565b610a3a610163565b91829182610858565b0390f35b610169565b91608083830312610aaa57610a6482600085016103e5565b9260208101359167ffffffffffffffff8311610aa557610a8984610aa2948401610295565b939094610a998160408601610250565b936060016103e5565b90565b610173565b61016e565b34610ae357610adf610ace610ac5366004610a4c565b93929092611fa4565b610ad6610163565b918291826101d9565b0390f35b610169565b610af19061025f565b9052565b9190610b0990600060208501940190610ae8565b565b34610b3b57610b37610b26610b213660046103f4565b61204c565b610b2e610163565b91829182610af5565b0390f35b610169565b34610b6f57610b59610b5336600461046b565b9061209c565b610b61610163565b80610b6b81610345565b0390f35b610169565b34610ba257610b8c610b873660046103f4565b6120d0565b610b94610163565b80610b9e81610345565b0390f35b610169565b600080fd5b600090565b610bb9610bac565b5080610bd4610bce635f05bb8960e11b610178565b91610178565b148015610bf8575b908115610be8575b5090565b610bf29150612115565b38610be4565b50610c02816120db565b610bdc565b60081c90565b60018060a01b031690565b610c24610c2991610c07565b610c0d565b90565b610c369054610c18565b90565b90565b610c50610c4b610c5592610224565b610c39565b610224565b90565b610c6190610c3c565b90565b610c6d90610c58565b90565b610c7990610c3c565b90565b610c8590610c70565b90565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b90610cb790610c8d565b810190811067ffffffffffffffff821117610cd157604052565b610c97565b60e01b90565b6000910312610ce757565b61016e565b916020610d0e929493610d076040820196600083019061084b565b0190610ae8565b565b610d18610163565b3d6000823e3d90fd5b93610d34939591958693909192936122b6565b610d4e610d49610d446005610c2c565b610c64565b610c7c565b632e73e0fd828492803b15610eae57610d7b60008094610d86610d6f610163565b97889687958694610cd6565b845260048401610cec565b03925af19081610e81575b5015600014610e7c576001610dde575b5b907ff32d98590495ee51bacb93809409a188e7ab8268b70b4c969d9da3a883c539f791610dd9610dd0610163565b92839283610cec565b0390a1565b610df8610df3610dee6005610c2c565b610c64565b610c7c565b6340c10f19828492803b15610e7757610e2560008094610e30610e19610163565b97889687958694610cd6565b845260048401610cec565b03925af18015610e7257610e45575b50610da1565b610e659060003d8111610e6b575b610e5d8183610cad565b810190610cdc565b38610e3f565b503d610e53565b610d10565b610c88565b610da2565b610ea19060003d8111610ea7575b610e998183610cad565b810190610cdc565b38610d91565b503d610e8f565b610c88565b7f70649ec320b507febad3e8ef750e5f580b9ae32f9f50d4c7b121332c8197153090565b610ef090610eeb610ee6610eb3565b61251a565b610f54565b565b610efb90610c3c565b90565b610f0790610ef2565b90565b90610f1b60018060a01b03916109a8565b9181191691161790565b610f2e90610ef2565b90565b90565b90610f49610f44610f5092610f25565b610f31565b8254610f0a565b9055565b610f60610f6791610efe565b6003610f34565b565b610f7290610ed7565b565b600090565b610f82906103cd565b90565b90610f8f90610f79565b600052602052604060002090565b60001c90565b90565b610fb2610fb791610f9d565b610fa3565b90565b610fc49054610fa6565b90565b6001610fe0610fe692610fd8610f74565b506000610f85565b01610fba565b90565b9061100491610fff610ffa82610fc7565b61251a565b611006565b565b906110109161252e565b565b9061101c91610fe9565b565b9061103161102a610163565b9283610cad565b565b61103d60c061101e565b90565b600090565b600090565b600090565b600090565b61105c611033565b90602080808080808761106d611040565b815201611078611040565b815201611083611045565b81520161108e61104a565b81520161109961104a565b8152016110a461104f565b81525050565b6110b2611054565b90565b90565b6110c46110c991610f9d565b6110b5565b90565b6110d690546110b8565b90565b906110e39061025f565b9052565b6110f36110f891610f9d565b610c0d565b90565b61110590546110e7565b90565b906111129061022f565b9052565b60a01c90565b67ffffffffffffffff1690565b61113561113a91611116565b61111c565b90565b6111479054611129565b90565b90611154906104f7565b9052565b61116461116991610f9d565b61111c565b90565b6111769054611158565b90565b90611183906103cd565b9052565b906112206112176004611198611033565b946111b16111a8600083016110cc565b600088016110d9565b6111c96111c0600183016110cc565b602088016110d9565b6111e16111d8600283016110fb565b60408801611108565b6111f96111f06002830161113d565b6060880161114a565b6112116112086003830161116c565b6080880161114a565b01610fba565b60a08401611179565b565b61122b90611187565b90565b6112366110aa565b506112416006611222565b90565b60209181520190565b60207f20726f6c657320666f722073656c660000000000000000000000000000000000917f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201520152565b6112a8602f604092611244565b6112b18161124d565b0190565b6112cb906020810190600081830391015261129b565b90565b156112d557565b6112dd610163565b62461bcd60e51b8152806112f3600482016112b5565b0390fd5b906113249161131f8261131961131361130e612558565b61022f565b9161022f565b146112ce565b612565565b565b7f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec90565b90611365929161136061135b611326565b61251a565b61137f565b565b61137090610c3c565b90565b61137c90611367565b90565b9161138c61139493611373565b9190916125c0565b565b906113a1929161134a565b565b906113bd916113b86113b3611326565b61251a565b61144a565b565b905090565b6113d0600080926113bf565b0190565b6113dd906113c4565b90565b67ffffffffffffffff81116113fe576113fa602091610c8d565b0190565b610c97565b90611415611410836113e0565b61101e565b918252565b606090565b3d60001461143c576114303d611403565b903d6000602084013e5b565b61144461141a565b9061143a565b60006114799281929061145b610163565b9081611466816113d4565b03925af161147261141f565b50156101c7565b61147f57565b6000631d42c86760e21b81528061149860048201610345565b0390fd5b906114a6916113a3565b565b60ff1690565b6114ba6114bf91610f9d565b6114a8565b90565b6114cc90546114ae565b90565b60081b90565b906114e8610100600160a81b03916114cf565b9181191691161790565b6114fb90610c70565b90565b90565b9061151661151161151d926114f2565b6114fe565b82546114d5565b9055565b7f4c02318d8c3aadc98ccf18aebbf3126f651e0c3f6a1de5ff8edcf6724a2ad5c290565b9061155160ff916109a8565b9181191691161790565b611564906101c7565b90565b90565b9061157f61157a6115869261155b565b611567565b8254611545565b9055565b92909261159760056114c2565b6115f5576115a96115e7946005611501565b6115bb6115b46109ca565b829061252e565b6115cd6115c6611521565b829061252e565b6115df6115d8611326565b829061252e565b91909161260b565b6115f36001600561156a565b565b600063f92ee8a960e01b81528061160e60048201610345565b0390fd5b90611630959493929161162b611626611521565b61251a565b6118fd565b565b61164661164161164b926104f7565b610c39565b61025f565b90565b61166261165d611667926109a5565b610c39565b61025f565b90565b61167460c061101e565b90565b611681905161025f565b90565b90611691600019916109a8565b9181191691161790565b6116af6116aa6116b49261025f565b610c39565b61025f565b90565b90565b906116cf6116ca6116d69261169b565b6116b7565b8254611684565b9055565b6116e4905161022f565b90565b906116fc6116f7611703926114f2565b6114fe565b8254610f0a565b9055565b61171190516104f7565b90565b60a01b90565b9061173067ffffffffffffffff60a01b91611714565b9181191691161790565b61174e611749611753926104f7565b610c39565b6104f7565b90565b90565b9061176e6117696117759261173a565b611756565b825461171a565b9055565b9061178c67ffffffffffffffff916109a8565b9181191691161790565b906117ab6117a66117b29261173a565b611756565b8254611779565b9055565b6117c090516103cd565b90565b6117cc90610f9d565b90565b906117e46117df6117eb92610f79565b6117c3565b8254611684565b9055565b9061188060a06004611886946118146000820161180e60008801611677565b906116ba565b61182d6001820161182760208801611677565b906116ba565b61184660028201611840604088016116da565b906116e7565b61185f6002820161185960608801611707565b90611759565b6118786003820161187260808801611707565b90611796565b0192016117b6565b906117cf565b565b90611892916117ef565b565b61189d906104f7565b9052565b91946118ea6118f4929897956118e060a0966118d66118fb9a6118cc60c08a019e60008b0190610ae8565b6020890190610ae8565b604087019061084b565b6060850190611894565b6080830190611894565b0190610413565b565b91939092948161191561190f886104f7565b916104f7565b108015611a19575b6119fc578261193561192f600061164e565b9161025f565b146119df57826119a16119da9461199a876119918a6119888d61197f8b936119768c9761196d61196361166a565b9b60008d016110d9565b60208b016110d9565b60408901611108565b6060870161114a565b6080850161114a565b60a08301611179565b6006611888565b9394959190917fabec13ca1773eed55d54d2f64593c33fa520ee45cac73a162f13928a2ebee233966119d1610163565b968796876118a1565b0390a1565b60006310ba94e960e31b8152806119f860048201610345565b0390fd5b60006310ba94e960e31b815280611a1560048201610345565b0390fd5b5081611a2d611a274261025f565b91611632565b111561191d565b90611a429594939291611612565b565b600090565b90611a5390610f79565b600052602052604060002090565b90565b90611a84611a7f611a8993611a77611a44565b506001611a49565b611a61565b61265b565b90565b90611a96906114f2565b600052602052604060002090565b611acb916000611ac0611ac693611ab9610bac565b5082610f85565b01611a8c565b6114c2565b90565b60018060a01b031690565b611ae5611aea91610f9d565b611ace565b90565b611af79054611ad9565b90565b611b0390610c70565b90565b90505190611b13826103d0565b565b90602082820312611b2f57611b2c91600001611b06565b90565b61016e565b50611b43906020810190610250565b90565b50611b55906020810190610199565b90565b611b6190610178565b9052565b50611b749060208101906103e5565b90565b600080fd5b600080fd5b600080fd5b9035600160200382360303811215611bc757016020813591019167ffffffffffffffff8211611bc2576001820236038313611bbd57565b611b7c565b611b77565b611b81565b60209181520190565b90826000939282370152565b9190611bfb81611bf481611c0095611bcc565b8095611bd5565b610c8d565b0190565b9035600160400382360303811215611c1a570190565b611b81565b9035600160200382360303811215611c6057016020813591019167ffffffffffffffff8211611c5b576001820236038313611c5657565b611b7c565b611b77565b611b81565b60209181520190565b9190611c8881611c8181611c8d95611c65565b8095611bd5565b610c8d565b0190565b50611ca090602081019061076f565b90565b90611ce1906020611cd9611ccf60408401611cc16000880188611c1f565b908683036000880152611c6e565b9482810190611c91565b910190610504565b90565b611d8e91611d80611d7560c08301611d0c611d026000870187611b34565b60008601906104ea565b611d26611d1c6020870187611b46565b6020860190611b58565b611d40611d366040870187611b65565b6040860190610511565b611d5a611d506060870187611b65565b6060860190610511565b611d676080860186611b86565b908583036080870152611be1565b9260a0810190611c04565b9060a0818403910152611ca3565b90565b939290611dbd604091611dc594611db0606089019260008a019061084b565b8782036020890152611ce4565b940190610413565b565b9150602090611dd4610f74565b50611de7611de26003611aed565b611afa565b611e13633808a90b949294611e1e611dff6004610fba565b611e07610163565b97889687958695610cd6565b855260048501611d91565b03915afa908115611e6357600091611e35575b5090565b611e56915060203d8111611e5c575b611e4e8183610cad565b810190611b15565b38611e31565b503d611e44565b610d10565b611e70611a44565b50611e7b6005610c2c565b90565b90611e88906114f2565b600052602052604060002090565b90611ea090610f79565b600052602052604060002090565b60601b90565b611ebd90611eae565b90565b611ec990611eb4565b90565b611ed8611edd9161022f565b611ec0565b9052565b90565b611ef0611ef5916103cd565b611ee1565b9052565b601481611f0c611f149360209695611ecc565b018092611ee4565b0190565b60200190565b5190565b67ffffffffffffffff8111611f3a5760208091020190565b610c97565b90929192611f54611f4f82611f22565b61101e565b9381855260208086019202830192818411611f9157915b838310611f785750505050565b60208091611f8684866103e5565b815201920191611f6b565b610290565b611fa1913691611f3f565b90565b9093929192611fb1610bac565b50611fd9611fd3611fce611fc760028790611e7e565b8590611e96565b6114c2565b156101c7565b9485611fe8575b505050505090565b61203d95509061201f6120389392959294612010612004610163565b93849260208401611ef9565b60208201810382520382610cad565b61203161202b82611f1e565b91611f18565b2093611f96565b612694565b3880808080611fe0565b600090565b61206b6120666120709261205e612047565b506001611a49565b611a61565b6126be565b90565b9061208e9161208961208482610fc7565b61251a565b612090565b565b9061209a91612565565b565b906120a691612073565b565b6120c1906120bc6120b7610eb3565b61251a565b6120c3565b565b6120ce9060046117cf565b565b6120d9906120a8565b565b6120e3610bac565b50806120f86120f26000610178565b91610178565b14908115612105575b5090565b61210f91506126de565b38612101565b61211d610bac565b50612127816126de565b908115612133575b5090565b61213d915061271e565b3861212f565b91602061216592949361215e60408201966000830190610ae8565b0190610ae8565b565b634e487b7160e01b600052601160045260246000fd5b61218c6121929193929361025f565b9261025f565b820391821161219d57565b612167565b600090565b6121b66121bc9193929361025f565b9261025f565b916121c883820261025f565b9281840414901517156121d757565b612167565b6121e59061164e565b9052565b60409061221361221a94969593966122096060840198600085019061084b565b6020830190610ae8565b01906121dc565b565b60409061224661224d949695939661223c6060840198600085019061084b565b6020830190610ae8565b0190610ae8565b565b61226361225e612268926109a5565b610c39565b610224565b90565b6122749061224f565b90565b61228090610c70565b90565b6040906122ad6122b494969593966122a36060840198600085019061084b565b60208301906121dc565b0190610ae8565b565b91939290926122f06122cb600260060161113d565b6122ea6122e46122de600360060161116c565b92611632565b91611632565b9061275e565b6124fd5761230160006006016110cc565b61231361230d8561025f565b9161025f565b106124d0578291612361916123426123739561233c600060060191612337836110cc565b61217d565b906116ba565b61234f6004600601610fba565b9190339161235b6121a2565b93612855565b61236e60016006016110cc565b6121a7565b918161239361238d61238860026006016110fb565b61022f565b9161022f565b036124a257806123ab6123a58561025f565b9161025f565b1061247f5750806123cd6123c76123c2600061226b565b61022f565b9161022f565b1460001461241257346123e86123e28461025f565b9161025f565b036123f25750505b565b61240e346000938493630f55e7df60e11b85526004850161221c565b0390fd5b9034612427612421600061164e565b9161025f565b1160001461245c57612439600061226b565b600090612458346000938493630f55e7df60e11b855260048501612283565b0390fd5b61246861247a92611373565b903361247330612277565b9192612928565b6123f0565b8261249e8391926000938493630f55e7df60e11b85526004850161221c565b0390fd5b826124b060026006016110fb565b6124cc600080938493630f55e7df60e11b8552600485016121e9565b0390fd5b826124de60006006016110cc565b6124f96000928392639e4c446160e01b845260048401612143565b0390fd5b6000630fe219dd60e21b81528061251660048201610345565b0390fd5b61252c90612526612558565b90612ae4565b565b9061255061254b61255593612544818590612b7d565b6001611a49565b611a61565b612c63565b50565b612560611a44565b503390565b9061258761258261258c9361257b818590612c9e565b6001611a49565b611a61565b612d37565b50565b61259890610c70565b90565b63ffffffff1690565b6125b86125b36125bd9261259b565b610cd6565b610178565b90565b916126046004926125f561260995936125dc63a9059cbb6125a4565b926125e5610163565b9687946020860190815201610cec565b60208201810382520383610cad565b612ee5565b565b90612621612626939261261c610eb3565b61252e565b612f52565b565b90565b61263761263c91610f9d565b61169b565b90565b61265361264e6126589261025f565b610c39565b610224565b90565b6126876126826126919361267d600061268c95612676611a44565b5001612628565b612fea565b61262b565b61263f565b610c70565b90565b6126ae6126ba92936126b4926126a8610bac565b5061303f565b926103cd565b916103cd565b1490565b6126d660006126db926126cf612047565b5001612628565b6130aa565b90565b6126e6610bac565b50806127016126fb635a05180f60e01b610178565b91610178565b1490811561270e575b5090565b61271891506130c2565b3861270a565b612726610bac565b508061274161273b634e821d3360e11b610178565b91610178565b1490811561274e575b5090565b61275891506120db565b3861274a565b612766610bac565b508161277b612775600061164e565b9161025f565b149081156127ae575b50908115612791575b5090565b90506127a66127a0429261025f565b9161025f565b10153861278d565b90506127c36127bd429261025f565b9161025f565b1038612784565b60209181520190565b600080fd5b9037565b9091826127e8916127ca565b9160018060fb1b03811161280b578291602061280792029384916127d8565b0190565b6127d3565b9061284161284c916128539698979560609561283460808701936000880190610413565b85830360208701526127dc565b96604083019061084b565b0190610413565b565b92938361287361286d61286860006109ae565b6103cd565b916103cd565b03612880575b5050505050565b61289861289285848689918693611fa4565b156101c7565b6128c857505050906128b96128be926128b46001936002611e7e565b611e96565b61156a565b3880808080612879565b846128f1918593949190916128db610163565b9586956304cb8cd560e31b875260048701612810565b0390fd5b60409061291f61292694969593966129156060840198600085019061084b565b602083019061084b565b0190610ae8565b565b612975939161296160049461297093946129456323b872dd6125a4565b93919091612951610163565b97889560208701908152016128f5565b60208201810382520383610cad565b612ee5565b565b90565b61298e61298961299392612977565b610c39565b61025f565b90565b905090565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000910152565b6129cf60178092612996565b6129d88161299b565b0190565b5190565b60005b8381106129f4575050906000910152565b8060209183015181850152016129e3565b612a2a612a2192602092612a18816129dc565b94858093612996565b938491016129e0565b0190565b60007f206973206d697373696e6720726f6c6520000000000000000000000000000000910152565b612a6260118092612996565b612a6b81612a2e565b0190565b612a89612a949392612a83612a8e936129c3565b90612a05565b612a56565b90612a05565b90565b90565b612ab9612ac2602093612ac793612ab0816129dc565b93848093611244565b958691016129e0565b610c8d565b0190565b612ae19160208201916000818403910152612a9a565b90565b90612af9612af3838390611aa4565b156101c7565b612b01575050565b612b7991612b57612b30612b20612b1a612b5c95613155565b9361262b565b612b2a602061297a565b90613378565b91612b48612b3c610163565b93849260208401612a6f565b60208201810382520382610cad565b612a97565b612b64610163565b91829162461bcd60e51b835260048301612acb565b0390fd5b612b91612b8b828490611aa4565b156101c7565b612b9a575b5050565b612bbc6001612bb76000612baf818690610f85565b018590611a8c565b61156a565b90612bc5612558565b90612c02612bfc612bf67f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610f79565b926114f2565b926114f2565b92612c0b610163565b80612c1581610345565b0390a43880612b96565b612c2890610c3c565b90565b612c3f612c3a612c4492610224565b610c39565b61025f565b90565b612c5b612c56612c609261025f565b6109a8565b6103cd565b90565b90612c96612c90612c8b612c866000612c9b96612c7e610bac565b500194612c1f565b612c2b565b612c47565b91612628565b613598565b90565b612ca9818390611aa4565b612cb2575b5050565b612cd46000612ccf6000612cc7818690610f85565b018590611a8c565b61156a565b90612cdd612558565b90612d1a612d14612d0e7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95610f79565b926114f2565b926114f2565b92612d23610163565b80612d2d81610345565b0390a43880612cae565b90612d6a612d64612d5f612d5a6000612d6f96612d52610bac565b500194612c1f565b612c2b565b612c47565b91612628565b61368e565b90565b67ffffffffffffffff8111612d9057612d8c602091610c8d565b0190565b610c97565b90612da7612da283612d72565b61101e565b918252565b60007f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b612dde6020612d95565b90612deb60208301612dac565b565b612df5612dd4565b90565b612e01816101c7565b03612e0857565b600080fd5b90505190612e1a82612df8565b565b90602082820312612e3657612e3391600001612e0d565b90565b61016e565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201520152565b612e96602a604092611244565b612e9f81612e3b565b0190565b612eb99060208101906000818303910152612e89565b90565b15612ec357565b612ecb610163565b62461bcd60e51b815280612ee160048201612ea3565b0390fd5b612f2f91612ef5612f049261258f565b90612efe612ded565b91613798565b612f0d81611f1e565b612f20612f1a600061164e565b9161025f565b14908115612f31575b50612ebc565b565b612f4c91506020612f4182611f1e565b818301019101612e1c565b38612f29565b90612f69612f62612f7093610efe565b6003610f34565b60046117cf565b565b634e487b7160e01b600052603260045260246000fd5b5490565b600052602060002090565b612fa081612f88565b821015612fbb57612fb2600191612f8c565b91020190600090565b612f72565b1c90565b612fd4906008612fd99302612fc0565b610fa3565b90565b90612fe79154612fc4565b90565b61300991600061300392612ffc610f74565b5001612f97565b90612fdc565b90565b6001613018910161025f565b90565b5190565b906130298261301b565b81101561303a576020809102010190565b612f72565b9190613049610f74565b50613054600061164e565b905b8161307161306b6130668761301b565b61025f565b9161025f565b10156130a35761309761309d9161309161308c87869061301f565b6117b6565b906137bb565b9161300c565b90613056565b9192505090565b60006130bf916130b8612047565b5001612f88565b90565b6130ca610bac565b50806130e56130df637965db0b60e01b610178565b91610178565b149081156130f2575b5090565b6130fc91506137fb565b386130ee565b606090565b90565b60ff1690565b61312461311f61312992613107565b610c39565b61310a565b90565b6131366014613110565b90565b61314d6131486131529261310a565b610c39565b61025f565b90565b61317261316d61318892613167613102565b50612c1f565b612c2b565b61318261317d61312c565b613139565b90613378565b90565b90565b6131a261319d6131a79261318b565b610c39565b61025f565b90565b6131b96131bf9193929361025f565b9261025f565b82018092116131ca57565b612167565b369037565b906131f96131e183611403565b926020806131ef86936113e0565b92019103906131cf565b565b600360fc1b90565b9061320d82611f1e565b81101561321f57600160209102010190565b612f72565b600f60fb1b90565b90565b61324361323e6132489261322c565b610c39565b61025f565b90565b6132549061025f565b60008114613263576001900390565b612167565b6f181899199a1a9b1b9c1cb0b131b232b360811b90565b613287613268565b90565b90565b6132a161329c6132a69261328a565b610c39565b61025f565b90565b60f81b90565b90565b6132c66132c16132cb926132af565b610c39565b61310a565b90565b6132ed906132e76132e16132f29461310a565b9161025f565b90612fc0565b61025f565b90565b60007f537472696e67733a20686578206c656e67746820696e73756666696369656e74910152565b61332960208092611244565b613332816132f5565b0190565b61334c906020810190600081830391015261331d565b90565b1561335657565b61335e610163565b62461bcd60e51b81528061337460048201613336565b0390fd5b9190613382613102565b5061341c61340c6133b86133b36133a3600261339e879161318e565b6121a7565b6133ad600261318e565b906131aa565b6131d4565b926133c16131fb565b6133da856133d460009360001a9361164e565b90613203565b536133e3613224565b6133fc856133f660019360001a9361322f565b90613203565b53613407600261318e565b6121a7565b613416600161322f565b906131aa565b925b8361343261342c600161322f565b9161025f565b11156134995761344061327f565b8161344b600f61328d565b16916010831015613494576134676134889261348e941a6132a9565b6134778591889060001a92613203565b5361348260046132b2565b906132ce565b9361324b565b9261341e565b612f72565b6134c19293506134bc906134b66134b0600061164e565b9161025f565b1461334f565b612a97565b90565b90565b600052602060002090565b5490565b6134df816134d2565b8210156134fa576134f16001916134c7565b91020190600090565b612f72565b1b90565b9190600861351f910291613519600019846134ff565b926134ff565b9181191691161790565b919061353f61353a61354793610f79565b6117c3565b908354613503565b9055565b908154916801000000000000000083101561357b5782613573916001613579950181556134d6565b90613529565b565b610c97565b9061358a90610f79565b600052602052604060002090565b6135a0610bac565b506135b56135af828490613821565b156101c7565b6000146135f8576135ee6135f3926135d96135d2600085016134c4565b829061354b565b60016135e760008501612f88565b9301613580565b6116ba565b600190565b5050600090565b634e487b7160e01b600052603160045260246000fd5b61362791613621610f74565b91613529565b565b613632816134d2565b801561365357600190039061365061364a83836134d6565b90613615565b55565b6135ff565b919061366e6136696136769361169b565b6116b7565b908354613503565b9055565b61368c91613686612047565b91613658565b565b613696610bac565b506136ad6136a8600183018490613580565b6110cc565b90816136c26136bc600061164e565b9161025f565b14156000146137905761374292600161373d92846136eb6000966136e58561322f565b9061217d565b6137086136f9888501612f88565b6137028661322f565b9061217d565b8061371b6137158461025f565b9161025f565b03613747575b5050506137376137328683016134c4565b613629565b01613580565b61367a565b600190565b6137889261377a613766613760613783948c8901612f97565b90612fdc565b9361377485918c8901612f97565b90613529565b91858501613580565b6116ba565b388080613721565b505050600090565b906137b892916137a661141a565b50906137b2600061164e565b9161390d565b90565b6137c3610f74565b50806137d76137d1846103cd565b916103cd565b106000146137ed57906137e991613967565b5b90565b6137f691613967565b6137ea565b613803610bac565b5061381d6138176301ffc9a760e01b610178565b91610178565b1490565b61383f91600161383a92613833610bac565b5001613580565b6110cc565b61385261384c600061164e565b9161025f565b141590565b61386090610c70565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201520152565b6138be6026604092611244565b6138c781613863565b0190565b6138e190602081019060008183039101526138b1565b90565b156138eb57565b6138f3610163565b62461bcd60e51b815280613909600482016138cb565b0390fd5b9160008091613964959361391f61141a565b5061394661392c30613857565b3161393f6139398561025f565b9161025f565b10156138e4565b8591602082019151925af19161395a61141f565b9092909192613a02565b90565b61396f610f74565b50600052602052604060002090565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b6139b3601d602092611244565b6139bc8161397e565b0190565b6139d690602081019060008183039101526139a6565b90565b156139e057565b6139e8610163565b62461bcd60e51b8152806139fe600482016139c0565b0390fd5b919290613a0d61141a565b50600014613a535750613a1f82611f1e565b613a32613a2c600061164e565b9161025f565b14613a3c575b5090565b613a48613a4d91613aa7565b6139d9565b38613a38565b8290613a5e82611f1e565b613a71613a6b600061164e565b9161025f565b11600014613a825750805190602001fd5b613aa390613a8e610163565b91829162461bcd60e51b835260048301612acb565b0390fd5b613aaf610bac565b503b613ac4613abe600061164e565b9161025f565b119056fea2646970667358221220c204633b23276edd95aa322dbea2171da8b640438f81199e08fb87ec1d64aa7f64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x3AFE PUSH2 0x2C DUP3 CODECOPY PUSH2 0x3AFE SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0xBA7 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x15D JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x158 JUMPI DUP1 PUSH4 0x668D0BB EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0xBB310DE EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x149 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0x3474A4A6 EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x44004CC1 EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0x4782F779 EQ PUSH2 0x130 JUMPI DUP1 PUSH4 0x63ACC14D EQ PUSH2 0x12B JUMPI DUP1 PUSH4 0x8C17030F EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0x9D043A66 EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0xA971E842 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0xBAD43661 EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0xFE JUMPI PUSH4 0xED4C2AC7 SUB PUSH2 0xE JUMPI PUSH2 0xB74 JUMP JUMPDEST PUSH2 0xB40 JUMP JUMPDEST PUSH2 0xB0B JUMP JUMPDEST PUSH2 0xAAF JUMP JUMPDEST PUSH2 0xA17 JUMP JUMPDEST PUSH2 0x9E2 JUMP JUMPDEST PUSH2 0x96F JUMP JUMPDEST PUSH2 0x8A4 JUMP JUMPDEST PUSH2 0x86E JUMP JUMPDEST PUSH2 0x7E3 JUMP JUMPDEST PUSH2 0x723 JUMP JUMPDEST PUSH2 0x6A8 JUMP JUMPDEST PUSH2 0x646 JUMP JUMPDEST PUSH2 0x5D7 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST PUSH2 0x499 JUMP JUMPDEST PUSH2 0x436 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST PUSH2 0x34B JUMP JUMPDEST PUSH2 0x1EF JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH2 0x18D DUP2 PUSH2 0x178 JUMP JUMPDEST SUB PUSH2 0x194 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x1A6 DUP3 PUSH2 0x184 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x1C2 JUMPI PUSH2 0x1BF SWAP2 PUSH1 0x0 ADD PUSH2 0x199 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x1D5 SWAP1 PUSH2 0x1C7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1ED SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x1CC JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x21F JUMPI PUSH2 0x21B PUSH2 0x20A PUSH2 0x205 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A8 JUMP JUMPDEST PUSH2 0xBB1 JUMP JUMPDEST PUSH2 0x212 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x1D9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x238 SWAP1 PUSH2 0x224 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x244 DUP2 PUSH2 0x22F JUMP JUMPDEST SUB PUSH2 0x24B JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x25D DUP3 PUSH2 0x23B JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26B DUP2 PUSH2 0x25F JUMP JUMPDEST SUB PUSH2 0x272 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x284 DUP3 PUSH2 0x262 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x2CF JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x2CA JUMPI PUSH1 0x20 ADD SWAP3 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH2 0x2C5 JUMPI JUMP JUMPDEST PUSH2 0x290 JUMP JUMPDEST PUSH2 0x28B JUMP JUMPDEST PUSH2 0x286 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0xA0 DUP2 DUP5 SUB SLT PUSH2 0x340 JUMPI PUSH2 0x2EE DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x250 JUMP JUMPDEST SWAP3 PUSH2 0x2FC DUP2 PUSH1 0x20 DUP5 ADD PUSH2 0x277 JUMP JUMPDEST SWAP3 PUSH2 0x30A DUP3 PUSH1 0x40 DUP6 ADD PUSH2 0x250 JUMP JUMPDEST SWAP3 PUSH2 0x318 DUP4 PUSH1 0x60 DUP4 ADD PUSH2 0x277 JUMP JUMPDEST SWAP3 PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x33B JUMPI PUSH2 0x337 SWAP3 ADD PUSH2 0x295 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x365 PUSH2 0x359 CALLDATASIZE PUSH1 0x4 PUSH2 0x2D4 JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0xD21 JUMP JUMPDEST PUSH2 0x36D PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x377 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x395 JUMPI PUSH2 0x392 SWAP2 PUSH1 0x0 ADD PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH2 0x3B2 PUSH2 0x3AD CALLDATASIZE PUSH1 0x4 PUSH2 0x37B JUMP JUMPDEST PUSH2 0xF69 JUMP JUMPDEST PUSH2 0x3BA PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x3C4 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3D9 DUP2 PUSH2 0x3CD JUMP JUMPDEST SUB PUSH2 0x3E0 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x3F2 DUP3 PUSH2 0x3D0 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x40E JUMPI PUSH2 0x40B SWAP2 PUSH1 0x0 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST PUSH2 0x41C SWAP1 PUSH2 0x3CD JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x434 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x413 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x466 JUMPI PUSH2 0x462 PUSH2 0x451 PUSH2 0x44C CALLDATASIZE PUSH1 0x4 PUSH2 0x3F4 JUMP JUMPDEST PUSH2 0xFC7 JUMP JUMPDEST PUSH2 0x459 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x420 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x494 JUMPI DUP1 PUSH2 0x488 PUSH2 0x491 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x4C8 JUMPI PUSH2 0x4B2 PUSH2 0x4AC CALLDATASIZE PUSH1 0x4 PUSH2 0x46B JUMP JUMPDEST SWAP1 PUSH2 0x1012 JUMP JUMPDEST PUSH2 0x4BA PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x4C4 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x4D8 JUMPI JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST PUSH2 0x4E6 SWAP1 PUSH2 0x25F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x4F3 SWAP1 PUSH2 0x22F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x50D SWAP1 PUSH2 0x4F7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x51A SWAP1 PUSH2 0x3CD JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0xA0 DUP1 PUSH2 0x58A SWAP4 PUSH2 0x538 PUSH1 0x0 DUP3 ADD MLOAD PUSH1 0x0 DUP7 ADD SWAP1 PUSH2 0x4DD JUMP JUMPDEST PUSH2 0x54A PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x4DD JUMP JUMPDEST PUSH2 0x55C PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP7 ADD SWAP1 PUSH2 0x4EA JUMP JUMPDEST PUSH2 0x56E PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP7 ADD SWAP1 PUSH2 0x504 JUMP JUMPDEST PUSH2 0x580 PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x80 DUP7 ADD SWAP1 PUSH2 0x504 JUMP JUMPDEST ADD MLOAD SWAP2 ADD SWAP1 PUSH2 0x511 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5A0 SWAP1 PUSH1 0x0 PUSH1 0xC0 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x51E JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x5D2 JUMPI PUSH2 0x5B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x5CE PUSH2 0x5BD PUSH2 0x122E JUMP JUMPDEST PUSH2 0x5C5 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x58C JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST CALLVALUE PUSH2 0x606 JUMPI PUSH2 0x5F0 PUSH2 0x5EA CALLDATASIZE PUSH1 0x4 PUSH2 0x46B JUMP JUMPDEST SWAP1 PUSH2 0x12F7 JUMP JUMPDEST PUSH2 0x5F8 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x602 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0x641 JUMPI PUSH2 0x63E PUSH2 0x627 DUP5 PUSH1 0x0 DUP6 ADD PUSH2 0x250 JUMP JUMPDEST SWAP4 PUSH2 0x635 DUP2 PUSH1 0x20 DUP7 ADD PUSH2 0x250 JUMP JUMPDEST SWAP4 PUSH1 0x40 ADD PUSH2 0x277 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x675 JUMPI PUSH2 0x65F PUSH2 0x659 CALLDATASIZE PUSH1 0x4 PUSH2 0x60B JUMP JUMPDEST SWAP2 PUSH2 0x1396 JUMP JUMPDEST PUSH2 0x667 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x671 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x6A3 JUMPI DUP1 PUSH2 0x697 PUSH2 0x6A0 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x250 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x277 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x6D7 JUMPI PUSH2 0x6C1 PUSH2 0x6BB CALLDATASIZE PUSH1 0x4 PUSH2 0x67A JUMP JUMPDEST SWAP1 PUSH2 0x149C JUMP JUMPDEST PUSH2 0x6C9 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x6D3 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH1 0x80 DUP2 DUP4 SUB SLT PUSH2 0x71E JUMPI PUSH2 0x6F3 DUP3 PUSH1 0x0 DUP4 ADD PUSH2 0x250 JUMP JUMPDEST SWAP3 PUSH2 0x71B PUSH2 0x704 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x250 JUMP JUMPDEST SWAP4 PUSH2 0x712 DUP2 PUSH1 0x40 DUP7 ADD PUSH2 0x250 JUMP JUMPDEST SWAP4 PUSH1 0x60 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x755 JUMPI PUSH2 0x73F PUSH2 0x736 CALLDATASIZE PUSH1 0x4 PUSH2 0x6DC JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x158A JUMP JUMPDEST PUSH2 0x747 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x751 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH2 0x763 DUP2 PUSH2 0x4F7 JUMP JUMPDEST SUB PUSH2 0x76A JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x77C DUP3 PUSH2 0x75A JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0xC0 DUP3 DUP5 SUB SLT PUSH2 0x7DE JUMPI PUSH2 0x797 DUP4 PUSH1 0x0 DUP5 ADD PUSH2 0x277 JUMP JUMPDEST SWAP3 PUSH2 0x7A5 DUP2 PUSH1 0x20 DUP6 ADD PUSH2 0x277 JUMP JUMPDEST SWAP3 PUSH2 0x7B3 DUP3 PUSH1 0x40 DUP4 ADD PUSH2 0x250 JUMP JUMPDEST SWAP3 PUSH2 0x7DB PUSH2 0x7C4 DUP5 PUSH1 0x60 DUP6 ADD PUSH2 0x76F JUMP JUMPDEST SWAP4 PUSH2 0x7D2 DUP2 PUSH1 0x80 DUP7 ADD PUSH2 0x76F JUMP JUMPDEST SWAP4 PUSH1 0xA0 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x818 JUMPI PUSH2 0x802 PUSH2 0x7F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x77E JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0x1A34 JUMP JUMPDEST PUSH2 0x80A PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x814 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x846 JUMPI DUP1 PUSH2 0x83A PUSH2 0x843 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x277 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST PUSH2 0x854 SWAP1 PUSH2 0x22F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x86C SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x89F JUMPI PUSH2 0x89B PUSH2 0x88A PUSH2 0x884 CALLDATASIZE PUSH1 0x4 PUSH2 0x81D JUMP JUMPDEST SWAP1 PUSH2 0x1A64 JUMP JUMPDEST PUSH2 0x892 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x858 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST CALLVALUE PUSH2 0x8D5 JUMPI PUSH2 0x8D1 PUSH2 0x8C0 PUSH2 0x8BA CALLDATASIZE PUSH1 0x4 PUSH2 0x46B JUMP JUMPDEST SWAP1 PUSH2 0x1AA4 JUMP JUMPDEST PUSH2 0x8C8 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x1D9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0xC0 SWAP2 SUB SLT PUSH2 0x8ED JUMPI SWAP1 JUMP JUMPDEST PUSH2 0x8DA JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xE0 SWAP2 SUB SLT PUSH2 0x900 JUMPI SWAP1 JUMP JUMPDEST PUSH2 0x8DA JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x96A JUMPI PUSH2 0x91D DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x250 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x965 JUMPI DUP4 PUSH2 0x93E SWAP2 DUP4 ADD PUSH2 0x8DF JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x960 JUMPI PUSH2 0x95D SWAP3 ADD PUSH2 0x8F2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x9A0 JUMPI PUSH2 0x99C PUSH2 0x98B PUSH2 0x985 CALLDATASIZE PUSH1 0x4 PUSH2 0x905 JUMP JUMPDEST SWAP2 PUSH2 0x1DC7 JUMP JUMPDEST PUSH2 0x993 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x420 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x9C2 PUSH2 0x9BD PUSH2 0x9C7 SWAP3 PUSH2 0x9A5 JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH2 0x3CD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9D4 PUSH1 0x0 PUSH2 0x9AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9DF PUSH2 0x9CA JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0xA12 JUMPI PUSH2 0x9F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CD JUMP JUMPDEST PUSH2 0xA0E PUSH2 0x9FD PUSH2 0x9D7 JUMP JUMPDEST PUSH2 0xA05 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x420 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST CALLVALUE PUSH2 0xA47 JUMPI PUSH2 0xA27 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CD JUMP JUMPDEST PUSH2 0xA43 PUSH2 0xA32 PUSH2 0x1E68 JUMP JUMPDEST PUSH2 0xA3A PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x858 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP2 PUSH1 0x80 DUP4 DUP4 SUB SLT PUSH2 0xAAA JUMPI PUSH2 0xA64 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xAA5 JUMPI PUSH2 0xA89 DUP5 PUSH2 0xAA2 SWAP5 DUP5 ADD PUSH2 0x295 JUMP JUMPDEST SWAP4 SWAP1 SWAP5 PUSH2 0xA99 DUP2 PUSH1 0x40 DUP7 ADD PUSH2 0x250 JUMP JUMPDEST SWAP4 PUSH1 0x60 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0xAE3 JUMPI PUSH2 0xADF PUSH2 0xACE PUSH2 0xAC5 CALLDATASIZE PUSH1 0x4 PUSH2 0xA4C JUMP JUMPDEST SWAP4 SWAP3 SWAP1 SWAP3 PUSH2 0x1FA4 JUMP JUMPDEST PUSH2 0xAD6 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x1D9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH2 0xAF1 SWAP1 PUSH2 0x25F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xB09 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0xB3B JUMPI PUSH2 0xB37 PUSH2 0xB26 PUSH2 0xB21 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F4 JUMP JUMPDEST PUSH2 0x204C JUMP JUMPDEST PUSH2 0xB2E PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xAF5 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST CALLVALUE PUSH2 0xB6F JUMPI PUSH2 0xB59 PUSH2 0xB53 CALLDATASIZE PUSH1 0x4 PUSH2 0x46B JUMP JUMPDEST SWAP1 PUSH2 0x209C JUMP JUMPDEST PUSH2 0xB61 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0xB6B DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST CALLVALUE PUSH2 0xBA2 JUMPI PUSH2 0xB8C PUSH2 0xB87 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F4 JUMP JUMPDEST PUSH2 0x20D0 JUMP JUMPDEST PUSH2 0xB94 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0xB9E DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xBB9 PUSH2 0xBAC JUMP JUMPDEST POP DUP1 PUSH2 0xBD4 PUSH2 0xBCE PUSH4 0x5F05BB89 PUSH1 0xE1 SHL PUSH2 0x178 JUMP JUMPDEST SWAP2 PUSH2 0x178 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0xBF8 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0xBE8 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0xBF2 SWAP2 POP PUSH2 0x2115 JUMP JUMPDEST CODESIZE PUSH2 0xBE4 JUMP JUMPDEST POP PUSH2 0xC02 DUP2 PUSH2 0x20DB JUMP JUMPDEST PUSH2 0xBDC JUMP JUMPDEST PUSH1 0x8 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xC24 PUSH2 0xC29 SWAP2 PUSH2 0xC07 JUMP JUMPDEST PUSH2 0xC0D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC36 SWAP1 SLOAD PUSH2 0xC18 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC50 PUSH2 0xC4B PUSH2 0xC55 SWAP3 PUSH2 0x224 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x224 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC61 SWAP1 PUSH2 0xC3C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC6D SWAP1 PUSH2 0xC58 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC79 SWAP1 PUSH2 0xC3C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC85 SWAP1 PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0xCB7 SWAP1 PUSH2 0xC8D JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xCD1 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0xC97 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0xCE7 JUMPI JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0xD0E SWAP3 SWAP5 SWAP4 PUSH2 0xD07 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xD18 PUSH2 0x163 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP4 PUSH2 0xD34 SWAP4 SWAP6 SWAP2 SWAP6 DUP7 SWAP4 SWAP1 SWAP2 SWAP3 SWAP4 PUSH2 0x22B6 JUMP JUMPDEST PUSH2 0xD4E PUSH2 0xD49 PUSH2 0xD44 PUSH1 0x5 PUSH2 0xC2C JUMP JUMPDEST PUSH2 0xC64 JUMP JUMPDEST PUSH2 0xC7C JUMP JUMPDEST PUSH4 0x2E73E0FD DUP3 DUP5 SWAP3 DUP1 EXTCODESIZE ISZERO PUSH2 0xEAE JUMPI PUSH2 0xD7B PUSH1 0x0 DUP1 SWAP5 PUSH2 0xD86 PUSH2 0xD6F PUSH2 0x163 JUMP JUMPDEST SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH2 0xCD6 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH2 0xCEC JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 PUSH2 0xE81 JUMPI JUMPDEST POP ISZERO PUSH1 0x0 EQ PUSH2 0xE7C JUMPI PUSH1 0x1 PUSH2 0xDDE JUMPI JUMPDEST JUMPDEST SWAP1 PUSH32 0xF32D98590495EE51BACB93809409A188E7AB8268B70B4C969D9DA3A883C539F7 SWAP2 PUSH2 0xDD9 PUSH2 0xDD0 PUSH2 0x163 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0xCEC JUMP JUMPDEST SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0xDF8 PUSH2 0xDF3 PUSH2 0xDEE PUSH1 0x5 PUSH2 0xC2C JUMP JUMPDEST PUSH2 0xC64 JUMP JUMPDEST PUSH2 0xC7C JUMP JUMPDEST PUSH4 0x40C10F19 DUP3 DUP5 SWAP3 DUP1 EXTCODESIZE ISZERO PUSH2 0xE77 JUMPI PUSH2 0xE25 PUSH1 0x0 DUP1 SWAP5 PUSH2 0xE30 PUSH2 0xE19 PUSH2 0x163 JUMP JUMPDEST SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH2 0xCD6 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH2 0xCEC JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xE72 JUMPI PUSH2 0xE45 JUMPI JUMPDEST POP PUSH2 0xDA1 JUMP JUMPDEST PUSH2 0xE65 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0xE6B JUMPI JUMPDEST PUSH2 0xE5D DUP2 DUP4 PUSH2 0xCAD JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xCDC JUMP JUMPDEST CODESIZE PUSH2 0xE3F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xE53 JUMP JUMPDEST PUSH2 0xD10 JUMP JUMPDEST PUSH2 0xC88 JUMP JUMPDEST PUSH2 0xDA2 JUMP JUMPDEST PUSH2 0xEA1 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0xEA7 JUMPI JUMPDEST PUSH2 0xE99 DUP2 DUP4 PUSH2 0xCAD JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xCDC JUMP JUMPDEST CODESIZE PUSH2 0xD91 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xE8F JUMP JUMPDEST PUSH2 0xC88 JUMP JUMPDEST PUSH32 0x70649EC320B507FEBAD3E8EF750E5F580B9AE32F9F50D4C7B121332C81971530 SWAP1 JUMP JUMPDEST PUSH2 0xEF0 SWAP1 PUSH2 0xEEB PUSH2 0xEE6 PUSH2 0xEB3 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0xF54 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEFB SWAP1 PUSH2 0xC3C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF07 SWAP1 PUSH2 0xEF2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF1B PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x9A8 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0xF2E SWAP1 PUSH2 0xEF2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF49 PUSH2 0xF44 PUSH2 0xF50 SWAP3 PUSH2 0xF25 JUMP JUMPDEST PUSH2 0xF31 JUMP JUMPDEST DUP3 SLOAD PUSH2 0xF0A JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xF60 PUSH2 0xF67 SWAP2 PUSH2 0xEFE JUMP JUMPDEST PUSH1 0x3 PUSH2 0xF34 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF72 SWAP1 PUSH2 0xED7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xF82 SWAP1 PUSH2 0x3CD JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF8F SWAP1 PUSH2 0xF79 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFB2 PUSH2 0xFB7 SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0xFA3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFC4 SWAP1 SLOAD PUSH2 0xFA6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0xFE0 PUSH2 0xFE6 SWAP3 PUSH2 0xFD8 PUSH2 0xF74 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xF85 JUMP JUMPDEST ADD PUSH2 0xFBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1004 SWAP2 PUSH2 0xFFF PUSH2 0xFFA DUP3 PUSH2 0xFC7 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0x1006 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1010 SWAP2 PUSH2 0x252E JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x101C SWAP2 PUSH2 0xFE9 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1031 PUSH2 0x102A PUSH2 0x163 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0xCAD JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x103D PUSH1 0xC0 PUSH2 0x101E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x105C PUSH2 0x1033 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP1 DUP1 DUP1 DUP1 DUP1 DUP8 PUSH2 0x106D PUSH2 0x1040 JUMP JUMPDEST DUP2 MSTORE ADD PUSH2 0x1078 PUSH2 0x1040 JUMP JUMPDEST DUP2 MSTORE ADD PUSH2 0x1083 PUSH2 0x1045 JUMP JUMPDEST DUP2 MSTORE ADD PUSH2 0x108E PUSH2 0x104A JUMP JUMPDEST DUP2 MSTORE ADD PUSH2 0x1099 PUSH2 0x104A JUMP JUMPDEST DUP2 MSTORE ADD PUSH2 0x10A4 PUSH2 0x104F JUMP JUMPDEST DUP2 MSTORE POP POP JUMP JUMPDEST PUSH2 0x10B2 PUSH2 0x1054 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x10C4 PUSH2 0x10C9 SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0x10B5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x10D6 SWAP1 SLOAD PUSH2 0x10B8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10E3 SWAP1 PUSH2 0x25F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x10F3 PUSH2 0x10F8 SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0xC0D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1105 SWAP1 SLOAD PUSH2 0x10E7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1112 SWAP1 PUSH2 0x22F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xA0 SHR SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1135 PUSH2 0x113A SWAP2 PUSH2 0x1116 JUMP JUMPDEST PUSH2 0x111C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1147 SWAP1 SLOAD PUSH2 0x1129 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1154 SWAP1 PUSH2 0x4F7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x1164 PUSH2 0x1169 SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0x111C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1176 SWAP1 SLOAD PUSH2 0x1158 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1183 SWAP1 PUSH2 0x3CD JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x1220 PUSH2 0x1217 PUSH1 0x4 PUSH2 0x1198 PUSH2 0x1033 JUMP JUMPDEST SWAP5 PUSH2 0x11B1 PUSH2 0x11A8 PUSH1 0x0 DUP4 ADD PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x0 DUP9 ADD PUSH2 0x10D9 JUMP JUMPDEST PUSH2 0x11C9 PUSH2 0x11C0 PUSH1 0x1 DUP4 ADD PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x20 DUP9 ADD PUSH2 0x10D9 JUMP JUMPDEST PUSH2 0x11E1 PUSH2 0x11D8 PUSH1 0x2 DUP4 ADD PUSH2 0x10FB JUMP JUMPDEST PUSH1 0x40 DUP9 ADD PUSH2 0x1108 JUMP JUMPDEST PUSH2 0x11F9 PUSH2 0x11F0 PUSH1 0x2 DUP4 ADD PUSH2 0x113D JUMP JUMPDEST PUSH1 0x60 DUP9 ADD PUSH2 0x114A JUMP JUMPDEST PUSH2 0x1211 PUSH2 0x1208 PUSH1 0x3 DUP4 ADD PUSH2 0x116C JUMP JUMPDEST PUSH1 0x80 DUP9 ADD PUSH2 0x114A JUMP JUMPDEST ADD PUSH2 0xFBA JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD PUSH2 0x1179 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x122B SWAP1 PUSH2 0x1187 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1236 PUSH2 0x10AA JUMP JUMPDEST POP PUSH2 0x1241 PUSH1 0x6 PUSH2 0x1222 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 SWAP2 PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x12A8 PUSH1 0x2F PUSH1 0x40 SWAP3 PUSH2 0x1244 JUMP JUMPDEST PUSH2 0x12B1 DUP2 PUSH2 0x124D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x12CB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x129B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12D5 JUMPI JUMP JUMPDEST PUSH2 0x12DD PUSH2 0x163 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x12F3 PUSH1 0x4 DUP3 ADD PUSH2 0x12B5 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x1324 SWAP2 PUSH2 0x131F DUP3 PUSH2 0x1319 PUSH2 0x1313 PUSH2 0x130E PUSH2 0x2558 JUMP JUMPDEST PUSH2 0x22F JUMP JUMPDEST SWAP2 PUSH2 0x22F JUMP JUMPDEST EQ PUSH2 0x12CE JUMP JUMPDEST PUSH2 0x2565 JUMP JUMPDEST JUMP JUMPDEST PUSH32 0x5D8E12C39142FF96D79D04D15D1BA1269E4FE57BB9D26F43523628B34BA108EC SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1365 SWAP3 SWAP2 PUSH2 0x1360 PUSH2 0x135B PUSH2 0x1326 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0x137F JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1370 SWAP1 PUSH2 0xC3C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x137C SWAP1 PUSH2 0x1367 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x138C PUSH2 0x1394 SWAP4 PUSH2 0x1373 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x25C0 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x13A1 SWAP3 SWAP2 PUSH2 0x134A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x13BD SWAP2 PUSH2 0x13B8 PUSH2 0x13B3 PUSH2 0x1326 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0x144A JUMP JUMPDEST JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x13D0 PUSH1 0x0 DUP1 SWAP3 PUSH2 0x13BF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x13DD SWAP1 PUSH2 0x13C4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x13FE JUMPI PUSH2 0x13FA PUSH1 0x20 SWAP2 PUSH2 0xC8D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xC97 JUMP JUMPDEST SWAP1 PUSH2 0x1415 PUSH2 0x1410 DUP4 PUSH2 0x13E0 JUMP JUMPDEST PUSH2 0x101E JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0x143C JUMPI PUSH2 0x1430 RETURNDATASIZE PUSH2 0x1403 JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0x1444 PUSH2 0x141A JUMP JUMPDEST SWAP1 PUSH2 0x143A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1479 SWAP3 DUP2 SWAP3 SWAP1 PUSH2 0x145B PUSH2 0x163 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x1466 DUP2 PUSH2 0x13D4 JUMP JUMPDEST SUB SWAP3 GAS CALL PUSH2 0x1472 PUSH2 0x141F JUMP JUMPDEST POP ISZERO PUSH2 0x1C7 JUMP JUMPDEST PUSH2 0x147F JUMPI JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1D42C867 PUSH1 0xE2 SHL DUP2 MSTORE DUP1 PUSH2 0x1498 PUSH1 0x4 DUP3 ADD PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x14A6 SWAP2 PUSH2 0x13A3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x14BA PUSH2 0x14BF SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0x14A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x14CC SWAP1 SLOAD PUSH2 0x14AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x8 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x14E8 PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB SWAP2 PUSH2 0x14CF JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x14FB SWAP1 PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1516 PUSH2 0x1511 PUSH2 0x151D SWAP3 PUSH2 0x14F2 JUMP JUMPDEST PUSH2 0x14FE JUMP JUMPDEST DUP3 SLOAD PUSH2 0x14D5 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH32 0x4C02318D8C3AADC98CCF18AEBBF3126F651E0C3F6A1DE5FF8EDCF6724A2AD5C2 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1551 PUSH1 0xFF SWAP2 PUSH2 0x9A8 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x1564 SWAP1 PUSH2 0x1C7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x157F PUSH2 0x157A PUSH2 0x1586 SWAP3 PUSH2 0x155B JUMP JUMPDEST PUSH2 0x1567 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1545 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP3 SWAP1 SWAP3 PUSH2 0x1597 PUSH1 0x5 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0x15F5 JUMPI PUSH2 0x15A9 PUSH2 0x15E7 SWAP5 PUSH1 0x5 PUSH2 0x1501 JUMP JUMPDEST PUSH2 0x15BB PUSH2 0x15B4 PUSH2 0x9CA JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x252E JUMP JUMPDEST PUSH2 0x15CD PUSH2 0x15C6 PUSH2 0x1521 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x252E JUMP JUMPDEST PUSH2 0x15DF PUSH2 0x15D8 PUSH2 0x1326 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x252E JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x260B JUMP JUMPDEST PUSH2 0x15F3 PUSH1 0x1 PUSH1 0x5 PUSH2 0x156A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x160E PUSH1 0x4 DUP3 ADD PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x1630 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 PUSH2 0x162B PUSH2 0x1626 PUSH2 0x1521 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0x18FD JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1646 PUSH2 0x1641 PUSH2 0x164B SWAP3 PUSH2 0x4F7 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1662 PUSH2 0x165D PUSH2 0x1667 SWAP3 PUSH2 0x9A5 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1674 PUSH1 0xC0 PUSH2 0x101E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1681 SWAP1 MLOAD PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1691 PUSH1 0x0 NOT SWAP2 PUSH2 0x9A8 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x16AF PUSH2 0x16AA PUSH2 0x16B4 SWAP3 PUSH2 0x25F JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x16CF PUSH2 0x16CA PUSH2 0x16D6 SWAP3 PUSH2 0x169B JUMP JUMPDEST PUSH2 0x16B7 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1684 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x16E4 SWAP1 MLOAD PUSH2 0x22F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x16FC PUSH2 0x16F7 PUSH2 0x1703 SWAP3 PUSH2 0x14F2 JUMP JUMPDEST PUSH2 0x14FE JUMP JUMPDEST DUP3 SLOAD PUSH2 0xF0A JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1711 SWAP1 MLOAD PUSH2 0x4F7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xA0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1730 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL SWAP2 PUSH2 0x1714 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x174E PUSH2 0x1749 PUSH2 0x1753 SWAP3 PUSH2 0x4F7 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x4F7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x176E PUSH2 0x1769 PUSH2 0x1775 SWAP3 PUSH2 0x173A JUMP JUMPDEST PUSH2 0x1756 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x171A JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 PUSH2 0x178C PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 PUSH2 0x9A8 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x17AB PUSH2 0x17A6 PUSH2 0x17B2 SWAP3 PUSH2 0x173A JUMP JUMPDEST PUSH2 0x1756 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1779 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x17C0 SWAP1 MLOAD PUSH2 0x3CD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17CC SWAP1 PUSH2 0xF9D JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x17E4 PUSH2 0x17DF PUSH2 0x17EB SWAP3 PUSH2 0xF79 JUMP JUMPDEST PUSH2 0x17C3 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1684 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 PUSH2 0x1880 PUSH1 0xA0 PUSH1 0x4 PUSH2 0x1886 SWAP5 PUSH2 0x1814 PUSH1 0x0 DUP3 ADD PUSH2 0x180E PUSH1 0x0 DUP9 ADD PUSH2 0x1677 JUMP JUMPDEST SWAP1 PUSH2 0x16BA JUMP JUMPDEST PUSH2 0x182D PUSH1 0x1 DUP3 ADD PUSH2 0x1827 PUSH1 0x20 DUP9 ADD PUSH2 0x1677 JUMP JUMPDEST SWAP1 PUSH2 0x16BA JUMP JUMPDEST PUSH2 0x1846 PUSH1 0x2 DUP3 ADD PUSH2 0x1840 PUSH1 0x40 DUP9 ADD PUSH2 0x16DA JUMP JUMPDEST SWAP1 PUSH2 0x16E7 JUMP JUMPDEST PUSH2 0x185F PUSH1 0x2 DUP3 ADD PUSH2 0x1859 PUSH1 0x60 DUP9 ADD PUSH2 0x1707 JUMP JUMPDEST SWAP1 PUSH2 0x1759 JUMP JUMPDEST PUSH2 0x1878 PUSH1 0x3 DUP3 ADD PUSH2 0x1872 PUSH1 0x80 DUP9 ADD PUSH2 0x1707 JUMP JUMPDEST SWAP1 PUSH2 0x1796 JUMP JUMPDEST ADD SWAP3 ADD PUSH2 0x17B6 JUMP JUMPDEST SWAP1 PUSH2 0x17CF JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1892 SWAP2 PUSH2 0x17EF JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x189D SWAP1 PUSH2 0x4F7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP5 PUSH2 0x18EA PUSH2 0x18F4 SWAP3 SWAP9 SWAP8 SWAP6 PUSH2 0x18E0 PUSH1 0xA0 SWAP7 PUSH2 0x18D6 PUSH2 0x18FB SWAP11 PUSH2 0x18CC PUSH1 0xC0 DUP11 ADD SWAP15 PUSH1 0x0 DUP12 ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST PUSH1 0x20 DUP10 ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST PUSH1 0x40 DUP8 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH1 0x60 DUP6 ADD SWAP1 PUSH2 0x1894 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0x1894 JUMP JUMPDEST ADD SWAP1 PUSH2 0x413 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP4 SWAP1 SWAP3 SWAP5 DUP2 PUSH2 0x1915 PUSH2 0x190F DUP9 PUSH2 0x4F7 JUMP JUMPDEST SWAP2 PUSH2 0x4F7 JUMP JUMPDEST LT DUP1 ISZERO PUSH2 0x1A19 JUMPI JUMPDEST PUSH2 0x19FC JUMPI DUP3 PUSH2 0x1935 PUSH2 0x192F PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ PUSH2 0x19DF JUMPI DUP3 PUSH2 0x19A1 PUSH2 0x19DA SWAP5 PUSH2 0x199A DUP8 PUSH2 0x1991 DUP11 PUSH2 0x1988 DUP14 PUSH2 0x197F DUP12 SWAP4 PUSH2 0x1976 DUP13 SWAP8 PUSH2 0x196D PUSH2 0x1963 PUSH2 0x166A JUMP JUMPDEST SWAP12 PUSH1 0x0 DUP14 ADD PUSH2 0x10D9 JUMP JUMPDEST PUSH1 0x20 DUP12 ADD PUSH2 0x10D9 JUMP JUMPDEST PUSH1 0x40 DUP10 ADD PUSH2 0x1108 JUMP JUMPDEST PUSH1 0x60 DUP8 ADD PUSH2 0x114A JUMP JUMPDEST PUSH1 0x80 DUP6 ADD PUSH2 0x114A JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD PUSH2 0x1179 JUMP JUMPDEST PUSH1 0x6 PUSH2 0x1888 JUMP JUMPDEST SWAP4 SWAP5 SWAP6 SWAP2 SWAP1 SWAP2 PUSH32 0xABEC13CA1773EED55D54D2F64593C33FA520EE45CAC73A162F13928A2EBEE233 SWAP7 PUSH2 0x19D1 PUSH2 0x163 JUMP JUMPDEST SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x18A1 JUMP JUMPDEST SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x10BA94E9 PUSH1 0xE3 SHL DUP2 MSTORE DUP1 PUSH2 0x19F8 PUSH1 0x4 DUP3 ADD PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH4 0x10BA94E9 PUSH1 0xE3 SHL DUP2 MSTORE DUP1 PUSH2 0x1A15 PUSH1 0x4 DUP3 ADD PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP DUP2 PUSH2 0x1A2D PUSH2 0x1A27 TIMESTAMP PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x1632 JUMP JUMPDEST GT ISZERO PUSH2 0x191D JUMP JUMPDEST SWAP1 PUSH2 0x1A42 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 PUSH2 0x1612 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1A53 SWAP1 PUSH2 0xF79 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1A84 PUSH2 0x1A7F PUSH2 0x1A89 SWAP4 PUSH2 0x1A77 PUSH2 0x1A44 JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x1A49 JUMP JUMPDEST PUSH2 0x1A61 JUMP JUMPDEST PUSH2 0x265B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1A96 SWAP1 PUSH2 0x14F2 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x1ACB SWAP2 PUSH1 0x0 PUSH2 0x1AC0 PUSH2 0x1AC6 SWAP4 PUSH2 0x1AB9 PUSH2 0xBAC JUMP JUMPDEST POP DUP3 PUSH2 0xF85 JUMP JUMPDEST ADD PUSH2 0x1A8C JUMP JUMPDEST PUSH2 0x14C2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1AE5 PUSH2 0x1AEA SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0x1ACE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1AF7 SWAP1 SLOAD PUSH2 0x1AD9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B03 SWAP1 PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x1B13 DUP3 PUSH2 0x3D0 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x1B2F JUMPI PUSH2 0x1B2C SWAP2 PUSH1 0x0 ADD PUSH2 0x1B06 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST POP PUSH2 0x1B43 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP PUSH2 0x1B55 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x199 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B61 SWAP1 PUSH2 0x178 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x1B74 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x1BC7 JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1BC2 JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x1BBD JUMPI JUMP JUMPDEST PUSH2 0x1B7C JUMP JUMPDEST PUSH2 0x1B77 JUMP JUMPDEST PUSH2 0x1B81 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1BFB DUP2 PUSH2 0x1BF4 DUP2 PUSH2 0x1C00 SWAP6 PUSH2 0x1BCC JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x1BD5 JUMP JUMPDEST PUSH2 0xC8D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x1C1A JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x1B81 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x1C60 JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1C5B JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x1C56 JUMPI JUMP JUMPDEST PUSH2 0x1B7C JUMP JUMPDEST PUSH2 0x1B77 JUMP JUMPDEST PUSH2 0x1B81 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1C88 DUP2 PUSH2 0x1C81 DUP2 PUSH2 0x1C8D SWAP6 PUSH2 0x1C65 JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x1BD5 JUMP JUMPDEST PUSH2 0xC8D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST POP PUSH2 0x1CA0 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x76F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1CE1 SWAP1 PUSH1 0x20 PUSH2 0x1CD9 PUSH2 0x1CCF PUSH1 0x40 DUP5 ADD PUSH2 0x1CC1 PUSH1 0x0 DUP9 ADD DUP9 PUSH2 0x1C1F JUMP JUMPDEST SWAP1 DUP7 DUP4 SUB PUSH1 0x0 DUP9 ADD MSTORE PUSH2 0x1C6E JUMP JUMPDEST SWAP5 DUP3 DUP2 ADD SWAP1 PUSH2 0x1C91 JUMP JUMPDEST SWAP2 ADD SWAP1 PUSH2 0x504 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D8E SWAP2 PUSH2 0x1D80 PUSH2 0x1D75 PUSH1 0xC0 DUP4 ADD PUSH2 0x1D0C PUSH2 0x1D02 PUSH1 0x0 DUP8 ADD DUP8 PUSH2 0x1B34 JUMP JUMPDEST PUSH1 0x0 DUP7 ADD SWAP1 PUSH2 0x4EA JUMP JUMPDEST PUSH2 0x1D26 PUSH2 0x1D1C PUSH1 0x20 DUP8 ADD DUP8 PUSH2 0x1B46 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x1B58 JUMP JUMPDEST PUSH2 0x1D40 PUSH2 0x1D36 PUSH1 0x40 DUP8 ADD DUP8 PUSH2 0x1B65 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD SWAP1 PUSH2 0x511 JUMP JUMPDEST PUSH2 0x1D5A PUSH2 0x1D50 PUSH1 0x60 DUP8 ADD DUP8 PUSH2 0x1B65 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD SWAP1 PUSH2 0x511 JUMP JUMPDEST PUSH2 0x1D67 PUSH1 0x80 DUP7 ADD DUP7 PUSH2 0x1B86 JUMP JUMPDEST SWAP1 DUP6 DUP4 SUB PUSH1 0x80 DUP8 ADD MSTORE PUSH2 0x1BE1 JUMP JUMPDEST SWAP3 PUSH1 0xA0 DUP2 ADD SWAP1 PUSH2 0x1C04 JUMP JUMPDEST SWAP1 PUSH1 0xA0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x1CA3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP4 SWAP3 SWAP1 PUSH2 0x1DBD PUSH1 0x40 SWAP2 PUSH2 0x1DC5 SWAP5 PUSH2 0x1DB0 PUSH1 0x60 DUP10 ADD SWAP3 PUSH1 0x0 DUP11 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST DUP8 DUP3 SUB PUSH1 0x20 DUP10 ADD MSTORE PUSH2 0x1CE4 JUMP JUMPDEST SWAP5 ADD SWAP1 PUSH2 0x413 JUMP JUMPDEST JUMP JUMPDEST SWAP2 POP PUSH1 0x20 SWAP1 PUSH2 0x1DD4 PUSH2 0xF74 JUMP JUMPDEST POP PUSH2 0x1DE7 PUSH2 0x1DE2 PUSH1 0x3 PUSH2 0x1AED JUMP JUMPDEST PUSH2 0x1AFA JUMP JUMPDEST PUSH2 0x1E13 PUSH4 0x3808A90B SWAP5 SWAP3 SWAP5 PUSH2 0x1E1E PUSH2 0x1DFF PUSH1 0x4 PUSH2 0xFBA JUMP JUMPDEST PUSH2 0x1E07 PUSH2 0x163 JUMP JUMPDEST SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP6 PUSH2 0xCD6 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x1D91 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1E63 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1E35 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1E56 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1E5C JUMPI JUMPDEST PUSH2 0x1E4E DUP2 DUP4 PUSH2 0xCAD JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1B15 JUMP JUMPDEST CODESIZE PUSH2 0x1E31 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1E44 JUMP JUMPDEST PUSH2 0xD10 JUMP JUMPDEST PUSH2 0x1E70 PUSH2 0x1A44 JUMP JUMPDEST POP PUSH2 0x1E7B PUSH1 0x5 PUSH2 0xC2C JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1E88 SWAP1 PUSH2 0x14F2 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1EA0 SWAP1 PUSH2 0xF79 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x60 SHL SWAP1 JUMP JUMPDEST PUSH2 0x1EBD SWAP1 PUSH2 0x1EAE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1EC9 SWAP1 PUSH2 0x1EB4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1ED8 PUSH2 0x1EDD SWAP2 PUSH2 0x22F JUMP JUMPDEST PUSH2 0x1EC0 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1EF0 PUSH2 0x1EF5 SWAP2 PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x1EE1 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x14 DUP2 PUSH2 0x1F0C PUSH2 0x1F14 SWAP4 PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x1ECC JUMP JUMPDEST ADD DUP1 SWAP3 PUSH2 0x1EE4 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1F3A JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH2 0xC97 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x1F54 PUSH2 0x1F4F DUP3 PUSH2 0x1F22 JUMP JUMPDEST PUSH2 0x101E JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP3 MUL DUP4 ADD SWAP3 DUP2 DUP5 GT PUSH2 0x1F91 JUMPI SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x1F78 JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 SWAP2 PUSH2 0x1F86 DUP5 DUP7 PUSH2 0x3E5 JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0x1F6B JUMP JUMPDEST PUSH2 0x290 JUMP JUMPDEST PUSH2 0x1FA1 SWAP2 CALLDATASIZE SWAP2 PUSH2 0x1F3F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0x1FB1 PUSH2 0xBAC JUMP JUMPDEST POP PUSH2 0x1FD9 PUSH2 0x1FD3 PUSH2 0x1FCE PUSH2 0x1FC7 PUSH1 0x2 DUP8 SWAP1 PUSH2 0x1E7E JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x1E96 JUMP JUMPDEST PUSH2 0x14C2 JUMP JUMPDEST ISZERO PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 PUSH2 0x1FE8 JUMPI JUMPDEST POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x203D SWAP6 POP SWAP1 PUSH2 0x201F PUSH2 0x2038 SWAP4 SWAP3 SWAP6 SWAP3 SWAP5 PUSH2 0x2010 PUSH2 0x2004 PUSH2 0x163 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD PUSH2 0x1EF9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0xCAD JUMP JUMPDEST PUSH2 0x2031 PUSH2 0x202B DUP3 PUSH2 0x1F1E JUMP JUMPDEST SWAP2 PUSH2 0x1F18 JUMP JUMPDEST KECCAK256 SWAP4 PUSH2 0x1F96 JUMP JUMPDEST PUSH2 0x2694 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 PUSH2 0x1FE0 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x206B PUSH2 0x2066 PUSH2 0x2070 SWAP3 PUSH2 0x205E PUSH2 0x2047 JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x1A49 JUMP JUMPDEST PUSH2 0x1A61 JUMP JUMPDEST PUSH2 0x26BE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x208E SWAP2 PUSH2 0x2089 PUSH2 0x2084 DUP3 PUSH2 0xFC7 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0x2090 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x209A SWAP2 PUSH2 0x2565 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x20A6 SWAP2 PUSH2 0x2073 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x20C1 SWAP1 PUSH2 0x20BC PUSH2 0x20B7 PUSH2 0xEB3 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0x20C3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x20CE SWAP1 PUSH1 0x4 PUSH2 0x17CF JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x20D9 SWAP1 PUSH2 0x20A8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x20E3 PUSH2 0xBAC JUMP JUMPDEST POP DUP1 PUSH2 0x20F8 PUSH2 0x20F2 PUSH1 0x0 PUSH2 0x178 JUMP JUMPDEST SWAP2 PUSH2 0x178 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x2105 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x210F SWAP2 POP PUSH2 0x26DE JUMP JUMPDEST CODESIZE PUSH2 0x2101 JUMP JUMPDEST PUSH2 0x211D PUSH2 0xBAC JUMP JUMPDEST POP PUSH2 0x2127 DUP2 PUSH2 0x26DE JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x2133 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x213D SWAP2 POP PUSH2 0x271E JUMP JUMPDEST CODESIZE PUSH2 0x212F JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x2165 SWAP3 SWAP5 SWAP4 PUSH2 0x215E PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x218C PUSH2 0x2192 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x25F JUMP JUMPDEST SWAP3 PUSH2 0x25F JUMP JUMPDEST DUP3 SUB SWAP2 DUP3 GT PUSH2 0x219D JUMPI JUMP JUMPDEST PUSH2 0x2167 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x21B6 PUSH2 0x21BC SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x25F JUMP JUMPDEST SWAP3 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x21C8 DUP4 DUP3 MUL PUSH2 0x25F JUMP JUMPDEST SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x21D7 JUMPI JUMP JUMPDEST PUSH2 0x2167 JUMP JUMPDEST PUSH2 0x21E5 SWAP1 PUSH2 0x164E JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH2 0x2213 PUSH2 0x221A SWAP5 SWAP7 SWAP6 SWAP4 SWAP7 PUSH2 0x2209 PUSH1 0x60 DUP5 ADD SWAP9 PUSH1 0x0 DUP6 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST ADD SWAP1 PUSH2 0x21DC JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH2 0x2246 PUSH2 0x224D SWAP5 SWAP7 SWAP6 SWAP4 SWAP7 PUSH2 0x223C PUSH1 0x60 DUP5 ADD SWAP9 PUSH1 0x0 DUP6 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2263 PUSH2 0x225E PUSH2 0x2268 SWAP3 PUSH2 0x9A5 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x224 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2274 SWAP1 PUSH2 0x224F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2280 SWAP1 PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH2 0x22AD PUSH2 0x22B4 SWAP5 SWAP7 SWAP6 SWAP4 SWAP7 PUSH2 0x22A3 PUSH1 0x60 DUP5 ADD SWAP9 PUSH1 0x0 DUP6 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x21DC JUMP JUMPDEST ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP4 SWAP3 SWAP1 SWAP3 PUSH2 0x22F0 PUSH2 0x22CB PUSH1 0x2 PUSH1 0x6 ADD PUSH2 0x113D JUMP JUMPDEST PUSH2 0x22EA PUSH2 0x22E4 PUSH2 0x22DE PUSH1 0x3 PUSH1 0x6 ADD PUSH2 0x116C JUMP JUMPDEST SWAP3 PUSH2 0x1632 JUMP JUMPDEST SWAP2 PUSH2 0x1632 JUMP JUMPDEST SWAP1 PUSH2 0x275E JUMP JUMPDEST PUSH2 0x24FD JUMPI PUSH2 0x2301 PUSH1 0x0 PUSH1 0x6 ADD PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x2313 PUSH2 0x230D DUP6 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST LT PUSH2 0x24D0 JUMPI DUP3 SWAP2 PUSH2 0x2361 SWAP2 PUSH2 0x2342 PUSH2 0x2373 SWAP6 PUSH2 0x233C PUSH1 0x0 PUSH1 0x6 ADD SWAP2 PUSH2 0x2337 DUP4 PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x217D JUMP JUMPDEST SWAP1 PUSH2 0x16BA JUMP JUMPDEST PUSH2 0x234F PUSH1 0x4 PUSH1 0x6 ADD PUSH2 0xFBA JUMP JUMPDEST SWAP2 SWAP1 CALLER SWAP2 PUSH2 0x235B PUSH2 0x21A2 JUMP JUMPDEST SWAP4 PUSH2 0x2855 JUMP JUMPDEST PUSH2 0x236E PUSH1 0x1 PUSH1 0x6 ADD PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x21A7 JUMP JUMPDEST SWAP2 DUP2 PUSH2 0x2393 PUSH2 0x238D PUSH2 0x2388 PUSH1 0x2 PUSH1 0x6 ADD PUSH2 0x10FB JUMP JUMPDEST PUSH2 0x22F JUMP JUMPDEST SWAP2 PUSH2 0x22F JUMP JUMPDEST SUB PUSH2 0x24A2 JUMPI DUP1 PUSH2 0x23AB PUSH2 0x23A5 DUP6 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST LT PUSH2 0x247F JUMPI POP DUP1 PUSH2 0x23CD PUSH2 0x23C7 PUSH2 0x23C2 PUSH1 0x0 PUSH2 0x226B JUMP JUMPDEST PUSH2 0x22F JUMP JUMPDEST SWAP2 PUSH2 0x22F JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x2412 JUMPI CALLVALUE PUSH2 0x23E8 PUSH2 0x23E2 DUP5 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST SUB PUSH2 0x23F2 JUMPI POP POP JUMPDEST JUMP JUMPDEST PUSH2 0x240E CALLVALUE PUSH1 0x0 SWAP4 DUP5 SWAP4 PUSH4 0xF55E7DF PUSH1 0xE1 SHL DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x221C JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 CALLVALUE PUSH2 0x2427 PUSH2 0x2421 PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x245C JUMPI PUSH2 0x2439 PUSH1 0x0 PUSH2 0x226B JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH2 0x2458 CALLVALUE PUSH1 0x0 SWAP4 DUP5 SWAP4 PUSH4 0xF55E7DF PUSH1 0xE1 SHL DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x2283 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x2468 PUSH2 0x247A SWAP3 PUSH2 0x1373 JUMP JUMPDEST SWAP1 CALLER PUSH2 0x2473 ADDRESS PUSH2 0x2277 JUMP JUMPDEST SWAP2 SWAP3 PUSH2 0x2928 JUMP JUMPDEST PUSH2 0x23F0 JUMP JUMPDEST DUP3 PUSH2 0x249E DUP4 SWAP2 SWAP3 PUSH1 0x0 SWAP4 DUP5 SWAP4 PUSH4 0xF55E7DF PUSH1 0xE1 SHL DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x221C JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST DUP3 PUSH2 0x24B0 PUSH1 0x2 PUSH1 0x6 ADD PUSH2 0x10FB JUMP JUMPDEST PUSH2 0x24CC PUSH1 0x0 DUP1 SWAP4 DUP5 SWAP4 PUSH4 0xF55E7DF PUSH1 0xE1 SHL DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x21E9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST DUP3 PUSH2 0x24DE PUSH1 0x0 PUSH1 0x6 ADD PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x24F9 PUSH1 0x0 SWAP3 DUP4 SWAP3 PUSH4 0x9E4C4461 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH2 0x2143 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH4 0xFE219DD PUSH1 0xE2 SHL DUP2 MSTORE DUP1 PUSH2 0x2516 PUSH1 0x4 DUP3 ADD PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x252C SWAP1 PUSH2 0x2526 PUSH2 0x2558 JUMP JUMPDEST SWAP1 PUSH2 0x2AE4 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2550 PUSH2 0x254B PUSH2 0x2555 SWAP4 PUSH2 0x2544 DUP2 DUP6 SWAP1 PUSH2 0x2B7D JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1A49 JUMP JUMPDEST PUSH2 0x1A61 JUMP JUMPDEST PUSH2 0x2C63 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x2560 PUSH2 0x1A44 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2587 PUSH2 0x2582 PUSH2 0x258C SWAP4 PUSH2 0x257B DUP2 DUP6 SWAP1 PUSH2 0x2C9E JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1A49 JUMP JUMPDEST PUSH2 0x1A61 JUMP JUMPDEST PUSH2 0x2D37 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x2598 SWAP1 PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x25B8 PUSH2 0x25B3 PUSH2 0x25BD SWAP3 PUSH2 0x259B JUMP JUMPDEST PUSH2 0xCD6 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x2604 PUSH1 0x4 SWAP3 PUSH2 0x25F5 PUSH2 0x2609 SWAP6 SWAP4 PUSH2 0x25DC PUSH4 0xA9059CBB PUSH2 0x25A4 JUMP JUMPDEST SWAP3 PUSH2 0x25E5 PUSH2 0x163 JUMP JUMPDEST SWAP7 DUP8 SWAP5 PUSH1 0x20 DUP7 ADD SWAP1 DUP2 MSTORE ADD PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP4 PUSH2 0xCAD JUMP JUMPDEST PUSH2 0x2EE5 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2621 PUSH2 0x2626 SWAP4 SWAP3 PUSH2 0x261C PUSH2 0xEB3 JUMP JUMPDEST PUSH2 0x252E JUMP JUMPDEST PUSH2 0x2F52 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2637 PUSH2 0x263C SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0x169B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2653 PUSH2 0x264E PUSH2 0x2658 SWAP3 PUSH2 0x25F JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x224 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2687 PUSH2 0x2682 PUSH2 0x2691 SWAP4 PUSH2 0x267D PUSH1 0x0 PUSH2 0x268C SWAP6 PUSH2 0x2676 PUSH2 0x1A44 JUMP JUMPDEST POP ADD PUSH2 0x2628 JUMP JUMPDEST PUSH2 0x2FEA JUMP JUMPDEST PUSH2 0x262B JUMP JUMPDEST PUSH2 0x263F JUMP JUMPDEST PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26AE PUSH2 0x26BA SWAP3 SWAP4 PUSH2 0x26B4 SWAP3 PUSH2 0x26A8 PUSH2 0xBAC JUMP JUMPDEST POP PUSH2 0x303F JUMP JUMPDEST SWAP3 PUSH2 0x3CD JUMP JUMPDEST SWAP2 PUSH2 0x3CD JUMP JUMPDEST EQ SWAP1 JUMP JUMPDEST PUSH2 0x26D6 PUSH1 0x0 PUSH2 0x26DB SWAP3 PUSH2 0x26CF PUSH2 0x2047 JUMP JUMPDEST POP ADD PUSH2 0x2628 JUMP JUMPDEST PUSH2 0x30AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26E6 PUSH2 0xBAC JUMP JUMPDEST POP DUP1 PUSH2 0x2701 PUSH2 0x26FB PUSH4 0x5A05180F PUSH1 0xE0 SHL PUSH2 0x178 JUMP JUMPDEST SWAP2 PUSH2 0x178 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x270E JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2718 SWAP2 POP PUSH2 0x30C2 JUMP JUMPDEST CODESIZE PUSH2 0x270A JUMP JUMPDEST PUSH2 0x2726 PUSH2 0xBAC JUMP JUMPDEST POP DUP1 PUSH2 0x2741 PUSH2 0x273B PUSH4 0x4E821D33 PUSH1 0xE1 SHL PUSH2 0x178 JUMP JUMPDEST SWAP2 PUSH2 0x178 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x274E JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2758 SWAP2 POP PUSH2 0x20DB JUMP JUMPDEST CODESIZE PUSH2 0x274A JUMP JUMPDEST PUSH2 0x2766 PUSH2 0xBAC JUMP JUMPDEST POP DUP2 PUSH2 0x277B PUSH2 0x2775 PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x27AE JUMPI JUMPDEST POP SWAP1 DUP2 ISZERO PUSH2 0x2791 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x27A6 PUSH2 0x27A0 TIMESTAMP SWAP3 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST LT ISZERO CODESIZE PUSH2 0x278D JUMP JUMPDEST SWAP1 POP PUSH2 0x27C3 PUSH2 0x27BD TIMESTAMP SWAP3 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST LT CODESIZE PUSH2 0x2784 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 CALLDATACOPY JUMP JUMPDEST SWAP1 SWAP2 DUP3 PUSH2 0x27E8 SWAP2 PUSH2 0x27CA JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP1 PUSH1 0xFB SHL SUB DUP2 GT PUSH2 0x280B JUMPI DUP3 SWAP2 PUSH1 0x20 PUSH2 0x2807 SWAP3 MUL SWAP4 DUP5 SWAP2 PUSH2 0x27D8 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x27D3 JUMP JUMPDEST SWAP1 PUSH2 0x2841 PUSH2 0x284C SWAP2 PUSH2 0x2853 SWAP7 SWAP9 SWAP8 SWAP6 PUSH1 0x60 SWAP6 PUSH2 0x2834 PUSH1 0x80 DUP8 ADD SWAP4 PUSH1 0x0 DUP9 ADD SWAP1 PUSH2 0x413 JUMP JUMPDEST DUP6 DUP4 SUB PUSH1 0x20 DUP8 ADD MSTORE PUSH2 0x27DC JUMP JUMPDEST SWAP7 PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST ADD SWAP1 PUSH2 0x413 JUMP JUMPDEST JUMP JUMPDEST SWAP3 SWAP4 DUP4 PUSH2 0x2873 PUSH2 0x286D PUSH2 0x2868 PUSH1 0x0 PUSH2 0x9AE JUMP JUMPDEST PUSH2 0x3CD JUMP JUMPDEST SWAP2 PUSH2 0x3CD JUMP JUMPDEST SUB PUSH2 0x2880 JUMPI JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2898 PUSH2 0x2892 DUP6 DUP5 DUP7 DUP10 SWAP2 DUP7 SWAP4 PUSH2 0x1FA4 JUMP JUMPDEST ISZERO PUSH2 0x1C7 JUMP JUMPDEST PUSH2 0x28C8 JUMPI POP POP POP SWAP1 PUSH2 0x28B9 PUSH2 0x28BE SWAP3 PUSH2 0x28B4 PUSH1 0x1 SWAP4 PUSH1 0x2 PUSH2 0x1E7E JUMP JUMPDEST PUSH2 0x1E96 JUMP JUMPDEST PUSH2 0x156A JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 PUSH2 0x2879 JUMP JUMPDEST DUP5 PUSH2 0x28F1 SWAP2 DUP6 SWAP4 SWAP5 SWAP2 SWAP1 SWAP2 PUSH2 0x28DB PUSH2 0x163 JUMP JUMPDEST SWAP6 DUP7 SWAP6 PUSH4 0x4CB8CD5 PUSH1 0xE3 SHL DUP8 MSTORE PUSH1 0x4 DUP8 ADD PUSH2 0x2810 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 SWAP1 PUSH2 0x291F PUSH2 0x2926 SWAP5 SWAP7 SWAP6 SWAP4 SWAP7 PUSH2 0x2915 PUSH1 0x60 DUP5 ADD SWAP9 PUSH1 0x0 DUP6 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2975 SWAP4 SWAP2 PUSH2 0x2961 PUSH1 0x4 SWAP5 PUSH2 0x2970 SWAP4 SWAP5 PUSH2 0x2945 PUSH4 0x23B872DD PUSH2 0x25A4 JUMP JUMPDEST SWAP4 SWAP2 SWAP1 SWAP2 PUSH2 0x2951 PUSH2 0x163 JUMP JUMPDEST SWAP8 DUP9 SWAP6 PUSH1 0x20 DUP8 ADD SWAP1 DUP2 MSTORE ADD PUSH2 0x28F5 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP4 PUSH2 0xCAD JUMP JUMPDEST PUSH2 0x2EE5 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x298E PUSH2 0x2989 PUSH2 0x2993 SWAP3 PUSH2 0x2977 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x29CF PUSH1 0x17 DUP1 SWAP3 PUSH2 0x2996 JUMP JUMPDEST PUSH2 0x29D8 DUP2 PUSH2 0x299B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x29F4 JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x29E3 JUMP JUMPDEST PUSH2 0x2A2A PUSH2 0x2A21 SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x2A18 DUP2 PUSH2 0x29DC JUMP JUMPDEST SWAP5 DUP6 DUP1 SWAP4 PUSH2 0x2996 JUMP JUMPDEST SWAP4 DUP5 SWAP2 ADD PUSH2 0x29E0 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2A62 PUSH1 0x11 DUP1 SWAP3 PUSH2 0x2996 JUMP JUMPDEST PUSH2 0x2A6B DUP2 PUSH2 0x2A2E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2A89 PUSH2 0x2A94 SWAP4 SWAP3 PUSH2 0x2A83 PUSH2 0x2A8E SWAP4 PUSH2 0x29C3 JUMP JUMPDEST SWAP1 PUSH2 0x2A05 JUMP JUMPDEST PUSH2 0x2A56 JUMP JUMPDEST SWAP1 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2AB9 PUSH2 0x2AC2 PUSH1 0x20 SWAP4 PUSH2 0x2AC7 SWAP4 PUSH2 0x2AB0 DUP2 PUSH2 0x29DC JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x1244 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x29E0 JUMP JUMPDEST PUSH2 0xC8D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2AE1 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x2A9A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2AF9 PUSH2 0x2AF3 DUP4 DUP4 SWAP1 PUSH2 0x1AA4 JUMP JUMPDEST ISZERO PUSH2 0x1C7 JUMP JUMPDEST PUSH2 0x2B01 JUMPI POP POP JUMP JUMPDEST PUSH2 0x2B79 SWAP2 PUSH2 0x2B57 PUSH2 0x2B30 PUSH2 0x2B20 PUSH2 0x2B1A PUSH2 0x2B5C SWAP6 PUSH2 0x3155 JUMP JUMPDEST SWAP4 PUSH2 0x262B JUMP JUMPDEST PUSH2 0x2B2A PUSH1 0x20 PUSH2 0x297A JUMP JUMPDEST SWAP1 PUSH2 0x3378 JUMP JUMPDEST SWAP2 PUSH2 0x2B48 PUSH2 0x2B3C PUSH2 0x163 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD PUSH2 0x2A6F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0xCAD JUMP JUMPDEST PUSH2 0x2A97 JUMP JUMPDEST PUSH2 0x2B64 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x2ACB JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x2B91 PUSH2 0x2B8B DUP3 DUP5 SWAP1 PUSH2 0x1AA4 JUMP JUMPDEST ISZERO PUSH2 0x1C7 JUMP JUMPDEST PUSH2 0x2B9A JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x2BBC PUSH1 0x1 PUSH2 0x2BB7 PUSH1 0x0 PUSH2 0x2BAF DUP2 DUP7 SWAP1 PUSH2 0xF85 JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x1A8C JUMP JUMPDEST PUSH2 0x156A JUMP JUMPDEST SWAP1 PUSH2 0x2BC5 PUSH2 0x2558 JUMP JUMPDEST SWAP1 PUSH2 0x2C02 PUSH2 0x2BFC PUSH2 0x2BF6 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP6 PUSH2 0xF79 JUMP JUMPDEST SWAP3 PUSH2 0x14F2 JUMP JUMPDEST SWAP3 PUSH2 0x14F2 JUMP JUMPDEST SWAP3 PUSH2 0x2C0B PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x2C15 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x2B96 JUMP JUMPDEST PUSH2 0x2C28 SWAP1 PUSH2 0xC3C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2C3F PUSH2 0x2C3A PUSH2 0x2C44 SWAP3 PUSH2 0x224 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2C5B PUSH2 0x2C56 PUSH2 0x2C60 SWAP3 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH2 0x3CD JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2C96 PUSH2 0x2C90 PUSH2 0x2C8B PUSH2 0x2C86 PUSH1 0x0 PUSH2 0x2C9B SWAP7 PUSH2 0x2C7E PUSH2 0xBAC JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x2C1F JUMP JUMPDEST PUSH2 0x2C2B JUMP JUMPDEST PUSH2 0x2C47 JUMP JUMPDEST SWAP2 PUSH2 0x2628 JUMP JUMPDEST PUSH2 0x3598 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2CA9 DUP2 DUP4 SWAP1 PUSH2 0x1AA4 JUMP JUMPDEST PUSH2 0x2CB2 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x2CD4 PUSH1 0x0 PUSH2 0x2CCF PUSH1 0x0 PUSH2 0x2CC7 DUP2 DUP7 SWAP1 PUSH2 0xF85 JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x1A8C JUMP JUMPDEST PUSH2 0x156A JUMP JUMPDEST SWAP1 PUSH2 0x2CDD PUSH2 0x2558 JUMP JUMPDEST SWAP1 PUSH2 0x2D1A PUSH2 0x2D14 PUSH2 0x2D0E PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP6 PUSH2 0xF79 JUMP JUMPDEST SWAP3 PUSH2 0x14F2 JUMP JUMPDEST SWAP3 PUSH2 0x14F2 JUMP JUMPDEST SWAP3 PUSH2 0x2D23 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x2D2D DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x2CAE JUMP JUMPDEST SWAP1 PUSH2 0x2D6A PUSH2 0x2D64 PUSH2 0x2D5F PUSH2 0x2D5A PUSH1 0x0 PUSH2 0x2D6F SWAP7 PUSH2 0x2D52 PUSH2 0xBAC JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x2C1F JUMP JUMPDEST PUSH2 0x2C2B JUMP JUMPDEST PUSH2 0x2C47 JUMP JUMPDEST SWAP2 PUSH2 0x2628 JUMP JUMPDEST PUSH2 0x368E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2D90 JUMPI PUSH2 0x2D8C PUSH1 0x20 SWAP2 PUSH2 0xC8D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xC97 JUMP JUMPDEST SWAP1 PUSH2 0x2DA7 PUSH2 0x2DA2 DUP4 PUSH2 0x2D72 JUMP JUMPDEST PUSH2 0x101E JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2DDE PUSH1 0x20 PUSH2 0x2D95 JUMP JUMPDEST SWAP1 PUSH2 0x2DEB PUSH1 0x20 DUP4 ADD PUSH2 0x2DAC JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2DF5 PUSH2 0x2DD4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2E01 DUP2 PUSH2 0x1C7 JUMP JUMPDEST SUB PUSH2 0x2E08 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x2E1A DUP3 PUSH2 0x2DF8 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x2E36 JUMPI PUSH2 0x2E33 SWAP2 PUSH1 0x0 ADD PUSH2 0x2E0D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 SWAP2 PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x2E96 PUSH1 0x2A PUSH1 0x40 SWAP3 PUSH2 0x1244 JUMP JUMPDEST PUSH2 0x2E9F DUP2 PUSH2 0x2E3B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2EB9 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2E89 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2EC3 JUMPI JUMP JUMPDEST PUSH2 0x2ECB PUSH2 0x163 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2EE1 PUSH1 0x4 DUP3 ADD PUSH2 0x2EA3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x2F2F SWAP2 PUSH2 0x2EF5 PUSH2 0x2F04 SWAP3 PUSH2 0x258F JUMP JUMPDEST SWAP1 PUSH2 0x2EFE PUSH2 0x2DED JUMP JUMPDEST SWAP2 PUSH2 0x3798 JUMP JUMPDEST PUSH2 0x2F0D DUP2 PUSH2 0x1F1E JUMP JUMPDEST PUSH2 0x2F20 PUSH2 0x2F1A PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x2F31 JUMPI JUMPDEST POP PUSH2 0x2EBC JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2F4C SWAP2 POP PUSH1 0x20 PUSH2 0x2F41 DUP3 PUSH2 0x1F1E JUMP JUMPDEST DUP2 DUP4 ADD ADD SWAP2 ADD PUSH2 0x2E1C JUMP JUMPDEST CODESIZE PUSH2 0x2F29 JUMP JUMPDEST SWAP1 PUSH2 0x2F69 PUSH2 0x2F62 PUSH2 0x2F70 SWAP4 PUSH2 0xEFE JUMP JUMPDEST PUSH1 0x3 PUSH2 0xF34 JUMP JUMPDEST PUSH1 0x4 PUSH2 0x17CF JUMP JUMPDEST JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x2FA0 DUP2 PUSH2 0x2F88 JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x2FBB JUMPI PUSH2 0x2FB2 PUSH1 0x1 SWAP2 PUSH2 0x2F8C JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2F72 JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST PUSH2 0x2FD4 SWAP1 PUSH1 0x8 PUSH2 0x2FD9 SWAP4 MUL PUSH2 0x2FC0 JUMP JUMPDEST PUSH2 0xFA3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2FE7 SWAP2 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3009 SWAP2 PUSH1 0x0 PUSH2 0x3003 SWAP3 PUSH2 0x2FFC PUSH2 0xF74 JUMP JUMPDEST POP ADD PUSH2 0x2F97 JUMP JUMPDEST SWAP1 PUSH2 0x2FDC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x3018 SWAP2 ADD PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3029 DUP3 PUSH2 0x301B JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x303A JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x2F72 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3049 PUSH2 0xF74 JUMP JUMPDEST POP PUSH2 0x3054 PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP1 JUMPDEST DUP2 PUSH2 0x3071 PUSH2 0x306B PUSH2 0x3066 DUP8 PUSH2 0x301B JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST LT ISZERO PUSH2 0x30A3 JUMPI PUSH2 0x3097 PUSH2 0x309D SWAP2 PUSH2 0x3091 PUSH2 0x308C DUP8 DUP7 SWAP1 PUSH2 0x301F JUMP JUMPDEST PUSH2 0x17B6 JUMP JUMPDEST SWAP1 PUSH2 0x37BB JUMP JUMPDEST SWAP2 PUSH2 0x300C JUMP JUMPDEST SWAP1 PUSH2 0x3056 JUMP JUMPDEST SWAP2 SWAP3 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30BF SWAP2 PUSH2 0x30B8 PUSH2 0x2047 JUMP JUMPDEST POP ADD PUSH2 0x2F88 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30CA PUSH2 0xBAC JUMP JUMPDEST POP DUP1 PUSH2 0x30E5 PUSH2 0x30DF PUSH4 0x7965DB0B PUSH1 0xE0 SHL PUSH2 0x178 JUMP JUMPDEST SWAP2 PUSH2 0x178 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x30F2 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x30FC SWAP2 POP PUSH2 0x37FB JUMP JUMPDEST CODESIZE PUSH2 0x30EE JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x3124 PUSH2 0x311F PUSH2 0x3129 SWAP3 PUSH2 0x3107 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x310A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3136 PUSH1 0x14 PUSH2 0x3110 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x314D PUSH2 0x3148 PUSH2 0x3152 SWAP3 PUSH2 0x310A JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3172 PUSH2 0x316D PUSH2 0x3188 SWAP3 PUSH2 0x3167 PUSH2 0x3102 JUMP JUMPDEST POP PUSH2 0x2C1F JUMP JUMPDEST PUSH2 0x2C2B JUMP JUMPDEST PUSH2 0x3182 PUSH2 0x317D PUSH2 0x312C JUMP JUMPDEST PUSH2 0x3139 JUMP JUMPDEST SWAP1 PUSH2 0x3378 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x31A2 PUSH2 0x319D PUSH2 0x31A7 SWAP3 PUSH2 0x318B JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x31B9 PUSH2 0x31BF SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x25F JUMP JUMPDEST SWAP3 PUSH2 0x25F JUMP JUMPDEST DUP3 ADD DUP1 SWAP3 GT PUSH2 0x31CA JUMPI JUMP JUMPDEST PUSH2 0x2167 JUMP JUMPDEST CALLDATASIZE SWAP1 CALLDATACOPY JUMP JUMPDEST SWAP1 PUSH2 0x31F9 PUSH2 0x31E1 DUP4 PUSH2 0x1403 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP1 PUSH2 0x31EF DUP7 SWAP4 PUSH2 0x13E0 JUMP JUMPDEST SWAP3 ADD SWAP2 SUB SWAP1 PUSH2 0x31CF JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x3 PUSH1 0xFC SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x320D DUP3 PUSH2 0x1F1E JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x321F JUMPI PUSH1 0x1 PUSH1 0x20 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x2F72 JUMP JUMPDEST PUSH1 0xF PUSH1 0xFB SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3243 PUSH2 0x323E PUSH2 0x3248 SWAP3 PUSH2 0x322C JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3254 SWAP1 PUSH2 0x25F JUMP JUMPDEST PUSH1 0x0 DUP2 EQ PUSH2 0x3263 JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH2 0x2167 JUMP JUMPDEST PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 JUMP JUMPDEST PUSH2 0x3287 PUSH2 0x3268 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x32A1 PUSH2 0x329C PUSH2 0x32A6 SWAP3 PUSH2 0x328A JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xF8 SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x32C6 PUSH2 0x32C1 PUSH2 0x32CB SWAP3 PUSH2 0x32AF JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x310A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x32ED SWAP1 PUSH2 0x32E7 PUSH2 0x32E1 PUSH2 0x32F2 SWAP5 PUSH2 0x310A JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST SWAP1 PUSH2 0x2FC0 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x3329 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x1244 JUMP JUMPDEST PUSH2 0x3332 DUP2 PUSH2 0x32F5 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x334C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x331D JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x3356 JUMPI JUMP JUMPDEST PUSH2 0x335E PUSH2 0x163 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x3374 PUSH1 0x4 DUP3 ADD PUSH2 0x3336 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH2 0x3382 PUSH2 0x3102 JUMP JUMPDEST POP PUSH2 0x341C PUSH2 0x340C PUSH2 0x33B8 PUSH2 0x33B3 PUSH2 0x33A3 PUSH1 0x2 PUSH2 0x339E DUP8 SWAP2 PUSH2 0x318E JUMP JUMPDEST PUSH2 0x21A7 JUMP JUMPDEST PUSH2 0x33AD PUSH1 0x2 PUSH2 0x318E JUMP JUMPDEST SWAP1 PUSH2 0x31AA JUMP JUMPDEST PUSH2 0x31D4 JUMP JUMPDEST SWAP3 PUSH2 0x33C1 PUSH2 0x31FB JUMP JUMPDEST PUSH2 0x33DA DUP6 PUSH2 0x33D4 PUSH1 0x0 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x164E JUMP JUMPDEST SWAP1 PUSH2 0x3203 JUMP JUMPDEST MSTORE8 PUSH2 0x33E3 PUSH2 0x3224 JUMP JUMPDEST PUSH2 0x33FC DUP6 PUSH2 0x33F6 PUSH1 0x1 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x322F JUMP JUMPDEST SWAP1 PUSH2 0x3203 JUMP JUMPDEST MSTORE8 PUSH2 0x3407 PUSH1 0x2 PUSH2 0x318E JUMP JUMPDEST PUSH2 0x21A7 JUMP JUMPDEST PUSH2 0x3416 PUSH1 0x1 PUSH2 0x322F JUMP JUMPDEST SWAP1 PUSH2 0x31AA JUMP JUMPDEST SWAP3 JUMPDEST DUP4 PUSH2 0x3432 PUSH2 0x342C PUSH1 0x1 PUSH2 0x322F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST GT ISZERO PUSH2 0x3499 JUMPI PUSH2 0x3440 PUSH2 0x327F JUMP JUMPDEST DUP2 PUSH2 0x344B PUSH1 0xF PUSH2 0x328D JUMP JUMPDEST AND SWAP2 PUSH1 0x10 DUP4 LT ISZERO PUSH2 0x3494 JUMPI PUSH2 0x3467 PUSH2 0x3488 SWAP3 PUSH2 0x348E SWAP5 BYTE PUSH2 0x32A9 JUMP JUMPDEST PUSH2 0x3477 DUP6 SWAP2 DUP9 SWAP1 PUSH1 0x0 BYTE SWAP3 PUSH2 0x3203 JUMP JUMPDEST MSTORE8 PUSH2 0x3482 PUSH1 0x4 PUSH2 0x32B2 JUMP JUMPDEST SWAP1 PUSH2 0x32CE JUMP JUMPDEST SWAP4 PUSH2 0x324B JUMP JUMPDEST SWAP3 PUSH2 0x341E JUMP JUMPDEST PUSH2 0x2F72 JUMP JUMPDEST PUSH2 0x34C1 SWAP3 SWAP4 POP PUSH2 0x34BC SWAP1 PUSH2 0x34B6 PUSH2 0x34B0 PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ PUSH2 0x334F JUMP JUMPDEST PUSH2 0x2A97 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x34DF DUP2 PUSH2 0x34D2 JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x34FA JUMPI PUSH2 0x34F1 PUSH1 0x1 SWAP2 PUSH2 0x34C7 JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2F72 JUMP JUMPDEST SHL SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x8 PUSH2 0x351F SWAP2 MUL SWAP2 PUSH2 0x3519 PUSH1 0x0 NOT DUP5 PUSH2 0x34FF JUMP JUMPDEST SWAP3 PUSH2 0x34FF JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x353F PUSH2 0x353A PUSH2 0x3547 SWAP4 PUSH2 0xF79 JUMP JUMPDEST PUSH2 0x17C3 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x3503 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 DUP2 SLOAD SWAP2 PUSH9 0x10000000000000000 DUP4 LT ISZERO PUSH2 0x357B JUMPI DUP3 PUSH2 0x3573 SWAP2 PUSH1 0x1 PUSH2 0x3579 SWAP6 ADD DUP2 SSTORE PUSH2 0x34D6 JUMP JUMPDEST SWAP1 PUSH2 0x3529 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xC97 JUMP JUMPDEST SWAP1 PUSH2 0x358A SWAP1 PUSH2 0xF79 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x35A0 PUSH2 0xBAC JUMP JUMPDEST POP PUSH2 0x35B5 PUSH2 0x35AF DUP3 DUP5 SWAP1 PUSH2 0x3821 JUMP JUMPDEST ISZERO PUSH2 0x1C7 JUMP JUMPDEST PUSH1 0x0 EQ PUSH2 0x35F8 JUMPI PUSH2 0x35EE PUSH2 0x35F3 SWAP3 PUSH2 0x35D9 PUSH2 0x35D2 PUSH1 0x0 DUP6 ADD PUSH2 0x34C4 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x354B JUMP JUMPDEST PUSH1 0x1 PUSH2 0x35E7 PUSH1 0x0 DUP6 ADD PUSH2 0x2F88 JUMP JUMPDEST SWAP4 ADD PUSH2 0x3580 JUMP JUMPDEST PUSH2 0x16BA JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x3627 SWAP2 PUSH2 0x3621 PUSH2 0xF74 JUMP JUMPDEST SWAP2 PUSH2 0x3529 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3632 DUP2 PUSH2 0x34D2 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3653 JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 PUSH2 0x3650 PUSH2 0x364A DUP4 DUP4 PUSH2 0x34D6 JUMP JUMPDEST SWAP1 PUSH2 0x3615 JUMP JUMPDEST SSTORE JUMP JUMPDEST PUSH2 0x35FF JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x366E PUSH2 0x3669 PUSH2 0x3676 SWAP4 PUSH2 0x169B JUMP JUMPDEST PUSH2 0x16B7 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x3503 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x368C SWAP2 PUSH2 0x3686 PUSH2 0x2047 JUMP JUMPDEST SWAP2 PUSH2 0x3658 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3696 PUSH2 0xBAC JUMP JUMPDEST POP PUSH2 0x36AD PUSH2 0x36A8 PUSH1 0x1 DUP4 ADD DUP5 SWAP1 PUSH2 0x3580 JUMP JUMPDEST PUSH2 0x10CC JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x36C2 PUSH2 0x36BC PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ ISZERO PUSH1 0x0 EQ PUSH2 0x3790 JUMPI PUSH2 0x3742 SWAP3 PUSH1 0x1 PUSH2 0x373D SWAP3 DUP5 PUSH2 0x36EB PUSH1 0x0 SWAP7 PUSH2 0x36E5 DUP6 PUSH2 0x322F JUMP JUMPDEST SWAP1 PUSH2 0x217D JUMP JUMPDEST PUSH2 0x3708 PUSH2 0x36F9 DUP9 DUP6 ADD PUSH2 0x2F88 JUMP JUMPDEST PUSH2 0x3702 DUP7 PUSH2 0x322F JUMP JUMPDEST SWAP1 PUSH2 0x217D JUMP JUMPDEST DUP1 PUSH2 0x371B PUSH2 0x3715 DUP5 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST SUB PUSH2 0x3747 JUMPI JUMPDEST POP POP POP PUSH2 0x3737 PUSH2 0x3732 DUP7 DUP4 ADD PUSH2 0x34C4 JUMP JUMPDEST PUSH2 0x3629 JUMP JUMPDEST ADD PUSH2 0x3580 JUMP JUMPDEST PUSH2 0x367A JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x3788 SWAP3 PUSH2 0x377A PUSH2 0x3766 PUSH2 0x3760 PUSH2 0x3783 SWAP5 DUP13 DUP10 ADD PUSH2 0x2F97 JUMP JUMPDEST SWAP1 PUSH2 0x2FDC JUMP JUMPDEST SWAP4 PUSH2 0x3774 DUP6 SWAP2 DUP13 DUP10 ADD PUSH2 0x2F97 JUMP JUMPDEST SWAP1 PUSH2 0x3529 JUMP JUMPDEST SWAP2 DUP6 DUP6 ADD PUSH2 0x3580 JUMP JUMPDEST PUSH2 0x16BA JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x3721 JUMP JUMPDEST POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x37B8 SWAP3 SWAP2 PUSH2 0x37A6 PUSH2 0x141A JUMP JUMPDEST POP SWAP1 PUSH2 0x37B2 PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x390D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x37C3 PUSH2 0xF74 JUMP JUMPDEST POP DUP1 PUSH2 0x37D7 PUSH2 0x37D1 DUP5 PUSH2 0x3CD JUMP JUMPDEST SWAP2 PUSH2 0x3CD JUMP JUMPDEST LT PUSH1 0x0 EQ PUSH2 0x37ED JUMPI SWAP1 PUSH2 0x37E9 SWAP2 PUSH2 0x3967 JUMP JUMPDEST JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x37F6 SWAP2 PUSH2 0x3967 JUMP JUMPDEST PUSH2 0x37EA JUMP JUMPDEST PUSH2 0x3803 PUSH2 0xBAC JUMP JUMPDEST POP PUSH2 0x381D PUSH2 0x3817 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0x178 JUMP JUMPDEST SWAP2 PUSH2 0x178 JUMP JUMPDEST EQ SWAP1 JUMP JUMPDEST PUSH2 0x383F SWAP2 PUSH1 0x1 PUSH2 0x383A SWAP3 PUSH2 0x3833 PUSH2 0xBAC JUMP JUMPDEST POP ADD PUSH2 0x3580 JUMP JUMPDEST PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x3852 PUSH2 0x384C PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x3860 SWAP1 PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x38BE PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x1244 JUMP JUMPDEST PUSH2 0x38C7 DUP2 PUSH2 0x3863 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x38E1 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x38B1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x38EB JUMPI JUMP JUMPDEST PUSH2 0x38F3 PUSH2 0x163 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x3909 PUSH1 0x4 DUP3 ADD PUSH2 0x38CB JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 PUSH1 0x0 DUP1 SWAP2 PUSH2 0x3964 SWAP6 SWAP4 PUSH2 0x391F PUSH2 0x141A JUMP JUMPDEST POP PUSH2 0x3946 PUSH2 0x392C ADDRESS PUSH2 0x3857 JUMP JUMPDEST BALANCE PUSH2 0x393F PUSH2 0x3939 DUP6 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST LT ISZERO PUSH2 0x38E4 JUMP JUMPDEST DUP6 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 MLOAD SWAP3 GAS CALL SWAP2 PUSH2 0x395A PUSH2 0x141F JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x3A02 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x396F PUSH2 0xF74 JUMP JUMPDEST POP PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x39B3 PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x1244 JUMP JUMPDEST PUSH2 0x39BC DUP2 PUSH2 0x397E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x39D6 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x39A6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x39E0 JUMPI JUMP JUMPDEST PUSH2 0x39E8 PUSH2 0x163 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x39FE PUSH1 0x4 DUP3 ADD PUSH2 0x39C0 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0x3A0D PUSH2 0x141A JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0x3A53 JUMPI POP PUSH2 0x3A1F DUP3 PUSH2 0x1F1E JUMP JUMPDEST PUSH2 0x3A32 PUSH2 0x3A2C PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ PUSH2 0x3A3C JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3A48 PUSH2 0x3A4D SWAP2 PUSH2 0x3AA7 JUMP JUMPDEST PUSH2 0x39D9 JUMP JUMPDEST CODESIZE PUSH2 0x3A38 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x3A5E DUP3 PUSH2 0x1F1E JUMP JUMPDEST PUSH2 0x3A71 PUSH2 0x3A6B PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x3A82 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0x3AA3 SWAP1 PUSH2 0x3A8E PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x2ACB JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x3AAF PUSH2 0xBAC JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x3AC4 PUSH2 0x3ABE PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST GT SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 DIV PUSH4 0x3B23276E 0xDD SWAP6 0xAA ORIGIN 0x2D 0xBE LOG2 OR SAR 0xA8 0xB6 BLOCKHASH NUMBER DUP16 DUP2 NOT SWAP15 ADDMOD 0xFB DUP8 0xEC SAR PUSH5 0xAA7F64736F PUSH13 0x634300081B0033000000000000 ",
              "sourceMap": "558:6974:37:-:0;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode": {
                  "entryPoint": 1229,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_address": {
                  "entryPoint": 592,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_addresst_addresst_addresst_bytes32": {
                  "entryPoint": 1756,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 4
                },
                "abi_decode_addresst_addresst_uint256": {
                  "entryPoint": 1547,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_decode_addresst_struct_Attestation_calldatat_struct_Call_calldata": {
                  "entryPoint": 2309,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_decode_addresst_uint256": {
                  "entryPoint": 1658,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_addresst_uint256t_addresst_uint256t_array_bytes32_dyn_calldata": {
                  "entryPoint": 724,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 6
                },
                "abi_decode_array_bytes32_dyn_calldata": {
                  "entryPoint": 661,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_available_length_array_bytes32_dyn": {
                  "entryPoint": 7999,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_bool_fromMemory": {
                  "entryPoint": 11804,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_bytes32": {
                  "entryPoint": 1012,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_bytes32_fromMemory": {
                  "entryPoint": 6933,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_bytes32t_address": {
                  "entryPoint": 1131,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_bytes32t_array_bytes32_dyn_calldatat_addresst_bytes32": {
                  "entryPoint": 2636,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 5
                },
                "abi_decode_bytes32t_uint256": {
                  "entryPoint": 2077,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_bytes4": {
                  "entryPoint": 424,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_fromMemory": {
                  "entryPoint": 3292,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_struct_Attestation_calldata": {
                  "entryPoint": 2271,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_struct_Call_calldata": {
                  "entryPoint": 2290,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_t_bool_fromMemory": {
                  "entryPoint": 11789,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_t_bytes32": {
                  "entryPoint": 997,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_t_bytes32_fromMemory": {
                  "entryPoint": 6918,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_t_bytes4": {
                  "entryPoint": 409,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address": {
                  "entryPoint": 891,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint256": {
                  "entryPoint": 631,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint256t_uint256t_addresst_uint64t_uint64t_bytes32": {
                  "entryPoint": 1918,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 6
                },
                "abi_decode_uint64": {
                  "entryPoint": 1903,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 2123,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_address_uint256": {
                  "entryPoint": 10485,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_address_rational_by_uint256": {
                  "entryPoint": 8835,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_address_struct_Attestation_calldata_bytes32": {
                  "entryPoint": 7569,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_address_to_address": {
                  "entryPoint": 1258,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_to_address_nonPadded_inplace": {
                  "entryPoint": 7884,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_uint256": {
                  "entryPoint": 3308,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_address_uint256_rational_by": {
                  "entryPoint": 8681,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_address_uint256_uint256": {
                  "entryPoint": 8732,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_array_bytes32_dyn_calldata": {
                  "entryPoint": 10204,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_bool": {
                  "entryPoint": 473,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_bool_to_bool": {
                  "entryPoint": 460,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes32": {
                  "entryPoint": 1297,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes32_array_bytes32_dyn_calldata_address_bytes32": {
                  "entryPoint": 10256,
                  "id": null,
                  "parameterSlots": 6,
                  "returnSlots": 1
                },
                "abi_encode_bytes32_to_bytes32": {
                  "entryPoint": 1043,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes32_to_bytes32_nonPadded_inplace": {
                  "entryPoint": 7908,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes4": {
                  "entryPoint": 7000,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes_calldata": {
                  "entryPoint": 7137,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_packed_address_bytes32": {
                  "entryPoint": 7929,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_packed_stringliteral_c5d2": {
                  "entryPoint": 5076,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_packed_stringliteral_da0d_string_stringliteral_f986_string": {
                  "entryPoint": 10863,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_rational_by": {
                  "entryPoint": 8668,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_string": {
                  "entryPoint": 10955,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_calldata": {
                  "entryPoint": 7278,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_string_memory_ptr": {
                  "entryPoint": 10757,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_to_string": {
                  "entryPoint": 10906,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_04fc": {
                  "entryPoint": 13085,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_565f": {
                  "entryPoint": 14513,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_c5d2": {
                  "entryPoint": 5060,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_cc2e": {
                  "entryPoint": 14784,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
                  "entryPoint": 14758,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_da0d": {
                  "entryPoint": 10691,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_e11a": {
                  "entryPoint": 11913,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f986": {
                  "entryPoint": 10838,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_fb06": {
                  "entryPoint": 4763,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_struct_Attestation_calldata": {
                  "entryPoint": 7396,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_struct_AuthData_calldata": {
                  "entryPoint": 7331,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_struct_SaleDetails": {
                  "entryPoint": 1420,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_struct_SaleDetails_memory_ptr": {
                  "entryPoint": 1310,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_tuple": {
                  "entryPoint": 837,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 2136,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_bytes32": {
                  "entryPoint": 1056,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_04fc": {
                  "entryPoint": 13110,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_565f": {
                  "entryPoint": 14539,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_e11a": {
                  "entryPoint": 11939,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_fb06": {
                  "entryPoint": 4789,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_uint256": {
                  "entryPoint": 2805,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_uint256_to_uint256": {
                  "entryPoint": 1245,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_uint256_to_uint256_fromStack": {
                  "entryPoint": 2792,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_uint256_uint256": {
                  "entryPoint": 8515,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_uint256_uint256_address_uint64_uint64_bytes32": {
                  "entryPoint": 6305,
                  "id": null,
                  "parameterSlots": 7,
                  "returnSlots": 1
                },
                "abi_encode_uint64": {
                  "entryPoint": 1284,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_uint64_to_uint64": {
                  "entryPoint": 6292,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "allocate_and_zero_memory_array_bytes": {
                  "entryPoint": 12756,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_and_zero_memory_struct_struct_SaleDetails": {
                  "entryPoint": 4180,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 4126,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_bytes": {
                  "entryPoint": 5123,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_string": {
                  "entryPoint": 11669,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_struct_struct_SaleDetails": {
                  "entryPoint": 4147,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "allocate_memory_struct_struct_SaleDetails_storage_ptr": {
                  "entryPoint": 5738,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 355,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_array_bytes32_dyn": {
                  "entryPoint": 7970,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_allocation_size_bytes": {
                  "entryPoint": 5088,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_allocation_size_string": {
                  "entryPoint": 11634,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_array_bytes32_dyn_storage": {
                  "entryPoint": 12172,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_array_bytes32_dyn_storage_ptr": {
                  "entryPoint": 13511,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_bytes": {
                  "entryPoint": 7960,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_array_bytes32_dyn": {
                  "entryPoint": 12315,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_array_bytes32_dyn_storage": {
                  "entryPoint": 12168,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_array_bytes32_dyn_storage_ptr": {
                  "entryPoint": 13522,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_bytes": {
                  "entryPoint": 7966,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_string": {
                  "entryPoint": 10716,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_pop_array_bytes32_dyn_storage_ptr": {
                  "entryPoint": 13865,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "array_push_from_bytes32_to_array_bytes32_dyn_storage_ptr": {
                  "entryPoint": 13643,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "array_storeLengthForEncoding_array_bytes32_dyn": {
                  "entryPoint": 10186,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_bytes": {
                  "entryPoint": 7116,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_bytes_nonPadded_inplace": {
                  "entryPoint": 5055,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 7269,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string_fromStack": {
                  "entryPoint": 4676,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string_nonPadded_inplace": {
                  "entryPoint": 10646,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_access_address": {
                  "entryPoint": 6964,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_access_bytes32": {
                  "entryPoint": 7013,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_access_bytes4": {
                  "entryPoint": 6982,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_access_bytes_calldata": {
                  "entryPoint": 7046,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "calldata_access_string_calldata": {
                  "entryPoint": 7199,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "calldata_access_struct_AuthData_calldata": {
                  "entryPoint": 7172,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_access_uint64": {
                  "entryPoint": 7313,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_add_uint256": {
                  "entryPoint": 12714,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_mul_uint256": {
                  "entryPoint": 8615,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_sub_uint256": {
                  "entryPoint": 8573,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 559,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bool": {
                  "entryPoint": 455,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes32": {
                  "entryPoint": 973,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes4": {
                  "entryPoint": 376,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 3085,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_bool": {
                  "entryPoint": 5288,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_bytes32": {
                  "entryPoint": 4003,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_contract_IImplicitProjectValidation": {
                  "entryPoint": 6862,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_uint256": {
                  "entryPoint": 4277,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_uint64": {
                  "entryPoint": 4380,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_0_by": {
                  "entryPoint": 2469,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_15_by": {
                  "entryPoint": 12938,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_2_by": {
                  "entryPoint": 12683,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 12975,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by_1": {
                  "entryPoint": 12551,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by": {
                  "entryPoint": 10615,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by_1": {
                  "entryPoint": 12844,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 548,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 607,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint32": {
                  "entryPoint": 9627,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint64": {
                  "entryPoint": 1271,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint8": {
                  "entryPoint": 12554,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_ADDRESS_LENGTH": {
                  "entryPoint": 12588,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_DEFAULT_ADMIN_ROLE": {
                  "entryPoint": 2506,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_IMPLICIT_MODE_ADMIN_ROLE": {
                  "entryPoint": 3763,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_MINT_ADMIN_ROLE": {
                  "entryPoint": 5409,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_SYMBOLS": {
                  "entryPoint": 12927,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_WITHDRAW_ROLE": {
                  "entryPoint": 4902,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 5362,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_contract_IERC20": {
                  "entryPoint": 4979,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_contract_IERC721ItemsFunctions": {
                  "entryPoint": 3172,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_contract_IImplicitProjectValidation": {
                  "entryPoint": 3838,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_uint160": {
                  "entryPoint": 11295,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_array_array_bytes32_dyn_calldata_to_array_bytes32_dyn": {
                  "entryPoint": 8086,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "convert_array_array_bytes32_dyn_storage_to_array_bytes32_dyn_ptr": {
                  "entryPoint": 13508,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_array_bytes_to_string": {
                  "entryPoint": 10903,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_bool_to_bool": {
                  "entryPoint": 5467,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_bytes32_to_bytes32": {
                  "entryPoint": 3961,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_bytes32_to_uint256": {
                  "entryPoint": 9771,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_Address_to_address": {
                  "entryPoint": 14423,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_ERC721Sale_to_address": {
                  "entryPoint": 8823,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_IERC20_to_address": {
                  "entryPoint": 9615,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_IERC721ItemsFunctions_to_address": {
                  "entryPoint": 3196,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_IImplicitProjectValidation_to_address": {
                  "entryPoint": 6906,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_IImplicitProjectValidation_to_contract_IImplicitProjectValidation": {
                  "entryPoint": 3877,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_0_by_1_to_uint256": {
                  "entryPoint": 5710,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_1_by_1_to_uint256": {
                  "entryPoint": 12847,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_2_by_1_to_uint256": {
                  "entryPoint": 12686,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 8811,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_bytes32": {
                  "entryPoint": 2478,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 8783,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 12941,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint8": {
                  "entryPoint": 12978,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_stringliteral_0448_to_bytes1": {
                  "entryPoint": 12795,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_47fb_to_string": {
                  "entryPoint": 11757,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_c5d2_to_bytes32": {
                  "entryPoint": 8610,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_cb29_to_bytes16": {
                  "entryPoint": 12904,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_to_bytes1": {
                  "entryPoint": 12836,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_struct_AddressSet_storage_to_struct_AddressSet_ptr": {
                  "entryPoint": 6753,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_struct_SaleDetails_storage_to_struct_SaleDetails": {
                  "entryPoint": 4642,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_struct_Set_storage_to_struct_Set_ptr": {
                  "entryPoint": 9768,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint256": {
                  "entryPoint": 10618,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint8": {
                  "entryPoint": 12560,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 3184,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_IERC20": {
                  "entryPoint": 4967,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_IERC721ItemsFunctions": {
                  "entryPoint": 3160,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_IImplicitProjectValidation": {
                  "entryPoint": 3826,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 3132,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint256": {
                  "entryPoint": 11307,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint256_to_bytes32": {
                  "entryPoint": 11335,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint256_to_uint160": {
                  "entryPoint": 9791,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint256_to_uint256": {
                  "entryPoint": 5787,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint32_to_bytes4": {
                  "entryPoint": 9636,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint64_to_uint256": {
                  "entryPoint": 5682,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint64_to_uint64": {
                  "entryPoint": 5946,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint8_to_uint256": {
                  "entryPoint": 12601,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_calldata_to_memory": {
                  "entryPoint": 10200,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_calldata_to_memory_with_cleanup": {
                  "entryPoint": 7125,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_literal_to_memory_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b": {
                  "entryPoint": 11732,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 10720,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_struct_to_storage_from_struct_SaleDetails_to_struct_SaleDetails": {
                  "entryPoint": 6127,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "decrement_uint256": {
                  "entryPoint": 12875,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "external_fun_DEFAULT_ADMIN_ROLE": {
                  "entryPoint": 2530,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_acceptImplicitRequest": {
                  "entryPoint": 2415,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_checkMerkleProof": {
                  "entryPoint": 2735,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_getRoleAdmin": {
                  "entryPoint": 1078,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_getRoleMember": {
                  "entryPoint": 2158,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_getRoleMemberCount": {
                  "entryPoint": 2827,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_grantRole": {
                  "entryPoint": 1177,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_hasRole": {
                  "entryPoint": 2212,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_initialize": {
                  "entryPoint": 1827,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_itemsContract": {
                  "entryPoint": 2583,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_mint": {
                  "entryPoint": 843,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_renounceRole": {
                  "entryPoint": 1495,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_revokeRole": {
                  "entryPoint": 2880,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_saleDetails": {
                  "entryPoint": 1442,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setImplicitModeProjectId": {
                  "entryPoint": 2932,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setImplicitModeValidator": {
                  "entryPoint": 922,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setSaleDetails": {
                  "entryPoint": 2019,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_supportsInterface": {
                  "entryPoint": 495,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_withdrawERC20": {
                  "entryPoint": 1606,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_withdrawETH": {
                  "entryPoint": 1704,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "extract_from_storage_value_dynamict_bytes32": {
                  "entryPoint": 12228,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offset_0t_uint64": {
                  "entryPoint": 4440,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offset_1t_address": {
                  "entryPoint": 3096,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 4327,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_bool": {
                  "entryPoint": 5294,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_bytes32": {
                  "entryPoint": 4006,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_contract_IImplicitProjectValidation": {
                  "entryPoint": 6873,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_uint256": {
                  "entryPoint": 4280,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_uint64": {
                  "entryPoint": 4393,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_returndata": {
                  "entryPoint": 5151,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 3245,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun__at": {
                  "entryPoint": 12266,
                  "id": 4107,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun__checkRole": {
                  "entryPoint": 9498,
                  "id": 92,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun__grantRole": {
                  "entryPoint": 11133,
                  "id": 283,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun__length": {
                  "entryPoint": 12458,
                  "id": 4090,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun__revokeRole": {
                  "entryPoint": 9573,
                  "id": 439,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_acceptImplicitRequest": {
                  "entryPoint": 7623,
                  "id": 5899,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_add": {
                  "entryPoint": 13720,
                  "id": 3973,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_add_4273": {
                  "entryPoint": 11363,
                  "id": 4273,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_at": {
                  "entryPoint": 9819,
                  "id": 4369,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_blockTimeOutOfBounds": {
                  "entryPoint": 10078,
                  "id": 6808,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_callOptionalReturn": {
                  "entryPoint": 12005,
                  "id": 1564,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_checkMerkleProof": {
                  "entryPoint": 8100,
                  "id": 7556,
                  "parameterSlots": 5,
                  "returnSlots": 1
                },
                "fun_checkRole": {
                  "entryPoint": 10980,
                  "id": 131,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_contains": {
                  "entryPoint": 14369,
                  "id": 4076,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_efficientHash": {
                  "entryPoint": 14695,
                  "id": 2912,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_functionCall": {
                  "entryPoint": 14232,
                  "id": 1703,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_functionCallWithValue": {
                  "entryPoint": 14605,
                  "id": 1767,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "fun_getRoleAdmin": {
                  "entryPoint": 4039,
                  "id": 146,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getRoleMember": {
                  "entryPoint": 6756,
                  "id": 375,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_getRoleMemberCount": {
                  "entryPoint": 8268,
                  "id": 391,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_grantRole": {
                  "entryPoint": 9518,
                  "id": 415,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_grantRole_166": {
                  "entryPoint": 4114,
                  "id": 166,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_grantRole_inner": {
                  "entryPoint": 4102,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_hasRole": {
                  "entryPoint": 6820,
                  "id": 79,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_hashPair": {
                  "entryPoint": 14267,
                  "id": 2901,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_initialize": {
                  "entryPoint": 5514,
                  "id": 6783,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "fun_initializeImplicitMode": {
                  "entryPoint": 9739,
                  "id": 7595,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_initializeSignalsImplicitMode": {
                  "entryPoint": 12114,
                  "id": 5871,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_isContract": {
                  "entryPoint": 15015,
                  "id": 1631,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_itemsContract": {
                  "entryPoint": 7784,
                  "id": 7064,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_length": {
                  "entryPoint": 9918,
                  "id": 4342,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_mint": {
                  "entryPoint": 3361,
                  "id": 6992,
                  "parameterSlots": 6,
                  "returnSlots": 0
                },
                "fun_msgSender": {
                  "entryPoint": 9560,
                  "id": 1955,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_processProof": {
                  "entryPoint": 12351,
                  "id": 2470,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_remove": {
                  "entryPoint": 13966,
                  "id": 4057,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_remove_4300": {
                  "entryPoint": 11575,
                  "id": 4300,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_renounceRole": {
                  "entryPoint": 4855,
                  "id": 209,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_requireMerkleProof": {
                  "entryPoint": 10325,
                  "id": 7520,
                  "parameterSlots": 5,
                  "returnSlots": 0
                },
                "fun_revert": {
                  "entryPoint": null,
                  "id": 1942,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_revokeRole": {
                  "entryPoint": 8348,
                  "id": 186,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_revokeRole_314": {
                  "entryPoint": 11422,
                  "id": 314,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_revokeRole_inner": {
                  "entryPoint": 8336,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_safeTransfer": {
                  "entryPoint": 9664,
                  "id": 1270,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_safeTransferFrom": {
                  "entryPoint": 10536,
                  "id": 1297,
                  "parameterSlots": 4,
                  "returnSlots": 0
                },
                "fun_saleDetails": {
                  "entryPoint": 4654,
                  "id": 7074,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_setImplicitModeProjectId": {
                  "entryPoint": 8400,
                  "id": 7625,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setImplicitModeProjectId_inner": {
                  "entryPoint": 8387,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setImplicitModeValidator": {
                  "entryPoint": 3945,
                  "id": 7611,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setImplicitModeValidator_inner": {
                  "entryPoint": 3924,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setSaleDetails": {
                  "entryPoint": 6708,
                  "id": 7053,
                  "parameterSlots": 6,
                  "returnSlots": 0
                },
                "fun_setSaleDetails_inner": {
                  "entryPoint": 6397,
                  "id": null,
                  "parameterSlots": 6,
                  "returnSlots": 0
                },
                "fun_supportsInterface": {
                  "entryPoint": 12482,
                  "id": 60,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_2936": {
                  "entryPoint": 14331,
                  "id": 2936,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_356": {
                  "entryPoint": 9950,
                  "id": 356,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_5934": {
                  "entryPoint": 10014,
                  "id": 5934,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_7103": {
                  "entryPoint": 2993,
                  "id": 7103,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_7647": {
                  "entryPoint": 8469,
                  "id": 7647,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_7743": {
                  "entryPoint": 8411,
                  "id": 7743,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_toHexString": {
                  "entryPoint": 13176,
                  "id": 2339,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_toHexString_2359": {
                  "entryPoint": 12629,
                  "id": 2359,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_validateMint": {
                  "entryPoint": 8886,
                  "id": 6944,
                  "parameterSlots": 5,
                  "returnSlots": 0
                },
                "fun_verify": {
                  "entryPoint": 9876,
                  "id": 2409,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_verifyCallResultFromTarget": {
                  "entryPoint": 14850,
                  "id": 1898,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "fun_withdrawERC20": {
                  "entryPoint": 5014,
                  "id": 7692,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_withdrawERC20_inner": {
                  "entryPoint": 4991,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_withdrawETH": {
                  "entryPoint": 5276,
                  "id": 7720,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_withdrawETH_inner": {
                  "entryPoint": 5194,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "getter_fun_DEFAULT_ADMIN_ROLE": {
                  "entryPoint": 2519,
                  "id": 27,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 3129,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "increment_wrapping_uint256": {
                  "entryPoint": 12300,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "leftAlign_address": {
                  "entryPoint": 7872,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "leftAlign_bytes32": {
                  "entryPoint": 7905,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "leftAlign_uint160": {
                  "entryPoint": 7860,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_bool_of_address": {
                  "entryPoint": 6796,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_mapping_bytes32_bool_of_address": {
                  "entryPoint": 7806,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_bytes32_bool_of_bytes32": {
                  "entryPoint": 7830,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_bytes32_struct_AddressSet_storage_of_bytes32": {
                  "entryPoint": 6729,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_bytes32_struct_RoleData_storage_of_bytes32": {
                  "entryPoint": 3973,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_bytes32_uint256_of_bytes32": {
                  "entryPoint": 13696,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "memory_array_index_access_bytes": {
                  "entryPoint": 12803,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "memory_array_index_access_bytes32_dyn": {
                  "entryPoint": 12319,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "modifier_onlyRole": {
                  "entryPoint": 4073,
                  "id": 38,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_onlyRole_178": {
                  "entryPoint": 8307,
                  "id": 38,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_onlyRole_7009": {
                  "entryPoint": 5650,
                  "id": 38,
                  "parameterSlots": 6,
                  "returnSlots": 0
                },
                "modifier_onlyRole_7602": {
                  "entryPoint": 3799,
                  "id": 38,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_onlyRole_7618": {
                  "entryPoint": 8360,
                  "id": 38,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_onlyRole_7679": {
                  "entryPoint": 4938,
                  "id": 38,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "modifier_onlyRole_7701": {
                  "entryPoint": 5027,
                  "id": 38,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "panic_error_0x11": {
                  "entryPoint": 8551,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x31": {
                  "entryPoint": 13823,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x32": {
                  "entryPoint": 12146,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x41": {
                  "entryPoint": 3223,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 5374,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_bool": {
                  "entryPoint": 5479,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_bytes32": {
                  "entryPoint": 6083,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_contract_IImplicitProjectValidation": {
                  "entryPoint": 3889,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_uint256": {
                  "entryPoint": 5815,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_uint64": {
                  "entryPoint": 5974,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_memoryt_address": {
                  "entryPoint": 5850,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_memoryt_bytes32": {
                  "entryPoint": 6070,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_memoryt_uint256": {
                  "entryPoint": 5751,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_memoryt_uint64": {
                  "entryPoint": 5895,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_reference_type_struct_SaleDetails": {
                  "entryPoint": 4487,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_dynamic_bytes32": {
                  "entryPoint": 12252,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 4347,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_bool": {
                  "entryPoint": 5314,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_bytes32": {
                  "entryPoint": 4026,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_contract_IImplicitProjectValidation": {
                  "entryPoint": 6893,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_t_address": {
                  "entryPoint": 3116,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_t_uint64": {
                  "entryPoint": 4460,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_uint256": {
                  "entryPoint": 4300,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_uint64": {
                  "entryPoint": 4413,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral_04fc": {
                  "entryPoint": 13135,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_565f": {
                  "entryPoint": 14564,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_cc2e": {
                  "entryPoint": 14809,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_e11a": {
                  "entryPoint": 11964,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_fb06": {
                  "entryPoint": 4814,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_0803104b3ab68501accf02de57372b8e5e6e1582158b771d3f89279dc6822fe2": {
                  "entryPoint": 7031,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20": {
                  "entryPoint": 3208,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490": {
                  "entryPoint": 651,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
                  "entryPoint": 646,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d": {
                  "entryPoint": 2266,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_3894daff73bdbb8963c284e167b207f7abade3c031c50828ea230a16bdbc0f20": {
                  "entryPoint": 7036,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": 2983,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef": {
                  "entryPoint": 656,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
                  "entryPoint": 371,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 361,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_d0468cefdb41083d2ff66f1e66140f10c9da08cd905521a779422e76a84d11ec": {
                  "entryPoint": 10195,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_db64ea6d4a12deece376118739de8d9f517a2db5b58ea2ca332ea908c04c71d4": {
                  "entryPoint": 7041,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 366,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 3344,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 3213,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 5327,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_0": {
                  "entryPoint": 2472,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_160": {
                  "entryPoint": 5908,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_224": {
                  "entryPoint": 3286,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_248": {
                  "entryPoint": 12969,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_96": {
                  "entryPoint": 7854,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_dynamic": {
                  "entryPoint": 13567,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "shift_right_0_unsigned": {
                  "entryPoint": 3997,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_224_unsigned": {
                  "entryPoint": 349,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_8_unsigned": {
                  "entryPoint": 3079,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_uint256_uint8": {
                  "entryPoint": 13006,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 4374,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned_dynamic": {
                  "entryPoint": 12224,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "storage_array_index_access_bytes32_dyn": {
                  "entryPoint": 12183,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "storage_array_index_access_bytes32_dyn_ptr": {
                  "entryPoint": 13526,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "storage_set_to_zero_bytes32": {
                  "entryPoint": 13845,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "storage_set_to_zero_uint256": {
                  "entryPoint": 13946,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2": {
                  "entryPoint": 13045,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b": {
                  "entryPoint": 11692,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c": {
                  "entryPoint": 14435,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
                  "entryPoint": 14718,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874": {
                  "entryPoint": 10651,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd": {
                  "entryPoint": 11835,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69": {
                  "entryPoint": 10798,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b": {
                  "entryPoint": 4685,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_1_shift": {
                  "entryPoint": 5445,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_byte_slice_20_shift": {
                  "entryPoint": 3850,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_byte_slice_8_shift": {
                  "entryPoint": 6009,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_byte_slice_dynamic32": {
                  "entryPoint": 13571,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "update_byte_slice_shift": {
                  "entryPoint": 5914,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_byte_slice_shift_0": {
                  "entryPoint": 5764,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_byte_slice_shift_1": {
                  "entryPoint": 5333,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_bytes32_to_bytes32": {
                  "entryPoint": 13609,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 5863,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_address_to_t_address": {
                  "entryPoint": 5377,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_bool_to_bool": {
                  "entryPoint": 5482,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_bytes32_to_bytes32": {
                  "entryPoint": 6095,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_contract_IImplicitProjectValidation_to_contract_IImplicitProjectValidation": {
                  "entryPoint": 3892,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_struct_SaleDetails_to_struct_SaleDetails": {
                  "entryPoint": 6280,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_uint256_to_uint256": {
                  "entryPoint": 5818,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_uint64_to_t_uint64": {
                  "entryPoint": 6038,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_uint64_to_uint64": {
                  "entryPoint": 5977,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_uint256_to_uint256": {
                  "entryPoint": 13912,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 571,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_bool": {
                  "entryPoint": 11768,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_bytes32": {
                  "entryPoint": 976,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_bytes4": {
                  "entryPoint": 388,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_uint256": {
                  "entryPoint": 610,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_uint64": {
                  "entryPoint": 1882,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "write_to_memory_address": {
                  "entryPoint": 4360,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "write_to_memory_bytes32": {
                  "entryPoint": 4473,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "write_to_memory_uint256": {
                  "entryPoint": 4313,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "write_to_memory_uint64": {
                  "entryPoint": 4426,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "zero_memory_chunk_bytes1": {
                  "entryPoint": 12751,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "zero_value_for_address": {
                  "entryPoint": 4165,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_bytes32": {
                  "entryPoint": 4175,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_address": {
                  "entryPoint": 6724,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 2988,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bytes": {
                  "entryPoint": 5146,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bytes32": {
                  "entryPoint": 3956,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_string": {
                  "entryPoint": 12546,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_struct_SaleDetails": {
                  "entryPoint": 4266,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_uint256": {
                  "entryPoint": 8263,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_uint256": {
                  "entryPoint": 4160,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_uint64": {
                  "entryPoint": 4170,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "60806040526004361015610013575b610ba7565b61001e60003561015d565b806301ffc9a7146101585780630668d0bb146101535780630bb310de1461014e578063248a9ca3146101495780632f2ff15d146101445780633474a4a61461013f57806336568abe1461013a57806344004cc1146101355780634782f7791461013057806363acc14d1461012b5780638c17030f146101265780639010d07c1461012157806391d148541461011c5780639d043a6614610117578063a217fddf14610112578063a971e8421461010d578063bad4366114610108578063ca15c87314610103578063d547741f146100fe5763ed4c2ac70361000e57610b74565b610b40565b610b0b565b610aaf565b610a17565b6109e2565b61096f565b6108a4565b61086e565b6107e3565b610723565b6106a8565b610646565b6105d7565b6105a2565b610499565b610436565b61039a565b61034b565b6101ef565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b63ffffffff60e01b1690565b61018d81610178565b0361019457565b600080fd5b905035906101a682610184565b565b906020828203126101c2576101bf91600001610199565b90565b61016e565b151590565b6101d5906101c7565b9052565b91906101ed906000602085019401906101cc565b565b3461021f5761021b61020a6102053660046101a8565b610bb1565b610212610163565b918291826101d9565b0390f35b610169565b60018060a01b031690565b61023890610224565b90565b6102448161022f565b0361024b57565b600080fd5b9050359061025d8261023b565b565b90565b61026b8161025f565b0361027257565b600080fd5b9050359061028482610262565b565b600080fd5b600080fd5b600080fd5b909182601f830112156102cf5781359167ffffffffffffffff83116102ca5760200192602083028401116102c557565b610290565b61028b565b610286565b91909160a081840312610340576102ee8360008301610250565b926102fc8160208401610277565b9261030a8260408501610250565b926103188360608301610277565b92608082013567ffffffffffffffff811161033b576103379201610295565b9091565b610173565b61016e565b60000190565b6103656103593660046102d4565b94939093929192610d21565b61036d610163565b8061037781610345565b0390f35b906020828203126103955761039291600001610250565b90565b61016e565b346103c8576103b26103ad36600461037b565b610f69565b6103ba610163565b806103c481610345565b0390f35b610169565b90565b6103d9816103cd565b036103e057565b600080fd5b905035906103f2826103d0565b565b9060208282031261040e5761040b916000016103e5565b90565b61016e565b61041c906103cd565b9052565b919061043490600060208501940190610413565b565b346104665761046261045161044c3660046103f4565b610fc7565b610459610163565b91829182610420565b0390f35b610169565b9190604083820312610494578061048861049192600086016103e5565b93602001610250565b90565b61016e565b346104c8576104b26104ac36600461046b565b90611012565b6104ba610163565b806104c481610345565b0390f35b610169565b60009103126104d857565b61016e565b6104e69061025f565b9052565b6104f39061022f565b9052565b67ffffffffffffffff1690565b61050d906104f7565b9052565b61051a906103cd565b9052565b9060a08061058a93610538600082015160008601906104dd565b61054a602082015160208601906104dd565b61055c604082015160408601906104ea565b61056e60608201516060860190610504565b61058060808201516080860190610504565b0151910190610511565b565b91906105a090600060c0850194019061051e565b565b346105d2576105b23660046104cd565b6105ce6105bd61122e565b6105c5610163565b9182918261058c565b0390f35b610169565b34610606576105f06105ea36600461046b565b906112f7565b6105f8610163565b8061060281610345565b0390f35b610169565b90916060828403126106415761063e6106278460008501610250565b936106358160208601610250565b93604001610277565b90565b61016e565b346106755761065f61065936600461060b565b91611396565b610667610163565b8061067181610345565b0390f35b610169565b91906040838203126106a357806106976106a09260008601610250565b93602001610277565b90565b61016e565b346106d7576106c16106bb36600461067a565b9061149c565b6106c9610163565b806106d381610345565b0390f35b610169565b60808183031261071e576106f38260008301610250565b9261071b6107048460208501610250565b936107128160408601610250565b936060016103e5565b90565b61016e565b346107555761073f6107363660046106dc565b9291909161158a565b610747610163565b8061075181610345565b0390f35b610169565b610763816104f7565b0361076a57565b600080fd5b9050359061077c8261075a565b565b909160c0828403126107de576107978360008401610277565b926107a58160208501610277565b926107b38260408301610250565b926107db6107c4846060850161076f565b936107d2816080860161076f565b9360a0016103e5565b90565b61016e565b34610818576108026107f636600461077e565b94939093929192611a34565b61080a610163565b8061081481610345565b0390f35b610169565b9190604083820312610846578061083a61084392600086016103e5565b93602001610277565b90565b61016e565b6108549061022f565b9052565b919061086c9060006020850194019061084b565b565b3461089f5761089b61088a61088436600461081d565b90611a64565b610892610163565b91829182610858565b0390f35b610169565b346108d5576108d16108c06108ba36600461046b565b90611aa4565b6108c8610163565b918291826101d9565b0390f35b610169565b600080fd5b908160c09103126108ed5790565b6108da565b908160e09103126109005790565b6108da565b9160608383031261096a5761091d8260008501610250565b92602081013567ffffffffffffffff8111610965578361093e9183016108df565b92604082013567ffffffffffffffff81116109605761095d92016108f2565b90565b610173565b610173565b61016e565b346109a05761099c61098b610985366004610905565b91611dc7565b610993610163565b91829182610420565b0390f35b610169565b90565b60001b90565b6109c26109bd6109c7926109a5565b6109a8565b6103cd565b90565b6109d460006109ae565b90565b6109df6109ca565b90565b34610a12576109f23660046104cd565b610a0e6109fd6109d7565b610a05610163565b91829182610420565b0390f35b610169565b34610a4757610a273660046104cd565b610a43610a32611e68565b610a3a610163565b91829182610858565b0390f35b610169565b91608083830312610aaa57610a6482600085016103e5565b9260208101359167ffffffffffffffff8311610aa557610a8984610aa2948401610295565b939094610a998160408601610250565b936060016103e5565b90565b610173565b61016e565b34610ae357610adf610ace610ac5366004610a4c565b93929092611fa4565b610ad6610163565b918291826101d9565b0390f35b610169565b610af19061025f565b9052565b9190610b0990600060208501940190610ae8565b565b34610b3b57610b37610b26610b213660046103f4565b61204c565b610b2e610163565b91829182610af5565b0390f35b610169565b34610b6f57610b59610b5336600461046b565b9061209c565b610b61610163565b80610b6b81610345565b0390f35b610169565b34610ba257610b8c610b873660046103f4565b6120d0565b610b94610163565b80610b9e81610345565b0390f35b610169565b600080fd5b600090565b610bb9610bac565b5080610bd4610bce635f05bb8960e11b610178565b91610178565b148015610bf8575b908115610be8575b5090565b610bf29150612115565b38610be4565b50610c02816120db565b610bdc565b60081c90565b60018060a01b031690565b610c24610c2991610c07565b610c0d565b90565b610c369054610c18565b90565b90565b610c50610c4b610c5592610224565b610c39565b610224565b90565b610c6190610c3c565b90565b610c6d90610c58565b90565b610c7990610c3c565b90565b610c8590610c70565b90565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b90610cb790610c8d565b810190811067ffffffffffffffff821117610cd157604052565b610c97565b60e01b90565b6000910312610ce757565b61016e565b916020610d0e929493610d076040820196600083019061084b565b0190610ae8565b565b610d18610163565b3d6000823e3d90fd5b93610d34939591958693909192936122b6565b610d4e610d49610d446005610c2c565b610c64565b610c7c565b632e73e0fd828492803b15610eae57610d7b60008094610d86610d6f610163565b97889687958694610cd6565b845260048401610cec565b03925af19081610e81575b5015600014610e7c576001610dde575b5b907ff32d98590495ee51bacb93809409a188e7ab8268b70b4c969d9da3a883c539f791610dd9610dd0610163565b92839283610cec565b0390a1565b610df8610df3610dee6005610c2c565b610c64565b610c7c565b6340c10f19828492803b15610e7757610e2560008094610e30610e19610163565b97889687958694610cd6565b845260048401610cec565b03925af18015610e7257610e45575b50610da1565b610e659060003d8111610e6b575b610e5d8183610cad565b810190610cdc565b38610e3f565b503d610e53565b610d10565b610c88565b610da2565b610ea19060003d8111610ea7575b610e998183610cad565b810190610cdc565b38610d91565b503d610e8f565b610c88565b7f70649ec320b507febad3e8ef750e5f580b9ae32f9f50d4c7b121332c8197153090565b610ef090610eeb610ee6610eb3565b61251a565b610f54565b565b610efb90610c3c565b90565b610f0790610ef2565b90565b90610f1b60018060a01b03916109a8565b9181191691161790565b610f2e90610ef2565b90565b90565b90610f49610f44610f5092610f25565b610f31565b8254610f0a565b9055565b610f60610f6791610efe565b6003610f34565b565b610f7290610ed7565b565b600090565b610f82906103cd565b90565b90610f8f90610f79565b600052602052604060002090565b60001c90565b90565b610fb2610fb791610f9d565b610fa3565b90565b610fc49054610fa6565b90565b6001610fe0610fe692610fd8610f74565b506000610f85565b01610fba565b90565b9061100491610fff610ffa82610fc7565b61251a565b611006565b565b906110109161252e565b565b9061101c91610fe9565b565b9061103161102a610163565b9283610cad565b565b61103d60c061101e565b90565b600090565b600090565b600090565b600090565b61105c611033565b90602080808080808761106d611040565b815201611078611040565b815201611083611045565b81520161108e61104a565b81520161109961104a565b8152016110a461104f565b81525050565b6110b2611054565b90565b90565b6110c46110c991610f9d565b6110b5565b90565b6110d690546110b8565b90565b906110e39061025f565b9052565b6110f36110f891610f9d565b610c0d565b90565b61110590546110e7565b90565b906111129061022f565b9052565b60a01c90565b67ffffffffffffffff1690565b61113561113a91611116565b61111c565b90565b6111479054611129565b90565b90611154906104f7565b9052565b61116461116991610f9d565b61111c565b90565b6111769054611158565b90565b90611183906103cd565b9052565b906112206112176004611198611033565b946111b16111a8600083016110cc565b600088016110d9565b6111c96111c0600183016110cc565b602088016110d9565b6111e16111d8600283016110fb565b60408801611108565b6111f96111f06002830161113d565b6060880161114a565b6112116112086003830161116c565b6080880161114a565b01610fba565b60a08401611179565b565b61122b90611187565b90565b6112366110aa565b506112416006611222565b90565b60209181520190565b60207f20726f6c657320666f722073656c660000000000000000000000000000000000917f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201520152565b6112a8602f604092611244565b6112b18161124d565b0190565b6112cb906020810190600081830391015261129b565b90565b156112d557565b6112dd610163565b62461bcd60e51b8152806112f3600482016112b5565b0390fd5b906113249161131f8261131961131361130e612558565b61022f565b9161022f565b146112ce565b612565565b565b7f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec90565b90611365929161136061135b611326565b61251a565b61137f565b565b61137090610c3c565b90565b61137c90611367565b90565b9161138c61139493611373565b9190916125c0565b565b906113a1929161134a565b565b906113bd916113b86113b3611326565b61251a565b61144a565b565b905090565b6113d0600080926113bf565b0190565b6113dd906113c4565b90565b67ffffffffffffffff81116113fe576113fa602091610c8d565b0190565b610c97565b90611415611410836113e0565b61101e565b918252565b606090565b3d60001461143c576114303d611403565b903d6000602084013e5b565b61144461141a565b9061143a565b60006114799281929061145b610163565b9081611466816113d4565b03925af161147261141f565b50156101c7565b61147f57565b6000631d42c86760e21b81528061149860048201610345565b0390fd5b906114a6916113a3565b565b60ff1690565b6114ba6114bf91610f9d565b6114a8565b90565b6114cc90546114ae565b90565b60081b90565b906114e8610100600160a81b03916114cf565b9181191691161790565b6114fb90610c70565b90565b90565b9061151661151161151d926114f2565b6114fe565b82546114d5565b9055565b7f4c02318d8c3aadc98ccf18aebbf3126f651e0c3f6a1de5ff8edcf6724a2ad5c290565b9061155160ff916109a8565b9181191691161790565b611564906101c7565b90565b90565b9061157f61157a6115869261155b565b611567565b8254611545565b9055565b92909261159760056114c2565b6115f5576115a96115e7946005611501565b6115bb6115b46109ca565b829061252e565b6115cd6115c6611521565b829061252e565b6115df6115d8611326565b829061252e565b91909161260b565b6115f36001600561156a565b565b600063f92ee8a960e01b81528061160e60048201610345565b0390fd5b90611630959493929161162b611626611521565b61251a565b6118fd565b565b61164661164161164b926104f7565b610c39565b61025f565b90565b61166261165d611667926109a5565b610c39565b61025f565b90565b61167460c061101e565b90565b611681905161025f565b90565b90611691600019916109a8565b9181191691161790565b6116af6116aa6116b49261025f565b610c39565b61025f565b90565b90565b906116cf6116ca6116d69261169b565b6116b7565b8254611684565b9055565b6116e4905161022f565b90565b906116fc6116f7611703926114f2565b6114fe565b8254610f0a565b9055565b61171190516104f7565b90565b60a01b90565b9061173067ffffffffffffffff60a01b91611714565b9181191691161790565b61174e611749611753926104f7565b610c39565b6104f7565b90565b90565b9061176e6117696117759261173a565b611756565b825461171a565b9055565b9061178c67ffffffffffffffff916109a8565b9181191691161790565b906117ab6117a66117b29261173a565b611756565b8254611779565b9055565b6117c090516103cd565b90565b6117cc90610f9d565b90565b906117e46117df6117eb92610f79565b6117c3565b8254611684565b9055565b9061188060a06004611886946118146000820161180e60008801611677565b906116ba565b61182d6001820161182760208801611677565b906116ba565b61184660028201611840604088016116da565b906116e7565b61185f6002820161185960608801611707565b90611759565b6118786003820161187260808801611707565b90611796565b0192016117b6565b906117cf565b565b90611892916117ef565b565b61189d906104f7565b9052565b91946118ea6118f4929897956118e060a0966118d66118fb9a6118cc60c08a019e60008b0190610ae8565b6020890190610ae8565b604087019061084b565b6060850190611894565b6080830190611894565b0190610413565b565b91939092948161191561190f886104f7565b916104f7565b108015611a19575b6119fc578261193561192f600061164e565b9161025f565b146119df57826119a16119da9461199a876119918a6119888d61197f8b936119768c9761196d61196361166a565b9b60008d016110d9565b60208b016110d9565b60408901611108565b6060870161114a565b6080850161114a565b60a08301611179565b6006611888565b9394959190917fabec13ca1773eed55d54d2f64593c33fa520ee45cac73a162f13928a2ebee233966119d1610163565b968796876118a1565b0390a1565b60006310ba94e960e31b8152806119f860048201610345565b0390fd5b60006310ba94e960e31b815280611a1560048201610345565b0390fd5b5081611a2d611a274261025f565b91611632565b111561191d565b90611a429594939291611612565b565b600090565b90611a5390610f79565b600052602052604060002090565b90565b90611a84611a7f611a8993611a77611a44565b506001611a49565b611a61565b61265b565b90565b90611a96906114f2565b600052602052604060002090565b611acb916000611ac0611ac693611ab9610bac565b5082610f85565b01611a8c565b6114c2565b90565b60018060a01b031690565b611ae5611aea91610f9d565b611ace565b90565b611af79054611ad9565b90565b611b0390610c70565b90565b90505190611b13826103d0565b565b90602082820312611b2f57611b2c91600001611b06565b90565b61016e565b50611b43906020810190610250565b90565b50611b55906020810190610199565b90565b611b6190610178565b9052565b50611b749060208101906103e5565b90565b600080fd5b600080fd5b600080fd5b9035600160200382360303811215611bc757016020813591019167ffffffffffffffff8211611bc2576001820236038313611bbd57565b611b7c565b611b77565b611b81565b60209181520190565b90826000939282370152565b9190611bfb81611bf481611c0095611bcc565b8095611bd5565b610c8d565b0190565b9035600160400382360303811215611c1a570190565b611b81565b9035600160200382360303811215611c6057016020813591019167ffffffffffffffff8211611c5b576001820236038313611c5657565b611b7c565b611b77565b611b81565b60209181520190565b9190611c8881611c8181611c8d95611c65565b8095611bd5565b610c8d565b0190565b50611ca090602081019061076f565b90565b90611ce1906020611cd9611ccf60408401611cc16000880188611c1f565b908683036000880152611c6e565b9482810190611c91565b910190610504565b90565b611d8e91611d80611d7560c08301611d0c611d026000870187611b34565b60008601906104ea565b611d26611d1c6020870187611b46565b6020860190611b58565b611d40611d366040870187611b65565b6040860190610511565b611d5a611d506060870187611b65565b6060860190610511565b611d676080860186611b86565b908583036080870152611be1565b9260a0810190611c04565b9060a0818403910152611ca3565b90565b939290611dbd604091611dc594611db0606089019260008a019061084b565b8782036020890152611ce4565b940190610413565b565b9150602090611dd4610f74565b50611de7611de26003611aed565b611afa565b611e13633808a90b949294611e1e611dff6004610fba565b611e07610163565b97889687958695610cd6565b855260048501611d91565b03915afa908115611e6357600091611e35575b5090565b611e56915060203d8111611e5c575b611e4e8183610cad565b810190611b15565b38611e31565b503d611e44565b610d10565b611e70611a44565b50611e7b6005610c2c565b90565b90611e88906114f2565b600052602052604060002090565b90611ea090610f79565b600052602052604060002090565b60601b90565b611ebd90611eae565b90565b611ec990611eb4565b90565b611ed8611edd9161022f565b611ec0565b9052565b90565b611ef0611ef5916103cd565b611ee1565b9052565b601481611f0c611f149360209695611ecc565b018092611ee4565b0190565b60200190565b5190565b67ffffffffffffffff8111611f3a5760208091020190565b610c97565b90929192611f54611f4f82611f22565b61101e565b9381855260208086019202830192818411611f9157915b838310611f785750505050565b60208091611f8684866103e5565b815201920191611f6b565b610290565b611fa1913691611f3f565b90565b9093929192611fb1610bac565b50611fd9611fd3611fce611fc760028790611e7e565b8590611e96565b6114c2565b156101c7565b9485611fe8575b505050505090565b61203d95509061201f6120389392959294612010612004610163565b93849260208401611ef9565b60208201810382520382610cad565b61203161202b82611f1e565b91611f18565b2093611f96565b612694565b3880808080611fe0565b600090565b61206b6120666120709261205e612047565b506001611a49565b611a61565b6126be565b90565b9061208e9161208961208482610fc7565b61251a565b612090565b565b9061209a91612565565b565b906120a691612073565b565b6120c1906120bc6120b7610eb3565b61251a565b6120c3565b565b6120ce9060046117cf565b565b6120d9906120a8565b565b6120e3610bac565b50806120f86120f26000610178565b91610178565b14908115612105575b5090565b61210f91506126de565b38612101565b61211d610bac565b50612127816126de565b908115612133575b5090565b61213d915061271e565b3861212f565b91602061216592949361215e60408201966000830190610ae8565b0190610ae8565b565b634e487b7160e01b600052601160045260246000fd5b61218c6121929193929361025f565b9261025f565b820391821161219d57565b612167565b600090565b6121b66121bc9193929361025f565b9261025f565b916121c883820261025f565b9281840414901517156121d757565b612167565b6121e59061164e565b9052565b60409061221361221a94969593966122096060840198600085019061084b565b6020830190610ae8565b01906121dc565b565b60409061224661224d949695939661223c6060840198600085019061084b565b6020830190610ae8565b0190610ae8565b565b61226361225e612268926109a5565b610c39565b610224565b90565b6122749061224f565b90565b61228090610c70565b90565b6040906122ad6122b494969593966122a36060840198600085019061084b565b60208301906121dc565b0190610ae8565b565b91939290926122f06122cb600260060161113d565b6122ea6122e46122de600360060161116c565b92611632565b91611632565b9061275e565b6124fd5761230160006006016110cc565b61231361230d8561025f565b9161025f565b106124d0578291612361916123426123739561233c600060060191612337836110cc565b61217d565b906116ba565b61234f6004600601610fba565b9190339161235b6121a2565b93612855565b61236e60016006016110cc565b6121a7565b918161239361238d61238860026006016110fb565b61022f565b9161022f565b036124a257806123ab6123a58561025f565b9161025f565b1061247f5750806123cd6123c76123c2600061226b565b61022f565b9161022f565b1460001461241257346123e86123e28461025f565b9161025f565b036123f25750505b565b61240e346000938493630f55e7df60e11b85526004850161221c565b0390fd5b9034612427612421600061164e565b9161025f565b1160001461245c57612439600061226b565b600090612458346000938493630f55e7df60e11b855260048501612283565b0390fd5b61246861247a92611373565b903361247330612277565b9192612928565b6123f0565b8261249e8391926000938493630f55e7df60e11b85526004850161221c565b0390fd5b826124b060026006016110fb565b6124cc600080938493630f55e7df60e11b8552600485016121e9565b0390fd5b826124de60006006016110cc565b6124f96000928392639e4c446160e01b845260048401612143565b0390fd5b6000630fe219dd60e21b81528061251660048201610345565b0390fd5b61252c90612526612558565b90612ae4565b565b9061255061254b61255593612544818590612b7d565b6001611a49565b611a61565b612c63565b50565b612560611a44565b503390565b9061258761258261258c9361257b818590612c9e565b6001611a49565b611a61565b612d37565b50565b61259890610c70565b90565b63ffffffff1690565b6125b86125b36125bd9261259b565b610cd6565b610178565b90565b916126046004926125f561260995936125dc63a9059cbb6125a4565b926125e5610163565b9687946020860190815201610cec565b60208201810382520383610cad565b612ee5565b565b90612621612626939261261c610eb3565b61252e565b612f52565b565b90565b61263761263c91610f9d565b61169b565b90565b61265361264e6126589261025f565b610c39565b610224565b90565b6126876126826126919361267d600061268c95612676611a44565b5001612628565b612fea565b61262b565b61263f565b610c70565b90565b6126ae6126ba92936126b4926126a8610bac565b5061303f565b926103cd565b916103cd565b1490565b6126d660006126db926126cf612047565b5001612628565b6130aa565b90565b6126e6610bac565b50806127016126fb635a05180f60e01b610178565b91610178565b1490811561270e575b5090565b61271891506130c2565b3861270a565b612726610bac565b508061274161273b634e821d3360e11b610178565b91610178565b1490811561274e575b5090565b61275891506120db565b3861274a565b612766610bac565b508161277b612775600061164e565b9161025f565b149081156127ae575b50908115612791575b5090565b90506127a66127a0429261025f565b9161025f565b10153861278d565b90506127c36127bd429261025f565b9161025f565b1038612784565b60209181520190565b600080fd5b9037565b9091826127e8916127ca565b9160018060fb1b03811161280b578291602061280792029384916127d8565b0190565b6127d3565b9061284161284c916128539698979560609561283460808701936000880190610413565b85830360208701526127dc565b96604083019061084b565b0190610413565b565b92938361287361286d61286860006109ae565b6103cd565b916103cd565b03612880575b5050505050565b61289861289285848689918693611fa4565b156101c7565b6128c857505050906128b96128be926128b46001936002611e7e565b611e96565b61156a565b3880808080612879565b846128f1918593949190916128db610163565b9586956304cb8cd560e31b875260048701612810565b0390fd5b60409061291f61292694969593966129156060840198600085019061084b565b602083019061084b565b0190610ae8565b565b612975939161296160049461297093946129456323b872dd6125a4565b93919091612951610163565b97889560208701908152016128f5565b60208201810382520383610cad565b612ee5565b565b90565b61298e61298961299392612977565b610c39565b61025f565b90565b905090565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000910152565b6129cf60178092612996565b6129d88161299b565b0190565b5190565b60005b8381106129f4575050906000910152565b8060209183015181850152016129e3565b612a2a612a2192602092612a18816129dc565b94858093612996565b938491016129e0565b0190565b60007f206973206d697373696e6720726f6c6520000000000000000000000000000000910152565b612a6260118092612996565b612a6b81612a2e565b0190565b612a89612a949392612a83612a8e936129c3565b90612a05565b612a56565b90612a05565b90565b90565b612ab9612ac2602093612ac793612ab0816129dc565b93848093611244565b958691016129e0565b610c8d565b0190565b612ae19160208201916000818403910152612a9a565b90565b90612af9612af3838390611aa4565b156101c7565b612b01575050565b612b7991612b57612b30612b20612b1a612b5c95613155565b9361262b565b612b2a602061297a565b90613378565b91612b48612b3c610163565b93849260208401612a6f565b60208201810382520382610cad565b612a97565b612b64610163565b91829162461bcd60e51b835260048301612acb565b0390fd5b612b91612b8b828490611aa4565b156101c7565b612b9a575b5050565b612bbc6001612bb76000612baf818690610f85565b018590611a8c565b61156a565b90612bc5612558565b90612c02612bfc612bf67f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610f79565b926114f2565b926114f2565b92612c0b610163565b80612c1581610345565b0390a43880612b96565b612c2890610c3c565b90565b612c3f612c3a612c4492610224565b610c39565b61025f565b90565b612c5b612c56612c609261025f565b6109a8565b6103cd565b90565b90612c96612c90612c8b612c866000612c9b96612c7e610bac565b500194612c1f565b612c2b565b612c47565b91612628565b613598565b90565b612ca9818390611aa4565b612cb2575b5050565b612cd46000612ccf6000612cc7818690610f85565b018590611a8c565b61156a565b90612cdd612558565b90612d1a612d14612d0e7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95610f79565b926114f2565b926114f2565b92612d23610163565b80612d2d81610345565b0390a43880612cae565b90612d6a612d64612d5f612d5a6000612d6f96612d52610bac565b500194612c1f565b612c2b565b612c47565b91612628565b61368e565b90565b67ffffffffffffffff8111612d9057612d8c602091610c8d565b0190565b610c97565b90612da7612da283612d72565b61101e565b918252565b60007f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b612dde6020612d95565b90612deb60208301612dac565b565b612df5612dd4565b90565b612e01816101c7565b03612e0857565b600080fd5b90505190612e1a82612df8565b565b90602082820312612e3657612e3391600001612e0d565b90565b61016e565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201520152565b612e96602a604092611244565b612e9f81612e3b565b0190565b612eb99060208101906000818303910152612e89565b90565b15612ec357565b612ecb610163565b62461bcd60e51b815280612ee160048201612ea3565b0390fd5b612f2f91612ef5612f049261258f565b90612efe612ded565b91613798565b612f0d81611f1e565b612f20612f1a600061164e565b9161025f565b14908115612f31575b50612ebc565b565b612f4c91506020612f4182611f1e565b818301019101612e1c565b38612f29565b90612f69612f62612f7093610efe565b6003610f34565b60046117cf565b565b634e487b7160e01b600052603260045260246000fd5b5490565b600052602060002090565b612fa081612f88565b821015612fbb57612fb2600191612f8c565b91020190600090565b612f72565b1c90565b612fd4906008612fd99302612fc0565b610fa3565b90565b90612fe79154612fc4565b90565b61300991600061300392612ffc610f74565b5001612f97565b90612fdc565b90565b6001613018910161025f565b90565b5190565b906130298261301b565b81101561303a576020809102010190565b612f72565b9190613049610f74565b50613054600061164e565b905b8161307161306b6130668761301b565b61025f565b9161025f565b10156130a35761309761309d9161309161308c87869061301f565b6117b6565b906137bb565b9161300c565b90613056565b9192505090565b60006130bf916130b8612047565b5001612f88565b90565b6130ca610bac565b50806130e56130df637965db0b60e01b610178565b91610178565b149081156130f2575b5090565b6130fc91506137fb565b386130ee565b606090565b90565b60ff1690565b61312461311f61312992613107565b610c39565b61310a565b90565b6131366014613110565b90565b61314d6131486131529261310a565b610c39565b61025f565b90565b61317261316d61318892613167613102565b50612c1f565b612c2b565b61318261317d61312c565b613139565b90613378565b90565b90565b6131a261319d6131a79261318b565b610c39565b61025f565b90565b6131b96131bf9193929361025f565b9261025f565b82018092116131ca57565b612167565b369037565b906131f96131e183611403565b926020806131ef86936113e0565b92019103906131cf565b565b600360fc1b90565b9061320d82611f1e565b81101561321f57600160209102010190565b612f72565b600f60fb1b90565b90565b61324361323e6132489261322c565b610c39565b61025f565b90565b6132549061025f565b60008114613263576001900390565b612167565b6f181899199a1a9b1b9c1cb0b131b232b360811b90565b613287613268565b90565b90565b6132a161329c6132a69261328a565b610c39565b61025f565b90565b60f81b90565b90565b6132c66132c16132cb926132af565b610c39565b61310a565b90565b6132ed906132e76132e16132f29461310a565b9161025f565b90612fc0565b61025f565b90565b60007f537472696e67733a20686578206c656e67746820696e73756666696369656e74910152565b61332960208092611244565b613332816132f5565b0190565b61334c906020810190600081830391015261331d565b90565b1561335657565b61335e610163565b62461bcd60e51b81528061337460048201613336565b0390fd5b9190613382613102565b5061341c61340c6133b86133b36133a3600261339e879161318e565b6121a7565b6133ad600261318e565b906131aa565b6131d4565b926133c16131fb565b6133da856133d460009360001a9361164e565b90613203565b536133e3613224565b6133fc856133f660019360001a9361322f565b90613203565b53613407600261318e565b6121a7565b613416600161322f565b906131aa565b925b8361343261342c600161322f565b9161025f565b11156134995761344061327f565b8161344b600f61328d565b16916010831015613494576134676134889261348e941a6132a9565b6134778591889060001a92613203565b5361348260046132b2565b906132ce565b9361324b565b9261341e565b612f72565b6134c19293506134bc906134b66134b0600061164e565b9161025f565b1461334f565b612a97565b90565b90565b600052602060002090565b5490565b6134df816134d2565b8210156134fa576134f16001916134c7565b91020190600090565b612f72565b1b90565b9190600861351f910291613519600019846134ff565b926134ff565b9181191691161790565b919061353f61353a61354793610f79565b6117c3565b908354613503565b9055565b908154916801000000000000000083101561357b5782613573916001613579950181556134d6565b90613529565b565b610c97565b9061358a90610f79565b600052602052604060002090565b6135a0610bac565b506135b56135af828490613821565b156101c7565b6000146135f8576135ee6135f3926135d96135d2600085016134c4565b829061354b565b60016135e760008501612f88565b9301613580565b6116ba565b600190565b5050600090565b634e487b7160e01b600052603160045260246000fd5b61362791613621610f74565b91613529565b565b613632816134d2565b801561365357600190039061365061364a83836134d6565b90613615565b55565b6135ff565b919061366e6136696136769361169b565b6116b7565b908354613503565b9055565b61368c91613686612047565b91613658565b565b613696610bac565b506136ad6136a8600183018490613580565b6110cc565b90816136c26136bc600061164e565b9161025f565b14156000146137905761374292600161373d92846136eb6000966136e58561322f565b9061217d565b6137086136f9888501612f88565b6137028661322f565b9061217d565b8061371b6137158461025f565b9161025f565b03613747575b5050506137376137328683016134c4565b613629565b01613580565b61367a565b600190565b6137889261377a613766613760613783948c8901612f97565b90612fdc565b9361377485918c8901612f97565b90613529565b91858501613580565b6116ba565b388080613721565b505050600090565b906137b892916137a661141a565b50906137b2600061164e565b9161390d565b90565b6137c3610f74565b50806137d76137d1846103cd565b916103cd565b106000146137ed57906137e991613967565b5b90565b6137f691613967565b6137ea565b613803610bac565b5061381d6138176301ffc9a760e01b610178565b91610178565b1490565b61383f91600161383a92613833610bac565b5001613580565b6110cc565b61385261384c600061164e565b9161025f565b141590565b61386090610c70565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201520152565b6138be6026604092611244565b6138c781613863565b0190565b6138e190602081019060008183039101526138b1565b90565b156138eb57565b6138f3610163565b62461bcd60e51b815280613909600482016138cb565b0390fd5b9160008091613964959361391f61141a565b5061394661392c30613857565b3161393f6139398561025f565b9161025f565b10156138e4565b8591602082019151925af19161395a61141f565b9092909192613a02565b90565b61396f610f74565b50600052602052604060002090565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b6139b3601d602092611244565b6139bc8161397e565b0190565b6139d690602081019060008183039101526139a6565b90565b156139e057565b6139e8610163565b62461bcd60e51b8152806139fe600482016139c0565b0390fd5b919290613a0d61141a565b50600014613a535750613a1f82611f1e565b613a32613a2c600061164e565b9161025f565b14613a3c575b5090565b613a48613a4d91613aa7565b6139d9565b38613a38565b8290613a5e82611f1e565b613a71613a6b600061164e565b9161025f565b11600014613a825750805190602001fd5b613aa390613a8e610163565b91829162461bcd60e51b835260048301612acb565b0390fd5b613aaf610bac565b503b613ac4613abe600061164e565b9161025f565b119056fea2646970667358221220c204633b23276edd95aa322dbea2171da8b640438f81199e08fb87ec1d64aa7f64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0xBA7 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x15D JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x158 JUMPI DUP1 PUSH4 0x668D0BB EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0xBB310DE EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x149 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0x3474A4A6 EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x44004CC1 EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0x4782F779 EQ PUSH2 0x130 JUMPI DUP1 PUSH4 0x63ACC14D EQ PUSH2 0x12B JUMPI DUP1 PUSH4 0x8C17030F EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0x9D043A66 EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0xA971E842 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0xBAD43661 EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0xFE JUMPI PUSH4 0xED4C2AC7 SUB PUSH2 0xE JUMPI PUSH2 0xB74 JUMP JUMPDEST PUSH2 0xB40 JUMP JUMPDEST PUSH2 0xB0B JUMP JUMPDEST PUSH2 0xAAF JUMP JUMPDEST PUSH2 0xA17 JUMP JUMPDEST PUSH2 0x9E2 JUMP JUMPDEST PUSH2 0x96F JUMP JUMPDEST PUSH2 0x8A4 JUMP JUMPDEST PUSH2 0x86E JUMP JUMPDEST PUSH2 0x7E3 JUMP JUMPDEST PUSH2 0x723 JUMP JUMPDEST PUSH2 0x6A8 JUMP JUMPDEST PUSH2 0x646 JUMP JUMPDEST PUSH2 0x5D7 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST PUSH2 0x499 JUMP JUMPDEST PUSH2 0x436 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST PUSH2 0x34B JUMP JUMPDEST PUSH2 0x1EF JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH2 0x18D DUP2 PUSH2 0x178 JUMP JUMPDEST SUB PUSH2 0x194 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x1A6 DUP3 PUSH2 0x184 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x1C2 JUMPI PUSH2 0x1BF SWAP2 PUSH1 0x0 ADD PUSH2 0x199 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x1D5 SWAP1 PUSH2 0x1C7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1ED SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x1CC JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x21F JUMPI PUSH2 0x21B PUSH2 0x20A PUSH2 0x205 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A8 JUMP JUMPDEST PUSH2 0xBB1 JUMP JUMPDEST PUSH2 0x212 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x1D9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x238 SWAP1 PUSH2 0x224 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x244 DUP2 PUSH2 0x22F JUMP JUMPDEST SUB PUSH2 0x24B JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x25D DUP3 PUSH2 0x23B JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26B DUP2 PUSH2 0x25F JUMP JUMPDEST SUB PUSH2 0x272 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x284 DUP3 PUSH2 0x262 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x2CF JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x2CA JUMPI PUSH1 0x20 ADD SWAP3 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH2 0x2C5 JUMPI JUMP JUMPDEST PUSH2 0x290 JUMP JUMPDEST PUSH2 0x28B JUMP JUMPDEST PUSH2 0x286 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0xA0 DUP2 DUP5 SUB SLT PUSH2 0x340 JUMPI PUSH2 0x2EE DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x250 JUMP JUMPDEST SWAP3 PUSH2 0x2FC DUP2 PUSH1 0x20 DUP5 ADD PUSH2 0x277 JUMP JUMPDEST SWAP3 PUSH2 0x30A DUP3 PUSH1 0x40 DUP6 ADD PUSH2 0x250 JUMP JUMPDEST SWAP3 PUSH2 0x318 DUP4 PUSH1 0x60 DUP4 ADD PUSH2 0x277 JUMP JUMPDEST SWAP3 PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x33B JUMPI PUSH2 0x337 SWAP3 ADD PUSH2 0x295 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x365 PUSH2 0x359 CALLDATASIZE PUSH1 0x4 PUSH2 0x2D4 JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0xD21 JUMP JUMPDEST PUSH2 0x36D PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x377 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x395 JUMPI PUSH2 0x392 SWAP2 PUSH1 0x0 ADD PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH2 0x3B2 PUSH2 0x3AD CALLDATASIZE PUSH1 0x4 PUSH2 0x37B JUMP JUMPDEST PUSH2 0xF69 JUMP JUMPDEST PUSH2 0x3BA PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x3C4 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3D9 DUP2 PUSH2 0x3CD JUMP JUMPDEST SUB PUSH2 0x3E0 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x3F2 DUP3 PUSH2 0x3D0 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x40E JUMPI PUSH2 0x40B SWAP2 PUSH1 0x0 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST PUSH2 0x41C SWAP1 PUSH2 0x3CD JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x434 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x413 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x466 JUMPI PUSH2 0x462 PUSH2 0x451 PUSH2 0x44C CALLDATASIZE PUSH1 0x4 PUSH2 0x3F4 JUMP JUMPDEST PUSH2 0xFC7 JUMP JUMPDEST PUSH2 0x459 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x420 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x494 JUMPI DUP1 PUSH2 0x488 PUSH2 0x491 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x4C8 JUMPI PUSH2 0x4B2 PUSH2 0x4AC CALLDATASIZE PUSH1 0x4 PUSH2 0x46B JUMP JUMPDEST SWAP1 PUSH2 0x1012 JUMP JUMPDEST PUSH2 0x4BA PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x4C4 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x4D8 JUMPI JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST PUSH2 0x4E6 SWAP1 PUSH2 0x25F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x4F3 SWAP1 PUSH2 0x22F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x50D SWAP1 PUSH2 0x4F7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x51A SWAP1 PUSH2 0x3CD JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0xA0 DUP1 PUSH2 0x58A SWAP4 PUSH2 0x538 PUSH1 0x0 DUP3 ADD MLOAD PUSH1 0x0 DUP7 ADD SWAP1 PUSH2 0x4DD JUMP JUMPDEST PUSH2 0x54A PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x4DD JUMP JUMPDEST PUSH2 0x55C PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP7 ADD SWAP1 PUSH2 0x4EA JUMP JUMPDEST PUSH2 0x56E PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP7 ADD SWAP1 PUSH2 0x504 JUMP JUMPDEST PUSH2 0x580 PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x80 DUP7 ADD SWAP1 PUSH2 0x504 JUMP JUMPDEST ADD MLOAD SWAP2 ADD SWAP1 PUSH2 0x511 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5A0 SWAP1 PUSH1 0x0 PUSH1 0xC0 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x51E JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x5D2 JUMPI PUSH2 0x5B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x5CE PUSH2 0x5BD PUSH2 0x122E JUMP JUMPDEST PUSH2 0x5C5 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x58C JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST CALLVALUE PUSH2 0x606 JUMPI PUSH2 0x5F0 PUSH2 0x5EA CALLDATASIZE PUSH1 0x4 PUSH2 0x46B JUMP JUMPDEST SWAP1 PUSH2 0x12F7 JUMP JUMPDEST PUSH2 0x5F8 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x602 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0x641 JUMPI PUSH2 0x63E PUSH2 0x627 DUP5 PUSH1 0x0 DUP6 ADD PUSH2 0x250 JUMP JUMPDEST SWAP4 PUSH2 0x635 DUP2 PUSH1 0x20 DUP7 ADD PUSH2 0x250 JUMP JUMPDEST SWAP4 PUSH1 0x40 ADD PUSH2 0x277 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x675 JUMPI PUSH2 0x65F PUSH2 0x659 CALLDATASIZE PUSH1 0x4 PUSH2 0x60B JUMP JUMPDEST SWAP2 PUSH2 0x1396 JUMP JUMPDEST PUSH2 0x667 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x671 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x6A3 JUMPI DUP1 PUSH2 0x697 PUSH2 0x6A0 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x250 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x277 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x6D7 JUMPI PUSH2 0x6C1 PUSH2 0x6BB CALLDATASIZE PUSH1 0x4 PUSH2 0x67A JUMP JUMPDEST SWAP1 PUSH2 0x149C JUMP JUMPDEST PUSH2 0x6C9 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x6D3 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH1 0x80 DUP2 DUP4 SUB SLT PUSH2 0x71E JUMPI PUSH2 0x6F3 DUP3 PUSH1 0x0 DUP4 ADD PUSH2 0x250 JUMP JUMPDEST SWAP3 PUSH2 0x71B PUSH2 0x704 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x250 JUMP JUMPDEST SWAP4 PUSH2 0x712 DUP2 PUSH1 0x40 DUP7 ADD PUSH2 0x250 JUMP JUMPDEST SWAP4 PUSH1 0x60 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x755 JUMPI PUSH2 0x73F PUSH2 0x736 CALLDATASIZE PUSH1 0x4 PUSH2 0x6DC JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x158A JUMP JUMPDEST PUSH2 0x747 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x751 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH2 0x763 DUP2 PUSH2 0x4F7 JUMP JUMPDEST SUB PUSH2 0x76A JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x77C DUP3 PUSH2 0x75A JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0xC0 DUP3 DUP5 SUB SLT PUSH2 0x7DE JUMPI PUSH2 0x797 DUP4 PUSH1 0x0 DUP5 ADD PUSH2 0x277 JUMP JUMPDEST SWAP3 PUSH2 0x7A5 DUP2 PUSH1 0x20 DUP6 ADD PUSH2 0x277 JUMP JUMPDEST SWAP3 PUSH2 0x7B3 DUP3 PUSH1 0x40 DUP4 ADD PUSH2 0x250 JUMP JUMPDEST SWAP3 PUSH2 0x7DB PUSH2 0x7C4 DUP5 PUSH1 0x60 DUP6 ADD PUSH2 0x76F JUMP JUMPDEST SWAP4 PUSH2 0x7D2 DUP2 PUSH1 0x80 DUP7 ADD PUSH2 0x76F JUMP JUMPDEST SWAP4 PUSH1 0xA0 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x818 JUMPI PUSH2 0x802 PUSH2 0x7F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x77E JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0x1A34 JUMP JUMPDEST PUSH2 0x80A PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x814 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x846 JUMPI DUP1 PUSH2 0x83A PUSH2 0x843 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x277 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST PUSH2 0x854 SWAP1 PUSH2 0x22F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x86C SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x89F JUMPI PUSH2 0x89B PUSH2 0x88A PUSH2 0x884 CALLDATASIZE PUSH1 0x4 PUSH2 0x81D JUMP JUMPDEST SWAP1 PUSH2 0x1A64 JUMP JUMPDEST PUSH2 0x892 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x858 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST CALLVALUE PUSH2 0x8D5 JUMPI PUSH2 0x8D1 PUSH2 0x8C0 PUSH2 0x8BA CALLDATASIZE PUSH1 0x4 PUSH2 0x46B JUMP JUMPDEST SWAP1 PUSH2 0x1AA4 JUMP JUMPDEST PUSH2 0x8C8 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x1D9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0xC0 SWAP2 SUB SLT PUSH2 0x8ED JUMPI SWAP1 JUMP JUMPDEST PUSH2 0x8DA JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xE0 SWAP2 SUB SLT PUSH2 0x900 JUMPI SWAP1 JUMP JUMPDEST PUSH2 0x8DA JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x96A JUMPI PUSH2 0x91D DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x250 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x965 JUMPI DUP4 PUSH2 0x93E SWAP2 DUP4 ADD PUSH2 0x8DF JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x960 JUMPI PUSH2 0x95D SWAP3 ADD PUSH2 0x8F2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x9A0 JUMPI PUSH2 0x99C PUSH2 0x98B PUSH2 0x985 CALLDATASIZE PUSH1 0x4 PUSH2 0x905 JUMP JUMPDEST SWAP2 PUSH2 0x1DC7 JUMP JUMPDEST PUSH2 0x993 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x420 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x9C2 PUSH2 0x9BD PUSH2 0x9C7 SWAP3 PUSH2 0x9A5 JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH2 0x3CD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9D4 PUSH1 0x0 PUSH2 0x9AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9DF PUSH2 0x9CA JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0xA12 JUMPI PUSH2 0x9F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CD JUMP JUMPDEST PUSH2 0xA0E PUSH2 0x9FD PUSH2 0x9D7 JUMP JUMPDEST PUSH2 0xA05 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x420 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST CALLVALUE PUSH2 0xA47 JUMPI PUSH2 0xA27 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CD JUMP JUMPDEST PUSH2 0xA43 PUSH2 0xA32 PUSH2 0x1E68 JUMP JUMPDEST PUSH2 0xA3A PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x858 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP2 PUSH1 0x80 DUP4 DUP4 SUB SLT PUSH2 0xAAA JUMPI PUSH2 0xA64 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xAA5 JUMPI PUSH2 0xA89 DUP5 PUSH2 0xAA2 SWAP5 DUP5 ADD PUSH2 0x295 JUMP JUMPDEST SWAP4 SWAP1 SWAP5 PUSH2 0xA99 DUP2 PUSH1 0x40 DUP7 ADD PUSH2 0x250 JUMP JUMPDEST SWAP4 PUSH1 0x60 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0xAE3 JUMPI PUSH2 0xADF PUSH2 0xACE PUSH2 0xAC5 CALLDATASIZE PUSH1 0x4 PUSH2 0xA4C JUMP JUMPDEST SWAP4 SWAP3 SWAP1 SWAP3 PUSH2 0x1FA4 JUMP JUMPDEST PUSH2 0xAD6 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x1D9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH2 0xAF1 SWAP1 PUSH2 0x25F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xB09 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0xB3B JUMPI PUSH2 0xB37 PUSH2 0xB26 PUSH2 0xB21 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F4 JUMP JUMPDEST PUSH2 0x204C JUMP JUMPDEST PUSH2 0xB2E PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xAF5 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST CALLVALUE PUSH2 0xB6F JUMPI PUSH2 0xB59 PUSH2 0xB53 CALLDATASIZE PUSH1 0x4 PUSH2 0x46B JUMP JUMPDEST SWAP1 PUSH2 0x209C JUMP JUMPDEST PUSH2 0xB61 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0xB6B DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST CALLVALUE PUSH2 0xBA2 JUMPI PUSH2 0xB8C PUSH2 0xB87 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F4 JUMP JUMPDEST PUSH2 0x20D0 JUMP JUMPDEST PUSH2 0xB94 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0xB9E DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xBB9 PUSH2 0xBAC JUMP JUMPDEST POP DUP1 PUSH2 0xBD4 PUSH2 0xBCE PUSH4 0x5F05BB89 PUSH1 0xE1 SHL PUSH2 0x178 JUMP JUMPDEST SWAP2 PUSH2 0x178 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0xBF8 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0xBE8 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0xBF2 SWAP2 POP PUSH2 0x2115 JUMP JUMPDEST CODESIZE PUSH2 0xBE4 JUMP JUMPDEST POP PUSH2 0xC02 DUP2 PUSH2 0x20DB JUMP JUMPDEST PUSH2 0xBDC JUMP JUMPDEST PUSH1 0x8 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xC24 PUSH2 0xC29 SWAP2 PUSH2 0xC07 JUMP JUMPDEST PUSH2 0xC0D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC36 SWAP1 SLOAD PUSH2 0xC18 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC50 PUSH2 0xC4B PUSH2 0xC55 SWAP3 PUSH2 0x224 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x224 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC61 SWAP1 PUSH2 0xC3C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC6D SWAP1 PUSH2 0xC58 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC79 SWAP1 PUSH2 0xC3C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC85 SWAP1 PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0xCB7 SWAP1 PUSH2 0xC8D JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xCD1 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0xC97 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0xCE7 JUMPI JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0xD0E SWAP3 SWAP5 SWAP4 PUSH2 0xD07 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xD18 PUSH2 0x163 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP4 PUSH2 0xD34 SWAP4 SWAP6 SWAP2 SWAP6 DUP7 SWAP4 SWAP1 SWAP2 SWAP3 SWAP4 PUSH2 0x22B6 JUMP JUMPDEST PUSH2 0xD4E PUSH2 0xD49 PUSH2 0xD44 PUSH1 0x5 PUSH2 0xC2C JUMP JUMPDEST PUSH2 0xC64 JUMP JUMPDEST PUSH2 0xC7C JUMP JUMPDEST PUSH4 0x2E73E0FD DUP3 DUP5 SWAP3 DUP1 EXTCODESIZE ISZERO PUSH2 0xEAE JUMPI PUSH2 0xD7B PUSH1 0x0 DUP1 SWAP5 PUSH2 0xD86 PUSH2 0xD6F PUSH2 0x163 JUMP JUMPDEST SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH2 0xCD6 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH2 0xCEC JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 PUSH2 0xE81 JUMPI JUMPDEST POP ISZERO PUSH1 0x0 EQ PUSH2 0xE7C JUMPI PUSH1 0x1 PUSH2 0xDDE JUMPI JUMPDEST JUMPDEST SWAP1 PUSH32 0xF32D98590495EE51BACB93809409A188E7AB8268B70B4C969D9DA3A883C539F7 SWAP2 PUSH2 0xDD9 PUSH2 0xDD0 PUSH2 0x163 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0xCEC JUMP JUMPDEST SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0xDF8 PUSH2 0xDF3 PUSH2 0xDEE PUSH1 0x5 PUSH2 0xC2C JUMP JUMPDEST PUSH2 0xC64 JUMP JUMPDEST PUSH2 0xC7C JUMP JUMPDEST PUSH4 0x40C10F19 DUP3 DUP5 SWAP3 DUP1 EXTCODESIZE ISZERO PUSH2 0xE77 JUMPI PUSH2 0xE25 PUSH1 0x0 DUP1 SWAP5 PUSH2 0xE30 PUSH2 0xE19 PUSH2 0x163 JUMP JUMPDEST SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH2 0xCD6 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH2 0xCEC JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xE72 JUMPI PUSH2 0xE45 JUMPI JUMPDEST POP PUSH2 0xDA1 JUMP JUMPDEST PUSH2 0xE65 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0xE6B JUMPI JUMPDEST PUSH2 0xE5D DUP2 DUP4 PUSH2 0xCAD JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xCDC JUMP JUMPDEST CODESIZE PUSH2 0xE3F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xE53 JUMP JUMPDEST PUSH2 0xD10 JUMP JUMPDEST PUSH2 0xC88 JUMP JUMPDEST PUSH2 0xDA2 JUMP JUMPDEST PUSH2 0xEA1 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0xEA7 JUMPI JUMPDEST PUSH2 0xE99 DUP2 DUP4 PUSH2 0xCAD JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xCDC JUMP JUMPDEST CODESIZE PUSH2 0xD91 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xE8F JUMP JUMPDEST PUSH2 0xC88 JUMP JUMPDEST PUSH32 0x70649EC320B507FEBAD3E8EF750E5F580B9AE32F9F50D4C7B121332C81971530 SWAP1 JUMP JUMPDEST PUSH2 0xEF0 SWAP1 PUSH2 0xEEB PUSH2 0xEE6 PUSH2 0xEB3 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0xF54 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEFB SWAP1 PUSH2 0xC3C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF07 SWAP1 PUSH2 0xEF2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF1B PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x9A8 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0xF2E SWAP1 PUSH2 0xEF2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF49 PUSH2 0xF44 PUSH2 0xF50 SWAP3 PUSH2 0xF25 JUMP JUMPDEST PUSH2 0xF31 JUMP JUMPDEST DUP3 SLOAD PUSH2 0xF0A JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xF60 PUSH2 0xF67 SWAP2 PUSH2 0xEFE JUMP JUMPDEST PUSH1 0x3 PUSH2 0xF34 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF72 SWAP1 PUSH2 0xED7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xF82 SWAP1 PUSH2 0x3CD JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF8F SWAP1 PUSH2 0xF79 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFB2 PUSH2 0xFB7 SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0xFA3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFC4 SWAP1 SLOAD PUSH2 0xFA6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0xFE0 PUSH2 0xFE6 SWAP3 PUSH2 0xFD8 PUSH2 0xF74 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xF85 JUMP JUMPDEST ADD PUSH2 0xFBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1004 SWAP2 PUSH2 0xFFF PUSH2 0xFFA DUP3 PUSH2 0xFC7 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0x1006 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1010 SWAP2 PUSH2 0x252E JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x101C SWAP2 PUSH2 0xFE9 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1031 PUSH2 0x102A PUSH2 0x163 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0xCAD JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x103D PUSH1 0xC0 PUSH2 0x101E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x105C PUSH2 0x1033 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP1 DUP1 DUP1 DUP1 DUP1 DUP8 PUSH2 0x106D PUSH2 0x1040 JUMP JUMPDEST DUP2 MSTORE ADD PUSH2 0x1078 PUSH2 0x1040 JUMP JUMPDEST DUP2 MSTORE ADD PUSH2 0x1083 PUSH2 0x1045 JUMP JUMPDEST DUP2 MSTORE ADD PUSH2 0x108E PUSH2 0x104A JUMP JUMPDEST DUP2 MSTORE ADD PUSH2 0x1099 PUSH2 0x104A JUMP JUMPDEST DUP2 MSTORE ADD PUSH2 0x10A4 PUSH2 0x104F JUMP JUMPDEST DUP2 MSTORE POP POP JUMP JUMPDEST PUSH2 0x10B2 PUSH2 0x1054 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x10C4 PUSH2 0x10C9 SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0x10B5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x10D6 SWAP1 SLOAD PUSH2 0x10B8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10E3 SWAP1 PUSH2 0x25F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x10F3 PUSH2 0x10F8 SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0xC0D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1105 SWAP1 SLOAD PUSH2 0x10E7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1112 SWAP1 PUSH2 0x22F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xA0 SHR SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1135 PUSH2 0x113A SWAP2 PUSH2 0x1116 JUMP JUMPDEST PUSH2 0x111C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1147 SWAP1 SLOAD PUSH2 0x1129 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1154 SWAP1 PUSH2 0x4F7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x1164 PUSH2 0x1169 SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0x111C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1176 SWAP1 SLOAD PUSH2 0x1158 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1183 SWAP1 PUSH2 0x3CD JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x1220 PUSH2 0x1217 PUSH1 0x4 PUSH2 0x1198 PUSH2 0x1033 JUMP JUMPDEST SWAP5 PUSH2 0x11B1 PUSH2 0x11A8 PUSH1 0x0 DUP4 ADD PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x0 DUP9 ADD PUSH2 0x10D9 JUMP JUMPDEST PUSH2 0x11C9 PUSH2 0x11C0 PUSH1 0x1 DUP4 ADD PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x20 DUP9 ADD PUSH2 0x10D9 JUMP JUMPDEST PUSH2 0x11E1 PUSH2 0x11D8 PUSH1 0x2 DUP4 ADD PUSH2 0x10FB JUMP JUMPDEST PUSH1 0x40 DUP9 ADD PUSH2 0x1108 JUMP JUMPDEST PUSH2 0x11F9 PUSH2 0x11F0 PUSH1 0x2 DUP4 ADD PUSH2 0x113D JUMP JUMPDEST PUSH1 0x60 DUP9 ADD PUSH2 0x114A JUMP JUMPDEST PUSH2 0x1211 PUSH2 0x1208 PUSH1 0x3 DUP4 ADD PUSH2 0x116C JUMP JUMPDEST PUSH1 0x80 DUP9 ADD PUSH2 0x114A JUMP JUMPDEST ADD PUSH2 0xFBA JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD PUSH2 0x1179 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x122B SWAP1 PUSH2 0x1187 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1236 PUSH2 0x10AA JUMP JUMPDEST POP PUSH2 0x1241 PUSH1 0x6 PUSH2 0x1222 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 SWAP2 PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x12A8 PUSH1 0x2F PUSH1 0x40 SWAP3 PUSH2 0x1244 JUMP JUMPDEST PUSH2 0x12B1 DUP2 PUSH2 0x124D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x12CB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x129B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12D5 JUMPI JUMP JUMPDEST PUSH2 0x12DD PUSH2 0x163 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x12F3 PUSH1 0x4 DUP3 ADD PUSH2 0x12B5 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x1324 SWAP2 PUSH2 0x131F DUP3 PUSH2 0x1319 PUSH2 0x1313 PUSH2 0x130E PUSH2 0x2558 JUMP JUMPDEST PUSH2 0x22F JUMP JUMPDEST SWAP2 PUSH2 0x22F JUMP JUMPDEST EQ PUSH2 0x12CE JUMP JUMPDEST PUSH2 0x2565 JUMP JUMPDEST JUMP JUMPDEST PUSH32 0x5D8E12C39142FF96D79D04D15D1BA1269E4FE57BB9D26F43523628B34BA108EC SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1365 SWAP3 SWAP2 PUSH2 0x1360 PUSH2 0x135B PUSH2 0x1326 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0x137F JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1370 SWAP1 PUSH2 0xC3C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x137C SWAP1 PUSH2 0x1367 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x138C PUSH2 0x1394 SWAP4 PUSH2 0x1373 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x25C0 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x13A1 SWAP3 SWAP2 PUSH2 0x134A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x13BD SWAP2 PUSH2 0x13B8 PUSH2 0x13B3 PUSH2 0x1326 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0x144A JUMP JUMPDEST JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x13D0 PUSH1 0x0 DUP1 SWAP3 PUSH2 0x13BF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x13DD SWAP1 PUSH2 0x13C4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x13FE JUMPI PUSH2 0x13FA PUSH1 0x20 SWAP2 PUSH2 0xC8D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xC97 JUMP JUMPDEST SWAP1 PUSH2 0x1415 PUSH2 0x1410 DUP4 PUSH2 0x13E0 JUMP JUMPDEST PUSH2 0x101E JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0x143C JUMPI PUSH2 0x1430 RETURNDATASIZE PUSH2 0x1403 JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0x1444 PUSH2 0x141A JUMP JUMPDEST SWAP1 PUSH2 0x143A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1479 SWAP3 DUP2 SWAP3 SWAP1 PUSH2 0x145B PUSH2 0x163 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x1466 DUP2 PUSH2 0x13D4 JUMP JUMPDEST SUB SWAP3 GAS CALL PUSH2 0x1472 PUSH2 0x141F JUMP JUMPDEST POP ISZERO PUSH2 0x1C7 JUMP JUMPDEST PUSH2 0x147F JUMPI JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1D42C867 PUSH1 0xE2 SHL DUP2 MSTORE DUP1 PUSH2 0x1498 PUSH1 0x4 DUP3 ADD PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x14A6 SWAP2 PUSH2 0x13A3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x14BA PUSH2 0x14BF SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0x14A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x14CC SWAP1 SLOAD PUSH2 0x14AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x8 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x14E8 PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB SWAP2 PUSH2 0x14CF JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x14FB SWAP1 PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1516 PUSH2 0x1511 PUSH2 0x151D SWAP3 PUSH2 0x14F2 JUMP JUMPDEST PUSH2 0x14FE JUMP JUMPDEST DUP3 SLOAD PUSH2 0x14D5 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH32 0x4C02318D8C3AADC98CCF18AEBBF3126F651E0C3F6A1DE5FF8EDCF6724A2AD5C2 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1551 PUSH1 0xFF SWAP2 PUSH2 0x9A8 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x1564 SWAP1 PUSH2 0x1C7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x157F PUSH2 0x157A PUSH2 0x1586 SWAP3 PUSH2 0x155B JUMP JUMPDEST PUSH2 0x1567 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1545 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP3 SWAP1 SWAP3 PUSH2 0x1597 PUSH1 0x5 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0x15F5 JUMPI PUSH2 0x15A9 PUSH2 0x15E7 SWAP5 PUSH1 0x5 PUSH2 0x1501 JUMP JUMPDEST PUSH2 0x15BB PUSH2 0x15B4 PUSH2 0x9CA JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x252E JUMP JUMPDEST PUSH2 0x15CD PUSH2 0x15C6 PUSH2 0x1521 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x252E JUMP JUMPDEST PUSH2 0x15DF PUSH2 0x15D8 PUSH2 0x1326 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x252E JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x260B JUMP JUMPDEST PUSH2 0x15F3 PUSH1 0x1 PUSH1 0x5 PUSH2 0x156A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x160E PUSH1 0x4 DUP3 ADD PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x1630 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 PUSH2 0x162B PUSH2 0x1626 PUSH2 0x1521 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0x18FD JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1646 PUSH2 0x1641 PUSH2 0x164B SWAP3 PUSH2 0x4F7 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1662 PUSH2 0x165D PUSH2 0x1667 SWAP3 PUSH2 0x9A5 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1674 PUSH1 0xC0 PUSH2 0x101E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1681 SWAP1 MLOAD PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1691 PUSH1 0x0 NOT SWAP2 PUSH2 0x9A8 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x16AF PUSH2 0x16AA PUSH2 0x16B4 SWAP3 PUSH2 0x25F JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x16CF PUSH2 0x16CA PUSH2 0x16D6 SWAP3 PUSH2 0x169B JUMP JUMPDEST PUSH2 0x16B7 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1684 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x16E4 SWAP1 MLOAD PUSH2 0x22F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x16FC PUSH2 0x16F7 PUSH2 0x1703 SWAP3 PUSH2 0x14F2 JUMP JUMPDEST PUSH2 0x14FE JUMP JUMPDEST DUP3 SLOAD PUSH2 0xF0A JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1711 SWAP1 MLOAD PUSH2 0x4F7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xA0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1730 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL SWAP2 PUSH2 0x1714 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x174E PUSH2 0x1749 PUSH2 0x1753 SWAP3 PUSH2 0x4F7 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x4F7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x176E PUSH2 0x1769 PUSH2 0x1775 SWAP3 PUSH2 0x173A JUMP JUMPDEST PUSH2 0x1756 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x171A JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 PUSH2 0x178C PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 PUSH2 0x9A8 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x17AB PUSH2 0x17A6 PUSH2 0x17B2 SWAP3 PUSH2 0x173A JUMP JUMPDEST PUSH2 0x1756 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1779 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x17C0 SWAP1 MLOAD PUSH2 0x3CD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17CC SWAP1 PUSH2 0xF9D JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x17E4 PUSH2 0x17DF PUSH2 0x17EB SWAP3 PUSH2 0xF79 JUMP JUMPDEST PUSH2 0x17C3 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1684 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 PUSH2 0x1880 PUSH1 0xA0 PUSH1 0x4 PUSH2 0x1886 SWAP5 PUSH2 0x1814 PUSH1 0x0 DUP3 ADD PUSH2 0x180E PUSH1 0x0 DUP9 ADD PUSH2 0x1677 JUMP JUMPDEST SWAP1 PUSH2 0x16BA JUMP JUMPDEST PUSH2 0x182D PUSH1 0x1 DUP3 ADD PUSH2 0x1827 PUSH1 0x20 DUP9 ADD PUSH2 0x1677 JUMP JUMPDEST SWAP1 PUSH2 0x16BA JUMP JUMPDEST PUSH2 0x1846 PUSH1 0x2 DUP3 ADD PUSH2 0x1840 PUSH1 0x40 DUP9 ADD PUSH2 0x16DA JUMP JUMPDEST SWAP1 PUSH2 0x16E7 JUMP JUMPDEST PUSH2 0x185F PUSH1 0x2 DUP3 ADD PUSH2 0x1859 PUSH1 0x60 DUP9 ADD PUSH2 0x1707 JUMP JUMPDEST SWAP1 PUSH2 0x1759 JUMP JUMPDEST PUSH2 0x1878 PUSH1 0x3 DUP3 ADD PUSH2 0x1872 PUSH1 0x80 DUP9 ADD PUSH2 0x1707 JUMP JUMPDEST SWAP1 PUSH2 0x1796 JUMP JUMPDEST ADD SWAP3 ADD PUSH2 0x17B6 JUMP JUMPDEST SWAP1 PUSH2 0x17CF JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1892 SWAP2 PUSH2 0x17EF JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x189D SWAP1 PUSH2 0x4F7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP5 PUSH2 0x18EA PUSH2 0x18F4 SWAP3 SWAP9 SWAP8 SWAP6 PUSH2 0x18E0 PUSH1 0xA0 SWAP7 PUSH2 0x18D6 PUSH2 0x18FB SWAP11 PUSH2 0x18CC PUSH1 0xC0 DUP11 ADD SWAP15 PUSH1 0x0 DUP12 ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST PUSH1 0x20 DUP10 ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST PUSH1 0x40 DUP8 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH1 0x60 DUP6 ADD SWAP1 PUSH2 0x1894 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0x1894 JUMP JUMPDEST ADD SWAP1 PUSH2 0x413 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP4 SWAP1 SWAP3 SWAP5 DUP2 PUSH2 0x1915 PUSH2 0x190F DUP9 PUSH2 0x4F7 JUMP JUMPDEST SWAP2 PUSH2 0x4F7 JUMP JUMPDEST LT DUP1 ISZERO PUSH2 0x1A19 JUMPI JUMPDEST PUSH2 0x19FC JUMPI DUP3 PUSH2 0x1935 PUSH2 0x192F PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ PUSH2 0x19DF JUMPI DUP3 PUSH2 0x19A1 PUSH2 0x19DA SWAP5 PUSH2 0x199A DUP8 PUSH2 0x1991 DUP11 PUSH2 0x1988 DUP14 PUSH2 0x197F DUP12 SWAP4 PUSH2 0x1976 DUP13 SWAP8 PUSH2 0x196D PUSH2 0x1963 PUSH2 0x166A JUMP JUMPDEST SWAP12 PUSH1 0x0 DUP14 ADD PUSH2 0x10D9 JUMP JUMPDEST PUSH1 0x20 DUP12 ADD PUSH2 0x10D9 JUMP JUMPDEST PUSH1 0x40 DUP10 ADD PUSH2 0x1108 JUMP JUMPDEST PUSH1 0x60 DUP8 ADD PUSH2 0x114A JUMP JUMPDEST PUSH1 0x80 DUP6 ADD PUSH2 0x114A JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD PUSH2 0x1179 JUMP JUMPDEST PUSH1 0x6 PUSH2 0x1888 JUMP JUMPDEST SWAP4 SWAP5 SWAP6 SWAP2 SWAP1 SWAP2 PUSH32 0xABEC13CA1773EED55D54D2F64593C33FA520EE45CAC73A162F13928A2EBEE233 SWAP7 PUSH2 0x19D1 PUSH2 0x163 JUMP JUMPDEST SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x18A1 JUMP JUMPDEST SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x10BA94E9 PUSH1 0xE3 SHL DUP2 MSTORE DUP1 PUSH2 0x19F8 PUSH1 0x4 DUP3 ADD PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH4 0x10BA94E9 PUSH1 0xE3 SHL DUP2 MSTORE DUP1 PUSH2 0x1A15 PUSH1 0x4 DUP3 ADD PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP DUP2 PUSH2 0x1A2D PUSH2 0x1A27 TIMESTAMP PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x1632 JUMP JUMPDEST GT ISZERO PUSH2 0x191D JUMP JUMPDEST SWAP1 PUSH2 0x1A42 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 PUSH2 0x1612 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1A53 SWAP1 PUSH2 0xF79 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1A84 PUSH2 0x1A7F PUSH2 0x1A89 SWAP4 PUSH2 0x1A77 PUSH2 0x1A44 JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x1A49 JUMP JUMPDEST PUSH2 0x1A61 JUMP JUMPDEST PUSH2 0x265B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1A96 SWAP1 PUSH2 0x14F2 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x1ACB SWAP2 PUSH1 0x0 PUSH2 0x1AC0 PUSH2 0x1AC6 SWAP4 PUSH2 0x1AB9 PUSH2 0xBAC JUMP JUMPDEST POP DUP3 PUSH2 0xF85 JUMP JUMPDEST ADD PUSH2 0x1A8C JUMP JUMPDEST PUSH2 0x14C2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1AE5 PUSH2 0x1AEA SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0x1ACE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1AF7 SWAP1 SLOAD PUSH2 0x1AD9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B03 SWAP1 PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x1B13 DUP3 PUSH2 0x3D0 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x1B2F JUMPI PUSH2 0x1B2C SWAP2 PUSH1 0x0 ADD PUSH2 0x1B06 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST POP PUSH2 0x1B43 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP PUSH2 0x1B55 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x199 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B61 SWAP1 PUSH2 0x178 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x1B74 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x1BC7 JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1BC2 JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x1BBD JUMPI JUMP JUMPDEST PUSH2 0x1B7C JUMP JUMPDEST PUSH2 0x1B77 JUMP JUMPDEST PUSH2 0x1B81 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1BFB DUP2 PUSH2 0x1BF4 DUP2 PUSH2 0x1C00 SWAP6 PUSH2 0x1BCC JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x1BD5 JUMP JUMPDEST PUSH2 0xC8D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x1C1A JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x1B81 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x1C60 JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1C5B JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x1C56 JUMPI JUMP JUMPDEST PUSH2 0x1B7C JUMP JUMPDEST PUSH2 0x1B77 JUMP JUMPDEST PUSH2 0x1B81 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1C88 DUP2 PUSH2 0x1C81 DUP2 PUSH2 0x1C8D SWAP6 PUSH2 0x1C65 JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x1BD5 JUMP JUMPDEST PUSH2 0xC8D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST POP PUSH2 0x1CA0 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x76F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1CE1 SWAP1 PUSH1 0x20 PUSH2 0x1CD9 PUSH2 0x1CCF PUSH1 0x40 DUP5 ADD PUSH2 0x1CC1 PUSH1 0x0 DUP9 ADD DUP9 PUSH2 0x1C1F JUMP JUMPDEST SWAP1 DUP7 DUP4 SUB PUSH1 0x0 DUP9 ADD MSTORE PUSH2 0x1C6E JUMP JUMPDEST SWAP5 DUP3 DUP2 ADD SWAP1 PUSH2 0x1C91 JUMP JUMPDEST SWAP2 ADD SWAP1 PUSH2 0x504 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D8E SWAP2 PUSH2 0x1D80 PUSH2 0x1D75 PUSH1 0xC0 DUP4 ADD PUSH2 0x1D0C PUSH2 0x1D02 PUSH1 0x0 DUP8 ADD DUP8 PUSH2 0x1B34 JUMP JUMPDEST PUSH1 0x0 DUP7 ADD SWAP1 PUSH2 0x4EA JUMP JUMPDEST PUSH2 0x1D26 PUSH2 0x1D1C PUSH1 0x20 DUP8 ADD DUP8 PUSH2 0x1B46 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x1B58 JUMP JUMPDEST PUSH2 0x1D40 PUSH2 0x1D36 PUSH1 0x40 DUP8 ADD DUP8 PUSH2 0x1B65 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD SWAP1 PUSH2 0x511 JUMP JUMPDEST PUSH2 0x1D5A PUSH2 0x1D50 PUSH1 0x60 DUP8 ADD DUP8 PUSH2 0x1B65 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD SWAP1 PUSH2 0x511 JUMP JUMPDEST PUSH2 0x1D67 PUSH1 0x80 DUP7 ADD DUP7 PUSH2 0x1B86 JUMP JUMPDEST SWAP1 DUP6 DUP4 SUB PUSH1 0x80 DUP8 ADD MSTORE PUSH2 0x1BE1 JUMP JUMPDEST SWAP3 PUSH1 0xA0 DUP2 ADD SWAP1 PUSH2 0x1C04 JUMP JUMPDEST SWAP1 PUSH1 0xA0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x1CA3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP4 SWAP3 SWAP1 PUSH2 0x1DBD PUSH1 0x40 SWAP2 PUSH2 0x1DC5 SWAP5 PUSH2 0x1DB0 PUSH1 0x60 DUP10 ADD SWAP3 PUSH1 0x0 DUP11 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST DUP8 DUP3 SUB PUSH1 0x20 DUP10 ADD MSTORE PUSH2 0x1CE4 JUMP JUMPDEST SWAP5 ADD SWAP1 PUSH2 0x413 JUMP JUMPDEST JUMP JUMPDEST SWAP2 POP PUSH1 0x20 SWAP1 PUSH2 0x1DD4 PUSH2 0xF74 JUMP JUMPDEST POP PUSH2 0x1DE7 PUSH2 0x1DE2 PUSH1 0x3 PUSH2 0x1AED JUMP JUMPDEST PUSH2 0x1AFA JUMP JUMPDEST PUSH2 0x1E13 PUSH4 0x3808A90B SWAP5 SWAP3 SWAP5 PUSH2 0x1E1E PUSH2 0x1DFF PUSH1 0x4 PUSH2 0xFBA JUMP JUMPDEST PUSH2 0x1E07 PUSH2 0x163 JUMP JUMPDEST SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP6 PUSH2 0xCD6 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x1D91 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1E63 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1E35 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1E56 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1E5C JUMPI JUMPDEST PUSH2 0x1E4E DUP2 DUP4 PUSH2 0xCAD JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1B15 JUMP JUMPDEST CODESIZE PUSH2 0x1E31 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1E44 JUMP JUMPDEST PUSH2 0xD10 JUMP JUMPDEST PUSH2 0x1E70 PUSH2 0x1A44 JUMP JUMPDEST POP PUSH2 0x1E7B PUSH1 0x5 PUSH2 0xC2C JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1E88 SWAP1 PUSH2 0x14F2 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1EA0 SWAP1 PUSH2 0xF79 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x60 SHL SWAP1 JUMP JUMPDEST PUSH2 0x1EBD SWAP1 PUSH2 0x1EAE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1EC9 SWAP1 PUSH2 0x1EB4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1ED8 PUSH2 0x1EDD SWAP2 PUSH2 0x22F JUMP JUMPDEST PUSH2 0x1EC0 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1EF0 PUSH2 0x1EF5 SWAP2 PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x1EE1 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x14 DUP2 PUSH2 0x1F0C PUSH2 0x1F14 SWAP4 PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x1ECC JUMP JUMPDEST ADD DUP1 SWAP3 PUSH2 0x1EE4 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1F3A JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH2 0xC97 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x1F54 PUSH2 0x1F4F DUP3 PUSH2 0x1F22 JUMP JUMPDEST PUSH2 0x101E JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP3 MUL DUP4 ADD SWAP3 DUP2 DUP5 GT PUSH2 0x1F91 JUMPI SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x1F78 JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 SWAP2 PUSH2 0x1F86 DUP5 DUP7 PUSH2 0x3E5 JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0x1F6B JUMP JUMPDEST PUSH2 0x290 JUMP JUMPDEST PUSH2 0x1FA1 SWAP2 CALLDATASIZE SWAP2 PUSH2 0x1F3F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0x1FB1 PUSH2 0xBAC JUMP JUMPDEST POP PUSH2 0x1FD9 PUSH2 0x1FD3 PUSH2 0x1FCE PUSH2 0x1FC7 PUSH1 0x2 DUP8 SWAP1 PUSH2 0x1E7E JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x1E96 JUMP JUMPDEST PUSH2 0x14C2 JUMP JUMPDEST ISZERO PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 PUSH2 0x1FE8 JUMPI JUMPDEST POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x203D SWAP6 POP SWAP1 PUSH2 0x201F PUSH2 0x2038 SWAP4 SWAP3 SWAP6 SWAP3 SWAP5 PUSH2 0x2010 PUSH2 0x2004 PUSH2 0x163 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD PUSH2 0x1EF9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0xCAD JUMP JUMPDEST PUSH2 0x2031 PUSH2 0x202B DUP3 PUSH2 0x1F1E JUMP JUMPDEST SWAP2 PUSH2 0x1F18 JUMP JUMPDEST KECCAK256 SWAP4 PUSH2 0x1F96 JUMP JUMPDEST PUSH2 0x2694 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 PUSH2 0x1FE0 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x206B PUSH2 0x2066 PUSH2 0x2070 SWAP3 PUSH2 0x205E PUSH2 0x2047 JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x1A49 JUMP JUMPDEST PUSH2 0x1A61 JUMP JUMPDEST PUSH2 0x26BE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x208E SWAP2 PUSH2 0x2089 PUSH2 0x2084 DUP3 PUSH2 0xFC7 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0x2090 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x209A SWAP2 PUSH2 0x2565 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x20A6 SWAP2 PUSH2 0x2073 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x20C1 SWAP1 PUSH2 0x20BC PUSH2 0x20B7 PUSH2 0xEB3 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0x20C3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x20CE SWAP1 PUSH1 0x4 PUSH2 0x17CF JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x20D9 SWAP1 PUSH2 0x20A8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x20E3 PUSH2 0xBAC JUMP JUMPDEST POP DUP1 PUSH2 0x20F8 PUSH2 0x20F2 PUSH1 0x0 PUSH2 0x178 JUMP JUMPDEST SWAP2 PUSH2 0x178 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x2105 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x210F SWAP2 POP PUSH2 0x26DE JUMP JUMPDEST CODESIZE PUSH2 0x2101 JUMP JUMPDEST PUSH2 0x211D PUSH2 0xBAC JUMP JUMPDEST POP PUSH2 0x2127 DUP2 PUSH2 0x26DE JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x2133 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x213D SWAP2 POP PUSH2 0x271E JUMP JUMPDEST CODESIZE PUSH2 0x212F JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x2165 SWAP3 SWAP5 SWAP4 PUSH2 0x215E PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x218C PUSH2 0x2192 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x25F JUMP JUMPDEST SWAP3 PUSH2 0x25F JUMP JUMPDEST DUP3 SUB SWAP2 DUP3 GT PUSH2 0x219D JUMPI JUMP JUMPDEST PUSH2 0x2167 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x21B6 PUSH2 0x21BC SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x25F JUMP JUMPDEST SWAP3 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x21C8 DUP4 DUP3 MUL PUSH2 0x25F JUMP JUMPDEST SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x21D7 JUMPI JUMP JUMPDEST PUSH2 0x2167 JUMP JUMPDEST PUSH2 0x21E5 SWAP1 PUSH2 0x164E JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH2 0x2213 PUSH2 0x221A SWAP5 SWAP7 SWAP6 SWAP4 SWAP7 PUSH2 0x2209 PUSH1 0x60 DUP5 ADD SWAP9 PUSH1 0x0 DUP6 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST ADD SWAP1 PUSH2 0x21DC JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH2 0x2246 PUSH2 0x224D SWAP5 SWAP7 SWAP6 SWAP4 SWAP7 PUSH2 0x223C PUSH1 0x60 DUP5 ADD SWAP9 PUSH1 0x0 DUP6 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2263 PUSH2 0x225E PUSH2 0x2268 SWAP3 PUSH2 0x9A5 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x224 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2274 SWAP1 PUSH2 0x224F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2280 SWAP1 PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH2 0x22AD PUSH2 0x22B4 SWAP5 SWAP7 SWAP6 SWAP4 SWAP7 PUSH2 0x22A3 PUSH1 0x60 DUP5 ADD SWAP9 PUSH1 0x0 DUP6 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x21DC JUMP JUMPDEST ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP4 SWAP3 SWAP1 SWAP3 PUSH2 0x22F0 PUSH2 0x22CB PUSH1 0x2 PUSH1 0x6 ADD PUSH2 0x113D JUMP JUMPDEST PUSH2 0x22EA PUSH2 0x22E4 PUSH2 0x22DE PUSH1 0x3 PUSH1 0x6 ADD PUSH2 0x116C JUMP JUMPDEST SWAP3 PUSH2 0x1632 JUMP JUMPDEST SWAP2 PUSH2 0x1632 JUMP JUMPDEST SWAP1 PUSH2 0x275E JUMP JUMPDEST PUSH2 0x24FD JUMPI PUSH2 0x2301 PUSH1 0x0 PUSH1 0x6 ADD PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x2313 PUSH2 0x230D DUP6 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST LT PUSH2 0x24D0 JUMPI DUP3 SWAP2 PUSH2 0x2361 SWAP2 PUSH2 0x2342 PUSH2 0x2373 SWAP6 PUSH2 0x233C PUSH1 0x0 PUSH1 0x6 ADD SWAP2 PUSH2 0x2337 DUP4 PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x217D JUMP JUMPDEST SWAP1 PUSH2 0x16BA JUMP JUMPDEST PUSH2 0x234F PUSH1 0x4 PUSH1 0x6 ADD PUSH2 0xFBA JUMP JUMPDEST SWAP2 SWAP1 CALLER SWAP2 PUSH2 0x235B PUSH2 0x21A2 JUMP JUMPDEST SWAP4 PUSH2 0x2855 JUMP JUMPDEST PUSH2 0x236E PUSH1 0x1 PUSH1 0x6 ADD PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x21A7 JUMP JUMPDEST SWAP2 DUP2 PUSH2 0x2393 PUSH2 0x238D PUSH2 0x2388 PUSH1 0x2 PUSH1 0x6 ADD PUSH2 0x10FB JUMP JUMPDEST PUSH2 0x22F JUMP JUMPDEST SWAP2 PUSH2 0x22F JUMP JUMPDEST SUB PUSH2 0x24A2 JUMPI DUP1 PUSH2 0x23AB PUSH2 0x23A5 DUP6 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST LT PUSH2 0x247F JUMPI POP DUP1 PUSH2 0x23CD PUSH2 0x23C7 PUSH2 0x23C2 PUSH1 0x0 PUSH2 0x226B JUMP JUMPDEST PUSH2 0x22F JUMP JUMPDEST SWAP2 PUSH2 0x22F JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x2412 JUMPI CALLVALUE PUSH2 0x23E8 PUSH2 0x23E2 DUP5 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST SUB PUSH2 0x23F2 JUMPI POP POP JUMPDEST JUMP JUMPDEST PUSH2 0x240E CALLVALUE PUSH1 0x0 SWAP4 DUP5 SWAP4 PUSH4 0xF55E7DF PUSH1 0xE1 SHL DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x221C JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 CALLVALUE PUSH2 0x2427 PUSH2 0x2421 PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x245C JUMPI PUSH2 0x2439 PUSH1 0x0 PUSH2 0x226B JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH2 0x2458 CALLVALUE PUSH1 0x0 SWAP4 DUP5 SWAP4 PUSH4 0xF55E7DF PUSH1 0xE1 SHL DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x2283 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x2468 PUSH2 0x247A SWAP3 PUSH2 0x1373 JUMP JUMPDEST SWAP1 CALLER PUSH2 0x2473 ADDRESS PUSH2 0x2277 JUMP JUMPDEST SWAP2 SWAP3 PUSH2 0x2928 JUMP JUMPDEST PUSH2 0x23F0 JUMP JUMPDEST DUP3 PUSH2 0x249E DUP4 SWAP2 SWAP3 PUSH1 0x0 SWAP4 DUP5 SWAP4 PUSH4 0xF55E7DF PUSH1 0xE1 SHL DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x221C JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST DUP3 PUSH2 0x24B0 PUSH1 0x2 PUSH1 0x6 ADD PUSH2 0x10FB JUMP JUMPDEST PUSH2 0x24CC PUSH1 0x0 DUP1 SWAP4 DUP5 SWAP4 PUSH4 0xF55E7DF PUSH1 0xE1 SHL DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x21E9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST DUP3 PUSH2 0x24DE PUSH1 0x0 PUSH1 0x6 ADD PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x24F9 PUSH1 0x0 SWAP3 DUP4 SWAP3 PUSH4 0x9E4C4461 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH2 0x2143 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH4 0xFE219DD PUSH1 0xE2 SHL DUP2 MSTORE DUP1 PUSH2 0x2516 PUSH1 0x4 DUP3 ADD PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x252C SWAP1 PUSH2 0x2526 PUSH2 0x2558 JUMP JUMPDEST SWAP1 PUSH2 0x2AE4 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2550 PUSH2 0x254B PUSH2 0x2555 SWAP4 PUSH2 0x2544 DUP2 DUP6 SWAP1 PUSH2 0x2B7D JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1A49 JUMP JUMPDEST PUSH2 0x1A61 JUMP JUMPDEST PUSH2 0x2C63 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x2560 PUSH2 0x1A44 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2587 PUSH2 0x2582 PUSH2 0x258C SWAP4 PUSH2 0x257B DUP2 DUP6 SWAP1 PUSH2 0x2C9E JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1A49 JUMP JUMPDEST PUSH2 0x1A61 JUMP JUMPDEST PUSH2 0x2D37 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x2598 SWAP1 PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x25B8 PUSH2 0x25B3 PUSH2 0x25BD SWAP3 PUSH2 0x259B JUMP JUMPDEST PUSH2 0xCD6 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x2604 PUSH1 0x4 SWAP3 PUSH2 0x25F5 PUSH2 0x2609 SWAP6 SWAP4 PUSH2 0x25DC PUSH4 0xA9059CBB PUSH2 0x25A4 JUMP JUMPDEST SWAP3 PUSH2 0x25E5 PUSH2 0x163 JUMP JUMPDEST SWAP7 DUP8 SWAP5 PUSH1 0x20 DUP7 ADD SWAP1 DUP2 MSTORE ADD PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP4 PUSH2 0xCAD JUMP JUMPDEST PUSH2 0x2EE5 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2621 PUSH2 0x2626 SWAP4 SWAP3 PUSH2 0x261C PUSH2 0xEB3 JUMP JUMPDEST PUSH2 0x252E JUMP JUMPDEST PUSH2 0x2F52 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2637 PUSH2 0x263C SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0x169B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2653 PUSH2 0x264E PUSH2 0x2658 SWAP3 PUSH2 0x25F JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x224 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2687 PUSH2 0x2682 PUSH2 0x2691 SWAP4 PUSH2 0x267D PUSH1 0x0 PUSH2 0x268C SWAP6 PUSH2 0x2676 PUSH2 0x1A44 JUMP JUMPDEST POP ADD PUSH2 0x2628 JUMP JUMPDEST PUSH2 0x2FEA JUMP JUMPDEST PUSH2 0x262B JUMP JUMPDEST PUSH2 0x263F JUMP JUMPDEST PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26AE PUSH2 0x26BA SWAP3 SWAP4 PUSH2 0x26B4 SWAP3 PUSH2 0x26A8 PUSH2 0xBAC JUMP JUMPDEST POP PUSH2 0x303F JUMP JUMPDEST SWAP3 PUSH2 0x3CD JUMP JUMPDEST SWAP2 PUSH2 0x3CD JUMP JUMPDEST EQ SWAP1 JUMP JUMPDEST PUSH2 0x26D6 PUSH1 0x0 PUSH2 0x26DB SWAP3 PUSH2 0x26CF PUSH2 0x2047 JUMP JUMPDEST POP ADD PUSH2 0x2628 JUMP JUMPDEST PUSH2 0x30AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26E6 PUSH2 0xBAC JUMP JUMPDEST POP DUP1 PUSH2 0x2701 PUSH2 0x26FB PUSH4 0x5A05180F PUSH1 0xE0 SHL PUSH2 0x178 JUMP JUMPDEST SWAP2 PUSH2 0x178 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x270E JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2718 SWAP2 POP PUSH2 0x30C2 JUMP JUMPDEST CODESIZE PUSH2 0x270A JUMP JUMPDEST PUSH2 0x2726 PUSH2 0xBAC JUMP JUMPDEST POP DUP1 PUSH2 0x2741 PUSH2 0x273B PUSH4 0x4E821D33 PUSH1 0xE1 SHL PUSH2 0x178 JUMP JUMPDEST SWAP2 PUSH2 0x178 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x274E JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2758 SWAP2 POP PUSH2 0x20DB JUMP JUMPDEST CODESIZE PUSH2 0x274A JUMP JUMPDEST PUSH2 0x2766 PUSH2 0xBAC JUMP JUMPDEST POP DUP2 PUSH2 0x277B PUSH2 0x2775 PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x27AE JUMPI JUMPDEST POP SWAP1 DUP2 ISZERO PUSH2 0x2791 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x27A6 PUSH2 0x27A0 TIMESTAMP SWAP3 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST LT ISZERO CODESIZE PUSH2 0x278D JUMP JUMPDEST SWAP1 POP PUSH2 0x27C3 PUSH2 0x27BD TIMESTAMP SWAP3 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST LT CODESIZE PUSH2 0x2784 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 CALLDATACOPY JUMP JUMPDEST SWAP1 SWAP2 DUP3 PUSH2 0x27E8 SWAP2 PUSH2 0x27CA JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP1 PUSH1 0xFB SHL SUB DUP2 GT PUSH2 0x280B JUMPI DUP3 SWAP2 PUSH1 0x20 PUSH2 0x2807 SWAP3 MUL SWAP4 DUP5 SWAP2 PUSH2 0x27D8 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x27D3 JUMP JUMPDEST SWAP1 PUSH2 0x2841 PUSH2 0x284C SWAP2 PUSH2 0x2853 SWAP7 SWAP9 SWAP8 SWAP6 PUSH1 0x60 SWAP6 PUSH2 0x2834 PUSH1 0x80 DUP8 ADD SWAP4 PUSH1 0x0 DUP9 ADD SWAP1 PUSH2 0x413 JUMP JUMPDEST DUP6 DUP4 SUB PUSH1 0x20 DUP8 ADD MSTORE PUSH2 0x27DC JUMP JUMPDEST SWAP7 PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST ADD SWAP1 PUSH2 0x413 JUMP JUMPDEST JUMP JUMPDEST SWAP3 SWAP4 DUP4 PUSH2 0x2873 PUSH2 0x286D PUSH2 0x2868 PUSH1 0x0 PUSH2 0x9AE JUMP JUMPDEST PUSH2 0x3CD JUMP JUMPDEST SWAP2 PUSH2 0x3CD JUMP JUMPDEST SUB PUSH2 0x2880 JUMPI JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2898 PUSH2 0x2892 DUP6 DUP5 DUP7 DUP10 SWAP2 DUP7 SWAP4 PUSH2 0x1FA4 JUMP JUMPDEST ISZERO PUSH2 0x1C7 JUMP JUMPDEST PUSH2 0x28C8 JUMPI POP POP POP SWAP1 PUSH2 0x28B9 PUSH2 0x28BE SWAP3 PUSH2 0x28B4 PUSH1 0x1 SWAP4 PUSH1 0x2 PUSH2 0x1E7E JUMP JUMPDEST PUSH2 0x1E96 JUMP JUMPDEST PUSH2 0x156A JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 PUSH2 0x2879 JUMP JUMPDEST DUP5 PUSH2 0x28F1 SWAP2 DUP6 SWAP4 SWAP5 SWAP2 SWAP1 SWAP2 PUSH2 0x28DB PUSH2 0x163 JUMP JUMPDEST SWAP6 DUP7 SWAP6 PUSH4 0x4CB8CD5 PUSH1 0xE3 SHL DUP8 MSTORE PUSH1 0x4 DUP8 ADD PUSH2 0x2810 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 SWAP1 PUSH2 0x291F PUSH2 0x2926 SWAP5 SWAP7 SWAP6 SWAP4 SWAP7 PUSH2 0x2915 PUSH1 0x60 DUP5 ADD SWAP9 PUSH1 0x0 DUP6 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2975 SWAP4 SWAP2 PUSH2 0x2961 PUSH1 0x4 SWAP5 PUSH2 0x2970 SWAP4 SWAP5 PUSH2 0x2945 PUSH4 0x23B872DD PUSH2 0x25A4 JUMP JUMPDEST SWAP4 SWAP2 SWAP1 SWAP2 PUSH2 0x2951 PUSH2 0x163 JUMP JUMPDEST SWAP8 DUP9 SWAP6 PUSH1 0x20 DUP8 ADD SWAP1 DUP2 MSTORE ADD PUSH2 0x28F5 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP4 PUSH2 0xCAD JUMP JUMPDEST PUSH2 0x2EE5 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x298E PUSH2 0x2989 PUSH2 0x2993 SWAP3 PUSH2 0x2977 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x29CF PUSH1 0x17 DUP1 SWAP3 PUSH2 0x2996 JUMP JUMPDEST PUSH2 0x29D8 DUP2 PUSH2 0x299B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x29F4 JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x29E3 JUMP JUMPDEST PUSH2 0x2A2A PUSH2 0x2A21 SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x2A18 DUP2 PUSH2 0x29DC JUMP JUMPDEST SWAP5 DUP6 DUP1 SWAP4 PUSH2 0x2996 JUMP JUMPDEST SWAP4 DUP5 SWAP2 ADD PUSH2 0x29E0 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2A62 PUSH1 0x11 DUP1 SWAP3 PUSH2 0x2996 JUMP JUMPDEST PUSH2 0x2A6B DUP2 PUSH2 0x2A2E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2A89 PUSH2 0x2A94 SWAP4 SWAP3 PUSH2 0x2A83 PUSH2 0x2A8E SWAP4 PUSH2 0x29C3 JUMP JUMPDEST SWAP1 PUSH2 0x2A05 JUMP JUMPDEST PUSH2 0x2A56 JUMP JUMPDEST SWAP1 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2AB9 PUSH2 0x2AC2 PUSH1 0x20 SWAP4 PUSH2 0x2AC7 SWAP4 PUSH2 0x2AB0 DUP2 PUSH2 0x29DC JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x1244 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x29E0 JUMP JUMPDEST PUSH2 0xC8D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2AE1 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x2A9A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2AF9 PUSH2 0x2AF3 DUP4 DUP4 SWAP1 PUSH2 0x1AA4 JUMP JUMPDEST ISZERO PUSH2 0x1C7 JUMP JUMPDEST PUSH2 0x2B01 JUMPI POP POP JUMP JUMPDEST PUSH2 0x2B79 SWAP2 PUSH2 0x2B57 PUSH2 0x2B30 PUSH2 0x2B20 PUSH2 0x2B1A PUSH2 0x2B5C SWAP6 PUSH2 0x3155 JUMP JUMPDEST SWAP4 PUSH2 0x262B JUMP JUMPDEST PUSH2 0x2B2A PUSH1 0x20 PUSH2 0x297A JUMP JUMPDEST SWAP1 PUSH2 0x3378 JUMP JUMPDEST SWAP2 PUSH2 0x2B48 PUSH2 0x2B3C PUSH2 0x163 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD PUSH2 0x2A6F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0xCAD JUMP JUMPDEST PUSH2 0x2A97 JUMP JUMPDEST PUSH2 0x2B64 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x2ACB JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x2B91 PUSH2 0x2B8B DUP3 DUP5 SWAP1 PUSH2 0x1AA4 JUMP JUMPDEST ISZERO PUSH2 0x1C7 JUMP JUMPDEST PUSH2 0x2B9A JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x2BBC PUSH1 0x1 PUSH2 0x2BB7 PUSH1 0x0 PUSH2 0x2BAF DUP2 DUP7 SWAP1 PUSH2 0xF85 JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x1A8C JUMP JUMPDEST PUSH2 0x156A JUMP JUMPDEST SWAP1 PUSH2 0x2BC5 PUSH2 0x2558 JUMP JUMPDEST SWAP1 PUSH2 0x2C02 PUSH2 0x2BFC PUSH2 0x2BF6 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP6 PUSH2 0xF79 JUMP JUMPDEST SWAP3 PUSH2 0x14F2 JUMP JUMPDEST SWAP3 PUSH2 0x14F2 JUMP JUMPDEST SWAP3 PUSH2 0x2C0B PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x2C15 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x2B96 JUMP JUMPDEST PUSH2 0x2C28 SWAP1 PUSH2 0xC3C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2C3F PUSH2 0x2C3A PUSH2 0x2C44 SWAP3 PUSH2 0x224 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2C5B PUSH2 0x2C56 PUSH2 0x2C60 SWAP3 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH2 0x3CD JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2C96 PUSH2 0x2C90 PUSH2 0x2C8B PUSH2 0x2C86 PUSH1 0x0 PUSH2 0x2C9B SWAP7 PUSH2 0x2C7E PUSH2 0xBAC JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x2C1F JUMP JUMPDEST PUSH2 0x2C2B JUMP JUMPDEST PUSH2 0x2C47 JUMP JUMPDEST SWAP2 PUSH2 0x2628 JUMP JUMPDEST PUSH2 0x3598 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2CA9 DUP2 DUP4 SWAP1 PUSH2 0x1AA4 JUMP JUMPDEST PUSH2 0x2CB2 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x2CD4 PUSH1 0x0 PUSH2 0x2CCF PUSH1 0x0 PUSH2 0x2CC7 DUP2 DUP7 SWAP1 PUSH2 0xF85 JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x1A8C JUMP JUMPDEST PUSH2 0x156A JUMP JUMPDEST SWAP1 PUSH2 0x2CDD PUSH2 0x2558 JUMP JUMPDEST SWAP1 PUSH2 0x2D1A PUSH2 0x2D14 PUSH2 0x2D0E PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP6 PUSH2 0xF79 JUMP JUMPDEST SWAP3 PUSH2 0x14F2 JUMP JUMPDEST SWAP3 PUSH2 0x14F2 JUMP JUMPDEST SWAP3 PUSH2 0x2D23 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x2D2D DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x2CAE JUMP JUMPDEST SWAP1 PUSH2 0x2D6A PUSH2 0x2D64 PUSH2 0x2D5F PUSH2 0x2D5A PUSH1 0x0 PUSH2 0x2D6F SWAP7 PUSH2 0x2D52 PUSH2 0xBAC JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x2C1F JUMP JUMPDEST PUSH2 0x2C2B JUMP JUMPDEST PUSH2 0x2C47 JUMP JUMPDEST SWAP2 PUSH2 0x2628 JUMP JUMPDEST PUSH2 0x368E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2D90 JUMPI PUSH2 0x2D8C PUSH1 0x20 SWAP2 PUSH2 0xC8D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xC97 JUMP JUMPDEST SWAP1 PUSH2 0x2DA7 PUSH2 0x2DA2 DUP4 PUSH2 0x2D72 JUMP JUMPDEST PUSH2 0x101E JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2DDE PUSH1 0x20 PUSH2 0x2D95 JUMP JUMPDEST SWAP1 PUSH2 0x2DEB PUSH1 0x20 DUP4 ADD PUSH2 0x2DAC JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2DF5 PUSH2 0x2DD4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2E01 DUP2 PUSH2 0x1C7 JUMP JUMPDEST SUB PUSH2 0x2E08 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x2E1A DUP3 PUSH2 0x2DF8 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x2E36 JUMPI PUSH2 0x2E33 SWAP2 PUSH1 0x0 ADD PUSH2 0x2E0D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 SWAP2 PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x2E96 PUSH1 0x2A PUSH1 0x40 SWAP3 PUSH2 0x1244 JUMP JUMPDEST PUSH2 0x2E9F DUP2 PUSH2 0x2E3B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2EB9 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2E89 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2EC3 JUMPI JUMP JUMPDEST PUSH2 0x2ECB PUSH2 0x163 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2EE1 PUSH1 0x4 DUP3 ADD PUSH2 0x2EA3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x2F2F SWAP2 PUSH2 0x2EF5 PUSH2 0x2F04 SWAP3 PUSH2 0x258F JUMP JUMPDEST SWAP1 PUSH2 0x2EFE PUSH2 0x2DED JUMP JUMPDEST SWAP2 PUSH2 0x3798 JUMP JUMPDEST PUSH2 0x2F0D DUP2 PUSH2 0x1F1E JUMP JUMPDEST PUSH2 0x2F20 PUSH2 0x2F1A PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x2F31 JUMPI JUMPDEST POP PUSH2 0x2EBC JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2F4C SWAP2 POP PUSH1 0x20 PUSH2 0x2F41 DUP3 PUSH2 0x1F1E JUMP JUMPDEST DUP2 DUP4 ADD ADD SWAP2 ADD PUSH2 0x2E1C JUMP JUMPDEST CODESIZE PUSH2 0x2F29 JUMP JUMPDEST SWAP1 PUSH2 0x2F69 PUSH2 0x2F62 PUSH2 0x2F70 SWAP4 PUSH2 0xEFE JUMP JUMPDEST PUSH1 0x3 PUSH2 0xF34 JUMP JUMPDEST PUSH1 0x4 PUSH2 0x17CF JUMP JUMPDEST JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x2FA0 DUP2 PUSH2 0x2F88 JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x2FBB JUMPI PUSH2 0x2FB2 PUSH1 0x1 SWAP2 PUSH2 0x2F8C JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2F72 JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST PUSH2 0x2FD4 SWAP1 PUSH1 0x8 PUSH2 0x2FD9 SWAP4 MUL PUSH2 0x2FC0 JUMP JUMPDEST PUSH2 0xFA3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2FE7 SWAP2 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3009 SWAP2 PUSH1 0x0 PUSH2 0x3003 SWAP3 PUSH2 0x2FFC PUSH2 0xF74 JUMP JUMPDEST POP ADD PUSH2 0x2F97 JUMP JUMPDEST SWAP1 PUSH2 0x2FDC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x3018 SWAP2 ADD PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3029 DUP3 PUSH2 0x301B JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x303A JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x2F72 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3049 PUSH2 0xF74 JUMP JUMPDEST POP PUSH2 0x3054 PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP1 JUMPDEST DUP2 PUSH2 0x3071 PUSH2 0x306B PUSH2 0x3066 DUP8 PUSH2 0x301B JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST LT ISZERO PUSH2 0x30A3 JUMPI PUSH2 0x3097 PUSH2 0x309D SWAP2 PUSH2 0x3091 PUSH2 0x308C DUP8 DUP7 SWAP1 PUSH2 0x301F JUMP JUMPDEST PUSH2 0x17B6 JUMP JUMPDEST SWAP1 PUSH2 0x37BB JUMP JUMPDEST SWAP2 PUSH2 0x300C JUMP JUMPDEST SWAP1 PUSH2 0x3056 JUMP JUMPDEST SWAP2 SWAP3 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30BF SWAP2 PUSH2 0x30B8 PUSH2 0x2047 JUMP JUMPDEST POP ADD PUSH2 0x2F88 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30CA PUSH2 0xBAC JUMP JUMPDEST POP DUP1 PUSH2 0x30E5 PUSH2 0x30DF PUSH4 0x7965DB0B PUSH1 0xE0 SHL PUSH2 0x178 JUMP JUMPDEST SWAP2 PUSH2 0x178 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x30F2 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x30FC SWAP2 POP PUSH2 0x37FB JUMP JUMPDEST CODESIZE PUSH2 0x30EE JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x3124 PUSH2 0x311F PUSH2 0x3129 SWAP3 PUSH2 0x3107 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x310A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3136 PUSH1 0x14 PUSH2 0x3110 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x314D PUSH2 0x3148 PUSH2 0x3152 SWAP3 PUSH2 0x310A JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3172 PUSH2 0x316D PUSH2 0x3188 SWAP3 PUSH2 0x3167 PUSH2 0x3102 JUMP JUMPDEST POP PUSH2 0x2C1F JUMP JUMPDEST PUSH2 0x2C2B JUMP JUMPDEST PUSH2 0x3182 PUSH2 0x317D PUSH2 0x312C JUMP JUMPDEST PUSH2 0x3139 JUMP JUMPDEST SWAP1 PUSH2 0x3378 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x31A2 PUSH2 0x319D PUSH2 0x31A7 SWAP3 PUSH2 0x318B JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x31B9 PUSH2 0x31BF SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x25F JUMP JUMPDEST SWAP3 PUSH2 0x25F JUMP JUMPDEST DUP3 ADD DUP1 SWAP3 GT PUSH2 0x31CA JUMPI JUMP JUMPDEST PUSH2 0x2167 JUMP JUMPDEST CALLDATASIZE SWAP1 CALLDATACOPY JUMP JUMPDEST SWAP1 PUSH2 0x31F9 PUSH2 0x31E1 DUP4 PUSH2 0x1403 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP1 PUSH2 0x31EF DUP7 SWAP4 PUSH2 0x13E0 JUMP JUMPDEST SWAP3 ADD SWAP2 SUB SWAP1 PUSH2 0x31CF JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x3 PUSH1 0xFC SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x320D DUP3 PUSH2 0x1F1E JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x321F JUMPI PUSH1 0x1 PUSH1 0x20 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x2F72 JUMP JUMPDEST PUSH1 0xF PUSH1 0xFB SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3243 PUSH2 0x323E PUSH2 0x3248 SWAP3 PUSH2 0x322C JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3254 SWAP1 PUSH2 0x25F JUMP JUMPDEST PUSH1 0x0 DUP2 EQ PUSH2 0x3263 JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH2 0x2167 JUMP JUMPDEST PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 JUMP JUMPDEST PUSH2 0x3287 PUSH2 0x3268 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x32A1 PUSH2 0x329C PUSH2 0x32A6 SWAP3 PUSH2 0x328A JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xF8 SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x32C6 PUSH2 0x32C1 PUSH2 0x32CB SWAP3 PUSH2 0x32AF JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x310A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x32ED SWAP1 PUSH2 0x32E7 PUSH2 0x32E1 PUSH2 0x32F2 SWAP5 PUSH2 0x310A JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST SWAP1 PUSH2 0x2FC0 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x3329 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x1244 JUMP JUMPDEST PUSH2 0x3332 DUP2 PUSH2 0x32F5 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x334C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x331D JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x3356 JUMPI JUMP JUMPDEST PUSH2 0x335E PUSH2 0x163 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x3374 PUSH1 0x4 DUP3 ADD PUSH2 0x3336 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH2 0x3382 PUSH2 0x3102 JUMP JUMPDEST POP PUSH2 0x341C PUSH2 0x340C PUSH2 0x33B8 PUSH2 0x33B3 PUSH2 0x33A3 PUSH1 0x2 PUSH2 0x339E DUP8 SWAP2 PUSH2 0x318E JUMP JUMPDEST PUSH2 0x21A7 JUMP JUMPDEST PUSH2 0x33AD PUSH1 0x2 PUSH2 0x318E JUMP JUMPDEST SWAP1 PUSH2 0x31AA JUMP JUMPDEST PUSH2 0x31D4 JUMP JUMPDEST SWAP3 PUSH2 0x33C1 PUSH2 0x31FB JUMP JUMPDEST PUSH2 0x33DA DUP6 PUSH2 0x33D4 PUSH1 0x0 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x164E JUMP JUMPDEST SWAP1 PUSH2 0x3203 JUMP JUMPDEST MSTORE8 PUSH2 0x33E3 PUSH2 0x3224 JUMP JUMPDEST PUSH2 0x33FC DUP6 PUSH2 0x33F6 PUSH1 0x1 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x322F JUMP JUMPDEST SWAP1 PUSH2 0x3203 JUMP JUMPDEST MSTORE8 PUSH2 0x3407 PUSH1 0x2 PUSH2 0x318E JUMP JUMPDEST PUSH2 0x21A7 JUMP JUMPDEST PUSH2 0x3416 PUSH1 0x1 PUSH2 0x322F JUMP JUMPDEST SWAP1 PUSH2 0x31AA JUMP JUMPDEST SWAP3 JUMPDEST DUP4 PUSH2 0x3432 PUSH2 0x342C PUSH1 0x1 PUSH2 0x322F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST GT ISZERO PUSH2 0x3499 JUMPI PUSH2 0x3440 PUSH2 0x327F JUMP JUMPDEST DUP2 PUSH2 0x344B PUSH1 0xF PUSH2 0x328D JUMP JUMPDEST AND SWAP2 PUSH1 0x10 DUP4 LT ISZERO PUSH2 0x3494 JUMPI PUSH2 0x3467 PUSH2 0x3488 SWAP3 PUSH2 0x348E SWAP5 BYTE PUSH2 0x32A9 JUMP JUMPDEST PUSH2 0x3477 DUP6 SWAP2 DUP9 SWAP1 PUSH1 0x0 BYTE SWAP3 PUSH2 0x3203 JUMP JUMPDEST MSTORE8 PUSH2 0x3482 PUSH1 0x4 PUSH2 0x32B2 JUMP JUMPDEST SWAP1 PUSH2 0x32CE JUMP JUMPDEST SWAP4 PUSH2 0x324B JUMP JUMPDEST SWAP3 PUSH2 0x341E JUMP JUMPDEST PUSH2 0x2F72 JUMP JUMPDEST PUSH2 0x34C1 SWAP3 SWAP4 POP PUSH2 0x34BC SWAP1 PUSH2 0x34B6 PUSH2 0x34B0 PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ PUSH2 0x334F JUMP JUMPDEST PUSH2 0x2A97 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x34DF DUP2 PUSH2 0x34D2 JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x34FA JUMPI PUSH2 0x34F1 PUSH1 0x1 SWAP2 PUSH2 0x34C7 JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2F72 JUMP JUMPDEST SHL SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x8 PUSH2 0x351F SWAP2 MUL SWAP2 PUSH2 0x3519 PUSH1 0x0 NOT DUP5 PUSH2 0x34FF JUMP JUMPDEST SWAP3 PUSH2 0x34FF JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x353F PUSH2 0x353A PUSH2 0x3547 SWAP4 PUSH2 0xF79 JUMP JUMPDEST PUSH2 0x17C3 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x3503 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 DUP2 SLOAD SWAP2 PUSH9 0x10000000000000000 DUP4 LT ISZERO PUSH2 0x357B JUMPI DUP3 PUSH2 0x3573 SWAP2 PUSH1 0x1 PUSH2 0x3579 SWAP6 ADD DUP2 SSTORE PUSH2 0x34D6 JUMP JUMPDEST SWAP1 PUSH2 0x3529 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xC97 JUMP JUMPDEST SWAP1 PUSH2 0x358A SWAP1 PUSH2 0xF79 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x35A0 PUSH2 0xBAC JUMP JUMPDEST POP PUSH2 0x35B5 PUSH2 0x35AF DUP3 DUP5 SWAP1 PUSH2 0x3821 JUMP JUMPDEST ISZERO PUSH2 0x1C7 JUMP JUMPDEST PUSH1 0x0 EQ PUSH2 0x35F8 JUMPI PUSH2 0x35EE PUSH2 0x35F3 SWAP3 PUSH2 0x35D9 PUSH2 0x35D2 PUSH1 0x0 DUP6 ADD PUSH2 0x34C4 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x354B JUMP JUMPDEST PUSH1 0x1 PUSH2 0x35E7 PUSH1 0x0 DUP6 ADD PUSH2 0x2F88 JUMP JUMPDEST SWAP4 ADD PUSH2 0x3580 JUMP JUMPDEST PUSH2 0x16BA JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x3627 SWAP2 PUSH2 0x3621 PUSH2 0xF74 JUMP JUMPDEST SWAP2 PUSH2 0x3529 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3632 DUP2 PUSH2 0x34D2 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3653 JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 PUSH2 0x3650 PUSH2 0x364A DUP4 DUP4 PUSH2 0x34D6 JUMP JUMPDEST SWAP1 PUSH2 0x3615 JUMP JUMPDEST SSTORE JUMP JUMPDEST PUSH2 0x35FF JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x366E PUSH2 0x3669 PUSH2 0x3676 SWAP4 PUSH2 0x169B JUMP JUMPDEST PUSH2 0x16B7 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x3503 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x368C SWAP2 PUSH2 0x3686 PUSH2 0x2047 JUMP JUMPDEST SWAP2 PUSH2 0x3658 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3696 PUSH2 0xBAC JUMP JUMPDEST POP PUSH2 0x36AD PUSH2 0x36A8 PUSH1 0x1 DUP4 ADD DUP5 SWAP1 PUSH2 0x3580 JUMP JUMPDEST PUSH2 0x10CC JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x36C2 PUSH2 0x36BC PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ ISZERO PUSH1 0x0 EQ PUSH2 0x3790 JUMPI PUSH2 0x3742 SWAP3 PUSH1 0x1 PUSH2 0x373D SWAP3 DUP5 PUSH2 0x36EB PUSH1 0x0 SWAP7 PUSH2 0x36E5 DUP6 PUSH2 0x322F JUMP JUMPDEST SWAP1 PUSH2 0x217D JUMP JUMPDEST PUSH2 0x3708 PUSH2 0x36F9 DUP9 DUP6 ADD PUSH2 0x2F88 JUMP JUMPDEST PUSH2 0x3702 DUP7 PUSH2 0x322F JUMP JUMPDEST SWAP1 PUSH2 0x217D JUMP JUMPDEST DUP1 PUSH2 0x371B PUSH2 0x3715 DUP5 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST SUB PUSH2 0x3747 JUMPI JUMPDEST POP POP POP PUSH2 0x3737 PUSH2 0x3732 DUP7 DUP4 ADD PUSH2 0x34C4 JUMP JUMPDEST PUSH2 0x3629 JUMP JUMPDEST ADD PUSH2 0x3580 JUMP JUMPDEST PUSH2 0x367A JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x3788 SWAP3 PUSH2 0x377A PUSH2 0x3766 PUSH2 0x3760 PUSH2 0x3783 SWAP5 DUP13 DUP10 ADD PUSH2 0x2F97 JUMP JUMPDEST SWAP1 PUSH2 0x2FDC JUMP JUMPDEST SWAP4 PUSH2 0x3774 DUP6 SWAP2 DUP13 DUP10 ADD PUSH2 0x2F97 JUMP JUMPDEST SWAP1 PUSH2 0x3529 JUMP JUMPDEST SWAP2 DUP6 DUP6 ADD PUSH2 0x3580 JUMP JUMPDEST PUSH2 0x16BA JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x3721 JUMP JUMPDEST POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x37B8 SWAP3 SWAP2 PUSH2 0x37A6 PUSH2 0x141A JUMP JUMPDEST POP SWAP1 PUSH2 0x37B2 PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x390D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x37C3 PUSH2 0xF74 JUMP JUMPDEST POP DUP1 PUSH2 0x37D7 PUSH2 0x37D1 DUP5 PUSH2 0x3CD JUMP JUMPDEST SWAP2 PUSH2 0x3CD JUMP JUMPDEST LT PUSH1 0x0 EQ PUSH2 0x37ED JUMPI SWAP1 PUSH2 0x37E9 SWAP2 PUSH2 0x3967 JUMP JUMPDEST JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x37F6 SWAP2 PUSH2 0x3967 JUMP JUMPDEST PUSH2 0x37EA JUMP JUMPDEST PUSH2 0x3803 PUSH2 0xBAC JUMP JUMPDEST POP PUSH2 0x381D PUSH2 0x3817 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0x178 JUMP JUMPDEST SWAP2 PUSH2 0x178 JUMP JUMPDEST EQ SWAP1 JUMP JUMPDEST PUSH2 0x383F SWAP2 PUSH1 0x1 PUSH2 0x383A SWAP3 PUSH2 0x3833 PUSH2 0xBAC JUMP JUMPDEST POP ADD PUSH2 0x3580 JUMP JUMPDEST PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x3852 PUSH2 0x384C PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x3860 SWAP1 PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x38BE PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x1244 JUMP JUMPDEST PUSH2 0x38C7 DUP2 PUSH2 0x3863 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x38E1 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x38B1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x38EB JUMPI JUMP JUMPDEST PUSH2 0x38F3 PUSH2 0x163 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x3909 PUSH1 0x4 DUP3 ADD PUSH2 0x38CB JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 PUSH1 0x0 DUP1 SWAP2 PUSH2 0x3964 SWAP6 SWAP4 PUSH2 0x391F PUSH2 0x141A JUMP JUMPDEST POP PUSH2 0x3946 PUSH2 0x392C ADDRESS PUSH2 0x3857 JUMP JUMPDEST BALANCE PUSH2 0x393F PUSH2 0x3939 DUP6 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST LT ISZERO PUSH2 0x38E4 JUMP JUMPDEST DUP6 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 MLOAD SWAP3 GAS CALL SWAP2 PUSH2 0x395A PUSH2 0x141F JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x3A02 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x396F PUSH2 0xF74 JUMP JUMPDEST POP PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x39B3 PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x1244 JUMP JUMPDEST PUSH2 0x39BC DUP2 PUSH2 0x397E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x39D6 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x39A6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x39E0 JUMPI JUMP JUMPDEST PUSH2 0x39E8 PUSH2 0x163 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x39FE PUSH1 0x4 DUP3 ADD PUSH2 0x39C0 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0x3A0D PUSH2 0x141A JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0x3A53 JUMPI POP PUSH2 0x3A1F DUP3 PUSH2 0x1F1E JUMP JUMPDEST PUSH2 0x3A32 PUSH2 0x3A2C PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ PUSH2 0x3A3C JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3A48 PUSH2 0x3A4D SWAP2 PUSH2 0x3AA7 JUMP JUMPDEST PUSH2 0x39D9 JUMP JUMPDEST CODESIZE PUSH2 0x3A38 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x3A5E DUP3 PUSH2 0x1F1E JUMP JUMPDEST PUSH2 0x3A71 PUSH2 0x3A6B PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x3A82 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0x3AA3 SWAP1 PUSH2 0x3A8E PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x2ACB JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x3AAF PUSH2 0xBAC JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x3AC4 PUSH2 0x3ABE PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST GT SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 DIV PUSH4 0x3B23276E 0xDD SWAP6 0xAA ORIGIN 0x2D 0xBE LOG2 OR SAR 0xA8 0xB6 BLOCKHASH NUMBER DUP16 DUP2 NOT SWAP15 ADDMOD 0xFB DUP8 0xEC SAR PUSH5 0xAA7F64736F PUSH13 0x634300081B0033000000000000 ",
              "sourceMap": "558:6974:37:-:0;;;;;;;;;-1:-1:-1;558:6974:37;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2153:49:0:-;2198:4;;;:::i;:::-;2153:49;:::o;:::-;;;:::i;:::-;;:::o;558:6974:37:-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;7155:374::-;7305:4;;:::i;:::-;7328:11;;:53;;7343:38;;;7328:53;:::i;:::-;;;:::i;:::-;;:118;;;;7155:374;7328:194;;;;;7155:374;7321:201;;:::o;7328:194::-;7462:60;7510:11;;7462:60;:::i;:::-;7328:194;;;:118;7434:11;7397:49;7434:11;7397:49;:::i;:::-;7328:118;;558:6974;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;:::i;:::-;;;;;;;;4868:490;;5093:5;4868:490;;;;5061:6;5069:12;5083:8;5093:5;;;;:::i;:::-;5113:44;:29;5135:6;;;:::i;:::-;5113:29;:::i;:::-;:44;:::i;:::-;;5158:2;5162:6;5113:56;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;4868:490;5109:205;;;;;;;;;;;5344:6;5328:23;;;;;:::i;:::-;;;;;;:::i;:::-;;;;4868:490::o;5109:205::-;5257:34;:29;5279:6;;;:::i;:::-;5257:29;:::i;:::-;:34;:::i;:::-;;5292:2;5296:6;5257:46;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;5109:205;;;;5257:46;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;:::i;5109:205::-;;;5113:56;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;514:91:44:-;568:37;514:91;:::o;2589:76:0:-;2657:1;2589:76;2642:4;1115:25:44;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;558:6974:37:-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;1030:179:44:-;1165:37;1152:50;1030:179;1165:37;:::i;:::-;1152:50;;:::i;:::-;1030:179::o;:::-;;;;:::i;:::-;:::o;558:6974:37:-;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::o;:::-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;4504:129:0:-;4604:22;:12;:22;4504:129;4578:7;;:::i;:::-;4604:6;;:12;:::i;:::-;:22;;:::i;:::-;4597:29;:::o;2589:76::-;;2657:1;2589:76;2642:4;5012:18;5025:4;5012:18;:::i;:::-;2642:4;:::i;:::-;2657:1;:::i;:::-;2589:76::o;4929:145::-;;5059:7;4929:145;5059:7;:::i;:::-;4929:145::o;:::-;;;;;:::i;:::-;:::o;558:6974:37:-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::o;:::-;;;:::o;:::-;;;:::o;:::-;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;:::o;:::-;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;:::o;:::-;;;;:::i;:::-;;:::o;6927:102::-;6973:18;;:::i;:::-;7010:12;7003:19;7010:12;7003:19;:::i;:::-;;:::o;558:6974::-;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;6038:214:0;;6237:7;6038:214;6125:83;6133:7;:23;;6144:12;;:::i;:::-;6133:23;:::i;:::-;;;:::i;:::-;;6125:83;:::i;:::-;6237:7;:::i;:::-;6038:214::o;550:68:45:-;592:26;550:68;:::o;2589:76:0:-;;2657:1;2589:76;;2642:4;1000:13:45;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;558:6974:37:-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;919:161:45:-;;1048:13;1067:5;919:161;1048:13;:::i;:::-;1063:2;1067:5;;;:::i;:::-;919:161::o;:::-;;;;;;:::i;:::-;:::o;2589:76:0:-;;2657:1;2589:76;2642:4;1364:13:45;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;558:6974:37:-;;;;:::o;:::-;;;;;;:::i;:::-;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;1300:212:45;1407:27;1448:8;1300:212;;;1407:23;:27;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::i;:::-;;1448:8;;:::i;:::-;1444:62;;1300:212::o;1444:62::-;1479:16;;;;;;;;;;;;:::i;:::-;;;;1300:212;;;;;:::i;:::-;:::o;558:6974:37:-;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;673:72::-;717:28;673:72;:::o;717:28::-;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;1198:530::-;;;;1377:12;;;:::i;:::-;1373:73;;1456:14;1669:21;1465:5;1456:14;;:::i;:::-;1512:5;1492:18;;:::i;:::-;1512:5;;;:::i;:::-;1556;1539:15;;:::i;:::-;1556:5;;;:::i;:::-;1598;1583:13;;:::i;:::-;1598:5;;;:::i;:::-;1646:21;1669;;;:::i;:::-;1702:19;1717:4;1702:19;;:::i;:::-;1198:530::o;1373:73::-;1412:23;;;;;;;;;;;;:::i;:::-;;;;2589:76:0;;2657:1;2589:76;;;;;2642:4;6234:15:37;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;558:6974:37:-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;:::i;:::-;:::o;:::-;;;;;:::i;:::-;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;:::o;6025:697::-;;;;;;6319:7;:19;;6329:9;6319:19;:::i;:::-;;;:::i;:::-;;:49;;;;6025:697;6315:107;;6435:15;:20;;6454:1;6435:20;:::i;:::-;;;:::i;:::-;;6431:78;;6545:15;6518:95;6628:87;6545:15;6533:80;6562:4;6533:80;6568:12;6533:80;6582:9;6533:80;6593:7;6602:10;6533:80;6602:10;6533:80;;;;:::i;:::-;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;:::i;:::-;;;;;:::i;:::-;;;;;:::i;:::-;;;;;:::i;:::-;6518:95;;:::i;:::-;6664:4;6670:12;6684:9;6695:7;6704:10;6628:87;;;;;:::i;:::-;;;;;;:::i;:::-;;;;6025:697::o;6431:78::-;6478:20;6391;;;6478;;;;;;;;:::i;:::-;;;;6315:107;6391:20;;;;;;;;;;;;:::i;:::-;;;;6319:49;6342:7;;:26;;6353:15;6342:26;:::i;:::-;;;:::i;:::-;;;6319:49;;6025:697;;;;;;;;;:::i;:::-;:::o;558:6974::-;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;1431:151:1:-;;1547:21;:18;:28;1431:151;1521:7;;:::i;:::-;1547:12;;:18;:::i;:::-;:21;:::i;:::-;:28;:::i;:::-;1540:35;:::o;558:6974:37:-;;;;;:::i;:::-;;;;;;;;;:::o;3021:145:0:-;3130:29;3021:145;3130:20;:12;:29;3021:145;3107:4;;:::i;:::-;3130:6;;:12;:::i;:::-;:20;:29;:::i;:::-;;:::i;:::-;3123:36;:::o;558:6974:37:-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;:::i;:::-;:::o;1171:295:29:-;;;1398:63;1171:295;1319:7;;:::i;:::-;1398:10;:30;:10;;;:::i;:::-;:30;:::i;:::-;:63;:30;1429:6;1437:11;1450:10;1398:63;1450:10;;;:::i;:::-;1398:63;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;1171:295;1391:70;;:::o;1398:63::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;6755:96:37:-;6803:7;;:::i;:::-;6837:6;;;;:::i;:::-;6822:22;:::o;558:6974::-;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::o;1505:282:43:-;;;;;;1658:4;;:::i;:::-;1682:10;1681:23;1682:22;;:16;:10;1693:4;1682:16;;:::i;:::-;1699:4;1682:22;;:::i;:::-;;:::i;:::-;1681:23;;:::i;:::-;:99;;;;1505:282;1674:106;;;;;;:::o;1681:99::-;1708:72;1727:5;;;1750:28;1708:72;1727:5;;;1734:4;1767;1750:28;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;1740:39;;;;:::i;:::-;;;:::i;:::-;;1708:72;;:::i;:::-;;:::i;:::-;1681:99;;;;;;;558:6974:37;;;:::o;1750:140:1:-;1856:25;:18;:27;1750:140;1830:7;;:::i;:::-;1856:12;;:18;:::i;:::-;:25;:::i;:::-;:27;:::i;:::-;1849:34;:::o;2589:76:0:-;;2657:1;2589:76;2642:4;5438:18;5451:4;5438:18;:::i;:::-;2642:4;:::i;:::-;2657:1;:::i;:::-;2589:76::o;5354:147::-;;5486:7;5354:147;5486:7;:::i;:::-;5354:147::o;:::-;;;;;:::i;:::-;:::o;2589:76::-;2657:1;2589:76;2642:4;1486:25:44;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;1401:151:44:-;1523:22;1401:151;1523:22;;:::i;:::-;1401:151::o;:::-;;;;:::i;:::-;:::o;1545:276:45:-;1669:4;;:::i;:::-;1692:11;;:52;;1707:37;1692:52;:::i;:::-;;;:::i;:::-;;:122;;;;;1545:276;1685:129;;:::o;1692:122::-;1760:54;1802:11;;1760:54;:::i;:::-;1692:122;;;1586:295:44;1731:4;;:::i;:::-;1808:11;1766:54;1808:11;1766:54;:::i;:::-;:108;;;;;1586:295;1747:127;;:::o;1766:108::-;1824:50;1862:11;;1824:50;:::i;:::-;1766:108;;;558:6974:37;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;:::o;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;:::o;2665:1637::-;;;;;;2870:67;2892:22;;:12;:22;;:::i;:::-;2870:67;;2916:20;;:12;:20;;:::i;:::-;2870:67;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;2866:119;;3021:28;;:12;:28;;:::i;:::-;:38;;3052:7;3021:38;:::i;:::-;;;:::i;:::-;;3017:133;;3191:7;;3231:67;3191:7;3159:39;3325:27;3191:7;3159:39;:28;:12;:28;:39;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;3250:23;;:12;:23;;:::i;:::-;3275:6;;3283:10;3231:67;;;:::i;:::-;;;:::i;:::-;3325:17;;:12;:17;;:::i;:::-;:27;:::i;:::-;3366:21;;:50;;3391:25;;:12;:25;;:::i;:::-;3366:50;:::i;:::-;;;:::i;:::-;;3362:199;;3574:9;:17;;3586:5;3574:17;:::i;:::-;;;:::i;:::-;;3570:158;;3741:21;;:35;;3766:10;3774:1;3766:10;:::i;:::-;3741:35;:::i;:::-;;;:::i;:::-;;3737:559;;;;3823:9;:18;;3836:5;3823:18;:::i;:::-;;;:::i;:::-;;3819:171;;3737:559;;;2665:1637::o;3819:171::-;3915:60;3965:9;3915:60;3494:56;;;;;;3915:60;;;;;;:::i;:::-;;;;3737:559;4010:9;;:13;;4022:1;4010:13;:::i;:::-;;;:::i;:::-;;4006:290;;;;4109:10;4117:1;4109:10;:::i;:::-;4121:1;4124:9;4089:45;4124:9;4089:45;3494:56;;;;;;4089:45;;;;;;:::i;:::-;;;;4006:290;4221:29;4279:5;4228:21;4221:29;:::i;:::-;4252:10;;4264:13;4272:4;4264:13;:::i;:::-;4279:5;;;:::i;:::-;3737:559;;3570:158;3677:21;3657:60;3677:21;3700:5;3707:9;3657:60;3494:56;;;;;;3657:60;;;;;;:::i;:::-;;;;3362:199;3514:12;:25;;:12;:25;;:::i;:::-;3494:56;3548:1;3494:56;;;;;;;;;;;;;:::i;:::-;;;;3017:133;3101:12;:28;;:12;:28;;:::i;:::-;3082:57;;;;;;;;;;;;;;:::i;:::-;;;;2866:119;2960:14;;;;;;;;;;;;:::i;:::-;;;;3460:103:0;3543:12;3460:103;3543:12;;:::i;:::-;;;:::i;:::-;3460:103::o;1978:166:1:-;;2106:22;:18;:31;1978:166;2088:7;2082:4;2088:7;;;:::i;:::-;2106:12;:18;:::i;:::-;:22;:::i;:::-;:31;:::i;:::-;;1978:166::o;640:96:15:-;693:7;;:::i;:::-;719:10;;712:17;:::o;2233:171:1:-;;2363:25;:18;:34;2233:171;2345:7;2339:4;2345:7;;;:::i;:::-;2363:12;:18;:::i;:::-;:25;:::i;:::-;:34;:::i;:::-;;2233:171::o;558:6974:37:-;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;941:175:13:-;;1050:58;;941:175;1050:58;;941:175;1073:14;:23;:14;:23;:::i;:::-;1098:2;1050:58;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;:::i;:::-;941:175::o;612:218:44:-;;755:5;813:9;612:218;;728:25;;:::i;:::-;755:5;:::i;:::-;813:9;:::i;:::-;612:218::o;558:6974:37:-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;9563:156:24:-;9679:31;9687:22;9663:49;9563:156;9687:22;9691:10;9671:40;9563:156;9637:7;;:::i;:::-;9691:3;:10;9687:22;:::i;:::-;;:::i;:::-;9679:31;:::i;:::-;9671:40;:::i;:::-;9663:49;:::i;:::-;9656:56;:::o;1156:154:19:-;1270:25;:33;1156:154;;1270:33;1156:154;1247:4;;:::i;:::-;1283:5;1270:25;:::i;:::-;1299:4;1270:33;:::i;:::-;;;:::i;:::-;;1263:40;:::o;9106:115:24:-;9195:19;9203:10;9195:19;9106:115;9169:7;;:::i;:::-;9203:3;:10;9195:19;:::i;:::-;;:::i;:::-;9188:26;:::o;634:212:1:-;719:4;;:::i;:::-;742:11;;:57;;757:42;;;742:57;:::i;:::-;;;:::i;:::-;;:97;;;;;634:212;735:104;;:::o;742:97::-;803:36;827:11;;803:36;:::i;:::-;742:97;;;1899:210:29;1992:4;;:::i;:::-;2011:11;;:53;;2026:38;;;2011:53;:::i;:::-;;;:::i;:::-;;:93;;;;;1899:210;2004:100;;:::o;2011:93::-;2068:36;2092:11;;2068:36;:::i;:::-;2011:93;;;2032:285:37;2123:4;;:::i;:::-;2193:8;;:13;;2205:1;2193:13;:::i;:::-;;;:::i;:::-;;:45;;;;;2032:285;2193:76;;;;;;2032:285;2186:83;;:::o;2193:76::-;2242:15;;:27;;:15;2261:8;2242:27;:::i;:::-;;;:::i;:::-;;;2193:76;;;:45;2210:15;;:28;;:15;2228:10;2210:28;:::i;:::-;;;:::i;:::-;;2193:45;;;558:6974;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;:::i;:::-;:::o;850:343:43:-;;;969:4;:18;;977:10;985:1;977:10;:::i;:::-;969:18;:::i;:::-;;;:::i;:::-;;965:222;;850:343;;;;;;:::o;965:222::-;1007:42;1008:41;1025:4;1031:5;;1038:4;1044;;1008:41;;:::i;:::-;1007:42;;:::i;:::-;1003:131;;1172:4;;;;1147:22;:29;1172:4;1147:16;1172:4;1147:10;;:16;:::i;:::-;:22;:::i;:::-;:29;:::i;:::-;965:222;;;;;;;1003:131;1095:4;1076:43;1095:4;;1101:5;;1108:4;1114;1076:43;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;558:6974:37;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;:::o;1355:203:13:-;1482:68;1355:203;;1482:68;;1355:203;1482:68;1355:203;1505:18;:27;:18;:27;:::i;:::-;1534:4;1540:2;1544:5;1482:68;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;:::i;:::-;1355:203::o;558:6974:37:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::o;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;3844:479:0:-;;3931:23;3932:22;3940:4;3946:7;3932:22;;:::i;:::-;3931:23;;:::i;:::-;3927:390;;3844:479;;:::o;3927:390::-;3970:336;4135:7;4022:252;4214:38;4234:13;4115:28;3994:298;4135:7;4115:28;:::i;:::-;4242:4;4234:13;:::i;:::-;4214:38;4249:2;4214:38;:::i;:::-;;;:::i;:::-;4022:252;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;3994:298;:::i;:::-;3970:336;;:::i;:::-;558:6974:37;;;;;;3970:336:0;;;;;;:::i;:::-;;;;7587:233;7669:23;7670:22;7678:4;7684:7;7670:22;;:::i;:::-;7669:23;;:::i;:::-;7665:149;;7587:233;;;:::o;7665:149::-;7708:36;7740:4;7708:29;:20;:12;:6;7715:4;7708:12;;:::i;:::-;:20;7729:7;7708:29;;:::i;:::-;:36;:::i;:::-;7781:7;7790:12;;:::i;:::-;7763:40;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;7665:149;;;;558:6974:37;;;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;8305:150:24:-;;8398:50;8415:32;8423:23;8431:14;8403:10;8398:50;8305:150;8375:4;;:::i;:::-;8403:3;:10;8439:5;8431:14;:::i;:::-;8423:23;:::i;:::-;8415:32;:::i;:::-;8398:50;;:::i;:::-;;:::i;:::-;8391:57;:::o;7991:234:0:-;8074:22;8082:4;8088:7;8074:22;;:::i;:::-;8070:149;;7991:234;;;:::o;8070:149::-;8112:37;8144:5;8112:29;:20;:12;:6;8119:4;8112:12;;:::i;:::-;:20;8133:7;8112:29;;:::i;:::-;:37;:::i;:::-;8186:7;8195:12;;:::i;:::-;8168:40;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;8070:149;;;;8623:156:24;;8719:53;8739:32;8747:23;8755:14;8727:10;8719:53;8623:156;8696:4;;:::i;:::-;8727:3;:10;8763:5;8755:14;:::i;:::-;8747:23;:::i;:::-;8739:32;:::i;:::-;8719:53;;:::i;:::-;;:::i;:::-;8712:60;:::o;558:6974:37:-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;:::o;:::-;;;;:::i;:::-;;;;;;;:::i;:::-;:::o;:::-;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;5196:642:13;5720:111;5196:642;5641:14;:69;5196:642;5641:14;:::i;:::-;5669:4;5641:69;;:::i;:::-;;;:::i;:::-;5728:17;:10;:17;:::i;:::-;:22;;5749:1;5728:22;:::i;:::-;;;:::i;:::-;;:56;;;;;5196:642;5720:111;;:::i;:::-;5196:642::o;5728:56::-;5754:30;5765:10;;5754:30;;;;:::i;:::-;;;;;;;;:::i;:::-;5728:56;;;952:176:29;;1045:50;1058:37;1101:22;952:176;1058:37;:::i;:::-;1045:50;;:::i;:::-;1101:22;;:::i;:::-;952:176::o;558:6974:37:-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::o;4912:118:24:-;5005:18;4912:118;5005:11;:18;4912:118;4979:7;;:::i;:::-;5005:3;:11;:18;:::i;:::-;;;:::i;:::-;4998:25;:::o;558:6974:37:-;;;;;;:::i;:::-;;:::o;:::-;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;;;;;:::o;:::-;;:::i;1934:290:19:-;;;2017:7;;:::i;:::-;2059:4;2078:13;2090:1;2078:13;:::i;:::-;2073:116;2111:3;2093:1;:16;;2097:12;:5;:12;:::i;:::-;2093:16;:::i;:::-;;;:::i;:::-;;;;;2145:33;2111:3;2155:12;2169:8;;:5;2175:1;2169:8;;:::i;:::-;;:::i;:::-;2145:33;;:::i;:::-;2111:3;;:::i;:::-;2078:13;;;2093:16;;;;;2198:19;:::o;4463:107:24:-;4545:11;:18;4463:107;4519:7;;:::i;:::-;4545:3;:11;:18;:::i;:::-;4538:25;:::o;2732:202:0:-;2817:4;;:::i;:::-;2840:11;;:47;;2855:32;;;2840:47;:::i;:::-;;;:::i;:::-;;:87;;;;;2732:202;2833:94;;:::o;2840:87::-;2891:36;2915:11;;2891:36;:::i;:::-;2840:87;;;558:6974:37;;;:::o;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;302:43:18:-;343:2;;;:::i;:::-;302:43;:::o;343:2::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2407:149::-;2509:22;2517:13;2497:52;2407:149;2465:13;;:::i;:::-;2525:4;2517:13;:::i;:::-;2509:22;:::i;:::-;2497:52;2533:15;;:::i;:::-;2497:52;:::i;:::-;;;:::i;:::-;2490:59;:::o;558:6974:37:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;:::o;:::-;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::o;242:54:18:-;278:18;;:::i;:::-;242:54;:::o;278:18::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;558:6974:37;;;278:18:18;;;;;;;;:::i;:::-;;;;1818:437;;;1893:13;;:::i;:::-;1950:1;2042:14;:10;1940:25;1950:14;:10;:1;:10;1954:6;1950:10;;:::i;:::-;;:::i;:::-;:14;1963:1;1950:14;:::i;:::-;;;:::i;:::-;1940:25;:::i;:::-;1975:15;;;:::i;:::-;;:6;:15;1982:1;1975:15;;;;;:::i;:::-;;;:::i;:::-;;2000;;:::i;:::-;;:6;:15;2007:1;2000:15;;;;;:::i;:::-;;;:::i;:::-;;2042:10;:1;:10;:::i;:::-;;:::i;:::-;:14;2055:1;2042:14;:::i;:::-;;;:::i;:::-;2025:128;2065:3;2058:1;:5;;2062:1;2058:5;:::i;:::-;;;:::i;:::-;;;;;2096:8;;:::i;:::-;2105:5;:11;2113:3;2105:11;:::i;:::-;;2096:21;;;;;;;;2131:11;2096:21;2065:3;2096:21;;;:::i;:::-;2084:33;:6;2091:1;;2084:33;;;;;:::i;:::-;;2131:11;2141:1;2131:11;:::i;:::-;;;:::i;:::-;2065:3;;:::i;:::-;2030:26;;;2096:21;;:::i;2058:5::-;2234:14;2058:5;;;2162:55;2058:5;2170:10;;2179:1;2170:10;:::i;:::-;;;:::i;:::-;;2162:55;:::i;:::-;2234:14;:::i;:::-;2227:21;:::o;558:6974:37:-;;:::o;:::-;;;;;;;:::o;:::-;;;:::o;:::-;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;:::o;2214:404:24:-;2277:4;;:::i;:::-;2308:3;2297:22;2298:21;2308:3;2313:5;2298:21;;:::i;:::-;2297:22;;:::i;:::-;2293:319;;;;2493:19;:40;2335:3;:23;:16;:11;:3;:11;:16;:::i;:::-;2352:5;2335:23;;:::i;:::-;2493:12;2515:18;:11;:3;:11;:18;:::i;:::-;2493:3;:12;:19;:::i;:::-;:40;:::i;:::-;2554:4;2547:11;:::o;2293:319::-;2596:5;;;2589:12;:::o;558:6974:37:-;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;:::o;:::-;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;;:::i;:::-;;;:::i;:::-;:::o;2786:1388:24:-;2852:4;;:::i;:::-;2989:3;:19;;:12;:3;:12;3002:5;2989:19;;:::i;:::-;;:::i;:::-;3023:10;;:15;;3037:1;3023:15;:::i;:::-;;;:::i;:::-;;;3019:1149;;;;4062:26;3416:10;4069:12;:19;3416:10;;:14;4062:26;3416:10;:14;3429:1;3416:14;:::i;:::-;;;:::i;:::-;3464:22;:18;:3;;:11;:18;:::i;:::-;:22;3485:1;3464:22;:::i;:::-;;;:::i;:::-;3505:9;:26;;3518:13;3505:26;:::i;:::-;;;:::i;:::-;;3501:398;;3019:1149;3977:3;;;:15;;:3;;:11;:15;:::i;:::-;;:::i;:::-;4069:12;:19;:::i;:::-;4062:26;:::i;:::-;4110:4;4103:11;:::o;3501:398::-;3805:36;3571:3;3693:38;3571:22;;3805:23;3571:3;;;:11;:22;:::i;:::-;;;:::i;:::-;3722:9;3693:26;3722:9;3693:3;;;:11;:26;:::i;:::-;:38;;:::i;:::-;3805:3;;;:12;:23;:::i;:::-;:36;:::i;:::-;3501:398;;;;;3019:1149;4152:5;;;;4145:12;:::o;4108:223:14:-;;4272:52;4108:223;;4241:12;;:::i;:::-;4294:6;4302:4;4272:52;4308:1;4272:52;:::i;:::-;;;:::i;:::-;4265:59;:::o;9205:147:19:-;9268:7;;:::i;:::-;9294:1;;:5;;9298:1;9294:5;:::i;:::-;;;:::i;:::-;;:51;;;;9317:1;9302:20;9317:1;9302:20;:::i;:::-;9294:51;9287:58;:::o;9294:51::-;9325:20;9340:1;9325:20;:::i;:::-;9294:51;;829:155:20;914:4;;:::i;:::-;937:11;:40;;952:25;;;937:40;:::i;:::-;;;:::i;:::-;;930:47;:::o;4255:127:24:-;4351:19;4255:127;4351:12;:19;4255:127;4328:4;;:::i;:::-;4351:3;:12;:19;:::i;:::-;;:::i;:::-;:24;;4374:1;4351:24;:::i;:::-;;;:::i;:::-;;;4344:31;:::o;558:6974:37:-;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;5165:446:14;;5487:31;5165:446;;5535:69;5165:446;;5330:12;;:::i;:::-;5370:4;5354:81;5362:13;5370:4;5362:13;:::i;:::-;:21;:30;;5387:5;5362:30;:::i;:::-;;;:::i;:::-;;;5354:81;:::i;:::-;5487:6;:25;:31;;;;;;;;;;;:::i;:::-;5562:6;5570:7;5579:10;5591:12;5535:69;;:::i;:::-;5528:76;:::o;9358:261:19:-;9426:13;;:::i;:::-;9494:119;;;;;;;;9358:261;:::o;558:6974:37:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;7671:628:14;;;;7851:12;;:::i;:::-;7879:7;7875:418;;;;7906:10;:17;:10;:17;:::i;:::-;:22;;7927:1;7906:22;:::i;:::-;;;:::i;:::-;;7902:286;;7875:418;8208:10;8201:17;:::o;7902:286::-;8121:18;8113:60;8132:6;8121:18;:::i;:::-;8113:60;:::i;:::-;7902:286;;;7875:418;8257:10;8821:540;8980:17;:10;:17;:::i;:::-;:21;;9000:1;8980:21;:::i;:::-;;;:::i;:::-;;8976:379;;;;9152:142;;;;;;;8976:379;9324:20;9331:12;9324:20;;:::i;:::-;558:6974:37;;;;;;9324:20:14;;;;;;:::i;:::-;;;;1412:320;1472:4;;:::i;:::-;1702:7;:19;:23;;1724:1;1702:23;:::i;:::-;;;:::i;:::-;;1695:30;:::o"
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": "9d043a66",
              "checkMerkleProof(bytes32,bytes32[],address,bytes32)": "bad43661",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "initialize(address,address,address,bytes32)": "63acc14d",
              "itemsContract()": "a971e842",
              "mint(address,uint256,address,uint256,bytes32[])": "0668d0bb",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "saleDetails()": "3474a4a6",
              "setImplicitModeProjectId(bytes32)": "ed4c2ac7",
              "setImplicitModeValidator(address)": "0bb310de",
              "setSaleDetails(uint256,uint256,address,uint64,uint64,bytes32)": "8c17030f",
              "supportsInterface(bytes4)": "01ffc9a7",
              "withdrawERC20(address,address,uint256)": "44004cc1",
              "withdrawETH(address,uint256)": "4782f779"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSaleDetails\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"MerkleProofInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaleInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ItemsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"SaleDetailsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delegateCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onlyFallback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"behaviorOnError\",\"type\":\"uint256\"}],\"internalType\":\"struct Payload.Call\",\"name\":\"call\",\"type\":\"tuple\"}],\"name\":\"acceptImplicitRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"checkMerkleProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"items\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotal\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"remainingSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct IERC721SaleFunctions.SaleDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"setImplicitModeProjectId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"setImplicitModeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setSaleDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InsufficientPayment(address,uint256,uint256)\":[{\"params\":{\"actual\":\"Actual amount of tokens.\",\"currency\":\"Currency address. address(0) indicates ETH.\",\"expected\":\"Expected amount of tokens.\"}}],\"InsufficientSupply(uint256,uint256)\":[{\"params\":{\"amount\":\"Amount to mint.\",\"remainingSupply\":\"Remaining supply.\"}}],\"MerkleProofInvalid(bytes32,bytes32[],address,bytes32)\":[{\"params\":{\"addr\":\"Address to check.\",\"proof\":\"Merkle proof.\",\"root\":\"Merkle root.\",\"salt\":\"Salt used to generate the merkle leaf.\"}}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"params\":{\"attestation\":\"The attestation data\",\"call\":\"The call to validate\",\"wallet\":\"The wallet's address\"},\"returns\":{\"_0\":\"The hash of the implicit request if valid\"}},\"checkMerkleProof(bytes32,bytes32[],address,bytes32)\":{\"params\":{\"addr\":\"Address to check.\",\"proof\":\"Merkle proof.\",\"root\":\"Merkle root.\",\"salt\":\"Salt used to generate the merkle leaf.\"},\"returns\":{\"_0\":\"True if the proof is valid and has not yet been used by {addr}.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,address,bytes32)\":{\"details\":\"This should be called immediately after deployment.\",\"params\":{\"implicitModeProjectId\":\"Implicit session project id\",\"implicitModeValidator\":\"Implicit session validator address\",\"items\":\"The ERC-721 Items contract address\",\"owner\":\"The owner of the contract\"}},\"mint(address,uint256,address,uint256,bytes32[])\":{\"details\":\"An empty proof is supplied when no proof is required.`paymentToken` must match the `paymentToken` in the sale details.\",\"params\":{\"amount\":\"Amount of tokens to mint.\",\"maxTotal\":\"Maximum amount of payment tokens.\",\"paymentToken\":\"ERC20 token address to accept payment in. address(0) indicates ETH.\",\"proof\":\"Merkle proof for allowlist minting.\",\"to\":\"Address to mint tokens to.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"saleDetails()\":{\"returns\":{\"_0\":\"Sale details.\"}},\"setImplicitModeProjectId(bytes32)\":{\"params\":{\"projectId\":\"The project id.\"}},\"setImplicitModeValidator(address)\":{\"params\":{\"validator\":\"The validator address.\"}},\"setSaleDetails(uint256,uint256,address,uint64,uint64,bytes32)\":{\"details\":\"A zero end time indicates an inactive sale.\",\"params\":{\"cost\":\"The amount of payment tokens to accept for each token minted.\",\"endTime\":\"The end time of the sale. Tokens cannot be minted after this time.\",\"merkleRoot\":\"The merkle root for allowlist minting.\",\"paymentToken\":\"The ERC20 token address to accept payment in. address(0) indicates ETH.\",\"remainingSupply\":\"The remaining number of tokens that can be minted by the items contract. 0 indicates unlimited supply.\",\"startTime\":\"The start time of the sale. Tokens cannot be minted before this time.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Interface id\"},\"returns\":{\"_0\":\"True if supported\"}},\"withdrawERC20(address,address,uint256)\":{\"params\":{\"to\":\"Address to withdraw to.\",\"token\":\"The ERC20 token address.\",\"value\":\"Amount to withdraw.\"}},\"withdrawETH(address,uint256)\":{\"params\":{\"to\":\"Address to withdraw to.\",\"value\":\"Amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"InsufficientPayment(address,uint256,uint256)\":[{\"notice\":\"Insufficient tokens for payment.\"}],\"InsufficientSupply(uint256,uint256)\":[{\"notice\":\"Insufficient supply.\"}],\"InvalidInitialization()\":[{\"notice\":\"Contract already initialized.\"}],\"InvalidSaleDetails()\":[{\"notice\":\"Sale details supplied are invalid.\"}],\"MerkleProofInvalid(bytes32,bytes32[],address,bytes32)\":[{\"notice\":\"Thrown when the merkle proof is invalid or has already been used.\"}],\"SaleInactive()\":[{\"notice\":\"Sale is not active.\"}],\"WithdrawFailed()\":[{\"notice\":\"Withdraw failed error.\"}]},\"kind\":\"user\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"notice\":\"Determines if an implicit request is valid\"},\"checkMerkleProof(bytes32,bytes32[],address,bytes32)\":{\"notice\":\"Checks if the given merkle proof is valid.\"},\"initialize(address,address,address,bytes32)\":{\"notice\":\"Initialize the contract.\"},\"mint(address,uint256,address,uint256,bytes32[])\":{\"notice\":\"Mint tokens.Sale must be active for all tokens.\"},\"saleDetails()\":{\"notice\":\"Get sale details.\"},\"setImplicitModeProjectId(bytes32)\":{\"notice\":\"Updates the settings for implicit mode validation.Only callable by an address with the project admin role.\"},\"setImplicitModeValidator(address)\":{\"notice\":\"Updates the validator for implicit mode validation.Only callable by an address with the project admin role.\"},\"setSaleDetails(uint256,uint256,address,uint64,uint64,bytes32)\":{\"notice\":\"Set the sale details.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check interface support.\"},\"withdrawERC20(address,address,uint256)\":{\"notice\":\"Withdraws ERC20 tokens owned by this contract.Only callable by an address with the withdraw role.\"},\"withdrawETH(address,uint256)\":{\"notice\":\"Withdraws ETH owned by this sale contract.Only callable by an address with the withdraw role.\"}},\"notice\":\"An ERC-721 token contract with primary sale mechanisms.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/utility/sale/ERC721Sale.sol\":\"ERC721Sale\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IImplicitProjectValidation } from \\\"../registry/IImplicitProjectValidation.sol\\\";\\n\\nimport { ERC165, IERC165 } from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\nimport { ISignalsImplicitMode } from \\\"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\\\";\\nimport { Payload } from \\\"sequence-v3/src/modules/Payload.sol\\\";\\n\\n/// @title SignalsImplicitMode\\n/// @author Michael Standen\\n/// @notice Base contract for implicit mode validation by project\\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\\n\\n  IImplicitProjectValidation internal _validator;\\n  bytes32 internal _projectId;\\n\\n  /// @notice Initialize implicit mode validation\\n  /// @param validator The IImplicitProjectValidation address\\n  /// @param projectId The project id\\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\\n    _validator = IImplicitProjectValidation(validator);\\n    _projectId = projectId;\\n  }\\n\\n  /// @inheritdoc ISignalsImplicitMode\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32) {\\n    _validateImplicitRequest(wallet, attestation, call);\\n    return _validator.validateAttestation(wallet, attestation, _projectId);\\n  }\\n\\n  /// @notice Validates an implicit request\\n  /// @dev Optional hook for additional validation of the implicit requests\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  function _validateImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) internal view virtual { }\\n\\n  /// @inheritdoc IERC165\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd9107be2460f7f7ec4bdfefc3d10c79aa92b9285e1b12a75cb2a8d17b150a2ec\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC721/presets/items/IERC721Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721ItemsFunctions {\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenId Token id to mint.\\n     */\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /**\\n     * Mint a sequential token.\\n     * @param to Address to mint token to.\\n     * @param amount Amount of tokens to mint.\\n     */\\n    function mintSequential(address to, uint256 amount) external;\\n\\n    /**\\n     * Get the total supply of tokens.\\n     * @return totalSupply The total supply of tokens.\\n     */\\n    function totalSupply() external view returns (uint256 totalSupply);\\n\\n}\\n\\ninterface IERC721ItemsSignals {\\n\\n    /**\\n     * Invalid initialization error.\\n     */\\n    error InvalidInitialization();\\n\\n}\\n\\ninterface IERC721Items is IERC721ItemsFunctions, IERC721ItemsSignals { }\\n\",\"keccak256\":\"0x3170e3d97e03d070d03c50cbe5a77ea84209bb8e2bcff3bd8fc55b88cc7f2ba1\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC721/utility/sale/ERC721Sale.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { MerkleProofSingleUse } from \\\"../../../common/MerkleProofSingleUse.sol\\\";\\nimport { SignalsImplicitModeControlled } from \\\"../../../common/SignalsImplicitModeControlled.sol\\\";\\nimport { IERC20, SafeERC20, WithdrawControlled } from \\\"../../../common/WithdrawControlled.sol\\\";\\nimport { IERC721ItemsFunctions } from \\\"../../presets/items/IERC721Items.sol\\\";\\nimport { IERC721Sale, IERC721SaleFunctions } from \\\"./IERC721Sale.sol\\\";\\n\\n/**\\n * An ERC-721 token contract with primary sale mechanisms.\\n */\\ncontract ERC721Sale is IERC721Sale, WithdrawControlled, MerkleProofSingleUse, SignalsImplicitModeControlled {\\n\\n    bytes32 internal constant MINT_ADMIN_ROLE = keccak256(\\\"MINT_ADMIN_ROLE\\\");\\n\\n    bool private _initialized;\\n    address private _items;\\n    SaleDetails private _saleDetails;\\n\\n    /**\\n     * Initialize the contract.\\n     * @param owner The owner of the contract\\n     * @param items The ERC-721 Items contract address\\n     * @param implicitModeValidator Implicit session validator address\\n     * @param implicitModeProjectId Implicit session project id\\n     * @dev This should be called immediately after deployment.\\n     */\\n    function initialize(\\n        address owner,\\n        address items,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) public virtual {\\n        if (_initialized) {\\n            revert InvalidInitialization();\\n        }\\n\\n        _items = items;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\\n        _grantRole(MINT_ADMIN_ROLE, owner);\\n        _grantRole(WITHDRAW_ROLE, owner);\\n\\n        _initializeImplicitMode(owner, implicitModeValidator, implicitModeProjectId);\\n\\n        _initialized = true;\\n    }\\n\\n    /**\\n     * Checks if the current block.timestamp is out of the give timestamp range.\\n     * @param _startTime Earliest acceptable timestamp (inclusive).\\n     * @param _endTime Latest acceptable timestamp (exclusive).\\n     * @dev A zero endTime value is always considered out of bounds.\\n     */\\n    function _blockTimeOutOfBounds(uint256 _startTime, uint256 _endTime) private view returns (bool) {\\n        // 0 end time indicates inactive sale.\\n        return _endTime == 0 || block.timestamp < _startTime || block.timestamp >= _endTime; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /**\\n     * Checks the sale is active, valid and takes payment.\\n     * @param _amount Amount of tokens to mint.\\n     * @param _expectedPaymentToken ERC20 token address to accept payment in. address(0) indicates ETH.\\n     * @param _maxTotal Maximum amount of payment tokens.\\n     * @param _proof Merkle proof for allowlist minting.\\n     */\\n    function _validateMint(\\n        uint256 _amount,\\n        address _expectedPaymentToken,\\n        uint256 _maxTotal,\\n        bytes32[] calldata _proof\\n    ) private {\\n        // Active sale test\\n        if (_blockTimeOutOfBounds(_saleDetails.startTime, _saleDetails.endTime)) {\\n            revert SaleInactive();\\n        }\\n        // Supply test\\n        if (_saleDetails.remainingSupply < _amount) {\\n            revert InsufficientSupply(_saleDetails.remainingSupply, _amount);\\n        }\\n        _saleDetails.remainingSupply -= _amount;\\n        // Check proof\\n        requireMerkleProof(_saleDetails.merkleRoot, _proof, msg.sender, \\\"\\\");\\n\\n        uint256 total = _saleDetails.cost * _amount;\\n        if (_expectedPaymentToken != _saleDetails.paymentToken) {\\n            // Caller expected different payment token\\n            revert InsufficientPayment(_saleDetails.paymentToken, total, 0);\\n        }\\n        if (_maxTotal < total) {\\n            // Caller expected to pay less\\n            revert InsufficientPayment(_expectedPaymentToken, total, _maxTotal);\\n        }\\n        if (_expectedPaymentToken == address(0)) {\\n            // Paid in ETH\\n            if (msg.value != total) {\\n                // We expect exact value match\\n                revert InsufficientPayment(_expectedPaymentToken, total, msg.value);\\n            }\\n        } else if (msg.value > 0) {\\n            // Paid in ERC20, but sent ETH\\n            revert InsufficientPayment(address(0), 0, msg.value);\\n        } else {\\n            // Paid in ERC20\\n            SafeERC20.safeTransferFrom(IERC20(_expectedPaymentToken), msg.sender, address(this), total);\\n        }\\n    }\\n\\n    //\\n    // Minting\\n    //\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param amount Amount of tokens to mint.\\n     * @param paymentToken ERC20 token address to accept payment in. address(0) indicates ETH.\\n     * @param maxTotal Maximum amount of payment tokens.\\n     * @param proof Merkle proof for allowlist minting.\\n     * @notice Sale must be active for all tokens.\\n     * @dev An empty proof is supplied when no proof is required.\\n     * @dev `paymentToken` must match the `paymentToken` in the sale details.\\n     */\\n    function mint(\\n        address to,\\n        uint256 amount,\\n        address paymentToken,\\n        uint256 maxTotal,\\n        bytes32[] calldata proof\\n    ) public payable {\\n        _validateMint(amount, paymentToken, maxTotal, proof);\\n        try IERC721ItemsFunctions(_items).mintSequential(to, amount) { }\\n        catch {\\n            // On failure, support old minting method.\\n            IERC721ItemsFunctions(_items).mint(to, amount);\\n        }\\n        emit ItemsMinted(to, amount);\\n    }\\n\\n    /**\\n     * Set the sale details.\\n     * @param remainingSupply The remaining number of tokens that can be minted by the items contract. 0 indicates unlimited supply.\\n     * @param cost The amount of payment tokens to accept for each token minted.\\n     * @param paymentToken The ERC20 token address to accept payment in. address(0) indicates ETH.\\n     * @param startTime The start time of the sale. Tokens cannot be minted before this time.\\n     * @param endTime The end time of the sale. Tokens cannot be minted after this time.\\n     * @param merkleRoot The merkle root for allowlist minting.\\n     * @dev A zero end time indicates an inactive sale.\\n     */\\n    function setSaleDetails(\\n        uint256 remainingSupply,\\n        uint256 cost,\\n        address paymentToken,\\n        uint64 startTime,\\n        uint64 endTime,\\n        bytes32 merkleRoot\\n    ) public onlyRole(MINT_ADMIN_ROLE) {\\n        // solhint-disable-next-line not-rely-on-time\\n        if (endTime < startTime || endTime <= block.timestamp) {\\n            revert InvalidSaleDetails();\\n        }\\n        if (remainingSupply == 0) {\\n            revert InvalidSaleDetails();\\n        }\\n        _saleDetails = SaleDetails(remainingSupply, cost, paymentToken, startTime, endTime, merkleRoot);\\n        emit SaleDetailsUpdated(remainingSupply, cost, paymentToken, startTime, endTime, merkleRoot);\\n    }\\n\\n    //\\n    // Views\\n    //\\n    function itemsContract() external view returns (address) {\\n        return address(_items);\\n    }\\n\\n    /**\\n     * Get sale details.\\n     * @return Sale details.\\n     */\\n    function saleDetails() external view returns (SaleDetails memory) {\\n        return _saleDetails;\\n    }\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(WithdrawControlled, SignalsImplicitModeControlled) returns (bool) {\\n        return interfaceId == type(IERC721SaleFunctions).interfaceId\\n            || WithdrawControlled.supportsInterface(interfaceId)\\n            || SignalsImplicitModeControlled.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xcc28fb79ab8f245e5aa226debd22732dbfd034955c02c30735b5e31432559416\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC721/utility/sale/IERC721Sale.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721SaleFunctions {\\n\\n    struct SaleDetails {\\n        uint256 remainingSupply;\\n        uint256 cost;\\n        address paymentToken; // ERC20 token address for payment. address(0) indicated payment in ETH.\\n        uint64 startTime;\\n        uint64 endTime; // 0 end time indicates sale inactive\\n        bytes32 merkleRoot; // Root of allowed addresses\\n    }\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param amount Amount of tokens to mint.\\n     * @param paymentToken ERC20 token address to accept payment in. address(0) indicates ETH.\\n     * @param maxTotal Maximum amount of payment tokens.\\n     * @param proof Merkle proof for allowlist minting.\\n     * @notice Sale must be active for all tokens.\\n     * @dev An empty proof is supplied when no proof is required.\\n     */\\n    function mint(\\n        address to,\\n        uint256 amount,\\n        address paymentToken,\\n        uint256 maxTotal,\\n        bytes32[] memory proof\\n    ) external payable;\\n\\n    /**\\n     * Set the sale details.\\n     * @param remainingSupply The maximum number of tokens that can be minted in this sale.\\n     * @param cost The amount of payment tokens to accept for each token minted.\\n     * @param paymentToken The ERC20 token address to accept payment in. address(0) indicates ETH.\\n     * @param startTime The start time of the sale. Tokens cannot be minted before this time.\\n     * @param endTime The end time of the sale. Tokens cannot be minted after this time.\\n     * @param merkleRoot The merkle root for allowlist minting.\\n     */\\n    function setSaleDetails(\\n        uint256 remainingSupply,\\n        uint256 cost,\\n        address paymentToken,\\n        uint64 startTime,\\n        uint64 endTime,\\n        bytes32 merkleRoot\\n    ) external;\\n\\n    /**\\n     * Get sale details.\\n     * @return Sale details.\\n     */\\n    function saleDetails() external view returns (SaleDetails memory);\\n\\n}\\n\\ninterface IERC721SaleSignals {\\n\\n    event SaleDetailsUpdated(\\n        uint256 remainingSupply,\\n        uint256 cost,\\n        address paymentToken,\\n        uint64 startTime,\\n        uint64 endTime,\\n        bytes32 merkleRoot\\n    );\\n    event ItemsMinted(address to, uint256 amount);\\n\\n    /**\\n     * Contract already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * Sale details supplied are invalid.\\n     */\\n    error InvalidSaleDetails();\\n\\n    /**\\n     * Sale is not active.\\n     */\\n    error SaleInactive();\\n\\n    /**\\n     * Insufficient supply.\\n     * @param remainingSupply Remaining supply.\\n     * @param amount Amount to mint.\\n     */\\n    error InsufficientSupply(uint256 remainingSupply, uint256 amount);\\n\\n    /**\\n     * Insufficient tokens for payment.\\n     * @param currency Currency address. address(0) indicates ETH.\\n     * @param expected Expected amount of tokens.\\n     * @param actual Actual amount of tokens.\\n     */\\n    error InsufficientPayment(address currency, uint256 expected, uint256 actual);\\n\\n}\\n\\ninterface IERC721Sale is IERC721SaleFunctions, IERC721SaleSignals { }\\n\",\"keccak256\":\"0x8ff67e4e1077abb10501b442533e9afe85c4fad973bb7588bd28e733de85b370\",\"license\":\"Apache-2.0\"},\"src/tokens/common/IMerkleProofSingleUse.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IMerkleProofSingleUseFunctions {\\n\\n    /**\\n     * Checks if the given merkle proof is valid.\\n     * @param root Merkle root.\\n     * @param proof Merkle proof.\\n     * @param addr Address to check.\\n     * @param salt Salt used to generate the merkle leaf.\\n     * @return True if the proof is valid and has not yet been used by {addr}.\\n     */\\n    function checkMerkleProof(\\n        bytes32 root,\\n        bytes32[] calldata proof,\\n        address addr,\\n        bytes32 salt\\n    ) external view returns (bool);\\n\\n}\\n\\ninterface IMerkleProofSingleUseSignals {\\n\\n    /**\\n     * Thrown when the merkle proof is invalid or has already been used.\\n     * @param root Merkle root.\\n     * @param proof Merkle proof.\\n     * @param addr Address to check.\\n     * @param salt Salt used to generate the merkle leaf.\\n     */\\n    error MerkleProofInvalid(bytes32 root, bytes32[] proof, address addr, bytes32 salt);\\n\\n}\\n\\ninterface IMerkleProofSingleUse is IMerkleProofSingleUseFunctions, IMerkleProofSingleUseSignals { }\\n\",\"keccak256\":\"0x074aba31432a82ce4297916b3615786f98cbc913026fdaebea56b8b9ce3849c5\",\"license\":\"Apache-2.0\"},\"src/tokens/common/IWithdrawControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IWithdrawControlledFunctions {\\n\\n    /**\\n     * Withdraws ERC20 tokens owned by this contract.\\n     * @param token The ERC20 token address.\\n     * @param to Address to withdraw to.\\n     * @param value Amount to withdraw.\\n     */\\n    function withdrawERC20(address token, address to, uint256 value) external;\\n\\n    /**\\n     * Withdraws ETH owned by this sale contract.\\n     * @param to Address to withdraw to.\\n     * @param value Amount to withdraw.\\n     */\\n    function withdrawETH(address to, uint256 value) external;\\n\\n}\\n\\ninterface IWithdrawControlledSignals {\\n\\n    /**\\n     * Withdraw failed error.\\n     */\\n    error WithdrawFailed();\\n\\n}\\n\\ninterface IWithdrawControlled is IWithdrawControlledFunctions, IWithdrawControlledSignals { }\\n\",\"keccak256\":\"0x2e7a9edda2114d11a23fbf06a41a961514f692daba4d07a41214b6247115f254\",\"license\":\"Apache-2.0\"},\"src/tokens/common/MerkleProofSingleUse.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { IMerkleProofSingleUse } from \\\"./IMerkleProofSingleUse.sol\\\";\\n\\nimport { MerkleProof } from \\\"openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n * Require single use merkle proofs per address.\\n */\\nabstract contract MerkleProofSingleUse is IMerkleProofSingleUse {\\n\\n    // Stores proofs used by an address\\n    mapping(address => mapping(bytes32 => bool)) private _proofUsed;\\n\\n    /**\\n     * Requires the given merkle proof to be valid.\\n     * @param root Merkle root.\\n     * @param proof Merkle proof.\\n     * @param addr Address to check.\\n     * @param salt Salt used to generate the merkle leaf.\\n     * @notice Fails when the proof is invalid or the proof has already been claimed by this address.\\n     * @dev This function reverts on failure.\\n     */\\n    function requireMerkleProof(bytes32 root, bytes32[] calldata proof, address addr, bytes32 salt) internal {\\n        if (root != bytes32(0)) {\\n            if (!checkMerkleProof(root, proof, addr, salt)) {\\n                revert MerkleProofInvalid(root, proof, addr, salt);\\n            }\\n            _proofUsed[addr][root] = true;\\n        }\\n    }\\n\\n    /**\\n     * Checks if the given merkle proof is valid.\\n     * @param root Merkle root.\\n     * @param proof Merkle proof.\\n     * @param addr Address to check.\\n     * @param salt Salt used to generate the merkle leaf.\\n     * @return True if the proof is valid and has not yet been used by {addr}.\\n     */\\n    function checkMerkleProof(\\n        bytes32 root,\\n        bytes32[] calldata proof,\\n        address addr,\\n        bytes32 salt\\n    ) public view returns (bool) {\\n        return !_proofUsed[addr][root] && MerkleProof.verify(proof, root, keccak256(abi.encodePacked(addr, salt)));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5d5d714ef0d9ed73798d5427e9df7adf2441f3ef8d9c14e7a8db157f24637475\",\"license\":\"Apache-2.0\"},\"src/tokens/common/SignalsImplicitModeControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport {\\n    IERC165,\\n    IImplicitProjectValidation,\\n    SignalsImplicitMode\\n} from \\\"signals-implicit-mode/src/helper/SignalsImplicitMode.sol\\\";\\n\\n/**\\n * An abstract contract that allows implicit session access for a given project.\\n */\\nabstract contract SignalsImplicitModeControlled is AccessControlEnumerable, SignalsImplicitMode {\\n\\n    bytes32 internal constant _IMPLICIT_MODE_ADMIN_ROLE = keccak256(\\\"IMPLICIT_MODE_ADMIN_ROLE\\\");\\n\\n    function _initializeImplicitMode(address owner, address validator, bytes32 projectId) internal {\\n        _grantRole(_IMPLICIT_MODE_ADMIN_ROLE, owner);\\n        _initializeSignalsImplicitMode(validator, projectId);\\n    }\\n\\n    /**\\n     * Updates the validator for implicit mode validation.\\n     * @param validator The validator address.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeValidator(\\n        address validator\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _validator = IImplicitProjectValidation(validator);\\n    }\\n\\n    /**\\n     * Updates the settings for implicit mode validation.\\n     * @param projectId The project id.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeProjectId(\\n        bytes32 projectId\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _projectId = projectId;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable, SignalsImplicitMode) returns (bool) {\\n        return\\n            AccessControlEnumerable.supportsInterface(interfaceId) || SignalsImplicitMode.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb1a20575f188af254f90ec7df7f70415610ba5f41f7966ce383b50063220b860\",\"license\":\"Apache-2.0\"},\"src/tokens/common/WithdrawControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { IWithdrawControlled } from \\\"./IWithdrawControlled.sol\\\";\\n\\nimport { AccessControlEnumerable, ERC165 } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { IERC20, SafeERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * An abstract contract that allows ETH and ERC20 tokens stored in the contract to be withdrawn.\\n */\\nabstract contract WithdrawControlled is AccessControlEnumerable, IWithdrawControlled {\\n\\n    bytes32 internal constant WITHDRAW_ROLE = keccak256(\\\"WITHDRAW_ROLE\\\");\\n\\n    //\\n    // Withdraw\\n    //\\n\\n    /**\\n     * Withdraws ERC20 tokens owned by this contract.\\n     * @param token The ERC20 token address.\\n     * @param to Address to withdraw to.\\n     * @param value Amount to withdraw.\\n     * @notice Only callable by an address with the withdraw role.\\n     */\\n    function withdrawERC20(address token, address to, uint256 value) public onlyRole(WITHDRAW_ROLE) {\\n        SafeERC20.safeTransfer(IERC20(token), to, value);\\n    }\\n\\n    /**\\n     * Withdraws ETH owned by this sale contract.\\n     * @param to Address to withdraw to.\\n     * @param value Amount to withdraw.\\n     * @notice Only callable by an address with the withdraw role.\\n     */\\n    function withdrawETH(address to, uint256 value) public onlyRole(WITHDRAW_ROLE) {\\n        (bool success,) = to.call{ value: value }(\\\"\\\");\\n        if (!success) {\\n            revert WithdrawFailed();\\n        }\\n    }\\n\\n    /// @inheritdoc ERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable) returns (bool) {\\n        return interfaceId == type(IWithdrawControlled).interfaceId\\n            || AccessControlEnumerable.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1431e55e474378bf9d1ed6c013bf82a2af97b12a22028ef78b274e42f14a8144\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InsufficientPayment(address,uint256,uint256)": [
                {
                  "notice": "Insufficient tokens for payment."
                }
              ],
              "InsufficientSupply(uint256,uint256)": [
                {
                  "notice": "Insufficient supply."
                }
              ],
              "InvalidInitialization()": [
                {
                  "notice": "Contract already initialized."
                }
              ],
              "InvalidSaleDetails()": [
                {
                  "notice": "Sale details supplied are invalid."
                }
              ],
              "MerkleProofInvalid(bytes32,bytes32[],address,bytes32)": [
                {
                  "notice": "Thrown when the merkle proof is invalid or has already been used."
                }
              ],
              "SaleInactive()": [
                {
                  "notice": "Sale is not active."
                }
              ],
              "WithdrawFailed()": [
                {
                  "notice": "Withdraw failed error."
                }
              ]
            },
            "kind": "user",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "notice": "Determines if an implicit request is valid"
              },
              "checkMerkleProof(bytes32,bytes32[],address,bytes32)": {
                "notice": "Checks if the given merkle proof is valid."
              },
              "initialize(address,address,address,bytes32)": {
                "notice": "Initialize the contract."
              },
              "mint(address,uint256,address,uint256,bytes32[])": {
                "notice": "Mint tokens.Sale must be active for all tokens."
              },
              "saleDetails()": {
                "notice": "Get sale details."
              },
              "setImplicitModeProjectId(bytes32)": {
                "notice": "Updates the settings for implicit mode validation.Only callable by an address with the project admin role."
              },
              "setImplicitModeValidator(address)": {
                "notice": "Updates the validator for implicit mode validation.Only callable by an address with the project admin role."
              },
              "setSaleDetails(uint256,uint256,address,uint64,uint64,bytes32)": {
                "notice": "Set the sale details."
              },
              "supportsInterface(bytes4)": {
                "notice": "Check interface support."
              },
              "withdrawERC20(address,address,uint256)": {
                "notice": "Withdraws ERC20 tokens owned by this contract.Only callable by an address with the withdraw role."
              },
              "withdrawETH(address,uint256)": {
                "notice": "Withdraws ETH owned by this sale contract.Only callable by an address with the withdraw role."
              }
            },
            "notice": "An ERC-721 token contract with primary sale mechanisms.",
            "version": 1
          }
        }
      },
      "src/tokens/ERC721/utility/sale/ERC721SaleFactory.sol": {
        "ERC721SaleFactory": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "factoryOwner",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "name": "ERC721SaleDeployed",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "beacon",
              "outputs": [
                {
                  "internalType": "contract UpgradeableBeacon",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "items",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "deploy",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "items",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "determineAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "upgradeBeacon",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "events": {
              "ERC721SaleDeployed(address)": {
                "params": {
                  "proxyAddr": "The address of the deployed proxy."
                }
              }
            },
            "kind": "dev",
            "methods": {
              "constructor": {
                "params": {
                  "factoryOwner": "The owner of the ERC-721 Sale Factory"
                }
              },
              "deploy(uint256,address,address,address,address,bytes32)": {
                "params": {
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "items": "The ERC-721 Items contract address",
                  "nonce": "Nonce for randomizing the deployment address.",
                  "proxyOwner": "The owner of the ERC-721 Sale proxy",
                  "tokenOwner": "The owner of the ERC-721 Sale implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-721 Sale Proxy"
                }
              },
              "determineAddress(uint256,address,address,address,address,bytes32)": {
                "params": {
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "items": "The ERC-721 Items contract address",
                  "nonce": "Nonce for randomizing the deployment address.",
                  "proxyOwner": "The owner of the ERC-721 Sale proxy",
                  "tokenOwner": "The owner of the ERC-721 Sale implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-721 Sale Proxy"
                }
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              },
              "upgradeBeacon(address)": {
                "params": {
                  "implementation": "The new beacon implementation."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "abi_decode_address_fromMemory": {
                  "entryPoint": 204,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_fromMemory": {
                  "entryPoint": 219,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 486,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_tuple": {
                  "entryPoint": 283,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 499,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 134,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 52,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 171,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 730,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 160,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constructor_ERC721SaleFactory": {
                  "entryPoint": 361,
                  "id": 7143,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "constructor_Ownable": {
                  "entryPoint": 468,
                  "id": 562,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "constructor_SequenceProxyFactory": {
                  "entryPoint": 458,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "convert_address_to_address": {
                  "entryPoint": 774,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_ERC721Sale_to_address": {
                  "entryPoint": 349,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_UpgradeableBeacon_to_contract_UpgradeableBeacon": {
                  "entryPoint": 566,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 337,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_UpgradeableBeacon": {
                  "entryPoint": 554,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 309,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_arguments_for_constructor_object_ERC721SaleFactory": {
                  "entryPoint": 250,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 741,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 95,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_initialize": {
                  "entryPoint": 613,
                  "id": 5997,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_msgSender": {
                  "entryPoint": 711,
                  "id": 1955,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_transferOwnership": {
                  "entryPoint": 821,
                  "id": 650,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "identity": {
                  "entryPoint": 306,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 73,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 786,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_contract_UpgradeableBeacon": {
                  "entryPoint": 578,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 761,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 58,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 155,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 289,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 63,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 521,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 724,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "update_byte_slice_shift": {
                  "entryPoint": 527,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 789,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_contract_UpgradeableBeacon_to_contract_UpgradeableBeacon": {
                  "entryPoint": 581,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 183,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 706,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "60806040523461002f576100196100146100fa565b610169565b610021610034565b6125d461039782396125d490f35b61003a565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100699061003f565b810190811060018060401b0382111761008157604052565b610049565b90610099610092610034565b928361005f565b565b600080fd5b60018060a01b031690565b6100b4906100a0565b90565b6100c0816100ab565b036100c757565b600080fd5b905051906100d9826100b7565b565b906020828203126100f5576100f2916000016100cc565b90565b61009b565b610118616f378038038061010d81610086565b9283398101906100db565b90565b60000190565b610129610034565b3d6000823e3d90fd5b90565b61014961014461014e926100a0565b610132565b6100a0565b90565b61015a90610135565b90565b61016690610151565b90565b6101716101ca565b610179610034565b613b2a810181811060018060401b038211176101c5576101a18291613b2a61296b843961011b565b03906000f09081156101c0576101b96101be9261015d565b610265565b565b610121565b610049565b6101d26101d4565b565b6101e46101df6102c7565b610335565b565b6101ef906100ab565b9052565b9190610207906000602085019401906101e6565b565b60001b90565b9061022060018060a01b0391610209565b9181191691161790565b61023390610135565b90565b61023f9061022a565b90565b90565b9061025a61025561026192610236565b610242565b825461020f565b9055565b61026d610034565b90610aa2820182811060018060401b038211176102bd57829161029791610aa261649585396101f3565b03906000f09081156102b8576102b16102b6926001610245565b610335565b565b610121565b610049565b600090565b6102cf6102c2565b503390565b60001c90565b60018060a01b031690565b6102f16102f6916102d4565b6102da565b90565b61030390546102e5565b90565b61030f90610151565b90565b90565b9061032a61032561033192610306565b610312565b825461020f565b9055565b61033f60006102f9565b61034a826000610315565b9061037e6103787f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610306565b91610306565b91610387610034565b806103918161011b565b0390a356fe60806040526004361015610013575b610403565b61001e60003561008d565b80631a4b671d146100885780631bce45831461008357806359659e901461007e57806369b3934d14610079578063715018a6146100745780638da5cb5b1461006f5763f2fde38b0361000e576103d0565b61039b565b610368565b61032c565b6102f7565b610215565b6101b4565b60e01c90565b60405190565b600080fd5b600080fd5b90565b6100af816100a3565b036100b657565b600080fd5b905035906100c8826100a6565b565b60018060a01b031690565b6100de906100ca565b90565b6100ea816100d5565b036100f157565b600080fd5b90503590610103826100e1565b565b90565b61011181610105565b0361011857565b600080fd5b9050359061012a82610108565b565b909160c08284031261018c5761014583600084016100bb565b9261015381602085016100f6565b9261016182604083016100f6565b9261018961017284606085016100f6565b9361018081608086016100f6565b9360a00161011d565b90565b61009e565b61019a906100d5565b9052565b91906101b290600060208501940190610191565b565b346101eb576101e76101d66101ca36600461012c565b9493909392919261052f565b6101de610093565b9182918261019e565b0390f35b610099565b9060208282031261020a57610207916000016100f6565b90565b61009e565b60000190565b346102435761022d6102283660046101f0565b61068c565b610235610093565b8061023f8161020f565b0390f35b610099565b600091031261025357565b61009e565b1c90565b60018060a01b031690565b61027790600861027c9302610258565b61025c565b90565b9061028a9154610267565b90565b61029a600160009061027f565b90565b90565b6102b46102af6102b9926100ca565b61029d565b6100ca565b90565b6102c5906102a0565b90565b6102d1906102bc565b90565b6102dd906102c8565b9052565b91906102f5906000602085019401906102d4565b565b3461032757610307366004610248565b61032361031261028d565b61031a610093565b918291826102e1565b0390f35b610099565b346103635761035f61034e61034236600461012c565b949390939291926106fa565b610356610093565b9182918261019e565b0390f35b610099565b3461039657610378366004610248565b61038061087f565b610388610093565b806103928161020f565b0390f35b610099565b346103cb576103ab366004610248565b6103c76103b66108b5565b6103be610093565b9182918261019e565b0390f35b610099565b346103fe576103e86103e33660046101f0565b6109c2565b6103f0610093565b806103fa8161020f565b0390f35b610099565b600080fd5b600090565b610416906100a3565b9052565b61042390610105565b9052565b909594926104739461046261046c9261045860809661044e60a088019c600089019061040d565b6020870190610191565b6040850190610191565b6060830190610191565b019061041a565b565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061049f90610475565b810190811067ffffffffffffffff8211176104b957604052565b61047f565b60200190565b5190565b906104db6104d4610093565b9283610495565b565b67ffffffffffffffff81116104fb576104f7602091610475565b0190565b61047f565b9061051261050d836104dd565b6104c8565b918252565b6105216000610500565b90565b61052c610517565b90565b61056e9291946105909661055f92610545610408565b509395919091610553610093565b96879560208701610427565b60208201810382520382610495565b61058061057a826104c4565b916104be565b209061058a610524565b91610aa1565b90565b6105a49061059f610bba565b6105f9565b565b60001c90565b6105b86105bd916105a6565b61025c565b90565b6105ca90546105ac565b90565b600080fd5b60e01b90565b60009103126105e357565b61009e565b6105f0610093565b3d6000823e3d90fd5b61060b61060660016105c0565b6102c8565b90633659cfe690823b1561068757610643926106386000809461062c610093565b968795869485936105d2565b83526004830161019e565b03925af1801561068257610655575b50565b6106759060003d811161067b575b61066d8183610495565b8101906105d8565b38610652565b503d610663565b6105e8565b6105cd565b61069590610593565b565b6106a0906102a0565b90565b6106ac90610697565b90565b6106b8906102bc565b90565b6106f16106f8946106e76060949897956106dd608086019a6000870190610191565b6020850190610191565b6040830190610191565b019061041a565b565b9061075c9193929361070a610408565b5061073a859161072b86898b9161071f610093565b96879560208701610427565b60208201810382520382610495565b61074c610746826104c4565b916104be565b2090610756610524565b91610cad565b9361076e610769866106a3565b6106af565b906363acc14d93929490823b15610829576000946107aa869261079f94610793610093565b998a98899788966105d2565b8652600486016106bb565b03925af18015610824576107f7575b50806107f17fe3fc4d8c7984f762222579e0c4564a72a74f96cde3f6bae2751d01108c6ec240916107e8610093565b9182918261019e565b0390a190565b6108179060003d811161081d575b61080f8183610495565b8101906105d8565b386107b9565b503d610805565b6105e8565b6105cd565b610836610bba565b61083e61086b565b565b90565b61085761085261085c92610840565b61029d565b6100ca565b90565b61086890610843565b90565b61087d610878600061085f565b610e3c565b565b61088761082e565b565b60018060a01b031690565b6108a06108a5916105a6565b610889565b90565b6108b29054610894565b90565b6108bd610408565b506108c860006108a8565b90565b6108dc906108d7610bba565b610991565b565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201520152565b61094260266040926108de565b61094b816108e7565b0190565b6109659060208101906000818303910152610935565b90565b1561096f57565b610977610093565b62461bcd60e51b81528061098d6004820161094f565b0390fd5b6109c0906109bb816109b46109ae6109a9600061085f565b6100d5565b916100d5565b1415610968565b610e3c565b565b6109cb906108cb565b565b90565b6109dc6109e191610105565b6109cd565b9052565b60601b90565b6109f4906109e5565b90565b610a00906109eb565b90565b610a0f610a14916100d5565b6109f7565b9052565b905090565b60005b838110610a31575050906000910152565b806020918301518185015201610a20565b610a67610a5e92602092610a55816104c4565b94858093610a18565b93849101610a1d565b0190565b60148093610a8f602084610a87610a9796610a9e9b9a986109d0565b018092610a03565b018092610a03565b0190610a42565b90565b610b349291610ade610aed92610ab5610408565b509193610aca610ac560016105c0565b6102c8565b610ad2610093565b95869460208601610a6b565b60208201810382520382610495565b610aff610af9826104c4565b916104be565b2061148a610b0f602082016104c8565b908082526111156020830139610b2d610b27826104c4565b916104be565b2090610ea9565b90565b60007f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910152565b610b6b602080926108de565b610b7481610b37565b0190565b610b8e9060208101906000818303910152610b5f565b90565b15610b9857565b610ba0610093565b62461bcd60e51b815280610bb660048201610b78565b0390fd5b610be4610bc56108b5565b610bde610bd8610bd3610eca565b6100d5565b916100d5565b14610b91565b565b610bfa610bf5610bff92610840565b61029d565b6100a3565b90565b610c0b906102a0565b90565b610c1790610c02565b90565b610c23906102a0565b90565b610c2f90610c1a565b90565b610c3b906102bc565b90565b60209181520190565b610c66610c6f602093610c7493610c5d816104c4565b93848093610c3e565b95869101610a1d565b610475565b0190565b610c9d610caa949293610c9360608401956000850190610191565b6020830190610191565b6040818403910152610c47565b90565b610d3d9093929193610cbd610408565b50610cfd8591610cee610cd8610cd360016105c0565b6102c8565b8690610ce2610093565b95869460208601610a6b565b60208201810382520382610495565b610d0f610d09826104c4565b916104be565b2061148a610d1f602082016104c8565b908082526111156020830139610d386000929192610be6565b611062565b92610d57610d52610d4d86610c0e565b610c26565b610c32565b63cf7a1d779190610d70610d6b60016105c0565b6102c8565b9392813b15610de7576000610d9891610da38296610d8c610093565b988997889687956105d2565b855260048501610c78565b03925af18015610de257610db5575b50565b610dd59060003d8111610ddb575b610dcd8183610495565b8101906105d8565b38610db2565b503d610dc3565b6105e8565b6105cd565b60001b90565b90610e0360018060a01b0391610dec565b9181191691161790565b610e16906102bc565b90565b90565b90610e31610e2c610e3892610e0d565b610e19565b8254610df2565b9055565b610e4660006108a8565b610e51826000610e1c565b90610e85610e7f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610e0d565b91610e0d565b91610e8e610093565b80610e988161020f565b0390a3565b610ea6906102bc565b90565b90610ec791610eb6610408565b5090610ec130610e9d565b916110eb565b90565b610ed2610408565b503390565b60007f437265617465323a20696e73756666696369656e742062616c616e6365000000910152565b610f0c601d6020926108de565b610f1581610ed7565b0190565b610f2f9060208101906000818303910152610eff565b90565b15610f3957565b610f41610093565b62461bcd60e51b815280610f5760048201610f19565b0390fd5b60007f437265617465323a2062797465636f6465206c656e677468206973207a65726f910152565b610f8f602080926108de565b610f9881610f5b565b0190565b610fb29060208101906000818303910152610f83565b90565b15610fbc57565b610fc4610093565b62461bcd60e51b815280610fda60048201610f9c565b0390fd5b60007f437265617465323a204661696c6564206f6e206465706c6f7900000000000000910152565b61101360196020926108de565b61101c81610fde565b0190565b6110369060208101906000818303910152611006565b90565b1561104057565b611048610093565b62461bcd60e51b81528061105e60048201611020565b0390fd5b91909161106d610408565b5061109461107a30610e9d565b3161108d611087846100a3565b916100a3565b1015610f32565b6110ba6110a0836104c4565b6110b36110ad6000610be6565b916100a3565b1415610fb5565b60208251920190f5906110e9826110e26110dc6110d7600061085f565b6100d5565b916100d5565b1415611039565b565b90605592600b926110fa610408565b50604051926040840152602083015281520160ff8153209056fe608060405234601c57600e6020565b61145e61002c823961145e90f35b6026565b60405190565b600080fdfe6080604052361561006b5761006b565b90565b60018060a01b031690565b90565b61003461002f6100399261000f565b61001d565b610012565b90565b61004590610020565b90565b61005190610012565b90565b606090565b63ffffffff60e01b1690565b60000190565b61007361017e565b61008e610088610083600061003c565b610048565b91610048565b0361046c5761009b610054565b5063ffffffff60e01b600035166100c16100bb63cf7a1d7760e01b610059565b91610059565b146100e357600063f92ee8a960e01b8152806100df60048201610065565b0390fd5b6100eb610401565b602081519101f35b600090565b90565b90565b60001b90565b61011861011361011d926100f8565b6100fe565b6100fb565b90565b6101497fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103610104565b90565b60001c90565b60018060a01b031690565b61016961016e9161014c565b610152565b90565b61017b905461015d565b90565b6101866100f3565b506101a2600061019c610197610120565b6105a2565b01610171565b90565b90565b90565b6101bf6101ba6101c4926101a5565b61001d565b6101a8565b90565b60405190565b600080fd5b600080fd5b909392938483116101f75784116101f2576001820201920390565b6101d2565b6101cd565b91565b600080fd5b600080fd5b61021290610012565b90565b61021e81610209565b0361022557565b600080fd5b9050359061023782610215565b565b600080fd5b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061026d90610243565b810190811067ffffffffffffffff82111761028757604052565b61024d565b9061029f6102986101c7565b9283610263565b565b67ffffffffffffffff81116102bf576102bb602091610243565b0190565b61024d565b90826000939282370152565b909291926102e56102e0826102a1565b61028c565b93818552602085019082840111610301576102ff926102c4565b565b61023e565b9080601f8301121561032457816020610321933591016102d0565b90565b610239565b9160608383031261037657610341826000850161022a565b9261034f836020830161022a565b92604082013567ffffffffffffffff81116103715761036e9201610306565b90565b610204565b6101ff565b61038f61038a61039492610012565b61001d565b610012565b90565b6103a09061037b565b90565b6103ac90610397565b90565b67ffffffffffffffff81116103cd576103c9602091610243565b0190565b61024d565b906103e46103df836103af565b61028c565b918252565b6103f360006103d2565b90565b6103fe6103e9565b90565b610409610054565b506104126105cd565b61046161045761045161044761043f61043960003661043160046101ab565b9080926101d7565b906101fc565b810190610329565b93919290926103a3565b916103a3565b91909190916105ec565b6104696103f6565b90565b3361048661048061047b61017e565b610048565b91610048565b1460001461059d57610496610054565b5063ffffffff60e01b60003516806104bd6104b7631b2ce7f360e11b610059565b91610059565b146000146104d757506104ce610817565b5b602081519101f35b806104f16104eb63278f794360e11b610059565b91610059565b1460001461050857506105026107c1565b5b6104cf565b8061052261051c6308f2839760e41b610059565b91610059565b146000146105395750610533610723565b5b610503565b8061055361054d6303e1469160e61b610059565b91610059565b1460001461056a57506105646106bf565b5b610534565b61058361057d635c60da1b60e01b610059565b91610059565b146000146105985761059361067a565b610565565b61064a565b61064a565b90565b6105b96105b46105be9261000f565b61001d565b6101a8565b90565b156105c857565b600080fd5b6105ea346105e46105de60006105a5565b916101a8565b146105c1565b565b91906105f661087a565b61061161060b610606600061003c565b610048565b91610048565b0361062d5761062261062b936108b2565b9060009161098d565b565b600063f92ee8a960e01b81528061064660048201610065565b0390fd5b610652610aa6565b610ae7565b61066090610048565b9052565b919061067890600060208501940190610657565b565b610682610054565b5061068b6105cd565b6106ad6106bc610699610aa6565b6106a16101c7565b92839160208301610664565b60208201810382520382610263565b90565b6106c7610054565b506106d06105cd565b6106f26107016106de61017e565b6106e66101c7565b92839160208301610664565b60208201810382520382610263565b90565b9060208282031261071e5761071b9160000161022a565b90565b6101ff565b61072b610054565b506107346105cd565b61077061076b61076661075e61075860003661075060046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108b2565b6107786103f6565b90565b9190916040818403126107bc57610795836000830161022a565b92602082013567ffffffffffffffff81116107b7576107b49201610306565b90565b610204565b6101ff565b6107c9610054565b5061080c6108036107fc6107f46107ee6000366107e660046101ab565b9080926101d7565b906101fc565b81019061077b565b91906103a3565b90600191610b0a565b6108146103f6565b90565b61081f610054565b506108286105cd565b61086f61085f61085a61085261084c60003661084460046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108676103f6565b600091610b0a565b6108776103f6565b90565b6108826100f3565b5061088b61017e565b90565b9160206108b09294936108a960408201966000830190610657565b0190610657565b565b6108fd906108be61017e565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f916108f56108ec6101c7565b9283928361088e565b0390a1610c4d565b565b61090890610397565b90565b5190565b6109189061037b565b90565b6109249061090f565b90565b61093090610397565b90565b60e01b90565b61094281610048565b0361094957565b600080fd5b9050519061095b82610939565b565b90602082820312610977576109749160000161094e565b90565b6101ff565b6109846101c7565b3d6000823e3d90fd5b9161099783610e30565b826109c27f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e916108ff565b906109cb6101c7565b806109d581610065565b0390a26109e18261090b565b6109f46109ee60006105a5565b916101a8565b11908115610a9e575b50610a07575b5050565b6020610a1d610a18610a339461091b565b610927565b635c60da1b90610a2b6101c7565b948592610933565b82528180610a4360048201610065565b03915afa908115610a9957610a6192600092610a69575b5090610f65565b503880610a03565b610a8b91925060203d8111610a92575b610a838183610263565b81019061095d565b9038610a5a565b503d610a79565b61097c565b9050386109fd565b610aae6100f3565b50610ab7610f85565b80610ad3610acd610ac8600061003c565b610048565b91610048565b03610ae45750610ae1610f99565b90565b90565b60008091368280378136915af43d6000803e600014610b05573d6000f35b3d6000fd5b91610b148361102f565b610b1d8261090b565b610b30610b2a60006105a5565b916101a8565b11908115610b54575b50610b43575b5050565b610b4c91610f65565b503880610b3f565b905038610b39565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b610bc06026604092610b5c565b610bc981610b65565b0190565b610be39060208101906000818303910152610bb3565b90565b15610bed57565b610bf56101c7565b62461bcd60e51b815280610c0b60048201610bcd565b0390fd5b90610c2060018060a01b03916100fe565b9181191691161790565b90565b90610c42610c3d610c49926108ff565b610c2a565b8254610c0f565b9055565b610c8f90610c7781610c70610c6a610c65600061003c565b610048565b91610048565b1415610be6565b6000610c89610c84610120565b6105a2565b01610c2d565b565b60207f7472616374000000000000000000000000000000000000000000000000000000917f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e60008201520152565b610cec6025604092610b5c565b610cf581610c91565b0190565b610d0f9060208101906000818303910152610cdf565b90565b15610d1957565b610d216101c7565b62461bcd60e51b815280610d3760048201610cf9565b0390fd5b60207f73206e6f74206120636f6e747261637400000000000000000000000000000000917f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960008201520152565b610d966030604092610b5c565b610d9f81610d3b565b0190565b610db99060208101906000818303910152610d89565b90565b15610dc357565b610dcb6101c7565b62461bcd60e51b815280610de160048201610da3565b0390fd5b90565b610dfc610df7610e0192610de5565b6100fe565b6100fb565b90565b610e2d7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50610de8565b90565b610e6e90610e45610e408261107f565b610d12565b6020610e58610e538361091b565b610927565b635c60da1b90610e666101c7565b948592610933565b82528180610e7e60048201610065565b03915afa8015610eee57610ea1610ea691610ebe94600091610ec0575b5061107f565b610dbc565b6000610eb8610eb3610e04565b6105a2565b01610c2d565b565b610ee1915060203d8111610ee7575b610ed98183610263565b81019061095d565b38610e9b565b503d610ecf565b61097c565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610f4b60276103d2565b90610f5860208301610ef3565b565b610f62610f41565b90565b90610f8291610f72610054565b5090610f7c610f5a565b916110e2565b90565b610f8d6100f3565b50610f96611160565b90565b610fa16100f3565b50610fd56020610fbf610fba610fb5611187565b61091b565b610927565b635c60da1b90610fcd6101c7565b938492610933565b82528180610fe560048201610065565b03915afa90811561102a57600091610ffc575b5090565b61101d915060203d8111611023575b6110158183610263565b81019061095d565b38610ff8565b503d61100b565b61097c565b61103881611258565b6110627fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b916108ff565b9061106b6101c7565b8061107581610065565b0390a2565b600090565b61108761107a565b503b61109c61109660006105a5565b916101a8565b1190565b906110b26110ad836102a1565b61028c565b918252565b3d6000146110d4576110c83d6110a0565b903d6000602084013e5b565b6110dc610054565b906110d2565b9091600080611112946110f3610054565b508490602081019051915af4916111086110b7565b909290919261130b565b90565b90565b61112c61112761113192611115565b6100fe565b6100fb565b90565b61115d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611118565b90565b6111686100f3565b50611184600061117e611179611134565b6105a2565b01610171565b90565b61118f6100f3565b506111ab60006111a56111a0610e04565b6105a2565b01610171565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b611209602d604092610b5c565b611212816111ae565b0190565b61122c90602081019060008183039101526111fc565b90565b1561123657565b61123e6101c7565b62461bcd60e51b81528061125460048201611216565b0390fd5b6112859061126d6112688261107f565b61122f565b600061127f61127a611134565b6105a2565b01610c2d565b565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b6112bc601d602092610b5c565b6112c581611287565b0190565b6112df90602081019060008183039101526112af565b90565b156112e957565b6112f16101c7565b62461bcd60e51b815280611307600482016112c9565b0390fd5b919290611316610054565b5060001461135c57506113288261090b565b61133b61133560006105a5565b916101a8565b14611345575b5090565b6113516113569161107f565b6112e2565b38611341565b826113d5565b5190565b60005b83811061137a575050906000910152565b806020918301518185015201611369565b6113aa6113b36020936113b8936113a181611362565b93848093610b5c565b95869101611366565b610243565b0190565b6113d2916020820191600081840391015261138b565b90565b906113df8261090b565b6113f26113ec60006105a5565b916101a8565b116000146114035750805190602001fd5b6114249061140f6101c7565b91829162461bcd60e51b8352600483016113bc565b0390fdfea2646970667358221220fb1899e61f38faa78bfbab79b8dc2fa613357c2fce2699411f9fee80b624365564736f6c634300081b0033a26469706673582212206bc6c1471f4cc9c60143b475e599cedd261b753a87093c41a9601e41752618c964736f6c634300081b0033608060405234601c57600e6020565b613afe61002c8239613afe90f35b6026565b60405190565b600080fdfe60806040526004361015610013575b610ba7565b61001e60003561015d565b806301ffc9a7146101585780630668d0bb146101535780630bb310de1461014e578063248a9ca3146101495780632f2ff15d146101445780633474a4a61461013f57806336568abe1461013a57806344004cc1146101355780634782f7791461013057806363acc14d1461012b5780638c17030f146101265780639010d07c1461012157806391d148541461011c5780639d043a6614610117578063a217fddf14610112578063a971e8421461010d578063bad4366114610108578063ca15c87314610103578063d547741f146100fe5763ed4c2ac70361000e57610b74565b610b40565b610b0b565b610aaf565b610a17565b6109e2565b61096f565b6108a4565b61086e565b6107e3565b610723565b6106a8565b610646565b6105d7565b6105a2565b610499565b610436565b61039a565b61034b565b6101ef565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b63ffffffff60e01b1690565b61018d81610178565b0361019457565b600080fd5b905035906101a682610184565b565b906020828203126101c2576101bf91600001610199565b90565b61016e565b151590565b6101d5906101c7565b9052565b91906101ed906000602085019401906101cc565b565b3461021f5761021b61020a6102053660046101a8565b610bb1565b610212610163565b918291826101d9565b0390f35b610169565b60018060a01b031690565b61023890610224565b90565b6102448161022f565b0361024b57565b600080fd5b9050359061025d8261023b565b565b90565b61026b8161025f565b0361027257565b600080fd5b9050359061028482610262565b565b600080fd5b600080fd5b600080fd5b909182601f830112156102cf5781359167ffffffffffffffff83116102ca5760200192602083028401116102c557565b610290565b61028b565b610286565b91909160a081840312610340576102ee8360008301610250565b926102fc8160208401610277565b9261030a8260408501610250565b926103188360608301610277565b92608082013567ffffffffffffffff811161033b576103379201610295565b9091565b610173565b61016e565b60000190565b6103656103593660046102d4565b94939093929192610d21565b61036d610163565b8061037781610345565b0390f35b906020828203126103955761039291600001610250565b90565b61016e565b346103c8576103b26103ad36600461037b565b610f69565b6103ba610163565b806103c481610345565b0390f35b610169565b90565b6103d9816103cd565b036103e057565b600080fd5b905035906103f2826103d0565b565b9060208282031261040e5761040b916000016103e5565b90565b61016e565b61041c906103cd565b9052565b919061043490600060208501940190610413565b565b346104665761046261045161044c3660046103f4565b610fc7565b610459610163565b91829182610420565b0390f35b610169565b9190604083820312610494578061048861049192600086016103e5565b93602001610250565b90565b61016e565b346104c8576104b26104ac36600461046b565b90611012565b6104ba610163565b806104c481610345565b0390f35b610169565b60009103126104d857565b61016e565b6104e69061025f565b9052565b6104f39061022f565b9052565b67ffffffffffffffff1690565b61050d906104f7565b9052565b61051a906103cd565b9052565b9060a08061058a93610538600082015160008601906104dd565b61054a602082015160208601906104dd565b61055c604082015160408601906104ea565b61056e60608201516060860190610504565b61058060808201516080860190610504565b0151910190610511565b565b91906105a090600060c0850194019061051e565b565b346105d2576105b23660046104cd565b6105ce6105bd61122e565b6105c5610163565b9182918261058c565b0390f35b610169565b34610606576105f06105ea36600461046b565b906112f7565b6105f8610163565b8061060281610345565b0390f35b610169565b90916060828403126106415761063e6106278460008501610250565b936106358160208601610250565b93604001610277565b90565b61016e565b346106755761065f61065936600461060b565b91611396565b610667610163565b8061067181610345565b0390f35b610169565b91906040838203126106a357806106976106a09260008601610250565b93602001610277565b90565b61016e565b346106d7576106c16106bb36600461067a565b9061149c565b6106c9610163565b806106d381610345565b0390f35b610169565b60808183031261071e576106f38260008301610250565b9261071b6107048460208501610250565b936107128160408601610250565b936060016103e5565b90565b61016e565b346107555761073f6107363660046106dc565b9291909161158a565b610747610163565b8061075181610345565b0390f35b610169565b610763816104f7565b0361076a57565b600080fd5b9050359061077c8261075a565b565b909160c0828403126107de576107978360008401610277565b926107a58160208501610277565b926107b38260408301610250565b926107db6107c4846060850161076f565b936107d2816080860161076f565b9360a0016103e5565b90565b61016e565b34610818576108026107f636600461077e565b94939093929192611a34565b61080a610163565b8061081481610345565b0390f35b610169565b9190604083820312610846578061083a61084392600086016103e5565b93602001610277565b90565b61016e565b6108549061022f565b9052565b919061086c9060006020850194019061084b565b565b3461089f5761089b61088a61088436600461081d565b90611a64565b610892610163565b91829182610858565b0390f35b610169565b346108d5576108d16108c06108ba36600461046b565b90611aa4565b6108c8610163565b918291826101d9565b0390f35b610169565b600080fd5b908160c09103126108ed5790565b6108da565b908160e09103126109005790565b6108da565b9160608383031261096a5761091d8260008501610250565b92602081013567ffffffffffffffff8111610965578361093e9183016108df565b92604082013567ffffffffffffffff81116109605761095d92016108f2565b90565b610173565b610173565b61016e565b346109a05761099c61098b610985366004610905565b91611dc7565b610993610163565b91829182610420565b0390f35b610169565b90565b60001b90565b6109c26109bd6109c7926109a5565b6109a8565b6103cd565b90565b6109d460006109ae565b90565b6109df6109ca565b90565b34610a12576109f23660046104cd565b610a0e6109fd6109d7565b610a05610163565b91829182610420565b0390f35b610169565b34610a4757610a273660046104cd565b610a43610a32611e68565b610a3a610163565b91829182610858565b0390f35b610169565b91608083830312610aaa57610a6482600085016103e5565b9260208101359167ffffffffffffffff8311610aa557610a8984610aa2948401610295565b939094610a998160408601610250565b936060016103e5565b90565b610173565b61016e565b34610ae357610adf610ace610ac5366004610a4c565b93929092611fa4565b610ad6610163565b918291826101d9565b0390f35b610169565b610af19061025f565b9052565b9190610b0990600060208501940190610ae8565b565b34610b3b57610b37610b26610b213660046103f4565b61204c565b610b2e610163565b91829182610af5565b0390f35b610169565b34610b6f57610b59610b5336600461046b565b9061209c565b610b61610163565b80610b6b81610345565b0390f35b610169565b34610ba257610b8c610b873660046103f4565b6120d0565b610b94610163565b80610b9e81610345565b0390f35b610169565b600080fd5b600090565b610bb9610bac565b5080610bd4610bce635f05bb8960e11b610178565b91610178565b148015610bf8575b908115610be8575b5090565b610bf29150612115565b38610be4565b50610c02816120db565b610bdc565b60081c90565b60018060a01b031690565b610c24610c2991610c07565b610c0d565b90565b610c369054610c18565b90565b90565b610c50610c4b610c5592610224565b610c39565b610224565b90565b610c6190610c3c565b90565b610c6d90610c58565b90565b610c7990610c3c565b90565b610c8590610c70565b90565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b90610cb790610c8d565b810190811067ffffffffffffffff821117610cd157604052565b610c97565b60e01b90565b6000910312610ce757565b61016e565b916020610d0e929493610d076040820196600083019061084b565b0190610ae8565b565b610d18610163565b3d6000823e3d90fd5b93610d34939591958693909192936122b6565b610d4e610d49610d446005610c2c565b610c64565b610c7c565b632e73e0fd828492803b15610eae57610d7b60008094610d86610d6f610163565b97889687958694610cd6565b845260048401610cec565b03925af19081610e81575b5015600014610e7c576001610dde575b5b907ff32d98590495ee51bacb93809409a188e7ab8268b70b4c969d9da3a883c539f791610dd9610dd0610163565b92839283610cec565b0390a1565b610df8610df3610dee6005610c2c565b610c64565b610c7c565b6340c10f19828492803b15610e7757610e2560008094610e30610e19610163565b97889687958694610cd6565b845260048401610cec565b03925af18015610e7257610e45575b50610da1565b610e659060003d8111610e6b575b610e5d8183610cad565b810190610cdc565b38610e3f565b503d610e53565b610d10565b610c88565b610da2565b610ea19060003d8111610ea7575b610e998183610cad565b810190610cdc565b38610d91565b503d610e8f565b610c88565b7f70649ec320b507febad3e8ef750e5f580b9ae32f9f50d4c7b121332c8197153090565b610ef090610eeb610ee6610eb3565b61251a565b610f54565b565b610efb90610c3c565b90565b610f0790610ef2565b90565b90610f1b60018060a01b03916109a8565b9181191691161790565b610f2e90610ef2565b90565b90565b90610f49610f44610f5092610f25565b610f31565b8254610f0a565b9055565b610f60610f6791610efe565b6003610f34565b565b610f7290610ed7565b565b600090565b610f82906103cd565b90565b90610f8f90610f79565b600052602052604060002090565b60001c90565b90565b610fb2610fb791610f9d565b610fa3565b90565b610fc49054610fa6565b90565b6001610fe0610fe692610fd8610f74565b506000610f85565b01610fba565b90565b9061100491610fff610ffa82610fc7565b61251a565b611006565b565b906110109161252e565b565b9061101c91610fe9565b565b9061103161102a610163565b9283610cad565b565b61103d60c061101e565b90565b600090565b600090565b600090565b600090565b61105c611033565b90602080808080808761106d611040565b815201611078611040565b815201611083611045565b81520161108e61104a565b81520161109961104a565b8152016110a461104f565b81525050565b6110b2611054565b90565b90565b6110c46110c991610f9d565b6110b5565b90565b6110d690546110b8565b90565b906110e39061025f565b9052565b6110f36110f891610f9d565b610c0d565b90565b61110590546110e7565b90565b906111129061022f565b9052565b60a01c90565b67ffffffffffffffff1690565b61113561113a91611116565b61111c565b90565b6111479054611129565b90565b90611154906104f7565b9052565b61116461116991610f9d565b61111c565b90565b6111769054611158565b90565b90611183906103cd565b9052565b906112206112176004611198611033565b946111b16111a8600083016110cc565b600088016110d9565b6111c96111c0600183016110cc565b602088016110d9565b6111e16111d8600283016110fb565b60408801611108565b6111f96111f06002830161113d565b6060880161114a565b6112116112086003830161116c565b6080880161114a565b01610fba565b60a08401611179565b565b61122b90611187565b90565b6112366110aa565b506112416006611222565b90565b60209181520190565b60207f20726f6c657320666f722073656c660000000000000000000000000000000000917f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201520152565b6112a8602f604092611244565b6112b18161124d565b0190565b6112cb906020810190600081830391015261129b565b90565b156112d557565b6112dd610163565b62461bcd60e51b8152806112f3600482016112b5565b0390fd5b906113249161131f8261131961131361130e612558565b61022f565b9161022f565b146112ce565b612565565b565b7f5d8e12c39142ff96d79d04d15d1ba1269e4fe57bb9d26f43523628b34ba108ec90565b90611365929161136061135b611326565b61251a565b61137f565b565b61137090610c3c565b90565b61137c90611367565b90565b9161138c61139493611373565b9190916125c0565b565b906113a1929161134a565b565b906113bd916113b86113b3611326565b61251a565b61144a565b565b905090565b6113d0600080926113bf565b0190565b6113dd906113c4565b90565b67ffffffffffffffff81116113fe576113fa602091610c8d565b0190565b610c97565b90611415611410836113e0565b61101e565b918252565b606090565b3d60001461143c576114303d611403565b903d6000602084013e5b565b61144461141a565b9061143a565b60006114799281929061145b610163565b9081611466816113d4565b03925af161147261141f565b50156101c7565b61147f57565b6000631d42c86760e21b81528061149860048201610345565b0390fd5b906114a6916113a3565b565b60ff1690565b6114ba6114bf91610f9d565b6114a8565b90565b6114cc90546114ae565b90565b60081b90565b906114e8610100600160a81b03916114cf565b9181191691161790565b6114fb90610c70565b90565b90565b9061151661151161151d926114f2565b6114fe565b82546114d5565b9055565b7f4c02318d8c3aadc98ccf18aebbf3126f651e0c3f6a1de5ff8edcf6724a2ad5c290565b9061155160ff916109a8565b9181191691161790565b611564906101c7565b90565b90565b9061157f61157a6115869261155b565b611567565b8254611545565b9055565b92909261159760056114c2565b6115f5576115a96115e7946005611501565b6115bb6115b46109ca565b829061252e565b6115cd6115c6611521565b829061252e565b6115df6115d8611326565b829061252e565b91909161260b565b6115f36001600561156a565b565b600063f92ee8a960e01b81528061160e60048201610345565b0390fd5b90611630959493929161162b611626611521565b61251a565b6118fd565b565b61164661164161164b926104f7565b610c39565b61025f565b90565b61166261165d611667926109a5565b610c39565b61025f565b90565b61167460c061101e565b90565b611681905161025f565b90565b90611691600019916109a8565b9181191691161790565b6116af6116aa6116b49261025f565b610c39565b61025f565b90565b90565b906116cf6116ca6116d69261169b565b6116b7565b8254611684565b9055565b6116e4905161022f565b90565b906116fc6116f7611703926114f2565b6114fe565b8254610f0a565b9055565b61171190516104f7565b90565b60a01b90565b9061173067ffffffffffffffff60a01b91611714565b9181191691161790565b61174e611749611753926104f7565b610c39565b6104f7565b90565b90565b9061176e6117696117759261173a565b611756565b825461171a565b9055565b9061178c67ffffffffffffffff916109a8565b9181191691161790565b906117ab6117a66117b29261173a565b611756565b8254611779565b9055565b6117c090516103cd565b90565b6117cc90610f9d565b90565b906117e46117df6117eb92610f79565b6117c3565b8254611684565b9055565b9061188060a06004611886946118146000820161180e60008801611677565b906116ba565b61182d6001820161182760208801611677565b906116ba565b61184660028201611840604088016116da565b906116e7565b61185f6002820161185960608801611707565b90611759565b6118786003820161187260808801611707565b90611796565b0192016117b6565b906117cf565b565b90611892916117ef565b565b61189d906104f7565b9052565b91946118ea6118f4929897956118e060a0966118d66118fb9a6118cc60c08a019e60008b0190610ae8565b6020890190610ae8565b604087019061084b565b6060850190611894565b6080830190611894565b0190610413565b565b91939092948161191561190f886104f7565b916104f7565b108015611a19575b6119fc578261193561192f600061164e565b9161025f565b146119df57826119a16119da9461199a876119918a6119888d61197f8b936119768c9761196d61196361166a565b9b60008d016110d9565b60208b016110d9565b60408901611108565b6060870161114a565b6080850161114a565b60a08301611179565b6006611888565b9394959190917fabec13ca1773eed55d54d2f64593c33fa520ee45cac73a162f13928a2ebee233966119d1610163565b968796876118a1565b0390a1565b60006310ba94e960e31b8152806119f860048201610345565b0390fd5b60006310ba94e960e31b815280611a1560048201610345565b0390fd5b5081611a2d611a274261025f565b91611632565b111561191d565b90611a429594939291611612565b565b600090565b90611a5390610f79565b600052602052604060002090565b90565b90611a84611a7f611a8993611a77611a44565b506001611a49565b611a61565b61265b565b90565b90611a96906114f2565b600052602052604060002090565b611acb916000611ac0611ac693611ab9610bac565b5082610f85565b01611a8c565b6114c2565b90565b60018060a01b031690565b611ae5611aea91610f9d565b611ace565b90565b611af79054611ad9565b90565b611b0390610c70565b90565b90505190611b13826103d0565b565b90602082820312611b2f57611b2c91600001611b06565b90565b61016e565b50611b43906020810190610250565b90565b50611b55906020810190610199565b90565b611b6190610178565b9052565b50611b749060208101906103e5565b90565b600080fd5b600080fd5b600080fd5b9035600160200382360303811215611bc757016020813591019167ffffffffffffffff8211611bc2576001820236038313611bbd57565b611b7c565b611b77565b611b81565b60209181520190565b90826000939282370152565b9190611bfb81611bf481611c0095611bcc565b8095611bd5565b610c8d565b0190565b9035600160400382360303811215611c1a570190565b611b81565b9035600160200382360303811215611c6057016020813591019167ffffffffffffffff8211611c5b576001820236038313611c5657565b611b7c565b611b77565b611b81565b60209181520190565b9190611c8881611c8181611c8d95611c65565b8095611bd5565b610c8d565b0190565b50611ca090602081019061076f565b90565b90611ce1906020611cd9611ccf60408401611cc16000880188611c1f565b908683036000880152611c6e565b9482810190611c91565b910190610504565b90565b611d8e91611d80611d7560c08301611d0c611d026000870187611b34565b60008601906104ea565b611d26611d1c6020870187611b46565b6020860190611b58565b611d40611d366040870187611b65565b6040860190610511565b611d5a611d506060870187611b65565b6060860190610511565b611d676080860186611b86565b908583036080870152611be1565b9260a0810190611c04565b9060a0818403910152611ca3565b90565b939290611dbd604091611dc594611db0606089019260008a019061084b565b8782036020890152611ce4565b940190610413565b565b9150602090611dd4610f74565b50611de7611de26003611aed565b611afa565b611e13633808a90b949294611e1e611dff6004610fba565b611e07610163565b97889687958695610cd6565b855260048501611d91565b03915afa908115611e6357600091611e35575b5090565b611e56915060203d8111611e5c575b611e4e8183610cad565b810190611b15565b38611e31565b503d611e44565b610d10565b611e70611a44565b50611e7b6005610c2c565b90565b90611e88906114f2565b600052602052604060002090565b90611ea090610f79565b600052602052604060002090565b60601b90565b611ebd90611eae565b90565b611ec990611eb4565b90565b611ed8611edd9161022f565b611ec0565b9052565b90565b611ef0611ef5916103cd565b611ee1565b9052565b601481611f0c611f149360209695611ecc565b018092611ee4565b0190565b60200190565b5190565b67ffffffffffffffff8111611f3a5760208091020190565b610c97565b90929192611f54611f4f82611f22565b61101e565b9381855260208086019202830192818411611f9157915b838310611f785750505050565b60208091611f8684866103e5565b815201920191611f6b565b610290565b611fa1913691611f3f565b90565b9093929192611fb1610bac565b50611fd9611fd3611fce611fc760028790611e7e565b8590611e96565b6114c2565b156101c7565b9485611fe8575b505050505090565b61203d95509061201f6120389392959294612010612004610163565b93849260208401611ef9565b60208201810382520382610cad565b61203161202b82611f1e565b91611f18565b2093611f96565b612694565b3880808080611fe0565b600090565b61206b6120666120709261205e612047565b506001611a49565b611a61565b6126be565b90565b9061208e9161208961208482610fc7565b61251a565b612090565b565b9061209a91612565565b565b906120a691612073565b565b6120c1906120bc6120b7610eb3565b61251a565b6120c3565b565b6120ce9060046117cf565b565b6120d9906120a8565b565b6120e3610bac565b50806120f86120f26000610178565b91610178565b14908115612105575b5090565b61210f91506126de565b38612101565b61211d610bac565b50612127816126de565b908115612133575b5090565b61213d915061271e565b3861212f565b91602061216592949361215e60408201966000830190610ae8565b0190610ae8565b565b634e487b7160e01b600052601160045260246000fd5b61218c6121929193929361025f565b9261025f565b820391821161219d57565b612167565b600090565b6121b66121bc9193929361025f565b9261025f565b916121c883820261025f565b9281840414901517156121d757565b612167565b6121e59061164e565b9052565b60409061221361221a94969593966122096060840198600085019061084b565b6020830190610ae8565b01906121dc565b565b60409061224661224d949695939661223c6060840198600085019061084b565b6020830190610ae8565b0190610ae8565b565b61226361225e612268926109a5565b610c39565b610224565b90565b6122749061224f565b90565b61228090610c70565b90565b6040906122ad6122b494969593966122a36060840198600085019061084b565b60208301906121dc565b0190610ae8565b565b91939290926122f06122cb600260060161113d565b6122ea6122e46122de600360060161116c565b92611632565b91611632565b9061275e565b6124fd5761230160006006016110cc565b61231361230d8561025f565b9161025f565b106124d0578291612361916123426123739561233c600060060191612337836110cc565b61217d565b906116ba565b61234f6004600601610fba565b9190339161235b6121a2565b93612855565b61236e60016006016110cc565b6121a7565b918161239361238d61238860026006016110fb565b61022f565b9161022f565b036124a257806123ab6123a58561025f565b9161025f565b1061247f5750806123cd6123c76123c2600061226b565b61022f565b9161022f565b1460001461241257346123e86123e28461025f565b9161025f565b036123f25750505b565b61240e346000938493630f55e7df60e11b85526004850161221c565b0390fd5b9034612427612421600061164e565b9161025f565b1160001461245c57612439600061226b565b600090612458346000938493630f55e7df60e11b855260048501612283565b0390fd5b61246861247a92611373565b903361247330612277565b9192612928565b6123f0565b8261249e8391926000938493630f55e7df60e11b85526004850161221c565b0390fd5b826124b060026006016110fb565b6124cc600080938493630f55e7df60e11b8552600485016121e9565b0390fd5b826124de60006006016110cc565b6124f96000928392639e4c446160e01b845260048401612143565b0390fd5b6000630fe219dd60e21b81528061251660048201610345565b0390fd5b61252c90612526612558565b90612ae4565b565b9061255061254b61255593612544818590612b7d565b6001611a49565b611a61565b612c63565b50565b612560611a44565b503390565b9061258761258261258c9361257b818590612c9e565b6001611a49565b611a61565b612d37565b50565b61259890610c70565b90565b63ffffffff1690565b6125b86125b36125bd9261259b565b610cd6565b610178565b90565b916126046004926125f561260995936125dc63a9059cbb6125a4565b926125e5610163565b9687946020860190815201610cec565b60208201810382520383610cad565b612ee5565b565b90612621612626939261261c610eb3565b61252e565b612f52565b565b90565b61263761263c91610f9d565b61169b565b90565b61265361264e6126589261025f565b610c39565b610224565b90565b6126876126826126919361267d600061268c95612676611a44565b5001612628565b612fea565b61262b565b61263f565b610c70565b90565b6126ae6126ba92936126b4926126a8610bac565b5061303f565b926103cd565b916103cd565b1490565b6126d660006126db926126cf612047565b5001612628565b6130aa565b90565b6126e6610bac565b50806127016126fb635a05180f60e01b610178565b91610178565b1490811561270e575b5090565b61271891506130c2565b3861270a565b612726610bac565b508061274161273b634e821d3360e11b610178565b91610178565b1490811561274e575b5090565b61275891506120db565b3861274a565b612766610bac565b508161277b612775600061164e565b9161025f565b149081156127ae575b50908115612791575b5090565b90506127a66127a0429261025f565b9161025f565b10153861278d565b90506127c36127bd429261025f565b9161025f565b1038612784565b60209181520190565b600080fd5b9037565b9091826127e8916127ca565b9160018060fb1b03811161280b578291602061280792029384916127d8565b0190565b6127d3565b9061284161284c916128539698979560609561283460808701936000880190610413565b85830360208701526127dc565b96604083019061084b565b0190610413565b565b92938361287361286d61286860006109ae565b6103cd565b916103cd565b03612880575b5050505050565b61289861289285848689918693611fa4565b156101c7565b6128c857505050906128b96128be926128b46001936002611e7e565b611e96565b61156a565b3880808080612879565b846128f1918593949190916128db610163565b9586956304cb8cd560e31b875260048701612810565b0390fd5b60409061291f61292694969593966129156060840198600085019061084b565b602083019061084b565b0190610ae8565b565b612975939161296160049461297093946129456323b872dd6125a4565b93919091612951610163565b97889560208701908152016128f5565b60208201810382520383610cad565b612ee5565b565b90565b61298e61298961299392612977565b610c39565b61025f565b90565b905090565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000910152565b6129cf60178092612996565b6129d88161299b565b0190565b5190565b60005b8381106129f4575050906000910152565b8060209183015181850152016129e3565b612a2a612a2192602092612a18816129dc565b94858093612996565b938491016129e0565b0190565b60007f206973206d697373696e6720726f6c6520000000000000000000000000000000910152565b612a6260118092612996565b612a6b81612a2e565b0190565b612a89612a949392612a83612a8e936129c3565b90612a05565b612a56565b90612a05565b90565b90565b612ab9612ac2602093612ac793612ab0816129dc565b93848093611244565b958691016129e0565b610c8d565b0190565b612ae19160208201916000818403910152612a9a565b90565b90612af9612af3838390611aa4565b156101c7565b612b01575050565b612b7991612b57612b30612b20612b1a612b5c95613155565b9361262b565b612b2a602061297a565b90613378565b91612b48612b3c610163565b93849260208401612a6f565b60208201810382520382610cad565b612a97565b612b64610163565b91829162461bcd60e51b835260048301612acb565b0390fd5b612b91612b8b828490611aa4565b156101c7565b612b9a575b5050565b612bbc6001612bb76000612baf818690610f85565b018590611a8c565b61156a565b90612bc5612558565b90612c02612bfc612bf67f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d95610f79565b926114f2565b926114f2565b92612c0b610163565b80612c1581610345565b0390a43880612b96565b612c2890610c3c565b90565b612c3f612c3a612c4492610224565b610c39565b61025f565b90565b612c5b612c56612c609261025f565b6109a8565b6103cd565b90565b90612c96612c90612c8b612c866000612c9b96612c7e610bac565b500194612c1f565b612c2b565b612c47565b91612628565b613598565b90565b612ca9818390611aa4565b612cb2575b5050565b612cd46000612ccf6000612cc7818690610f85565b018590611a8c565b61156a565b90612cdd612558565b90612d1a612d14612d0e7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b95610f79565b926114f2565b926114f2565b92612d23610163565b80612d2d81610345565b0390a43880612cae565b90612d6a612d64612d5f612d5a6000612d6f96612d52610bac565b500194612c1f565b612c2b565b612c47565b91612628565b61368e565b90565b67ffffffffffffffff8111612d9057612d8c602091610c8d565b0190565b610c97565b90612da7612da283612d72565b61101e565b918252565b60007f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564910152565b612dde6020612d95565b90612deb60208301612dac565b565b612df5612dd4565b90565b612e01816101c7565b03612e0857565b600080fd5b90505190612e1a82612df8565b565b90602082820312612e3657612e3391600001612e0d565b90565b61016e565b60207f6f74207375636365656400000000000000000000000000000000000000000000917f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201520152565b612e96602a604092611244565b612e9f81612e3b565b0190565b612eb99060208101906000818303910152612e89565b90565b15612ec357565b612ecb610163565b62461bcd60e51b815280612ee160048201612ea3565b0390fd5b612f2f91612ef5612f049261258f565b90612efe612ded565b91613798565b612f0d81611f1e565b612f20612f1a600061164e565b9161025f565b14908115612f31575b50612ebc565b565b612f4c91506020612f4182611f1e565b818301019101612e1c565b38612f29565b90612f69612f62612f7093610efe565b6003610f34565b60046117cf565b565b634e487b7160e01b600052603260045260246000fd5b5490565b600052602060002090565b612fa081612f88565b821015612fbb57612fb2600191612f8c565b91020190600090565b612f72565b1c90565b612fd4906008612fd99302612fc0565b610fa3565b90565b90612fe79154612fc4565b90565b61300991600061300392612ffc610f74565b5001612f97565b90612fdc565b90565b6001613018910161025f565b90565b5190565b906130298261301b565b81101561303a576020809102010190565b612f72565b9190613049610f74565b50613054600061164e565b905b8161307161306b6130668761301b565b61025f565b9161025f565b10156130a35761309761309d9161309161308c87869061301f565b6117b6565b906137bb565b9161300c565b90613056565b9192505090565b60006130bf916130b8612047565b5001612f88565b90565b6130ca610bac565b50806130e56130df637965db0b60e01b610178565b91610178565b149081156130f2575b5090565b6130fc91506137fb565b386130ee565b606090565b90565b60ff1690565b61312461311f61312992613107565b610c39565b61310a565b90565b6131366014613110565b90565b61314d6131486131529261310a565b610c39565b61025f565b90565b61317261316d61318892613167613102565b50612c1f565b612c2b565b61318261317d61312c565b613139565b90613378565b90565b90565b6131a261319d6131a79261318b565b610c39565b61025f565b90565b6131b96131bf9193929361025f565b9261025f565b82018092116131ca57565b612167565b369037565b906131f96131e183611403565b926020806131ef86936113e0565b92019103906131cf565b565b600360fc1b90565b9061320d82611f1e565b81101561321f57600160209102010190565b612f72565b600f60fb1b90565b90565b61324361323e6132489261322c565b610c39565b61025f565b90565b6132549061025f565b60008114613263576001900390565b612167565b6f181899199a1a9b1b9c1cb0b131b232b360811b90565b613287613268565b90565b90565b6132a161329c6132a69261328a565b610c39565b61025f565b90565b60f81b90565b90565b6132c66132c16132cb926132af565b610c39565b61310a565b90565b6132ed906132e76132e16132f29461310a565b9161025f565b90612fc0565b61025f565b90565b60007f537472696e67733a20686578206c656e67746820696e73756666696369656e74910152565b61332960208092611244565b613332816132f5565b0190565b61334c906020810190600081830391015261331d565b90565b1561335657565b61335e610163565b62461bcd60e51b81528061337460048201613336565b0390fd5b9190613382613102565b5061341c61340c6133b86133b36133a3600261339e879161318e565b6121a7565b6133ad600261318e565b906131aa565b6131d4565b926133c16131fb565b6133da856133d460009360001a9361164e565b90613203565b536133e3613224565b6133fc856133f660019360001a9361322f565b90613203565b53613407600261318e565b6121a7565b613416600161322f565b906131aa565b925b8361343261342c600161322f565b9161025f565b11156134995761344061327f565b8161344b600f61328d565b16916010831015613494576134676134889261348e941a6132a9565b6134778591889060001a92613203565b5361348260046132b2565b906132ce565b9361324b565b9261341e565b612f72565b6134c19293506134bc906134b66134b0600061164e565b9161025f565b1461334f565b612a97565b90565b90565b600052602060002090565b5490565b6134df816134d2565b8210156134fa576134f16001916134c7565b91020190600090565b612f72565b1b90565b9190600861351f910291613519600019846134ff565b926134ff565b9181191691161790565b919061353f61353a61354793610f79565b6117c3565b908354613503565b9055565b908154916801000000000000000083101561357b5782613573916001613579950181556134d6565b90613529565b565b610c97565b9061358a90610f79565b600052602052604060002090565b6135a0610bac565b506135b56135af828490613821565b156101c7565b6000146135f8576135ee6135f3926135d96135d2600085016134c4565b829061354b565b60016135e760008501612f88565b9301613580565b6116ba565b600190565b5050600090565b634e487b7160e01b600052603160045260246000fd5b61362791613621610f74565b91613529565b565b613632816134d2565b801561365357600190039061365061364a83836134d6565b90613615565b55565b6135ff565b919061366e6136696136769361169b565b6116b7565b908354613503565b9055565b61368c91613686612047565b91613658565b565b613696610bac565b506136ad6136a8600183018490613580565b6110cc565b90816136c26136bc600061164e565b9161025f565b14156000146137905761374292600161373d92846136eb6000966136e58561322f565b9061217d565b6137086136f9888501612f88565b6137028661322f565b9061217d565b8061371b6137158461025f565b9161025f565b03613747575b5050506137376137328683016134c4565b613629565b01613580565b61367a565b600190565b6137889261377a613766613760613783948c8901612f97565b90612fdc565b9361377485918c8901612f97565b90613529565b91858501613580565b6116ba565b388080613721565b505050600090565b906137b892916137a661141a565b50906137b2600061164e565b9161390d565b90565b6137c3610f74565b50806137d76137d1846103cd565b916103cd565b106000146137ed57906137e991613967565b5b90565b6137f691613967565b6137ea565b613803610bac565b5061381d6138176301ffc9a760e01b610178565b91610178565b1490565b61383f91600161383a92613833610bac565b5001613580565b6110cc565b61385261384c600061164e565b9161025f565b141590565b61386090610c70565b90565b60207f722063616c6c0000000000000000000000000000000000000000000000000000917f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201520152565b6138be6026604092611244565b6138c781613863565b0190565b6138e190602081019060008183039101526138b1565b90565b156138eb57565b6138f3610163565b62461bcd60e51b815280613909600482016138cb565b0390fd5b9160008091613964959361391f61141a565b5061394661392c30613857565b3161393f6139398561025f565b9161025f565b10156138e4565b8591602082019151925af19161395a61141f565b9092909192613a02565b90565b61396f610f74565b50600052602052604060002090565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b6139b3601d602092611244565b6139bc8161397e565b0190565b6139d690602081019060008183039101526139a6565b90565b156139e057565b6139e8610163565b62461bcd60e51b8152806139fe600482016139c0565b0390fd5b919290613a0d61141a565b50600014613a535750613a1f82611f1e565b613a32613a2c600061164e565b9161025f565b14613a3c575b5090565b613a48613a4d91613aa7565b6139d9565b38613a38565b8290613a5e82611f1e565b613a71613a6b600061164e565b9161025f565b11600014613a825750805190602001fd5b613aa390613a8e610163565b91829162461bcd60e51b835260048301612acb565b0390fd5b613aaf610bac565b503b613ac4613abe600061164e565b9161025f565b119056fea2646970667358221220c204633b23276edd95aa322dbea2171da8b640438f81199e08fb87ec1d64aa7f64736f6c634300081b003360806040523461002f576100196100146100fa565b61011b565b610021610034565b610722610380823961072290f35b61003a565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100699061003f565b810190811060018060401b0382111761008157604052565b610049565b90610099610092610034565b928361005f565b565b600080fd5b60018060a01b031690565b6100b4906100a0565b90565b6100c0816100ab565b036100c757565b600080fd5b905051906100d9826100b7565b565b906020828203126100f5576100f2916000016100cc565b90565b61009b565b610118610aa28038038061010d81610086565b9283398101906100db565b90565b61012c9061012761012e565b61026e565b565b61013e610139610291565b6102d6565b565b60209181520190565b60207f6e206973206e6f74206120636f6e747261637400000000000000000000000000917f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60008201520152565b6101a46033604092610140565b6101ad81610149565b0190565b6101c79060208101906000818303910152610197565b90565b156101d157565b6101d9610034565b62461bcd60e51b8152806101ef600482016101b1565b0390fd5b60001b90565b9061020a60018060a01b03916101f3565b9181191691161790565b90565b61022b610226610230926100a0565b610214565b6100a0565b90565b61023c90610217565b90565b61024890610233565b90565b90565b9061026361025e61026a9261023f565b61024b565b82546101f9565b9055565b61028a9061028361027e8261035e565b6101ca565b600161024e565b565b600090565b61029961028c565b503390565b60001c90565b60018060a01b031690565b6102bb6102c09161029e565b6102a4565b90565b6102cd90546102af565b90565b60000190565b6102e060006102c3565b6102eb82600061024e565b9061031f6103197f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361023f565b9161023f565b91610328610034565b80610332816102d0565b0390a3565b600090565b90565b90565b61035661035161035b9261033f565b610214565b61033c565b90565b610366610337565b503b61037b6103756000610342565b9161033c565b119056fe60806040526004361015610013575b610219565b61001e60003561006d565b80633659cfe6146100685780635c60da1b14610063578063715018a61461005e5780638da5cb5b146100595763f2fde38b0361000e576101e6565b6101b1565b61017e565b610149565b6100e3565b60e01c90565b60405190565b600080fd5b600080fd5b60018060a01b031690565b61009790610083565b90565b6100a38161008e565b036100aa57565b600080fd5b905035906100bc8261009a565b565b906020828203126100d8576100d5916000016100af565b90565b61007e565b60000190565b34610111576100fb6100f63660046100be565b6102b3565b610103610073565b8061010d816100dd565b0390f35b610079565b600091031261012157565b61007e565b61012f9061008e565b9052565b919061014790600060208501940190610126565b565b3461017957610159366004610116565b6101756101646102f5565b61016c610073565b91829182610133565b0390f35b610079565b346101ac5761018e366004610116565b61019661035c565b61019e610073565b806101a8816100dd565b0390f35b610079565b346101e1576101c1366004610116565b6101dd6101cc610366565b6101d4610073565b91829182610133565b0390f35b610079565b34610214576101fe6101f93660046100be565b610473565b610206610073565b80610210816100dd565b0390f35b610079565b600080fd5b61022f9061022a610501565b610268565b565b90565b61024861024361024d92610083565b610231565b610083565b90565b61025990610234565b90565b61026590610250565b90565b6102718161061b565b61029b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9161025c565b906102a4610073565b806102ae816100dd565b0390a2565b6102bc9061021e565b565b600090565b60001c90565b60018060a01b031690565b6102e06102e5916102c3565b6102c9565b90565b6102f290546102d4565b90565b6102fd6102be565b5061030860016102e8565b90565b610313610501565b61031b610348565b565b90565b61033461032f6103399261031d565b610231565b610083565b90565b61034590610320565b90565b61035a610355600061033c565b610639565b565b61036461030b565b565b61036e6102be565b5061037960006102e8565b90565b61038d90610388610501565b610442565b565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201520152565b6103f3602660409261038f565b6103fc81610398565b0190565b61041690602081019060008183039101526103e6565b90565b1561042057565b610428610073565b62461bcd60e51b81528061043e60048201610400565b0390fd5b6104719061046c8161046561045f61045a600061033c565b61008e565b9161008e565b1415610419565b610639565b565b61047c9061037c565b565b60007f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910152565b6104b26020809261038f565b6104bb8161047e565b0190565b6104d590602081019060008183039101526104a6565b90565b156104df57565b6104e7610073565b62461bcd60e51b8152806104fd600482016104bf565b0390fd5b61052b61050c610366565b61052561051f61051a61069a565b61008e565b9161008e565b146104d8565b565b60207f6e206973206e6f74206120636f6e747261637400000000000000000000000000917f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60008201520152565b610588603360409261038f565b6105918161052d565b0190565b6105ab906020810190600081830391015261057b565b90565b156105b557565b6105bd610073565b62461bcd60e51b8152806105d360048201610595565b0390fd5b60001b90565b906105ee60018060a01b03916105d7565b9181191691161790565b90565b9061061061060b6106179261025c565b6105f8565b82546105dd565b9055565b6106379061063061062b826106cb565b6105ae565b60016105fb565b565b61064360006102e8565b61064e8260006105fb565b9061068261067c7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361025c565b9161025c565b9161068b610073565b80610695816100dd565b0390a3565b6106a26102be565b503390565b600090565b90565b6106c36106be6106c89261031d565b610231565b6106ac565b90565b6106d36106a7565b503b6106e86106e260006106af565b916106ac565b119056fea26469706673582212203fbf94b3aa182e7120f7ee578f52eecce106fbe2a323e7e4f1511d9f27768ead64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x2F JUMPI PUSH2 0x19 PUSH2 0x14 PUSH2 0xFA JUMP JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH2 0x21 PUSH2 0x34 JUMP JUMPDEST PUSH2 0x25D4 PUSH2 0x397 DUP3 CODECOPY PUSH2 0x25D4 SWAP1 RETURN JUMPDEST PUSH2 0x3A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x69 SWAP1 PUSH2 0x3F JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x81 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x49 JUMP JUMPDEST SWAP1 PUSH2 0x99 PUSH2 0x92 PUSH2 0x34 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x5F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xB4 SWAP1 PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC0 DUP2 PUSH2 0xAB JUMP JUMPDEST SUB PUSH2 0xC7 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0xD9 DUP3 PUSH2 0xB7 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xF5 JUMPI PUSH2 0xF2 SWAP2 PUSH1 0x0 ADD PUSH2 0xCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9B JUMP JUMPDEST PUSH2 0x118 PUSH2 0x6F37 DUP1 CODESIZE SUB DUP1 PUSH2 0x10D DUP2 PUSH2 0x86 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD SWAP1 PUSH2 0xDB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x129 PUSH2 0x34 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x149 PUSH2 0x144 PUSH2 0x14E SWAP3 PUSH2 0xA0 JUMP JUMPDEST PUSH2 0x132 JUMP JUMPDEST PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x15A SWAP1 PUSH2 0x135 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x166 SWAP1 PUSH2 0x151 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x171 PUSH2 0x1CA JUMP JUMPDEST PUSH2 0x179 PUSH2 0x34 JUMP JUMPDEST PUSH2 0x3B2A DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1C5 JUMPI PUSH2 0x1A1 DUP3 SWAP2 PUSH2 0x3B2A PUSH2 0x296B DUP5 CODECOPY PUSH2 0x11B JUMP JUMPDEST SUB SWAP1 PUSH1 0x0 CREATE SWAP1 DUP2 ISZERO PUSH2 0x1C0 JUMPI PUSH2 0x1B9 PUSH2 0x1BE SWAP3 PUSH2 0x15D JUMP JUMPDEST PUSH2 0x265 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x121 JUMP JUMPDEST PUSH2 0x49 JUMP JUMPDEST PUSH2 0x1D2 PUSH2 0x1D4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1E4 PUSH2 0x1DF PUSH2 0x2C7 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1EF SWAP1 PUSH2 0xAB JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x207 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x1E6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x220 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x209 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x233 SWAP1 PUSH2 0x135 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23F SWAP1 PUSH2 0x22A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x25A PUSH2 0x255 PUSH2 0x261 SWAP3 PUSH2 0x236 JUMP JUMPDEST PUSH2 0x242 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x20F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x26D PUSH2 0x34 JUMP JUMPDEST SWAP1 PUSH2 0xAA2 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x2BD JUMPI DUP3 SWAP2 PUSH2 0x297 SWAP2 PUSH2 0xAA2 PUSH2 0x6495 DUP6 CODECOPY PUSH2 0x1F3 JUMP JUMPDEST SUB SWAP1 PUSH1 0x0 CREATE SWAP1 DUP2 ISZERO PUSH2 0x2B8 JUMPI PUSH2 0x2B1 PUSH2 0x2B6 SWAP3 PUSH1 0x1 PUSH2 0x245 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x121 JUMP JUMPDEST PUSH2 0x49 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x2C2 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2F1 PUSH2 0x2F6 SWAP2 PUSH2 0x2D4 JUMP JUMPDEST PUSH2 0x2DA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x303 SWAP1 SLOAD PUSH2 0x2E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30F SWAP1 PUSH2 0x151 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x32A PUSH2 0x325 PUSH2 0x331 SWAP3 PUSH2 0x306 JUMP JUMPDEST PUSH2 0x312 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x20F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x33F PUSH1 0x0 PUSH2 0x2F9 JUMP JUMPDEST PUSH2 0x34A DUP3 PUSH1 0x0 PUSH2 0x315 JUMP JUMPDEST SWAP1 PUSH2 0x37E PUSH2 0x378 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x306 JUMP JUMPDEST SWAP2 PUSH2 0x306 JUMP JUMPDEST SWAP2 PUSH2 0x387 PUSH2 0x34 JUMP JUMPDEST DUP1 PUSH2 0x391 DUP2 PUSH2 0x11B JUMP JUMPDEST SUB SWAP1 LOG3 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x403 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x8D JUMP JUMPDEST DUP1 PUSH4 0x1A4B671D EQ PUSH2 0x88 JUMPI DUP1 PUSH4 0x1BCE4583 EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x59659E90 EQ PUSH2 0x7E JUMPI DUP1 PUSH4 0x69B3934D EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x74 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x6F JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x3D0 JUMP JUMPDEST PUSH2 0x39B JUMP JUMPDEST PUSH2 0x368 JUMP JUMPDEST PUSH2 0x32C JUMP JUMPDEST PUSH2 0x2F7 JUMP JUMPDEST PUSH2 0x215 JUMP JUMPDEST PUSH2 0x1B4 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xAF DUP2 PUSH2 0xA3 JUMP JUMPDEST SUB PUSH2 0xB6 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xC8 DUP3 PUSH2 0xA6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xDE SWAP1 PUSH2 0xCA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xEA DUP2 PUSH2 0xD5 JUMP JUMPDEST SUB PUSH2 0xF1 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x103 DUP3 PUSH2 0xE1 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x111 DUP2 PUSH2 0x105 JUMP JUMPDEST SUB PUSH2 0x118 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x12A DUP3 PUSH2 0x108 JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0xC0 DUP3 DUP5 SUB SLT PUSH2 0x18C JUMPI PUSH2 0x145 DUP4 PUSH1 0x0 DUP5 ADD PUSH2 0xBB JUMP JUMPDEST SWAP3 PUSH2 0x153 DUP2 PUSH1 0x20 DUP6 ADD PUSH2 0xF6 JUMP JUMPDEST SWAP3 PUSH2 0x161 DUP3 PUSH1 0x40 DUP4 ADD PUSH2 0xF6 JUMP JUMPDEST SWAP3 PUSH2 0x189 PUSH2 0x172 DUP5 PUSH1 0x60 DUP6 ADD PUSH2 0xF6 JUMP JUMPDEST SWAP4 PUSH2 0x180 DUP2 PUSH1 0x80 DUP7 ADD PUSH2 0xF6 JUMP JUMPDEST SWAP4 PUSH1 0xA0 ADD PUSH2 0x11D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH2 0x19A SWAP1 PUSH2 0xD5 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1B2 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x191 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x1EB JUMPI PUSH2 0x1E7 PUSH2 0x1D6 PUSH2 0x1CA CALLDATASIZE PUSH1 0x4 PUSH2 0x12C JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0x52F JUMP JUMPDEST PUSH2 0x1DE PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x19E JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x20A JUMPI PUSH2 0x207 SWAP2 PUSH1 0x0 ADD PUSH2 0xF6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x243 JUMPI PUSH2 0x22D PUSH2 0x228 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F0 JUMP JUMPDEST PUSH2 0x68C JUMP JUMPDEST PUSH2 0x235 PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x23F DUP2 PUSH2 0x20F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x253 JUMPI JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x277 SWAP1 PUSH1 0x8 PUSH2 0x27C SWAP4 MUL PUSH2 0x258 JUMP JUMPDEST PUSH2 0x25C JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x28A SWAP2 SLOAD PUSH2 0x267 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x29A PUSH1 0x1 PUSH1 0x0 SWAP1 PUSH2 0x27F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2B4 PUSH2 0x2AF PUSH2 0x2B9 SWAP3 PUSH2 0xCA JUMP JUMPDEST PUSH2 0x29D JUMP JUMPDEST PUSH2 0xCA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2C5 SWAP1 PUSH2 0x2A0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2D1 SWAP1 PUSH2 0x2BC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2DD SWAP1 PUSH2 0x2C8 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2F5 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x2D4 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x327 JUMPI PUSH2 0x307 CALLDATASIZE PUSH1 0x4 PUSH2 0x248 JUMP JUMPDEST PUSH2 0x323 PUSH2 0x312 PUSH2 0x28D JUMP JUMPDEST PUSH2 0x31A PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2E1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x363 JUMPI PUSH2 0x35F PUSH2 0x34E PUSH2 0x342 CALLDATASIZE PUSH1 0x4 PUSH2 0x12C JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0x6FA JUMP JUMPDEST PUSH2 0x356 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x19E JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x396 JUMPI PUSH2 0x378 CALLDATASIZE PUSH1 0x4 PUSH2 0x248 JUMP JUMPDEST PUSH2 0x380 PUSH2 0x87F JUMP JUMPDEST PUSH2 0x388 PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x392 DUP2 PUSH2 0x20F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x3CB JUMPI PUSH2 0x3AB CALLDATASIZE PUSH1 0x4 PUSH2 0x248 JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x3B6 PUSH2 0x8B5 JUMP JUMPDEST PUSH2 0x3BE PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x19E JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x3FE JUMPI PUSH2 0x3E8 PUSH2 0x3E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F0 JUMP JUMPDEST PUSH2 0x9C2 JUMP JUMPDEST PUSH2 0x3F0 PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x3FA DUP2 PUSH2 0x20F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x416 SWAP1 PUSH2 0xA3 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x423 SWAP1 PUSH2 0x105 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 SWAP6 SWAP5 SWAP3 PUSH2 0x473 SWAP5 PUSH2 0x462 PUSH2 0x46C SWAP3 PUSH2 0x458 PUSH1 0x80 SWAP7 PUSH2 0x44E PUSH1 0xA0 DUP9 ADD SWAP13 PUSH1 0x0 DUP10 ADD SWAP1 PUSH2 0x40D JUMP JUMPDEST PUSH1 0x20 DUP8 ADD SWAP1 PUSH2 0x191 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD SWAP1 PUSH2 0x191 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD SWAP1 PUSH2 0x191 JUMP JUMPDEST ADD SWAP1 PUSH2 0x41A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x49F SWAP1 PUSH2 0x475 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x4B9 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x4DB PUSH2 0x4D4 PUSH2 0x93 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x495 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4FB JUMPI PUSH2 0x4F7 PUSH1 0x20 SWAP2 PUSH2 0x475 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST SWAP1 PUSH2 0x512 PUSH2 0x50D DUP4 PUSH2 0x4DD JUMP JUMPDEST PUSH2 0x4C8 JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x521 PUSH1 0x0 PUSH2 0x500 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x52C PUSH2 0x517 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x56E SWAP3 SWAP2 SWAP5 PUSH2 0x590 SWAP7 PUSH2 0x55F SWAP3 PUSH2 0x545 PUSH2 0x408 JUMP JUMPDEST POP SWAP4 SWAP6 SWAP2 SWAP1 SWAP2 PUSH2 0x553 PUSH2 0x93 JUMP JUMPDEST SWAP7 DUP8 SWAP6 PUSH1 0x20 DUP8 ADD PUSH2 0x427 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x495 JUMP JUMPDEST PUSH2 0x580 PUSH2 0x57A DUP3 PUSH2 0x4C4 JUMP JUMPDEST SWAP2 PUSH2 0x4BE JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0x58A PUSH2 0x524 JUMP JUMPDEST SWAP2 PUSH2 0xAA1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5A4 SWAP1 PUSH2 0x59F PUSH2 0xBBA JUMP JUMPDEST PUSH2 0x5F9 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH2 0x5B8 PUSH2 0x5BD SWAP2 PUSH2 0x5A6 JUMP JUMPDEST PUSH2 0x25C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5CA SWAP1 SLOAD PUSH2 0x5AC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x5E3 JUMPI JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH2 0x5F0 PUSH2 0x93 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x60B PUSH2 0x606 PUSH1 0x1 PUSH2 0x5C0 JUMP JUMPDEST PUSH2 0x2C8 JUMP JUMPDEST SWAP1 PUSH4 0x3659CFE6 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0x687 JUMPI PUSH2 0x643 SWAP3 PUSH2 0x638 PUSH1 0x0 DUP1 SWAP5 PUSH2 0x62C PUSH2 0x93 JUMP JUMPDEST SWAP7 DUP8 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH2 0x5D2 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x19E JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x682 JUMPI PUSH2 0x655 JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0x675 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0x67B JUMPI JUMPDEST PUSH2 0x66D DUP2 DUP4 PUSH2 0x495 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x5D8 JUMP JUMPDEST CODESIZE PUSH2 0x652 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x663 JUMP JUMPDEST PUSH2 0x5E8 JUMP JUMPDEST PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x695 SWAP1 PUSH2 0x593 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x6A0 SWAP1 PUSH2 0x2A0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6AC SWAP1 PUSH2 0x697 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6B8 SWAP1 PUSH2 0x2BC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6F1 PUSH2 0x6F8 SWAP5 PUSH2 0x6E7 PUSH1 0x60 SWAP5 SWAP9 SWAP8 SWAP6 PUSH2 0x6DD PUSH1 0x80 DUP7 ADD SWAP11 PUSH1 0x0 DUP8 ADD SWAP1 PUSH2 0x191 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x191 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x191 JUMP JUMPDEST ADD SWAP1 PUSH2 0x41A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x75C SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x70A PUSH2 0x408 JUMP JUMPDEST POP PUSH2 0x73A DUP6 SWAP2 PUSH2 0x72B DUP7 DUP10 DUP12 SWAP2 PUSH2 0x71F PUSH2 0x93 JUMP JUMPDEST SWAP7 DUP8 SWAP6 PUSH1 0x20 DUP8 ADD PUSH2 0x427 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x495 JUMP JUMPDEST PUSH2 0x74C PUSH2 0x746 DUP3 PUSH2 0x4C4 JUMP JUMPDEST SWAP2 PUSH2 0x4BE JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0x756 PUSH2 0x524 JUMP JUMPDEST SWAP2 PUSH2 0xCAD JUMP JUMPDEST SWAP4 PUSH2 0x76E PUSH2 0x769 DUP7 PUSH2 0x6A3 JUMP JUMPDEST PUSH2 0x6AF JUMP JUMPDEST SWAP1 PUSH4 0x63ACC14D SWAP4 SWAP3 SWAP5 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0x829 JUMPI PUSH1 0x0 SWAP5 PUSH2 0x7AA DUP7 SWAP3 PUSH2 0x79F SWAP5 PUSH2 0x793 PUSH2 0x93 JUMP JUMPDEST SWAP10 DUP11 SWAP9 DUP10 SWAP8 DUP9 SWAP7 PUSH2 0x5D2 JUMP JUMPDEST DUP7 MSTORE PUSH1 0x4 DUP7 ADD PUSH2 0x6BB JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x824 JUMPI PUSH2 0x7F7 JUMPI JUMPDEST POP DUP1 PUSH2 0x7F1 PUSH32 0xE3FC4D8C7984F762222579E0C4564A72A74F96CDE3F6BAE2751D01108C6EC240 SWAP2 PUSH2 0x7E8 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x19E JUMP JUMPDEST SUB SWAP1 LOG1 SWAP1 JUMP JUMPDEST PUSH2 0x817 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0x81D JUMPI JUMPDEST PUSH2 0x80F DUP2 DUP4 PUSH2 0x495 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x5D8 JUMP JUMPDEST CODESIZE PUSH2 0x7B9 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x805 JUMP JUMPDEST PUSH2 0x5E8 JUMP JUMPDEST PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x836 PUSH2 0xBBA JUMP JUMPDEST PUSH2 0x83E PUSH2 0x86B JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x857 PUSH2 0x852 PUSH2 0x85C SWAP3 PUSH2 0x840 JUMP JUMPDEST PUSH2 0x29D JUMP JUMPDEST PUSH2 0xCA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x868 SWAP1 PUSH2 0x843 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x87D PUSH2 0x878 PUSH1 0x0 PUSH2 0x85F JUMP JUMPDEST PUSH2 0xE3C JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x887 PUSH2 0x82E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x8A0 PUSH2 0x8A5 SWAP2 PUSH2 0x5A6 JUMP JUMPDEST PUSH2 0x889 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8B2 SWAP1 SLOAD PUSH2 0x894 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8BD PUSH2 0x408 JUMP JUMPDEST POP PUSH2 0x8C8 PUSH1 0x0 PUSH2 0x8A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8DC SWAP1 PUSH2 0x8D7 PUSH2 0xBBA JUMP JUMPDEST PUSH2 0x991 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x942 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x8DE JUMP JUMPDEST PUSH2 0x94B DUP2 PUSH2 0x8E7 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x965 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x935 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x96F JUMPI JUMP JUMPDEST PUSH2 0x977 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x98D PUSH1 0x4 DUP3 ADD PUSH2 0x94F JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x9C0 SWAP1 PUSH2 0x9BB DUP2 PUSH2 0x9B4 PUSH2 0x9AE PUSH2 0x9A9 PUSH1 0x0 PUSH2 0x85F JUMP JUMPDEST PUSH2 0xD5 JUMP JUMPDEST SWAP2 PUSH2 0xD5 JUMP JUMPDEST EQ ISZERO PUSH2 0x968 JUMP JUMPDEST PUSH2 0xE3C JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x9CB SWAP1 PUSH2 0x8CB JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9DC PUSH2 0x9E1 SWAP2 PUSH2 0x105 JUMP JUMPDEST PUSH2 0x9CD JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x60 SHL SWAP1 JUMP JUMPDEST PUSH2 0x9F4 SWAP1 PUSH2 0x9E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA00 SWAP1 PUSH2 0x9EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA0F PUSH2 0xA14 SWAP2 PUSH2 0xD5 JUMP JUMPDEST PUSH2 0x9F7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0xA31 JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0xA20 JUMP JUMPDEST PUSH2 0xA67 PUSH2 0xA5E SWAP3 PUSH1 0x20 SWAP3 PUSH2 0xA55 DUP2 PUSH2 0x4C4 JUMP JUMPDEST SWAP5 DUP6 DUP1 SWAP4 PUSH2 0xA18 JUMP JUMPDEST SWAP4 DUP5 SWAP2 ADD PUSH2 0xA1D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x14 DUP1 SWAP4 PUSH2 0xA8F PUSH1 0x20 DUP5 PUSH2 0xA87 PUSH2 0xA97 SWAP7 PUSH2 0xA9E SWAP12 SWAP11 SWAP9 PUSH2 0x9D0 JUMP JUMPDEST ADD DUP1 SWAP3 PUSH2 0xA03 JUMP JUMPDEST ADD DUP1 SWAP3 PUSH2 0xA03 JUMP JUMPDEST ADD SWAP1 PUSH2 0xA42 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xB34 SWAP3 SWAP2 PUSH2 0xADE PUSH2 0xAED SWAP3 PUSH2 0xAB5 PUSH2 0x408 JUMP JUMPDEST POP SWAP2 SWAP4 PUSH2 0xACA PUSH2 0xAC5 PUSH1 0x1 PUSH2 0x5C0 JUMP JUMPDEST PUSH2 0x2C8 JUMP JUMPDEST PUSH2 0xAD2 PUSH2 0x93 JUMP JUMPDEST SWAP6 DUP7 SWAP5 PUSH1 0x20 DUP7 ADD PUSH2 0xA6B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x495 JUMP JUMPDEST PUSH2 0xAFF PUSH2 0xAF9 DUP3 PUSH2 0x4C4 JUMP JUMPDEST SWAP2 PUSH2 0x4BE JUMP JUMPDEST KECCAK256 PUSH2 0x148A PUSH2 0xB0F PUSH1 0x20 DUP3 ADD PUSH2 0x4C8 JUMP JUMPDEST SWAP1 DUP1 DUP3 MSTORE PUSH2 0x1115 PUSH1 0x20 DUP4 ADD CODECOPY PUSH2 0xB2D PUSH2 0xB27 DUP3 PUSH2 0x4C4 JUMP JUMPDEST SWAP2 PUSH2 0x4BE JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0xEA9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xB6B PUSH1 0x20 DUP1 SWAP3 PUSH2 0x8DE JUMP JUMPDEST PUSH2 0xB74 DUP2 PUSH2 0xB37 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xB8E SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xB5F JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xB98 JUMPI JUMP JUMPDEST PUSH2 0xBA0 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xBB6 PUSH1 0x4 DUP3 ADD PUSH2 0xB78 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xBE4 PUSH2 0xBC5 PUSH2 0x8B5 JUMP JUMPDEST PUSH2 0xBDE PUSH2 0xBD8 PUSH2 0xBD3 PUSH2 0xECA JUMP JUMPDEST PUSH2 0xD5 JUMP JUMPDEST SWAP2 PUSH2 0xD5 JUMP JUMPDEST EQ PUSH2 0xB91 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xBFA PUSH2 0xBF5 PUSH2 0xBFF SWAP3 PUSH2 0x840 JUMP JUMPDEST PUSH2 0x29D JUMP JUMPDEST PUSH2 0xA3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC0B SWAP1 PUSH2 0x2A0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC17 SWAP1 PUSH2 0xC02 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC23 SWAP1 PUSH2 0x2A0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC2F SWAP1 PUSH2 0xC1A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC3B SWAP1 PUSH2 0x2BC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH2 0xC66 PUSH2 0xC6F PUSH1 0x20 SWAP4 PUSH2 0xC74 SWAP4 PUSH2 0xC5D DUP2 PUSH2 0x4C4 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xC3E JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0xA1D JUMP JUMPDEST PUSH2 0x475 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xC9D PUSH2 0xCAA SWAP5 SWAP3 SWAP4 PUSH2 0xC93 PUSH1 0x60 DUP5 ADD SWAP6 PUSH1 0x0 DUP6 ADD SWAP1 PUSH2 0x191 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x191 JUMP JUMPDEST PUSH1 0x40 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xC47 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xD3D SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH2 0xCBD PUSH2 0x408 JUMP JUMPDEST POP PUSH2 0xCFD DUP6 SWAP2 PUSH2 0xCEE PUSH2 0xCD8 PUSH2 0xCD3 PUSH1 0x1 PUSH2 0x5C0 JUMP JUMPDEST PUSH2 0x2C8 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0xCE2 PUSH2 0x93 JUMP JUMPDEST SWAP6 DUP7 SWAP5 PUSH1 0x20 DUP7 ADD PUSH2 0xA6B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x495 JUMP JUMPDEST PUSH2 0xD0F PUSH2 0xD09 DUP3 PUSH2 0x4C4 JUMP JUMPDEST SWAP2 PUSH2 0x4BE JUMP JUMPDEST KECCAK256 PUSH2 0x148A PUSH2 0xD1F PUSH1 0x20 DUP3 ADD PUSH2 0x4C8 JUMP JUMPDEST SWAP1 DUP1 DUP3 MSTORE PUSH2 0x1115 PUSH1 0x20 DUP4 ADD CODECOPY PUSH2 0xD38 PUSH1 0x0 SWAP3 SWAP2 SWAP3 PUSH2 0xBE6 JUMP JUMPDEST PUSH2 0x1062 JUMP JUMPDEST SWAP3 PUSH2 0xD57 PUSH2 0xD52 PUSH2 0xD4D DUP7 PUSH2 0xC0E JUMP JUMPDEST PUSH2 0xC26 JUMP JUMPDEST PUSH2 0xC32 JUMP JUMPDEST PUSH4 0xCF7A1D77 SWAP2 SWAP1 PUSH2 0xD70 PUSH2 0xD6B PUSH1 0x1 PUSH2 0x5C0 JUMP JUMPDEST PUSH2 0x2C8 JUMP JUMPDEST SWAP4 SWAP3 DUP2 EXTCODESIZE ISZERO PUSH2 0xDE7 JUMPI PUSH1 0x0 PUSH2 0xD98 SWAP2 PUSH2 0xDA3 DUP3 SWAP7 PUSH2 0xD8C PUSH2 0x93 JUMP JUMPDEST SWAP9 DUP10 SWAP8 DUP9 SWAP7 DUP8 SWAP6 PUSH2 0x5D2 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0xC78 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xDE2 JUMPI PUSH2 0xDB5 JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0xDD5 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0xDDB JUMPI JUMPDEST PUSH2 0xDCD DUP2 DUP4 PUSH2 0x495 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x5D8 JUMP JUMPDEST CODESIZE PUSH2 0xDB2 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xDC3 JUMP JUMPDEST PUSH2 0x5E8 JUMP JUMPDEST PUSH2 0x5CD JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xE03 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xDEC JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0xE16 SWAP1 PUSH2 0x2BC JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xE31 PUSH2 0xE2C PUSH2 0xE38 SWAP3 PUSH2 0xE0D JUMP JUMPDEST PUSH2 0xE19 JUMP JUMPDEST DUP3 SLOAD PUSH2 0xDF2 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xE46 PUSH1 0x0 PUSH2 0x8A8 JUMP JUMPDEST PUSH2 0xE51 DUP3 PUSH1 0x0 PUSH2 0xE1C JUMP JUMPDEST SWAP1 PUSH2 0xE85 PUSH2 0xE7F PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0xE0D JUMP JUMPDEST SWAP2 PUSH2 0xE0D JUMP JUMPDEST SWAP2 PUSH2 0xE8E PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0xE98 DUP2 PUSH2 0x20F JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0xEA6 SWAP1 PUSH2 0x2BC JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xEC7 SWAP2 PUSH2 0xEB6 PUSH2 0x408 JUMP JUMPDEST POP SWAP1 PUSH2 0xEC1 ADDRESS PUSH2 0xE9D JUMP JUMPDEST SWAP2 PUSH2 0x10EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xED2 PUSH2 0x408 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A20696E73756666696369656E742062616C616E6365000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xF0C PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x8DE JUMP JUMPDEST PUSH2 0xF15 DUP2 PUSH2 0xED7 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xF2F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xEFF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xF39 JUMPI JUMP JUMPDEST PUSH2 0xF41 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xF57 PUSH1 0x4 DUP3 ADD PUSH2 0xF19 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A2062797465636F6465206C656E677468206973207A65726F SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xF8F PUSH1 0x20 DUP1 SWAP3 PUSH2 0x8DE JUMP JUMPDEST PUSH2 0xF98 DUP2 PUSH2 0xF5B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xFB2 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xF83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xFBC JUMPI JUMP JUMPDEST PUSH2 0xFC4 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xFDA PUSH1 0x4 DUP3 ADD PUSH2 0xF9C JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A204661696C6564206F6E206465706C6F7900000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x1013 PUSH1 0x19 PUSH1 0x20 SWAP3 PUSH2 0x8DE JUMP JUMPDEST PUSH2 0x101C DUP2 PUSH2 0xFDE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1036 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1006 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1040 JUMPI JUMP JUMPDEST PUSH2 0x1048 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x105E PUSH1 0x4 DUP3 ADD PUSH2 0x1020 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x106D PUSH2 0x408 JUMP JUMPDEST POP PUSH2 0x1094 PUSH2 0x107A ADDRESS PUSH2 0xE9D JUMP JUMPDEST BALANCE PUSH2 0x108D PUSH2 0x1087 DUP5 PUSH2 0xA3 JUMP JUMPDEST SWAP2 PUSH2 0xA3 JUMP JUMPDEST LT ISZERO PUSH2 0xF32 JUMP JUMPDEST PUSH2 0x10BA PUSH2 0x10A0 DUP4 PUSH2 0x4C4 JUMP JUMPDEST PUSH2 0x10B3 PUSH2 0x10AD PUSH1 0x0 PUSH2 0xBE6 JUMP JUMPDEST SWAP2 PUSH2 0xA3 JUMP JUMPDEST EQ ISZERO PUSH2 0xFB5 JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD SWAP3 ADD SWAP1 CREATE2 SWAP1 PUSH2 0x10E9 DUP3 PUSH2 0x10E2 PUSH2 0x10DC PUSH2 0x10D7 PUSH1 0x0 PUSH2 0x85F JUMP JUMPDEST PUSH2 0xD5 JUMP JUMPDEST SWAP2 PUSH2 0xD5 JUMP JUMPDEST EQ ISZERO PUSH2 0x1039 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x55 SWAP3 PUSH1 0xB SWAP3 PUSH2 0x10FA PUSH2 0x408 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP3 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP4 ADD MSTORE DUP2 MSTORE ADD PUSH1 0xFF DUP2 MSTORE8 KECCAK256 SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x145E PUSH2 0x2C DUP3 CODECOPY PUSH2 0x145E SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x6B JUMPI PUSH2 0x6B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x34 PUSH2 0x2F PUSH2 0x39 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x45 SWAP1 PUSH2 0x20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x51 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x73 PUSH2 0x17E JUMP JUMPDEST PUSH2 0x8E PUSH2 0x88 PUSH2 0x83 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x46C JUMPI PUSH2 0x9B PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND PUSH2 0xC1 PUSH2 0xBB PUSH4 0xCF7A1D77 PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH2 0xE3 JUMPI PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0xDF PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xEB PUSH2 0x401 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x113 PUSH2 0x11D SWAP3 PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x149 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x104 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x16E SWAP2 PUSH2 0x14C JUMP JUMPDEST PUSH2 0x152 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17B SWAP1 SLOAD PUSH2 0x15D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1A2 PUSH1 0x0 PUSH2 0x19C PUSH2 0x197 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1BF PUSH2 0x1BA PUSH2 0x1C4 SWAP3 PUSH2 0x1A5 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x1F7 JUMPI DUP5 GT PUSH2 0x1F2 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1CD JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x212 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x21E DUP2 PUSH2 0x209 JUMP JUMPDEST SUB PUSH2 0x225 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x237 DUP3 PUSH2 0x215 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x26D SWAP1 PUSH2 0x243 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x287 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x29F PUSH2 0x298 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x263 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2BF JUMPI PUSH2 0x2BB PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2E5 PUSH2 0x2E0 DUP3 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x301 JUMPI PUSH2 0x2FF SWAP3 PUSH2 0x2C4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x23E JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x324 JUMPI DUP2 PUSH1 0x20 PUSH2 0x321 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2D0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x239 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x376 JUMPI PUSH2 0x341 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH2 0x34F DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x371 JUMPI PUSH2 0x36E SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x38F PUSH2 0x38A PUSH2 0x394 SWAP3 PUSH2 0x12 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A0 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3AC SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3CD JUMPI PUSH2 0x3C9 PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x3E4 PUSH2 0x3DF DUP4 PUSH2 0x3AF JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x0 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FE PUSH2 0x3E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x412 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x461 PUSH2 0x457 PUSH2 0x451 PUSH2 0x447 PUSH2 0x43F PUSH2 0x439 PUSH1 0x0 CALLDATASIZE PUSH2 0x431 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x329 JUMP JUMPDEST SWAP4 SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x469 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLER PUSH2 0x486 PUSH2 0x480 PUSH2 0x47B PUSH2 0x17E JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x59D JUMPI PUSH2 0x496 PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x4BD PUSH2 0x4B7 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x4D7 JUMPI POP PUSH2 0x4CE PUSH2 0x817 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0x4F1 PUSH2 0x4EB PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x508 JUMPI POP PUSH2 0x502 PUSH2 0x7C1 JUMP JUMPDEST JUMPDEST PUSH2 0x4CF JUMP JUMPDEST DUP1 PUSH2 0x522 PUSH2 0x51C PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x539 JUMPI POP PUSH2 0x533 PUSH2 0x723 JUMP JUMPDEST JUMPDEST PUSH2 0x503 JUMP JUMPDEST DUP1 PUSH2 0x553 PUSH2 0x54D PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x56A JUMPI POP PUSH2 0x564 PUSH2 0x6BF JUMP JUMPDEST JUMPDEST PUSH2 0x534 JUMP JUMPDEST PUSH2 0x583 PUSH2 0x57D PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x598 JUMPI PUSH2 0x593 PUSH2 0x67A JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5B9 PUSH2 0x5B4 PUSH2 0x5BE SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5C8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5EA CALLVALUE PUSH2 0x5E4 PUSH2 0x5DE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x5C1 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5F6 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x611 PUSH2 0x60B PUSH2 0x606 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x62D JUMPI PUSH2 0x622 PUSH2 0x62B SWAP4 PUSH2 0x8B2 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH2 0x98D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x646 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x652 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST PUSH2 0x660 SWAP1 PUSH2 0x48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x678 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x682 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x68B PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6BC PUSH2 0x699 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x6A1 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C7 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x6D0 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6F2 PUSH2 0x701 PUSH2 0x6DE PUSH2 0x17E JUMP JUMPDEST PUSH2 0x6E6 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x71E JUMPI PUSH2 0x71B SWAP2 PUSH1 0x0 ADD PUSH2 0x22A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x72B PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x734 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x770 PUSH2 0x76B PUSH2 0x766 PUSH2 0x75E PUSH2 0x758 PUSH1 0x0 CALLDATASIZE PUSH2 0x750 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x8B2 JUMP JUMPDEST PUSH2 0x778 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x7BC JUMPI PUSH2 0x795 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7B7 JUMPI PUSH2 0x7B4 SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x7C9 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x80C PUSH2 0x803 PUSH2 0x7FC PUSH2 0x7F4 PUSH2 0x7EE PUSH1 0x0 CALLDATASIZE PUSH2 0x7E6 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x77B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3A3 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x814 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x81F PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x828 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x86F PUSH2 0x85F PUSH2 0x85A PUSH2 0x852 PUSH2 0x84C PUSH1 0x0 CALLDATASIZE PUSH2 0x844 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x867 PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x877 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x882 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x88B PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x8B0 SWAP3 SWAP5 SWAP4 PUSH2 0x8A9 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8FD SWAP1 PUSH2 0x8BE PUSH2 0x17E JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x8F5 PUSH2 0x8EC PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x88E JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0xC4D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x908 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x924 SWAP1 PUSH2 0x90F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x930 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x942 DUP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x949 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x95B DUP3 PUSH2 0x939 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x977 JUMPI PUSH2 0x974 SWAP2 PUSH1 0x0 ADD PUSH2 0x94E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x984 PUSH2 0x1C7 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 PUSH2 0x997 DUP4 PUSH2 0xE30 JUMP JUMPDEST DUP3 PUSH2 0x9C2 PUSH32 0x1CF3B03A6CF19FA2BABA4DF148E9DCABEDEA7F8A5C07840E207E5C089BE95D3E SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x9CB PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x9D5 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH2 0x9E1 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x9F4 PUSH2 0x9EE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xA9E JUMPI JUMPDEST POP PUSH2 0xA07 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x20 PUSH2 0xA1D PUSH2 0xA18 PUSH2 0xA33 SWAP5 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xA2B PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xA43 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA99 JUMPI PUSH2 0xA61 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0xA69 JUMPI JUMPDEST POP SWAP1 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0xA8B SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xA92 JUMPI JUMPDEST PUSH2 0xA83 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xA5A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA79 JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x9FD JUMP JUMPDEST PUSH2 0xAAE PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xAB7 PUSH2 0xF85 JUMP JUMPDEST DUP1 PUSH2 0xAD3 PUSH2 0xACD PUSH2 0xAC8 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0xAE4 JUMPI POP PUSH2 0xAE1 PUSH2 0xF99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0xB05 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH2 0xB14 DUP4 PUSH2 0x102F JUMP JUMPDEST PUSH2 0xB1D DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0xB30 PUSH2 0xB2A PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xB54 JUMPI JUMPDEST POP PUSH2 0xB43 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xB4C SWAP2 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xB3F JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xBC0 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xBC9 DUP2 PUSH2 0xB65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xBE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xBB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xBED JUMPI JUMP JUMPDEST PUSH2 0xBF5 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC0B PUSH1 0x4 DUP3 ADD PUSH2 0xBCD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xC20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xFE JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xC42 PUSH2 0xC3D PUSH2 0xC49 SWAP3 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0xC2A JUMP JUMPDEST DUP3 SLOAD PUSH2 0xC0F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC8F SWAP1 PUSH2 0xC77 DUP2 PUSH2 0xC70 PUSH2 0xC6A PUSH2 0xC65 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ ISZERO PUSH2 0xBE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC89 PUSH2 0xC84 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7472616374000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720626561636F6E206973206E6F74206120636F6E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xCEC PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xCF5 DUP2 PUSH2 0xC91 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD0F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xCDF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xD19 JUMPI JUMP JUMPDEST PUSH2 0xD21 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xD37 PUSH1 0x4 DUP3 ADD PUSH2 0xCF9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x73206E6F74206120636F6E747261637400000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A20626561636F6E20696D706C656D656E746174696F6E2069 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xD96 PUSH1 0x30 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xD9F DUP2 PUSH2 0xD3B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xDB9 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xD89 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xDC3 JUMPI JUMP JUMPDEST PUSH2 0xDCB PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xDE1 PUSH1 0x4 DUP3 ADD PUSH2 0xDA3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDFC PUSH2 0xDF7 PUSH2 0xE01 SWAP3 PUSH2 0xDE5 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE2D PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0xDE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE6E SWAP1 PUSH2 0xE45 PUSH2 0xE40 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x20 PUSH2 0xE58 PUSH2 0xE53 DUP4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xE66 PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xE7E PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL DUP1 ISZERO PUSH2 0xEEE JUMPI PUSH2 0xEA1 PUSH2 0xEA6 SWAP2 PUSH2 0xEBE SWAP5 PUSH1 0x0 SWAP2 PUSH2 0xEC0 JUMPI JUMPDEST POP PUSH2 0x107F JUMP JUMPDEST PUSH2 0xDBC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB8 PUSH2 0xEB3 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEE1 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xEE7 JUMPI JUMPDEST PUSH2 0xED9 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xE9B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xECF JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xF4B PUSH1 0x27 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 PUSH2 0xF58 PUSH1 0x20 DUP4 ADD PUSH2 0xEF3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF62 PUSH2 0xF41 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF82 SWAP2 PUSH2 0xF72 PUSH2 0x54 JUMP JUMPDEST POP SWAP1 PUSH2 0xF7C PUSH2 0xF5A JUMP JUMPDEST SWAP2 PUSH2 0x10E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF8D PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xF96 PUSH2 0x1160 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFA1 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xFD5 PUSH1 0x20 PUSH2 0xFBF PUSH2 0xFBA PUSH2 0xFB5 PUSH2 0x1187 JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xFCD PUSH2 0x1C7 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xFE5 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x102A JUMPI PUSH1 0x0 SWAP2 PUSH2 0xFFC JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x101D SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1023 JUMPI JUMPDEST PUSH2 0x1015 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xFF8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x100B JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH2 0x1038 DUP2 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x1062 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x106B PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x1075 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1087 PUSH2 0x107A JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x109C PUSH2 0x1096 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10B2 PUSH2 0x10AD DUP4 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0x10D4 JUMPI PUSH2 0x10C8 RETURNDATASIZE PUSH2 0x10A0 JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0x10DC PUSH2 0x54 JUMP JUMPDEST SWAP1 PUSH2 0x10D2 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0x1112 SWAP5 PUSH2 0x10F3 PUSH2 0x54 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0x1108 PUSH2 0x10B7 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x130B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x112C PUSH2 0x1127 PUSH2 0x1131 SWAP3 PUSH2 0x1115 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x115D PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x1118 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1168 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1184 PUSH1 0x0 PUSH2 0x117E PUSH2 0x1179 PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x118F PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x11AB PUSH1 0x0 PUSH2 0x11A5 PUSH2 0x11A0 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1209 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x1212 DUP2 PUSH2 0x11AE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x122C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x11FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1236 JUMPI JUMP JUMPDEST PUSH2 0x123E PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1254 PUSH1 0x4 DUP3 ADD PUSH2 0x1216 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x1285 SWAP1 PUSH2 0x126D PUSH2 0x1268 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127F PUSH2 0x127A PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x12BC PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x12C5 DUP2 PUSH2 0x1287 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x12DF SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x12AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12E9 JUMPI JUMP JUMPDEST PUSH2 0x12F1 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1307 PUSH1 0x4 DUP3 ADD PUSH2 0x12C9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0x1316 PUSH2 0x54 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0x135C JUMPI POP PUSH2 0x1328 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x133B PUSH2 0x1335 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x1345 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1351 PUSH2 0x1356 SWAP2 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x12E2 JUMP JUMPDEST CODESIZE PUSH2 0x1341 JUMP JUMPDEST DUP3 PUSH2 0x13D5 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x137A JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x1369 JUMP JUMPDEST PUSH2 0x13AA PUSH2 0x13B3 PUSH1 0x20 SWAP4 PUSH2 0x13B8 SWAP4 PUSH2 0x13A1 DUP2 PUSH2 0x1362 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xB5C JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x1366 JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x13D2 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x138B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x13DF DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x13F2 PUSH2 0x13EC PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x1403 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0x1424 SWAP1 PUSH2 0x140F PUSH2 0x1C7 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x13BC JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB XOR SWAP10 0xE6 0x1F CODESIZE STATICCALL 0xA7 DUP12 0xFB 0xAB PUSH26 0xB8DC2FA613357C2FCE2699411F9FEE80B624365564736F6C6343 STOP ADDMOD SHL STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0xC6C1471F4CC9C60143B475E5 SWAP10 0xCE 0xDD 0x26 SHL PUSH22 0x3A87093C41A9601E41752618C964736F6C634300081B STOP CALLER PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x3AFE PUSH2 0x2C DUP3 CODECOPY PUSH2 0x3AFE SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0xBA7 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x15D JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x158 JUMPI DUP1 PUSH4 0x668D0BB EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0xBB310DE EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x149 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0x3474A4A6 EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x13A JUMPI DUP1 PUSH4 0x44004CC1 EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0x4782F779 EQ PUSH2 0x130 JUMPI DUP1 PUSH4 0x63ACC14D EQ PUSH2 0x12B JUMPI DUP1 PUSH4 0x8C17030F EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0x9D043A66 EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0xA971E842 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0xBAD43661 EQ PUSH2 0x108 JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0xFE JUMPI PUSH4 0xED4C2AC7 SUB PUSH2 0xE JUMPI PUSH2 0xB74 JUMP JUMPDEST PUSH2 0xB40 JUMP JUMPDEST PUSH2 0xB0B JUMP JUMPDEST PUSH2 0xAAF JUMP JUMPDEST PUSH2 0xA17 JUMP JUMPDEST PUSH2 0x9E2 JUMP JUMPDEST PUSH2 0x96F JUMP JUMPDEST PUSH2 0x8A4 JUMP JUMPDEST PUSH2 0x86E JUMP JUMPDEST PUSH2 0x7E3 JUMP JUMPDEST PUSH2 0x723 JUMP JUMPDEST PUSH2 0x6A8 JUMP JUMPDEST PUSH2 0x646 JUMP JUMPDEST PUSH2 0x5D7 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST PUSH2 0x499 JUMP JUMPDEST PUSH2 0x436 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST PUSH2 0x34B JUMP JUMPDEST PUSH2 0x1EF JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH2 0x18D DUP2 PUSH2 0x178 JUMP JUMPDEST SUB PUSH2 0x194 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x1A6 DUP3 PUSH2 0x184 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x1C2 JUMPI PUSH2 0x1BF SWAP2 PUSH1 0x0 ADD PUSH2 0x199 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x1D5 SWAP1 PUSH2 0x1C7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1ED SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x1CC JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x21F JUMPI PUSH2 0x21B PUSH2 0x20A PUSH2 0x205 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A8 JUMP JUMPDEST PUSH2 0xBB1 JUMP JUMPDEST PUSH2 0x212 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x1D9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x238 SWAP1 PUSH2 0x224 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x244 DUP2 PUSH2 0x22F JUMP JUMPDEST SUB PUSH2 0x24B JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x25D DUP3 PUSH2 0x23B JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26B DUP2 PUSH2 0x25F JUMP JUMPDEST SUB PUSH2 0x272 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x284 DUP3 PUSH2 0x262 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 DUP3 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x2CF JUMPI DUP2 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x2CA JUMPI PUSH1 0x20 ADD SWAP3 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH2 0x2C5 JUMPI JUMP JUMPDEST PUSH2 0x290 JUMP JUMPDEST PUSH2 0x28B JUMP JUMPDEST PUSH2 0x286 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0xA0 DUP2 DUP5 SUB SLT PUSH2 0x340 JUMPI PUSH2 0x2EE DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x250 JUMP JUMPDEST SWAP3 PUSH2 0x2FC DUP2 PUSH1 0x20 DUP5 ADD PUSH2 0x277 JUMP JUMPDEST SWAP3 PUSH2 0x30A DUP3 PUSH1 0x40 DUP6 ADD PUSH2 0x250 JUMP JUMPDEST SWAP3 PUSH2 0x318 DUP4 PUSH1 0x60 DUP4 ADD PUSH2 0x277 JUMP JUMPDEST SWAP3 PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x33B JUMPI PUSH2 0x337 SWAP3 ADD PUSH2 0x295 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x365 PUSH2 0x359 CALLDATASIZE PUSH1 0x4 PUSH2 0x2D4 JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0xD21 JUMP JUMPDEST PUSH2 0x36D PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x377 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x395 JUMPI PUSH2 0x392 SWAP2 PUSH1 0x0 ADD PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH2 0x3B2 PUSH2 0x3AD CALLDATASIZE PUSH1 0x4 PUSH2 0x37B JUMP JUMPDEST PUSH2 0xF69 JUMP JUMPDEST PUSH2 0x3BA PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x3C4 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3D9 DUP2 PUSH2 0x3CD JUMP JUMPDEST SUB PUSH2 0x3E0 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x3F2 DUP3 PUSH2 0x3D0 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x40E JUMPI PUSH2 0x40B SWAP2 PUSH1 0x0 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST PUSH2 0x41C SWAP1 PUSH2 0x3CD JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x434 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x413 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x466 JUMPI PUSH2 0x462 PUSH2 0x451 PUSH2 0x44C CALLDATASIZE PUSH1 0x4 PUSH2 0x3F4 JUMP JUMPDEST PUSH2 0xFC7 JUMP JUMPDEST PUSH2 0x459 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x420 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x494 JUMPI DUP1 PUSH2 0x488 PUSH2 0x491 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x4C8 JUMPI PUSH2 0x4B2 PUSH2 0x4AC CALLDATASIZE PUSH1 0x4 PUSH2 0x46B JUMP JUMPDEST SWAP1 PUSH2 0x1012 JUMP JUMPDEST PUSH2 0x4BA PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x4C4 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x4D8 JUMPI JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST PUSH2 0x4E6 SWAP1 PUSH2 0x25F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x4F3 SWAP1 PUSH2 0x22F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x50D SWAP1 PUSH2 0x4F7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x51A SWAP1 PUSH2 0x3CD JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0xA0 DUP1 PUSH2 0x58A SWAP4 PUSH2 0x538 PUSH1 0x0 DUP3 ADD MLOAD PUSH1 0x0 DUP7 ADD SWAP1 PUSH2 0x4DD JUMP JUMPDEST PUSH2 0x54A PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x4DD JUMP JUMPDEST PUSH2 0x55C PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP7 ADD SWAP1 PUSH2 0x4EA JUMP JUMPDEST PUSH2 0x56E PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP7 ADD SWAP1 PUSH2 0x504 JUMP JUMPDEST PUSH2 0x580 PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x80 DUP7 ADD SWAP1 PUSH2 0x504 JUMP JUMPDEST ADD MLOAD SWAP2 ADD SWAP1 PUSH2 0x511 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5A0 SWAP1 PUSH1 0x0 PUSH1 0xC0 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x51E JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x5D2 JUMPI PUSH2 0x5B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CD JUMP JUMPDEST PUSH2 0x5CE PUSH2 0x5BD PUSH2 0x122E JUMP JUMPDEST PUSH2 0x5C5 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x58C JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST CALLVALUE PUSH2 0x606 JUMPI PUSH2 0x5F0 PUSH2 0x5EA CALLDATASIZE PUSH1 0x4 PUSH2 0x46B JUMP JUMPDEST SWAP1 PUSH2 0x12F7 JUMP JUMPDEST PUSH2 0x5F8 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x602 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0x641 JUMPI PUSH2 0x63E PUSH2 0x627 DUP5 PUSH1 0x0 DUP6 ADD PUSH2 0x250 JUMP JUMPDEST SWAP4 PUSH2 0x635 DUP2 PUSH1 0x20 DUP7 ADD PUSH2 0x250 JUMP JUMPDEST SWAP4 PUSH1 0x40 ADD PUSH2 0x277 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x675 JUMPI PUSH2 0x65F PUSH2 0x659 CALLDATASIZE PUSH1 0x4 PUSH2 0x60B JUMP JUMPDEST SWAP2 PUSH2 0x1396 JUMP JUMPDEST PUSH2 0x667 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x671 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x6A3 JUMPI DUP1 PUSH2 0x697 PUSH2 0x6A0 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x250 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x277 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x6D7 JUMPI PUSH2 0x6C1 PUSH2 0x6BB CALLDATASIZE PUSH1 0x4 PUSH2 0x67A JUMP JUMPDEST SWAP1 PUSH2 0x149C JUMP JUMPDEST PUSH2 0x6C9 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x6D3 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH1 0x80 DUP2 DUP4 SUB SLT PUSH2 0x71E JUMPI PUSH2 0x6F3 DUP3 PUSH1 0x0 DUP4 ADD PUSH2 0x250 JUMP JUMPDEST SWAP3 PUSH2 0x71B PUSH2 0x704 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x250 JUMP JUMPDEST SWAP4 PUSH2 0x712 DUP2 PUSH1 0x40 DUP7 ADD PUSH2 0x250 JUMP JUMPDEST SWAP4 PUSH1 0x60 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x755 JUMPI PUSH2 0x73F PUSH2 0x736 CALLDATASIZE PUSH1 0x4 PUSH2 0x6DC JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP2 PUSH2 0x158A JUMP JUMPDEST PUSH2 0x747 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x751 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH2 0x763 DUP2 PUSH2 0x4F7 JUMP JUMPDEST SUB PUSH2 0x76A JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x77C DUP3 PUSH2 0x75A JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0xC0 DUP3 DUP5 SUB SLT PUSH2 0x7DE JUMPI PUSH2 0x797 DUP4 PUSH1 0x0 DUP5 ADD PUSH2 0x277 JUMP JUMPDEST SWAP3 PUSH2 0x7A5 DUP2 PUSH1 0x20 DUP6 ADD PUSH2 0x277 JUMP JUMPDEST SWAP3 PUSH2 0x7B3 DUP3 PUSH1 0x40 DUP4 ADD PUSH2 0x250 JUMP JUMPDEST SWAP3 PUSH2 0x7DB PUSH2 0x7C4 DUP5 PUSH1 0x60 DUP6 ADD PUSH2 0x76F JUMP JUMPDEST SWAP4 PUSH2 0x7D2 DUP2 PUSH1 0x80 DUP7 ADD PUSH2 0x76F JUMP JUMPDEST SWAP4 PUSH1 0xA0 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x818 JUMPI PUSH2 0x802 PUSH2 0x7F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x77E JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0x1A34 JUMP JUMPDEST PUSH2 0x80A PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x814 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x846 JUMPI DUP1 PUSH2 0x83A PUSH2 0x843 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x277 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST PUSH2 0x854 SWAP1 PUSH2 0x22F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x86C SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x89F JUMPI PUSH2 0x89B PUSH2 0x88A PUSH2 0x884 CALLDATASIZE PUSH1 0x4 PUSH2 0x81D JUMP JUMPDEST SWAP1 PUSH2 0x1A64 JUMP JUMPDEST PUSH2 0x892 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x858 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST CALLVALUE PUSH2 0x8D5 JUMPI PUSH2 0x8D1 PUSH2 0x8C0 PUSH2 0x8BA CALLDATASIZE PUSH1 0x4 PUSH2 0x46B JUMP JUMPDEST SWAP1 PUSH2 0x1AA4 JUMP JUMPDEST PUSH2 0x8C8 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x1D9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0xC0 SWAP2 SUB SLT PUSH2 0x8ED JUMPI SWAP1 JUMP JUMPDEST PUSH2 0x8DA JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xE0 SWAP2 SUB SLT PUSH2 0x900 JUMPI SWAP1 JUMP JUMPDEST PUSH2 0x8DA JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x96A JUMPI PUSH2 0x91D DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x250 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x965 JUMPI DUP4 PUSH2 0x93E SWAP2 DUP4 ADD PUSH2 0x8DF JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x960 JUMPI PUSH2 0x95D SWAP3 ADD PUSH2 0x8F2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0x9A0 JUMPI PUSH2 0x99C PUSH2 0x98B PUSH2 0x985 CALLDATASIZE PUSH1 0x4 PUSH2 0x905 JUMP JUMPDEST SWAP2 PUSH2 0x1DC7 JUMP JUMPDEST PUSH2 0x993 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x420 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x9C2 PUSH2 0x9BD PUSH2 0x9C7 SWAP3 PUSH2 0x9A5 JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH2 0x3CD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9D4 PUSH1 0x0 PUSH2 0x9AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9DF PUSH2 0x9CA JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0xA12 JUMPI PUSH2 0x9F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CD JUMP JUMPDEST PUSH2 0xA0E PUSH2 0x9FD PUSH2 0x9D7 JUMP JUMPDEST PUSH2 0xA05 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x420 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST CALLVALUE PUSH2 0xA47 JUMPI PUSH2 0xA27 CALLDATASIZE PUSH1 0x4 PUSH2 0x4CD JUMP JUMPDEST PUSH2 0xA43 PUSH2 0xA32 PUSH2 0x1E68 JUMP JUMPDEST PUSH2 0xA3A PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x858 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST SWAP2 PUSH1 0x80 DUP4 DUP4 SUB SLT PUSH2 0xAAA JUMPI PUSH2 0xA64 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xAA5 JUMPI PUSH2 0xA89 DUP5 PUSH2 0xAA2 SWAP5 DUP5 ADD PUSH2 0x295 JUMP JUMPDEST SWAP4 SWAP1 SWAP5 PUSH2 0xA99 DUP2 PUSH1 0x40 DUP7 ADD PUSH2 0x250 JUMP JUMPDEST SWAP4 PUSH1 0x60 ADD PUSH2 0x3E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST CALLVALUE PUSH2 0xAE3 JUMPI PUSH2 0xADF PUSH2 0xACE PUSH2 0xAC5 CALLDATASIZE PUSH1 0x4 PUSH2 0xA4C JUMP JUMPDEST SWAP4 SWAP3 SWAP1 SWAP3 PUSH2 0x1FA4 JUMP JUMPDEST PUSH2 0xAD6 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x1D9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH2 0xAF1 SWAP1 PUSH2 0x25F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xB09 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0xB3B JUMPI PUSH2 0xB37 PUSH2 0xB26 PUSH2 0xB21 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F4 JUMP JUMPDEST PUSH2 0x204C JUMP JUMPDEST PUSH2 0xB2E PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xAF5 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST CALLVALUE PUSH2 0xB6F JUMPI PUSH2 0xB59 PUSH2 0xB53 CALLDATASIZE PUSH1 0x4 PUSH2 0x46B JUMP JUMPDEST SWAP1 PUSH2 0x209C JUMP JUMPDEST PUSH2 0xB61 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0xB6B DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST CALLVALUE PUSH2 0xBA2 JUMPI PUSH2 0xB8C PUSH2 0xB87 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F4 JUMP JUMPDEST PUSH2 0x20D0 JUMP JUMPDEST PUSH2 0xB94 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0xB9E DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xBB9 PUSH2 0xBAC JUMP JUMPDEST POP DUP1 PUSH2 0xBD4 PUSH2 0xBCE PUSH4 0x5F05BB89 PUSH1 0xE1 SHL PUSH2 0x178 JUMP JUMPDEST SWAP2 PUSH2 0x178 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0xBF8 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0xBE8 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0xBF2 SWAP2 POP PUSH2 0x2115 JUMP JUMPDEST CODESIZE PUSH2 0xBE4 JUMP JUMPDEST POP PUSH2 0xC02 DUP2 PUSH2 0x20DB JUMP JUMPDEST PUSH2 0xBDC JUMP JUMPDEST PUSH1 0x8 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xC24 PUSH2 0xC29 SWAP2 PUSH2 0xC07 JUMP JUMPDEST PUSH2 0xC0D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC36 SWAP1 SLOAD PUSH2 0xC18 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC50 PUSH2 0xC4B PUSH2 0xC55 SWAP3 PUSH2 0x224 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x224 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC61 SWAP1 PUSH2 0xC3C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC6D SWAP1 PUSH2 0xC58 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC79 SWAP1 PUSH2 0xC3C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC85 SWAP1 PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0xCB7 SWAP1 PUSH2 0xC8D JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xCD1 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0xC97 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0xCE7 JUMPI JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0xD0E SWAP3 SWAP5 SWAP4 PUSH2 0xD07 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xD18 PUSH2 0x163 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP4 PUSH2 0xD34 SWAP4 SWAP6 SWAP2 SWAP6 DUP7 SWAP4 SWAP1 SWAP2 SWAP3 SWAP4 PUSH2 0x22B6 JUMP JUMPDEST PUSH2 0xD4E PUSH2 0xD49 PUSH2 0xD44 PUSH1 0x5 PUSH2 0xC2C JUMP JUMPDEST PUSH2 0xC64 JUMP JUMPDEST PUSH2 0xC7C JUMP JUMPDEST PUSH4 0x2E73E0FD DUP3 DUP5 SWAP3 DUP1 EXTCODESIZE ISZERO PUSH2 0xEAE JUMPI PUSH2 0xD7B PUSH1 0x0 DUP1 SWAP5 PUSH2 0xD86 PUSH2 0xD6F PUSH2 0x163 JUMP JUMPDEST SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH2 0xCD6 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH2 0xCEC JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 PUSH2 0xE81 JUMPI JUMPDEST POP ISZERO PUSH1 0x0 EQ PUSH2 0xE7C JUMPI PUSH1 0x1 PUSH2 0xDDE JUMPI JUMPDEST JUMPDEST SWAP1 PUSH32 0xF32D98590495EE51BACB93809409A188E7AB8268B70B4C969D9DA3A883C539F7 SWAP2 PUSH2 0xDD9 PUSH2 0xDD0 PUSH2 0x163 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0xCEC JUMP JUMPDEST SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 0xDF8 PUSH2 0xDF3 PUSH2 0xDEE PUSH1 0x5 PUSH2 0xC2C JUMP JUMPDEST PUSH2 0xC64 JUMP JUMPDEST PUSH2 0xC7C JUMP JUMPDEST PUSH4 0x40C10F19 DUP3 DUP5 SWAP3 DUP1 EXTCODESIZE ISZERO PUSH2 0xE77 JUMPI PUSH2 0xE25 PUSH1 0x0 DUP1 SWAP5 PUSH2 0xE30 PUSH2 0xE19 PUSH2 0x163 JUMP JUMPDEST SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP5 PUSH2 0xCD6 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH2 0xCEC JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xE72 JUMPI PUSH2 0xE45 JUMPI JUMPDEST POP PUSH2 0xDA1 JUMP JUMPDEST PUSH2 0xE65 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0xE6B JUMPI JUMPDEST PUSH2 0xE5D DUP2 DUP4 PUSH2 0xCAD JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xCDC JUMP JUMPDEST CODESIZE PUSH2 0xE3F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xE53 JUMP JUMPDEST PUSH2 0xD10 JUMP JUMPDEST PUSH2 0xC88 JUMP JUMPDEST PUSH2 0xDA2 JUMP JUMPDEST PUSH2 0xEA1 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0xEA7 JUMPI JUMPDEST PUSH2 0xE99 DUP2 DUP4 PUSH2 0xCAD JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xCDC JUMP JUMPDEST CODESIZE PUSH2 0xD91 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xE8F JUMP JUMPDEST PUSH2 0xC88 JUMP JUMPDEST PUSH32 0x70649EC320B507FEBAD3E8EF750E5F580B9AE32F9F50D4C7B121332C81971530 SWAP1 JUMP JUMPDEST PUSH2 0xEF0 SWAP1 PUSH2 0xEEB PUSH2 0xEE6 PUSH2 0xEB3 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0xF54 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEFB SWAP1 PUSH2 0xC3C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF07 SWAP1 PUSH2 0xEF2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF1B PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x9A8 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0xF2E SWAP1 PUSH2 0xEF2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF49 PUSH2 0xF44 PUSH2 0xF50 SWAP3 PUSH2 0xF25 JUMP JUMPDEST PUSH2 0xF31 JUMP JUMPDEST DUP3 SLOAD PUSH2 0xF0A JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xF60 PUSH2 0xF67 SWAP2 PUSH2 0xEFE JUMP JUMPDEST PUSH1 0x3 PUSH2 0xF34 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF72 SWAP1 PUSH2 0xED7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xF82 SWAP1 PUSH2 0x3CD JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF8F SWAP1 PUSH2 0xF79 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFB2 PUSH2 0xFB7 SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0xFA3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFC4 SWAP1 SLOAD PUSH2 0xFA6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0xFE0 PUSH2 0xFE6 SWAP3 PUSH2 0xFD8 PUSH2 0xF74 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xF85 JUMP JUMPDEST ADD PUSH2 0xFBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1004 SWAP2 PUSH2 0xFFF PUSH2 0xFFA DUP3 PUSH2 0xFC7 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0x1006 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1010 SWAP2 PUSH2 0x252E JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x101C SWAP2 PUSH2 0xFE9 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1031 PUSH2 0x102A PUSH2 0x163 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0xCAD JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x103D PUSH1 0xC0 PUSH2 0x101E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x105C PUSH2 0x1033 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP1 DUP1 DUP1 DUP1 DUP1 DUP8 PUSH2 0x106D PUSH2 0x1040 JUMP JUMPDEST DUP2 MSTORE ADD PUSH2 0x1078 PUSH2 0x1040 JUMP JUMPDEST DUP2 MSTORE ADD PUSH2 0x1083 PUSH2 0x1045 JUMP JUMPDEST DUP2 MSTORE ADD PUSH2 0x108E PUSH2 0x104A JUMP JUMPDEST DUP2 MSTORE ADD PUSH2 0x1099 PUSH2 0x104A JUMP JUMPDEST DUP2 MSTORE ADD PUSH2 0x10A4 PUSH2 0x104F JUMP JUMPDEST DUP2 MSTORE POP POP JUMP JUMPDEST PUSH2 0x10B2 PUSH2 0x1054 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x10C4 PUSH2 0x10C9 SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0x10B5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x10D6 SWAP1 SLOAD PUSH2 0x10B8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10E3 SWAP1 PUSH2 0x25F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x10F3 PUSH2 0x10F8 SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0xC0D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1105 SWAP1 SLOAD PUSH2 0x10E7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1112 SWAP1 PUSH2 0x22F JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0xA0 SHR SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1135 PUSH2 0x113A SWAP2 PUSH2 0x1116 JUMP JUMPDEST PUSH2 0x111C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1147 SWAP1 SLOAD PUSH2 0x1129 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1154 SWAP1 PUSH2 0x4F7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x1164 PUSH2 0x1169 SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0x111C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1176 SWAP1 SLOAD PUSH2 0x1158 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1183 SWAP1 PUSH2 0x3CD JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x1220 PUSH2 0x1217 PUSH1 0x4 PUSH2 0x1198 PUSH2 0x1033 JUMP JUMPDEST SWAP5 PUSH2 0x11B1 PUSH2 0x11A8 PUSH1 0x0 DUP4 ADD PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x0 DUP9 ADD PUSH2 0x10D9 JUMP JUMPDEST PUSH2 0x11C9 PUSH2 0x11C0 PUSH1 0x1 DUP4 ADD PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x20 DUP9 ADD PUSH2 0x10D9 JUMP JUMPDEST PUSH2 0x11E1 PUSH2 0x11D8 PUSH1 0x2 DUP4 ADD PUSH2 0x10FB JUMP JUMPDEST PUSH1 0x40 DUP9 ADD PUSH2 0x1108 JUMP JUMPDEST PUSH2 0x11F9 PUSH2 0x11F0 PUSH1 0x2 DUP4 ADD PUSH2 0x113D JUMP JUMPDEST PUSH1 0x60 DUP9 ADD PUSH2 0x114A JUMP JUMPDEST PUSH2 0x1211 PUSH2 0x1208 PUSH1 0x3 DUP4 ADD PUSH2 0x116C JUMP JUMPDEST PUSH1 0x80 DUP9 ADD PUSH2 0x114A JUMP JUMPDEST ADD PUSH2 0xFBA JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD PUSH2 0x1179 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x122B SWAP1 PUSH2 0x1187 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1236 PUSH2 0x10AA JUMP JUMPDEST POP PUSH2 0x1241 PUSH1 0x6 PUSH2 0x1222 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 SWAP2 PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x12A8 PUSH1 0x2F PUSH1 0x40 SWAP3 PUSH2 0x1244 JUMP JUMPDEST PUSH2 0x12B1 DUP2 PUSH2 0x124D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x12CB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x129B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12D5 JUMPI JUMP JUMPDEST PUSH2 0x12DD PUSH2 0x163 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x12F3 PUSH1 0x4 DUP3 ADD PUSH2 0x12B5 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x1324 SWAP2 PUSH2 0x131F DUP3 PUSH2 0x1319 PUSH2 0x1313 PUSH2 0x130E PUSH2 0x2558 JUMP JUMPDEST PUSH2 0x22F JUMP JUMPDEST SWAP2 PUSH2 0x22F JUMP JUMPDEST EQ PUSH2 0x12CE JUMP JUMPDEST PUSH2 0x2565 JUMP JUMPDEST JUMP JUMPDEST PUSH32 0x5D8E12C39142FF96D79D04D15D1BA1269E4FE57BB9D26F43523628B34BA108EC SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1365 SWAP3 SWAP2 PUSH2 0x1360 PUSH2 0x135B PUSH2 0x1326 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0x137F JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1370 SWAP1 PUSH2 0xC3C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x137C SWAP1 PUSH2 0x1367 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x138C PUSH2 0x1394 SWAP4 PUSH2 0x1373 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x25C0 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x13A1 SWAP3 SWAP2 PUSH2 0x134A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x13BD SWAP2 PUSH2 0x13B8 PUSH2 0x13B3 PUSH2 0x1326 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0x144A JUMP JUMPDEST JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x13D0 PUSH1 0x0 DUP1 SWAP3 PUSH2 0x13BF JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x13DD SWAP1 PUSH2 0x13C4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x13FE JUMPI PUSH2 0x13FA PUSH1 0x20 SWAP2 PUSH2 0xC8D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xC97 JUMP JUMPDEST SWAP1 PUSH2 0x1415 PUSH2 0x1410 DUP4 PUSH2 0x13E0 JUMP JUMPDEST PUSH2 0x101E JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0x143C JUMPI PUSH2 0x1430 RETURNDATASIZE PUSH2 0x1403 JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0x1444 PUSH2 0x141A JUMP JUMPDEST SWAP1 PUSH2 0x143A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1479 SWAP3 DUP2 SWAP3 SWAP1 PUSH2 0x145B PUSH2 0x163 JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x1466 DUP2 PUSH2 0x13D4 JUMP JUMPDEST SUB SWAP3 GAS CALL PUSH2 0x1472 PUSH2 0x141F JUMP JUMPDEST POP ISZERO PUSH2 0x1C7 JUMP JUMPDEST PUSH2 0x147F JUMPI JUMP JUMPDEST PUSH1 0x0 PUSH4 0x1D42C867 PUSH1 0xE2 SHL DUP2 MSTORE DUP1 PUSH2 0x1498 PUSH1 0x4 DUP3 ADD PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x14A6 SWAP2 PUSH2 0x13A3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x14BA PUSH2 0x14BF SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0x14A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x14CC SWAP1 SLOAD PUSH2 0x14AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x8 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x14E8 PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB SWAP2 PUSH2 0x14CF JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x14FB SWAP1 PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1516 PUSH2 0x1511 PUSH2 0x151D SWAP3 PUSH2 0x14F2 JUMP JUMPDEST PUSH2 0x14FE JUMP JUMPDEST DUP3 SLOAD PUSH2 0x14D5 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH32 0x4C02318D8C3AADC98CCF18AEBBF3126F651E0C3F6A1DE5FF8EDCF6724A2AD5C2 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1551 PUSH1 0xFF SWAP2 PUSH2 0x9A8 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x1564 SWAP1 PUSH2 0x1C7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x157F PUSH2 0x157A PUSH2 0x1586 SWAP3 PUSH2 0x155B JUMP JUMPDEST PUSH2 0x1567 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1545 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP3 SWAP1 SWAP3 PUSH2 0x1597 PUSH1 0x5 PUSH2 0x14C2 JUMP JUMPDEST PUSH2 0x15F5 JUMPI PUSH2 0x15A9 PUSH2 0x15E7 SWAP5 PUSH1 0x5 PUSH2 0x1501 JUMP JUMPDEST PUSH2 0x15BB PUSH2 0x15B4 PUSH2 0x9CA JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x252E JUMP JUMPDEST PUSH2 0x15CD PUSH2 0x15C6 PUSH2 0x1521 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x252E JUMP JUMPDEST PUSH2 0x15DF PUSH2 0x15D8 PUSH2 0x1326 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x252E JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x260B JUMP JUMPDEST PUSH2 0x15F3 PUSH1 0x1 PUSH1 0x5 PUSH2 0x156A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x160E PUSH1 0x4 DUP3 ADD PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x1630 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 PUSH2 0x162B PUSH2 0x1626 PUSH2 0x1521 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0x18FD JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1646 PUSH2 0x1641 PUSH2 0x164B SWAP3 PUSH2 0x4F7 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1662 PUSH2 0x165D PUSH2 0x1667 SWAP3 PUSH2 0x9A5 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1674 PUSH1 0xC0 PUSH2 0x101E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1681 SWAP1 MLOAD PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1691 PUSH1 0x0 NOT SWAP2 PUSH2 0x9A8 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x16AF PUSH2 0x16AA PUSH2 0x16B4 SWAP3 PUSH2 0x25F JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x16CF PUSH2 0x16CA PUSH2 0x16D6 SWAP3 PUSH2 0x169B JUMP JUMPDEST PUSH2 0x16B7 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1684 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x16E4 SWAP1 MLOAD PUSH2 0x22F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x16FC PUSH2 0x16F7 PUSH2 0x1703 SWAP3 PUSH2 0x14F2 JUMP JUMPDEST PUSH2 0x14FE JUMP JUMPDEST DUP3 SLOAD PUSH2 0xF0A JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1711 SWAP1 MLOAD PUSH2 0x4F7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xA0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1730 PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL SWAP2 PUSH2 0x1714 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x174E PUSH2 0x1749 PUSH2 0x1753 SWAP3 PUSH2 0x4F7 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x4F7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x176E PUSH2 0x1769 PUSH2 0x1775 SWAP3 PUSH2 0x173A JUMP JUMPDEST PUSH2 0x1756 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x171A JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 PUSH2 0x178C PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 PUSH2 0x9A8 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x17AB PUSH2 0x17A6 PUSH2 0x17B2 SWAP3 PUSH2 0x173A JUMP JUMPDEST PUSH2 0x1756 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1779 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x17C0 SWAP1 MLOAD PUSH2 0x3CD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17CC SWAP1 PUSH2 0xF9D JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x17E4 PUSH2 0x17DF PUSH2 0x17EB SWAP3 PUSH2 0xF79 JUMP JUMPDEST PUSH2 0x17C3 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1684 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 PUSH2 0x1880 PUSH1 0xA0 PUSH1 0x4 PUSH2 0x1886 SWAP5 PUSH2 0x1814 PUSH1 0x0 DUP3 ADD PUSH2 0x180E PUSH1 0x0 DUP9 ADD PUSH2 0x1677 JUMP JUMPDEST SWAP1 PUSH2 0x16BA JUMP JUMPDEST PUSH2 0x182D PUSH1 0x1 DUP3 ADD PUSH2 0x1827 PUSH1 0x20 DUP9 ADD PUSH2 0x1677 JUMP JUMPDEST SWAP1 PUSH2 0x16BA JUMP JUMPDEST PUSH2 0x1846 PUSH1 0x2 DUP3 ADD PUSH2 0x1840 PUSH1 0x40 DUP9 ADD PUSH2 0x16DA JUMP JUMPDEST SWAP1 PUSH2 0x16E7 JUMP JUMPDEST PUSH2 0x185F PUSH1 0x2 DUP3 ADD PUSH2 0x1859 PUSH1 0x60 DUP9 ADD PUSH2 0x1707 JUMP JUMPDEST SWAP1 PUSH2 0x1759 JUMP JUMPDEST PUSH2 0x1878 PUSH1 0x3 DUP3 ADD PUSH2 0x1872 PUSH1 0x80 DUP9 ADD PUSH2 0x1707 JUMP JUMPDEST SWAP1 PUSH2 0x1796 JUMP JUMPDEST ADD SWAP3 ADD PUSH2 0x17B6 JUMP JUMPDEST SWAP1 PUSH2 0x17CF JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1892 SWAP2 PUSH2 0x17EF JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x189D SWAP1 PUSH2 0x4F7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP5 PUSH2 0x18EA PUSH2 0x18F4 SWAP3 SWAP9 SWAP8 SWAP6 PUSH2 0x18E0 PUSH1 0xA0 SWAP7 PUSH2 0x18D6 PUSH2 0x18FB SWAP11 PUSH2 0x18CC PUSH1 0xC0 DUP11 ADD SWAP15 PUSH1 0x0 DUP12 ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST PUSH1 0x20 DUP10 ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST PUSH1 0x40 DUP8 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH1 0x60 DUP6 ADD SWAP1 PUSH2 0x1894 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0x1894 JUMP JUMPDEST ADD SWAP1 PUSH2 0x413 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP4 SWAP1 SWAP3 SWAP5 DUP2 PUSH2 0x1915 PUSH2 0x190F DUP9 PUSH2 0x4F7 JUMP JUMPDEST SWAP2 PUSH2 0x4F7 JUMP JUMPDEST LT DUP1 ISZERO PUSH2 0x1A19 JUMPI JUMPDEST PUSH2 0x19FC JUMPI DUP3 PUSH2 0x1935 PUSH2 0x192F PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ PUSH2 0x19DF JUMPI DUP3 PUSH2 0x19A1 PUSH2 0x19DA SWAP5 PUSH2 0x199A DUP8 PUSH2 0x1991 DUP11 PUSH2 0x1988 DUP14 PUSH2 0x197F DUP12 SWAP4 PUSH2 0x1976 DUP13 SWAP8 PUSH2 0x196D PUSH2 0x1963 PUSH2 0x166A JUMP JUMPDEST SWAP12 PUSH1 0x0 DUP14 ADD PUSH2 0x10D9 JUMP JUMPDEST PUSH1 0x20 DUP12 ADD PUSH2 0x10D9 JUMP JUMPDEST PUSH1 0x40 DUP10 ADD PUSH2 0x1108 JUMP JUMPDEST PUSH1 0x60 DUP8 ADD PUSH2 0x114A JUMP JUMPDEST PUSH1 0x80 DUP6 ADD PUSH2 0x114A JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD PUSH2 0x1179 JUMP JUMPDEST PUSH1 0x6 PUSH2 0x1888 JUMP JUMPDEST SWAP4 SWAP5 SWAP6 SWAP2 SWAP1 SWAP2 PUSH32 0xABEC13CA1773EED55D54D2F64593C33FA520EE45CAC73A162F13928A2EBEE233 SWAP7 PUSH2 0x19D1 PUSH2 0x163 JUMP JUMPDEST SWAP7 DUP8 SWAP7 DUP8 PUSH2 0x18A1 JUMP JUMPDEST SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH4 0x10BA94E9 PUSH1 0xE3 SHL DUP2 MSTORE DUP1 PUSH2 0x19F8 PUSH1 0x4 DUP3 ADD PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH4 0x10BA94E9 PUSH1 0xE3 SHL DUP2 MSTORE DUP1 PUSH2 0x1A15 PUSH1 0x4 DUP3 ADD PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP DUP2 PUSH2 0x1A2D PUSH2 0x1A27 TIMESTAMP PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x1632 JUMP JUMPDEST GT ISZERO PUSH2 0x191D JUMP JUMPDEST SWAP1 PUSH2 0x1A42 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 PUSH2 0x1612 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1A53 SWAP1 PUSH2 0xF79 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1A84 PUSH2 0x1A7F PUSH2 0x1A89 SWAP4 PUSH2 0x1A77 PUSH2 0x1A44 JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x1A49 JUMP JUMPDEST PUSH2 0x1A61 JUMP JUMPDEST PUSH2 0x265B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1A96 SWAP1 PUSH2 0x14F2 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x1ACB SWAP2 PUSH1 0x0 PUSH2 0x1AC0 PUSH2 0x1AC6 SWAP4 PUSH2 0x1AB9 PUSH2 0xBAC JUMP JUMPDEST POP DUP3 PUSH2 0xF85 JUMP JUMPDEST ADD PUSH2 0x1A8C JUMP JUMPDEST PUSH2 0x14C2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1AE5 PUSH2 0x1AEA SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0x1ACE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1AF7 SWAP1 SLOAD PUSH2 0x1AD9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B03 SWAP1 PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x1B13 DUP3 PUSH2 0x3D0 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x1B2F JUMPI PUSH2 0x1B2C SWAP2 PUSH1 0x0 ADD PUSH2 0x1B06 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST POP PUSH2 0x1B43 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP PUSH2 0x1B55 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x199 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B61 SWAP1 PUSH2 0x178 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x1B74 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x1BC7 JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1BC2 JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x1BBD JUMPI JUMP JUMPDEST PUSH2 0x1B7C JUMP JUMPDEST PUSH2 0x1B77 JUMP JUMPDEST PUSH2 0x1B81 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1BFB DUP2 PUSH2 0x1BF4 DUP2 PUSH2 0x1C00 SWAP6 PUSH2 0x1BCC JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x1BD5 JUMP JUMPDEST PUSH2 0xC8D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x1C1A JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x1B81 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x1C60 JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1C5B JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x1C56 JUMPI JUMP JUMPDEST PUSH2 0x1B7C JUMP JUMPDEST PUSH2 0x1B77 JUMP JUMPDEST PUSH2 0x1B81 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1C88 DUP2 PUSH2 0x1C81 DUP2 PUSH2 0x1C8D SWAP6 PUSH2 0x1C65 JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x1BD5 JUMP JUMPDEST PUSH2 0xC8D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST POP PUSH2 0x1CA0 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x76F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1CE1 SWAP1 PUSH1 0x20 PUSH2 0x1CD9 PUSH2 0x1CCF PUSH1 0x40 DUP5 ADD PUSH2 0x1CC1 PUSH1 0x0 DUP9 ADD DUP9 PUSH2 0x1C1F JUMP JUMPDEST SWAP1 DUP7 DUP4 SUB PUSH1 0x0 DUP9 ADD MSTORE PUSH2 0x1C6E JUMP JUMPDEST SWAP5 DUP3 DUP2 ADD SWAP1 PUSH2 0x1C91 JUMP JUMPDEST SWAP2 ADD SWAP1 PUSH2 0x504 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D8E SWAP2 PUSH2 0x1D80 PUSH2 0x1D75 PUSH1 0xC0 DUP4 ADD PUSH2 0x1D0C PUSH2 0x1D02 PUSH1 0x0 DUP8 ADD DUP8 PUSH2 0x1B34 JUMP JUMPDEST PUSH1 0x0 DUP7 ADD SWAP1 PUSH2 0x4EA JUMP JUMPDEST PUSH2 0x1D26 PUSH2 0x1D1C PUSH1 0x20 DUP8 ADD DUP8 PUSH2 0x1B46 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x1B58 JUMP JUMPDEST PUSH2 0x1D40 PUSH2 0x1D36 PUSH1 0x40 DUP8 ADD DUP8 PUSH2 0x1B65 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD SWAP1 PUSH2 0x511 JUMP JUMPDEST PUSH2 0x1D5A PUSH2 0x1D50 PUSH1 0x60 DUP8 ADD DUP8 PUSH2 0x1B65 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD SWAP1 PUSH2 0x511 JUMP JUMPDEST PUSH2 0x1D67 PUSH1 0x80 DUP7 ADD DUP7 PUSH2 0x1B86 JUMP JUMPDEST SWAP1 DUP6 DUP4 SUB PUSH1 0x80 DUP8 ADD MSTORE PUSH2 0x1BE1 JUMP JUMPDEST SWAP3 PUSH1 0xA0 DUP2 ADD SWAP1 PUSH2 0x1C04 JUMP JUMPDEST SWAP1 PUSH1 0xA0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x1CA3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP4 SWAP3 SWAP1 PUSH2 0x1DBD PUSH1 0x40 SWAP2 PUSH2 0x1DC5 SWAP5 PUSH2 0x1DB0 PUSH1 0x60 DUP10 ADD SWAP3 PUSH1 0x0 DUP11 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST DUP8 DUP3 SUB PUSH1 0x20 DUP10 ADD MSTORE PUSH2 0x1CE4 JUMP JUMPDEST SWAP5 ADD SWAP1 PUSH2 0x413 JUMP JUMPDEST JUMP JUMPDEST SWAP2 POP PUSH1 0x20 SWAP1 PUSH2 0x1DD4 PUSH2 0xF74 JUMP JUMPDEST POP PUSH2 0x1DE7 PUSH2 0x1DE2 PUSH1 0x3 PUSH2 0x1AED JUMP JUMPDEST PUSH2 0x1AFA JUMP JUMPDEST PUSH2 0x1E13 PUSH4 0x3808A90B SWAP5 SWAP3 SWAP5 PUSH2 0x1E1E PUSH2 0x1DFF PUSH1 0x4 PUSH2 0xFBA JUMP JUMPDEST PUSH2 0x1E07 PUSH2 0x163 JUMP JUMPDEST SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP6 PUSH2 0xCD6 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x1D91 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1E63 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1E35 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1E56 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1E5C JUMPI JUMPDEST PUSH2 0x1E4E DUP2 DUP4 PUSH2 0xCAD JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1B15 JUMP JUMPDEST CODESIZE PUSH2 0x1E31 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1E44 JUMP JUMPDEST PUSH2 0xD10 JUMP JUMPDEST PUSH2 0x1E70 PUSH2 0x1A44 JUMP JUMPDEST POP PUSH2 0x1E7B PUSH1 0x5 PUSH2 0xC2C JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1E88 SWAP1 PUSH2 0x14F2 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1EA0 SWAP1 PUSH2 0xF79 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x60 SHL SWAP1 JUMP JUMPDEST PUSH2 0x1EBD SWAP1 PUSH2 0x1EAE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1EC9 SWAP1 PUSH2 0x1EB4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1ED8 PUSH2 0x1EDD SWAP2 PUSH2 0x22F JUMP JUMPDEST PUSH2 0x1EC0 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1EF0 PUSH2 0x1EF5 SWAP2 PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x1EE1 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x14 DUP2 PUSH2 0x1F0C PUSH2 0x1F14 SWAP4 PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x1ECC JUMP JUMPDEST ADD DUP1 SWAP3 PUSH2 0x1EE4 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1F3A JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH2 0xC97 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x1F54 PUSH2 0x1F4F DUP3 PUSH2 0x1F22 JUMP JUMPDEST PUSH2 0x101E JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP3 MUL DUP4 ADD SWAP3 DUP2 DUP5 GT PUSH2 0x1F91 JUMPI SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x1F78 JUMPI POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 SWAP2 PUSH2 0x1F86 DUP5 DUP7 PUSH2 0x3E5 JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0x1F6B JUMP JUMPDEST PUSH2 0x290 JUMP JUMPDEST PUSH2 0x1FA1 SWAP2 CALLDATASIZE SWAP2 PUSH2 0x1F3F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0x1FB1 PUSH2 0xBAC JUMP JUMPDEST POP PUSH2 0x1FD9 PUSH2 0x1FD3 PUSH2 0x1FCE PUSH2 0x1FC7 PUSH1 0x2 DUP8 SWAP1 PUSH2 0x1E7E JUMP JUMPDEST DUP6 SWAP1 PUSH2 0x1E96 JUMP JUMPDEST PUSH2 0x14C2 JUMP JUMPDEST ISZERO PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 PUSH2 0x1FE8 JUMPI JUMPDEST POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x203D SWAP6 POP SWAP1 PUSH2 0x201F PUSH2 0x2038 SWAP4 SWAP3 SWAP6 SWAP3 SWAP5 PUSH2 0x2010 PUSH2 0x2004 PUSH2 0x163 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD PUSH2 0x1EF9 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0xCAD JUMP JUMPDEST PUSH2 0x2031 PUSH2 0x202B DUP3 PUSH2 0x1F1E JUMP JUMPDEST SWAP2 PUSH2 0x1F18 JUMP JUMPDEST KECCAK256 SWAP4 PUSH2 0x1F96 JUMP JUMPDEST PUSH2 0x2694 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 PUSH2 0x1FE0 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x206B PUSH2 0x2066 PUSH2 0x2070 SWAP3 PUSH2 0x205E PUSH2 0x2047 JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x1A49 JUMP JUMPDEST PUSH2 0x1A61 JUMP JUMPDEST PUSH2 0x26BE JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x208E SWAP2 PUSH2 0x2089 PUSH2 0x2084 DUP3 PUSH2 0xFC7 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0x2090 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x209A SWAP2 PUSH2 0x2565 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x20A6 SWAP2 PUSH2 0x2073 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x20C1 SWAP1 PUSH2 0x20BC PUSH2 0x20B7 PUSH2 0xEB3 JUMP JUMPDEST PUSH2 0x251A JUMP JUMPDEST PUSH2 0x20C3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x20CE SWAP1 PUSH1 0x4 PUSH2 0x17CF JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x20D9 SWAP1 PUSH2 0x20A8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x20E3 PUSH2 0xBAC JUMP JUMPDEST POP DUP1 PUSH2 0x20F8 PUSH2 0x20F2 PUSH1 0x0 PUSH2 0x178 JUMP JUMPDEST SWAP2 PUSH2 0x178 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x2105 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x210F SWAP2 POP PUSH2 0x26DE JUMP JUMPDEST CODESIZE PUSH2 0x2101 JUMP JUMPDEST PUSH2 0x211D PUSH2 0xBAC JUMP JUMPDEST POP PUSH2 0x2127 DUP2 PUSH2 0x26DE JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x2133 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x213D SWAP2 POP PUSH2 0x271E JUMP JUMPDEST CODESIZE PUSH2 0x212F JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x2165 SWAP3 SWAP5 SWAP4 PUSH2 0x215E PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x218C PUSH2 0x2192 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x25F JUMP JUMPDEST SWAP3 PUSH2 0x25F JUMP JUMPDEST DUP3 SUB SWAP2 DUP3 GT PUSH2 0x219D JUMPI JUMP JUMPDEST PUSH2 0x2167 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x21B6 PUSH2 0x21BC SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x25F JUMP JUMPDEST SWAP3 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x21C8 DUP4 DUP3 MUL PUSH2 0x25F JUMP JUMPDEST SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x21D7 JUMPI JUMP JUMPDEST PUSH2 0x2167 JUMP JUMPDEST PUSH2 0x21E5 SWAP1 PUSH2 0x164E JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH2 0x2213 PUSH2 0x221A SWAP5 SWAP7 SWAP6 SWAP4 SWAP7 PUSH2 0x2209 PUSH1 0x60 DUP5 ADD SWAP9 PUSH1 0x0 DUP6 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST ADD SWAP1 PUSH2 0x21DC JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH2 0x2246 PUSH2 0x224D SWAP5 SWAP7 SWAP6 SWAP4 SWAP7 PUSH2 0x223C PUSH1 0x60 DUP5 ADD SWAP9 PUSH1 0x0 DUP6 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2263 PUSH2 0x225E PUSH2 0x2268 SWAP3 PUSH2 0x9A5 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x224 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2274 SWAP1 PUSH2 0x224F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2280 SWAP1 PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH2 0x22AD PUSH2 0x22B4 SWAP5 SWAP7 SWAP6 SWAP4 SWAP7 PUSH2 0x22A3 PUSH1 0x60 DUP5 ADD SWAP9 PUSH1 0x0 DUP6 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x21DC JUMP JUMPDEST ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP4 SWAP3 SWAP1 SWAP3 PUSH2 0x22F0 PUSH2 0x22CB PUSH1 0x2 PUSH1 0x6 ADD PUSH2 0x113D JUMP JUMPDEST PUSH2 0x22EA PUSH2 0x22E4 PUSH2 0x22DE PUSH1 0x3 PUSH1 0x6 ADD PUSH2 0x116C JUMP JUMPDEST SWAP3 PUSH2 0x1632 JUMP JUMPDEST SWAP2 PUSH2 0x1632 JUMP JUMPDEST SWAP1 PUSH2 0x275E JUMP JUMPDEST PUSH2 0x24FD JUMPI PUSH2 0x2301 PUSH1 0x0 PUSH1 0x6 ADD PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x2313 PUSH2 0x230D DUP6 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST LT PUSH2 0x24D0 JUMPI DUP3 SWAP2 PUSH2 0x2361 SWAP2 PUSH2 0x2342 PUSH2 0x2373 SWAP6 PUSH2 0x233C PUSH1 0x0 PUSH1 0x6 ADD SWAP2 PUSH2 0x2337 DUP4 PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x217D JUMP JUMPDEST SWAP1 PUSH2 0x16BA JUMP JUMPDEST PUSH2 0x234F PUSH1 0x4 PUSH1 0x6 ADD PUSH2 0xFBA JUMP JUMPDEST SWAP2 SWAP1 CALLER SWAP2 PUSH2 0x235B PUSH2 0x21A2 JUMP JUMPDEST SWAP4 PUSH2 0x2855 JUMP JUMPDEST PUSH2 0x236E PUSH1 0x1 PUSH1 0x6 ADD PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x21A7 JUMP JUMPDEST SWAP2 DUP2 PUSH2 0x2393 PUSH2 0x238D PUSH2 0x2388 PUSH1 0x2 PUSH1 0x6 ADD PUSH2 0x10FB JUMP JUMPDEST PUSH2 0x22F JUMP JUMPDEST SWAP2 PUSH2 0x22F JUMP JUMPDEST SUB PUSH2 0x24A2 JUMPI DUP1 PUSH2 0x23AB PUSH2 0x23A5 DUP6 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST LT PUSH2 0x247F JUMPI POP DUP1 PUSH2 0x23CD PUSH2 0x23C7 PUSH2 0x23C2 PUSH1 0x0 PUSH2 0x226B JUMP JUMPDEST PUSH2 0x22F JUMP JUMPDEST SWAP2 PUSH2 0x22F JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x2412 JUMPI CALLVALUE PUSH2 0x23E8 PUSH2 0x23E2 DUP5 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST SUB PUSH2 0x23F2 JUMPI POP POP JUMPDEST JUMP JUMPDEST PUSH2 0x240E CALLVALUE PUSH1 0x0 SWAP4 DUP5 SWAP4 PUSH4 0xF55E7DF PUSH1 0xE1 SHL DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x221C JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 CALLVALUE PUSH2 0x2427 PUSH2 0x2421 PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x245C JUMPI PUSH2 0x2439 PUSH1 0x0 PUSH2 0x226B JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH2 0x2458 CALLVALUE PUSH1 0x0 SWAP4 DUP5 SWAP4 PUSH4 0xF55E7DF PUSH1 0xE1 SHL DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x2283 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x2468 PUSH2 0x247A SWAP3 PUSH2 0x1373 JUMP JUMPDEST SWAP1 CALLER PUSH2 0x2473 ADDRESS PUSH2 0x2277 JUMP JUMPDEST SWAP2 SWAP3 PUSH2 0x2928 JUMP JUMPDEST PUSH2 0x23F0 JUMP JUMPDEST DUP3 PUSH2 0x249E DUP4 SWAP2 SWAP3 PUSH1 0x0 SWAP4 DUP5 SWAP4 PUSH4 0xF55E7DF PUSH1 0xE1 SHL DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x221C JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST DUP3 PUSH2 0x24B0 PUSH1 0x2 PUSH1 0x6 ADD PUSH2 0x10FB JUMP JUMPDEST PUSH2 0x24CC PUSH1 0x0 DUP1 SWAP4 DUP5 SWAP4 PUSH4 0xF55E7DF PUSH1 0xE1 SHL DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x21E9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST DUP3 PUSH2 0x24DE PUSH1 0x0 PUSH1 0x6 ADD PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x24F9 PUSH1 0x0 SWAP3 DUP4 SWAP3 PUSH4 0x9E4C4461 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH2 0x2143 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH4 0xFE219DD PUSH1 0xE2 SHL DUP2 MSTORE DUP1 PUSH2 0x2516 PUSH1 0x4 DUP3 ADD PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x252C SWAP1 PUSH2 0x2526 PUSH2 0x2558 JUMP JUMPDEST SWAP1 PUSH2 0x2AE4 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2550 PUSH2 0x254B PUSH2 0x2555 SWAP4 PUSH2 0x2544 DUP2 DUP6 SWAP1 PUSH2 0x2B7D JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1A49 JUMP JUMPDEST PUSH2 0x1A61 JUMP JUMPDEST PUSH2 0x2C63 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x2560 PUSH2 0x1A44 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2587 PUSH2 0x2582 PUSH2 0x258C SWAP4 PUSH2 0x257B DUP2 DUP6 SWAP1 PUSH2 0x2C9E JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1A49 JUMP JUMPDEST PUSH2 0x1A61 JUMP JUMPDEST PUSH2 0x2D37 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x2598 SWAP1 PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x25B8 PUSH2 0x25B3 PUSH2 0x25BD SWAP3 PUSH2 0x259B JUMP JUMPDEST PUSH2 0xCD6 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x2604 PUSH1 0x4 SWAP3 PUSH2 0x25F5 PUSH2 0x2609 SWAP6 SWAP4 PUSH2 0x25DC PUSH4 0xA9059CBB PUSH2 0x25A4 JUMP JUMPDEST SWAP3 PUSH2 0x25E5 PUSH2 0x163 JUMP JUMPDEST SWAP7 DUP8 SWAP5 PUSH1 0x20 DUP7 ADD SWAP1 DUP2 MSTORE ADD PUSH2 0xCEC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP4 PUSH2 0xCAD JUMP JUMPDEST PUSH2 0x2EE5 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x2621 PUSH2 0x2626 SWAP4 SWAP3 PUSH2 0x261C PUSH2 0xEB3 JUMP JUMPDEST PUSH2 0x252E JUMP JUMPDEST PUSH2 0x2F52 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2637 PUSH2 0x263C SWAP2 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0x169B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2653 PUSH2 0x264E PUSH2 0x2658 SWAP3 PUSH2 0x25F JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x224 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2687 PUSH2 0x2682 PUSH2 0x2691 SWAP4 PUSH2 0x267D PUSH1 0x0 PUSH2 0x268C SWAP6 PUSH2 0x2676 PUSH2 0x1A44 JUMP JUMPDEST POP ADD PUSH2 0x2628 JUMP JUMPDEST PUSH2 0x2FEA JUMP JUMPDEST PUSH2 0x262B JUMP JUMPDEST PUSH2 0x263F JUMP JUMPDEST PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26AE PUSH2 0x26BA SWAP3 SWAP4 PUSH2 0x26B4 SWAP3 PUSH2 0x26A8 PUSH2 0xBAC JUMP JUMPDEST POP PUSH2 0x303F JUMP JUMPDEST SWAP3 PUSH2 0x3CD JUMP JUMPDEST SWAP2 PUSH2 0x3CD JUMP JUMPDEST EQ SWAP1 JUMP JUMPDEST PUSH2 0x26D6 PUSH1 0x0 PUSH2 0x26DB SWAP3 PUSH2 0x26CF PUSH2 0x2047 JUMP JUMPDEST POP ADD PUSH2 0x2628 JUMP JUMPDEST PUSH2 0x30AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26E6 PUSH2 0xBAC JUMP JUMPDEST POP DUP1 PUSH2 0x2701 PUSH2 0x26FB PUSH4 0x5A05180F PUSH1 0xE0 SHL PUSH2 0x178 JUMP JUMPDEST SWAP2 PUSH2 0x178 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x270E JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2718 SWAP2 POP PUSH2 0x30C2 JUMP JUMPDEST CODESIZE PUSH2 0x270A JUMP JUMPDEST PUSH2 0x2726 PUSH2 0xBAC JUMP JUMPDEST POP DUP1 PUSH2 0x2741 PUSH2 0x273B PUSH4 0x4E821D33 PUSH1 0xE1 SHL PUSH2 0x178 JUMP JUMPDEST SWAP2 PUSH2 0x178 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x274E JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2758 SWAP2 POP PUSH2 0x20DB JUMP JUMPDEST CODESIZE PUSH2 0x274A JUMP JUMPDEST PUSH2 0x2766 PUSH2 0xBAC JUMP JUMPDEST POP DUP2 PUSH2 0x277B PUSH2 0x2775 PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x27AE JUMPI JUMPDEST POP SWAP1 DUP2 ISZERO PUSH2 0x2791 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x27A6 PUSH2 0x27A0 TIMESTAMP SWAP3 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST LT ISZERO CODESIZE PUSH2 0x278D JUMP JUMPDEST SWAP1 POP PUSH2 0x27C3 PUSH2 0x27BD TIMESTAMP SWAP3 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST LT CODESIZE PUSH2 0x2784 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 CALLDATACOPY JUMP JUMPDEST SWAP1 SWAP2 DUP3 PUSH2 0x27E8 SWAP2 PUSH2 0x27CA JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP1 PUSH1 0xFB SHL SUB DUP2 GT PUSH2 0x280B JUMPI DUP3 SWAP2 PUSH1 0x20 PUSH2 0x2807 SWAP3 MUL SWAP4 DUP5 SWAP2 PUSH2 0x27D8 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x27D3 JUMP JUMPDEST SWAP1 PUSH2 0x2841 PUSH2 0x284C SWAP2 PUSH2 0x2853 SWAP7 SWAP9 SWAP8 SWAP6 PUSH1 0x60 SWAP6 PUSH2 0x2834 PUSH1 0x80 DUP8 ADD SWAP4 PUSH1 0x0 DUP9 ADD SWAP1 PUSH2 0x413 JUMP JUMPDEST DUP6 DUP4 SUB PUSH1 0x20 DUP8 ADD MSTORE PUSH2 0x27DC JUMP JUMPDEST SWAP7 PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST ADD SWAP1 PUSH2 0x413 JUMP JUMPDEST JUMP JUMPDEST SWAP3 SWAP4 DUP4 PUSH2 0x2873 PUSH2 0x286D PUSH2 0x2868 PUSH1 0x0 PUSH2 0x9AE JUMP JUMPDEST PUSH2 0x3CD JUMP JUMPDEST SWAP2 PUSH2 0x3CD JUMP JUMPDEST SUB PUSH2 0x2880 JUMPI JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2898 PUSH2 0x2892 DUP6 DUP5 DUP7 DUP10 SWAP2 DUP7 SWAP4 PUSH2 0x1FA4 JUMP JUMPDEST ISZERO PUSH2 0x1C7 JUMP JUMPDEST PUSH2 0x28C8 JUMPI POP POP POP SWAP1 PUSH2 0x28B9 PUSH2 0x28BE SWAP3 PUSH2 0x28B4 PUSH1 0x1 SWAP4 PUSH1 0x2 PUSH2 0x1E7E JUMP JUMPDEST PUSH2 0x1E96 JUMP JUMPDEST PUSH2 0x156A JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 DUP1 PUSH2 0x2879 JUMP JUMPDEST DUP5 PUSH2 0x28F1 SWAP2 DUP6 SWAP4 SWAP5 SWAP2 SWAP1 SWAP2 PUSH2 0x28DB PUSH2 0x163 JUMP JUMPDEST SWAP6 DUP7 SWAP6 PUSH4 0x4CB8CD5 PUSH1 0xE3 SHL DUP8 MSTORE PUSH1 0x4 DUP8 ADD PUSH2 0x2810 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 SWAP1 PUSH2 0x291F PUSH2 0x2926 SWAP5 SWAP7 SWAP6 SWAP4 SWAP7 PUSH2 0x2915 PUSH1 0x60 DUP5 ADD SWAP9 PUSH1 0x0 DUP6 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x84B JUMP JUMPDEST ADD SWAP1 PUSH2 0xAE8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2975 SWAP4 SWAP2 PUSH2 0x2961 PUSH1 0x4 SWAP5 PUSH2 0x2970 SWAP4 SWAP5 PUSH2 0x2945 PUSH4 0x23B872DD PUSH2 0x25A4 JUMP JUMPDEST SWAP4 SWAP2 SWAP1 SWAP2 PUSH2 0x2951 PUSH2 0x163 JUMP JUMPDEST SWAP8 DUP9 SWAP6 PUSH1 0x20 DUP8 ADD SWAP1 DUP2 MSTORE ADD PUSH2 0x28F5 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP4 PUSH2 0xCAD JUMP JUMPDEST PUSH2 0x2EE5 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x298E PUSH2 0x2989 PUSH2 0x2993 SWAP3 PUSH2 0x2977 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x29CF PUSH1 0x17 DUP1 SWAP3 PUSH2 0x2996 JUMP JUMPDEST PUSH2 0x29D8 DUP2 PUSH2 0x299B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x29F4 JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x29E3 JUMP JUMPDEST PUSH2 0x2A2A PUSH2 0x2A21 SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x2A18 DUP2 PUSH2 0x29DC JUMP JUMPDEST SWAP5 DUP6 DUP1 SWAP4 PUSH2 0x2996 JUMP JUMPDEST SWAP4 DUP5 SWAP2 ADD PUSH2 0x29E0 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2A62 PUSH1 0x11 DUP1 SWAP3 PUSH2 0x2996 JUMP JUMPDEST PUSH2 0x2A6B DUP2 PUSH2 0x2A2E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2A89 PUSH2 0x2A94 SWAP4 SWAP3 PUSH2 0x2A83 PUSH2 0x2A8E SWAP4 PUSH2 0x29C3 JUMP JUMPDEST SWAP1 PUSH2 0x2A05 JUMP JUMPDEST PUSH2 0x2A56 JUMP JUMPDEST SWAP1 PUSH2 0x2A05 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2AB9 PUSH2 0x2AC2 PUSH1 0x20 SWAP4 PUSH2 0x2AC7 SWAP4 PUSH2 0x2AB0 DUP2 PUSH2 0x29DC JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x1244 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x29E0 JUMP JUMPDEST PUSH2 0xC8D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2AE1 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x2A9A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2AF9 PUSH2 0x2AF3 DUP4 DUP4 SWAP1 PUSH2 0x1AA4 JUMP JUMPDEST ISZERO PUSH2 0x1C7 JUMP JUMPDEST PUSH2 0x2B01 JUMPI POP POP JUMP JUMPDEST PUSH2 0x2B79 SWAP2 PUSH2 0x2B57 PUSH2 0x2B30 PUSH2 0x2B20 PUSH2 0x2B1A PUSH2 0x2B5C SWAP6 PUSH2 0x3155 JUMP JUMPDEST SWAP4 PUSH2 0x262B JUMP JUMPDEST PUSH2 0x2B2A PUSH1 0x20 PUSH2 0x297A JUMP JUMPDEST SWAP1 PUSH2 0x3378 JUMP JUMPDEST SWAP2 PUSH2 0x2B48 PUSH2 0x2B3C PUSH2 0x163 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD PUSH2 0x2A6F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0xCAD JUMP JUMPDEST PUSH2 0x2A97 JUMP JUMPDEST PUSH2 0x2B64 PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x2ACB JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x2B91 PUSH2 0x2B8B DUP3 DUP5 SWAP1 PUSH2 0x1AA4 JUMP JUMPDEST ISZERO PUSH2 0x1C7 JUMP JUMPDEST PUSH2 0x2B9A JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x2BBC PUSH1 0x1 PUSH2 0x2BB7 PUSH1 0x0 PUSH2 0x2BAF DUP2 DUP7 SWAP1 PUSH2 0xF85 JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x1A8C JUMP JUMPDEST PUSH2 0x156A JUMP JUMPDEST SWAP1 PUSH2 0x2BC5 PUSH2 0x2558 JUMP JUMPDEST SWAP1 PUSH2 0x2C02 PUSH2 0x2BFC PUSH2 0x2BF6 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP6 PUSH2 0xF79 JUMP JUMPDEST SWAP3 PUSH2 0x14F2 JUMP JUMPDEST SWAP3 PUSH2 0x14F2 JUMP JUMPDEST SWAP3 PUSH2 0x2C0B PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x2C15 DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x2B96 JUMP JUMPDEST PUSH2 0x2C28 SWAP1 PUSH2 0xC3C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2C3F PUSH2 0x2C3A PUSH2 0x2C44 SWAP3 PUSH2 0x224 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2C5B PUSH2 0x2C56 PUSH2 0x2C60 SWAP3 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST PUSH2 0x3CD JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2C96 PUSH2 0x2C90 PUSH2 0x2C8B PUSH2 0x2C86 PUSH1 0x0 PUSH2 0x2C9B SWAP7 PUSH2 0x2C7E PUSH2 0xBAC JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x2C1F JUMP JUMPDEST PUSH2 0x2C2B JUMP JUMPDEST PUSH2 0x2C47 JUMP JUMPDEST SWAP2 PUSH2 0x2628 JUMP JUMPDEST PUSH2 0x3598 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2CA9 DUP2 DUP4 SWAP1 PUSH2 0x1AA4 JUMP JUMPDEST PUSH2 0x2CB2 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x2CD4 PUSH1 0x0 PUSH2 0x2CCF PUSH1 0x0 PUSH2 0x2CC7 DUP2 DUP7 SWAP1 PUSH2 0xF85 JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x1A8C JUMP JUMPDEST PUSH2 0x156A JUMP JUMPDEST SWAP1 PUSH2 0x2CDD PUSH2 0x2558 JUMP JUMPDEST SWAP1 PUSH2 0x2D1A PUSH2 0x2D14 PUSH2 0x2D0E PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP6 PUSH2 0xF79 JUMP JUMPDEST SWAP3 PUSH2 0x14F2 JUMP JUMPDEST SWAP3 PUSH2 0x14F2 JUMP JUMPDEST SWAP3 PUSH2 0x2D23 PUSH2 0x163 JUMP JUMPDEST DUP1 PUSH2 0x2D2D DUP2 PUSH2 0x345 JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x2CAE JUMP JUMPDEST SWAP1 PUSH2 0x2D6A PUSH2 0x2D64 PUSH2 0x2D5F PUSH2 0x2D5A PUSH1 0x0 PUSH2 0x2D6F SWAP7 PUSH2 0x2D52 PUSH2 0xBAC JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x2C1F JUMP JUMPDEST PUSH2 0x2C2B JUMP JUMPDEST PUSH2 0x2C47 JUMP JUMPDEST SWAP2 PUSH2 0x2628 JUMP JUMPDEST PUSH2 0x368E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2D90 JUMPI PUSH2 0x2D8C PUSH1 0x20 SWAP2 PUSH2 0xC8D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xC97 JUMP JUMPDEST SWAP1 PUSH2 0x2DA7 PUSH2 0x2DA2 DUP4 PUSH2 0x2D72 JUMP JUMPDEST PUSH2 0x101E JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2DDE PUSH1 0x20 PUSH2 0x2D95 JUMP JUMPDEST SWAP1 PUSH2 0x2DEB PUSH1 0x20 DUP4 ADD PUSH2 0x2DAC JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2DF5 PUSH2 0x2DD4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2E01 DUP2 PUSH2 0x1C7 JUMP JUMPDEST SUB PUSH2 0x2E08 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x2E1A DUP3 PUSH2 0x2DF8 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x2E36 JUMPI PUSH2 0x2E33 SWAP2 PUSH1 0x0 ADD PUSH2 0x2E0D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16E JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 SWAP2 PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x2E96 PUSH1 0x2A PUSH1 0x40 SWAP3 PUSH2 0x1244 JUMP JUMPDEST PUSH2 0x2E9F DUP2 PUSH2 0x2E3B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2EB9 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2E89 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2EC3 JUMPI JUMP JUMPDEST PUSH2 0x2ECB PUSH2 0x163 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2EE1 PUSH1 0x4 DUP3 ADD PUSH2 0x2EA3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x2F2F SWAP2 PUSH2 0x2EF5 PUSH2 0x2F04 SWAP3 PUSH2 0x258F JUMP JUMPDEST SWAP1 PUSH2 0x2EFE PUSH2 0x2DED JUMP JUMPDEST SWAP2 PUSH2 0x3798 JUMP JUMPDEST PUSH2 0x2F0D DUP2 PUSH2 0x1F1E JUMP JUMPDEST PUSH2 0x2F20 PUSH2 0x2F1A PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x2F31 JUMPI JUMPDEST POP PUSH2 0x2EBC JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2F4C SWAP2 POP PUSH1 0x20 PUSH2 0x2F41 DUP3 PUSH2 0x1F1E JUMP JUMPDEST DUP2 DUP4 ADD ADD SWAP2 ADD PUSH2 0x2E1C JUMP JUMPDEST CODESIZE PUSH2 0x2F29 JUMP JUMPDEST SWAP1 PUSH2 0x2F69 PUSH2 0x2F62 PUSH2 0x2F70 SWAP4 PUSH2 0xEFE JUMP JUMPDEST PUSH1 0x3 PUSH2 0xF34 JUMP JUMPDEST PUSH1 0x4 PUSH2 0x17CF JUMP JUMPDEST JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x2FA0 DUP2 PUSH2 0x2F88 JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x2FBB JUMPI PUSH2 0x2FB2 PUSH1 0x1 SWAP2 PUSH2 0x2F8C JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2F72 JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST PUSH2 0x2FD4 SWAP1 PUSH1 0x8 PUSH2 0x2FD9 SWAP4 MUL PUSH2 0x2FC0 JUMP JUMPDEST PUSH2 0xFA3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2FE7 SWAP2 SLOAD PUSH2 0x2FC4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3009 SWAP2 PUSH1 0x0 PUSH2 0x3003 SWAP3 PUSH2 0x2FFC PUSH2 0xF74 JUMP JUMPDEST POP ADD PUSH2 0x2F97 JUMP JUMPDEST SWAP1 PUSH2 0x2FDC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x3018 SWAP2 ADD PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3029 DUP3 PUSH2 0x301B JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x303A JUMPI PUSH1 0x20 DUP1 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x2F72 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3049 PUSH2 0xF74 JUMP JUMPDEST POP PUSH2 0x3054 PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP1 JUMPDEST DUP2 PUSH2 0x3071 PUSH2 0x306B PUSH2 0x3066 DUP8 PUSH2 0x301B JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST LT ISZERO PUSH2 0x30A3 JUMPI PUSH2 0x3097 PUSH2 0x309D SWAP2 PUSH2 0x3091 PUSH2 0x308C DUP8 DUP7 SWAP1 PUSH2 0x301F JUMP JUMPDEST PUSH2 0x17B6 JUMP JUMPDEST SWAP1 PUSH2 0x37BB JUMP JUMPDEST SWAP2 PUSH2 0x300C JUMP JUMPDEST SWAP1 PUSH2 0x3056 JUMP JUMPDEST SWAP2 SWAP3 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30BF SWAP2 PUSH2 0x30B8 PUSH2 0x2047 JUMP JUMPDEST POP ADD PUSH2 0x2F88 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30CA PUSH2 0xBAC JUMP JUMPDEST POP DUP1 PUSH2 0x30E5 PUSH2 0x30DF PUSH4 0x7965DB0B PUSH1 0xE0 SHL PUSH2 0x178 JUMP JUMPDEST SWAP2 PUSH2 0x178 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x30F2 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x30FC SWAP2 POP PUSH2 0x37FB JUMP JUMPDEST CODESIZE PUSH2 0x30EE JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x3124 PUSH2 0x311F PUSH2 0x3129 SWAP3 PUSH2 0x3107 JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x310A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3136 PUSH1 0x14 PUSH2 0x3110 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x314D PUSH2 0x3148 PUSH2 0x3152 SWAP3 PUSH2 0x310A JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3172 PUSH2 0x316D PUSH2 0x3188 SWAP3 PUSH2 0x3167 PUSH2 0x3102 JUMP JUMPDEST POP PUSH2 0x2C1F JUMP JUMPDEST PUSH2 0x2C2B JUMP JUMPDEST PUSH2 0x3182 PUSH2 0x317D PUSH2 0x312C JUMP JUMPDEST PUSH2 0x3139 JUMP JUMPDEST SWAP1 PUSH2 0x3378 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x31A2 PUSH2 0x319D PUSH2 0x31A7 SWAP3 PUSH2 0x318B JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x31B9 PUSH2 0x31BF SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x25F JUMP JUMPDEST SWAP3 PUSH2 0x25F JUMP JUMPDEST DUP3 ADD DUP1 SWAP3 GT PUSH2 0x31CA JUMPI JUMP JUMPDEST PUSH2 0x2167 JUMP JUMPDEST CALLDATASIZE SWAP1 CALLDATACOPY JUMP JUMPDEST SWAP1 PUSH2 0x31F9 PUSH2 0x31E1 DUP4 PUSH2 0x1403 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP1 PUSH2 0x31EF DUP7 SWAP4 PUSH2 0x13E0 JUMP JUMPDEST SWAP3 ADD SWAP2 SUB SWAP1 PUSH2 0x31CF JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x3 PUSH1 0xFC SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x320D DUP3 PUSH2 0x1F1E JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x321F JUMPI PUSH1 0x1 PUSH1 0x20 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x2F72 JUMP JUMPDEST PUSH1 0xF PUSH1 0xFB SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3243 PUSH2 0x323E PUSH2 0x3248 SWAP3 PUSH2 0x322C JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3254 SWAP1 PUSH2 0x25F JUMP JUMPDEST PUSH1 0x0 DUP2 EQ PUSH2 0x3263 JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH2 0x2167 JUMP JUMPDEST PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 JUMP JUMPDEST PUSH2 0x3287 PUSH2 0x3268 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x32A1 PUSH2 0x329C PUSH2 0x32A6 SWAP3 PUSH2 0x328A JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xF8 SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x32C6 PUSH2 0x32C1 PUSH2 0x32CB SWAP3 PUSH2 0x32AF JUMP JUMPDEST PUSH2 0xC39 JUMP JUMPDEST PUSH2 0x310A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x32ED SWAP1 PUSH2 0x32E7 PUSH2 0x32E1 PUSH2 0x32F2 SWAP5 PUSH2 0x310A JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST SWAP1 PUSH2 0x2FC0 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x3329 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x1244 JUMP JUMPDEST PUSH2 0x3332 DUP2 PUSH2 0x32F5 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x334C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x331D JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x3356 JUMPI JUMP JUMPDEST PUSH2 0x335E PUSH2 0x163 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x3374 PUSH1 0x4 DUP3 ADD PUSH2 0x3336 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH2 0x3382 PUSH2 0x3102 JUMP JUMPDEST POP PUSH2 0x341C PUSH2 0x340C PUSH2 0x33B8 PUSH2 0x33B3 PUSH2 0x33A3 PUSH1 0x2 PUSH2 0x339E DUP8 SWAP2 PUSH2 0x318E JUMP JUMPDEST PUSH2 0x21A7 JUMP JUMPDEST PUSH2 0x33AD PUSH1 0x2 PUSH2 0x318E JUMP JUMPDEST SWAP1 PUSH2 0x31AA JUMP JUMPDEST PUSH2 0x31D4 JUMP JUMPDEST SWAP3 PUSH2 0x33C1 PUSH2 0x31FB JUMP JUMPDEST PUSH2 0x33DA DUP6 PUSH2 0x33D4 PUSH1 0x0 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x164E JUMP JUMPDEST SWAP1 PUSH2 0x3203 JUMP JUMPDEST MSTORE8 PUSH2 0x33E3 PUSH2 0x3224 JUMP JUMPDEST PUSH2 0x33FC DUP6 PUSH2 0x33F6 PUSH1 0x1 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x322F JUMP JUMPDEST SWAP1 PUSH2 0x3203 JUMP JUMPDEST MSTORE8 PUSH2 0x3407 PUSH1 0x2 PUSH2 0x318E JUMP JUMPDEST PUSH2 0x21A7 JUMP JUMPDEST PUSH2 0x3416 PUSH1 0x1 PUSH2 0x322F JUMP JUMPDEST SWAP1 PUSH2 0x31AA JUMP JUMPDEST SWAP3 JUMPDEST DUP4 PUSH2 0x3432 PUSH2 0x342C PUSH1 0x1 PUSH2 0x322F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST GT ISZERO PUSH2 0x3499 JUMPI PUSH2 0x3440 PUSH2 0x327F JUMP JUMPDEST DUP2 PUSH2 0x344B PUSH1 0xF PUSH2 0x328D JUMP JUMPDEST AND SWAP2 PUSH1 0x10 DUP4 LT ISZERO PUSH2 0x3494 JUMPI PUSH2 0x3467 PUSH2 0x3488 SWAP3 PUSH2 0x348E SWAP5 BYTE PUSH2 0x32A9 JUMP JUMPDEST PUSH2 0x3477 DUP6 SWAP2 DUP9 SWAP1 PUSH1 0x0 BYTE SWAP3 PUSH2 0x3203 JUMP JUMPDEST MSTORE8 PUSH2 0x3482 PUSH1 0x4 PUSH2 0x32B2 JUMP JUMPDEST SWAP1 PUSH2 0x32CE JUMP JUMPDEST SWAP4 PUSH2 0x324B JUMP JUMPDEST SWAP3 PUSH2 0x341E JUMP JUMPDEST PUSH2 0x2F72 JUMP JUMPDEST PUSH2 0x34C1 SWAP3 SWAP4 POP PUSH2 0x34BC SWAP1 PUSH2 0x34B6 PUSH2 0x34B0 PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ PUSH2 0x334F JUMP JUMPDEST PUSH2 0x2A97 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x34DF DUP2 PUSH2 0x34D2 JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x34FA JUMPI PUSH2 0x34F1 PUSH1 0x1 SWAP2 PUSH2 0x34C7 JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2F72 JUMP JUMPDEST SHL SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x8 PUSH2 0x351F SWAP2 MUL SWAP2 PUSH2 0x3519 PUSH1 0x0 NOT DUP5 PUSH2 0x34FF JUMP JUMPDEST SWAP3 PUSH2 0x34FF JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x353F PUSH2 0x353A PUSH2 0x3547 SWAP4 PUSH2 0xF79 JUMP JUMPDEST PUSH2 0x17C3 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x3503 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 DUP2 SLOAD SWAP2 PUSH9 0x10000000000000000 DUP4 LT ISZERO PUSH2 0x357B JUMPI DUP3 PUSH2 0x3573 SWAP2 PUSH1 0x1 PUSH2 0x3579 SWAP6 ADD DUP2 SSTORE PUSH2 0x34D6 JUMP JUMPDEST SWAP1 PUSH2 0x3529 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xC97 JUMP JUMPDEST SWAP1 PUSH2 0x358A SWAP1 PUSH2 0xF79 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x35A0 PUSH2 0xBAC JUMP JUMPDEST POP PUSH2 0x35B5 PUSH2 0x35AF DUP3 DUP5 SWAP1 PUSH2 0x3821 JUMP JUMPDEST ISZERO PUSH2 0x1C7 JUMP JUMPDEST PUSH1 0x0 EQ PUSH2 0x35F8 JUMPI PUSH2 0x35EE PUSH2 0x35F3 SWAP3 PUSH2 0x35D9 PUSH2 0x35D2 PUSH1 0x0 DUP6 ADD PUSH2 0x34C4 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x354B JUMP JUMPDEST PUSH1 0x1 PUSH2 0x35E7 PUSH1 0x0 DUP6 ADD PUSH2 0x2F88 JUMP JUMPDEST SWAP4 ADD PUSH2 0x3580 JUMP JUMPDEST PUSH2 0x16BA JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x3627 SWAP2 PUSH2 0x3621 PUSH2 0xF74 JUMP JUMPDEST SWAP2 PUSH2 0x3529 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3632 DUP2 PUSH2 0x34D2 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3653 JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 PUSH2 0x3650 PUSH2 0x364A DUP4 DUP4 PUSH2 0x34D6 JUMP JUMPDEST SWAP1 PUSH2 0x3615 JUMP JUMPDEST SSTORE JUMP JUMPDEST PUSH2 0x35FF JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x366E PUSH2 0x3669 PUSH2 0x3676 SWAP4 PUSH2 0x169B JUMP JUMPDEST PUSH2 0x16B7 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x3503 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x368C SWAP2 PUSH2 0x3686 PUSH2 0x2047 JUMP JUMPDEST SWAP2 PUSH2 0x3658 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3696 PUSH2 0xBAC JUMP JUMPDEST POP PUSH2 0x36AD PUSH2 0x36A8 PUSH1 0x1 DUP4 ADD DUP5 SWAP1 PUSH2 0x3580 JUMP JUMPDEST PUSH2 0x10CC JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x36C2 PUSH2 0x36BC PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ ISZERO PUSH1 0x0 EQ PUSH2 0x3790 JUMPI PUSH2 0x3742 SWAP3 PUSH1 0x1 PUSH2 0x373D SWAP3 DUP5 PUSH2 0x36EB PUSH1 0x0 SWAP7 PUSH2 0x36E5 DUP6 PUSH2 0x322F JUMP JUMPDEST SWAP1 PUSH2 0x217D JUMP JUMPDEST PUSH2 0x3708 PUSH2 0x36F9 DUP9 DUP6 ADD PUSH2 0x2F88 JUMP JUMPDEST PUSH2 0x3702 DUP7 PUSH2 0x322F JUMP JUMPDEST SWAP1 PUSH2 0x217D JUMP JUMPDEST DUP1 PUSH2 0x371B PUSH2 0x3715 DUP5 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST SUB PUSH2 0x3747 JUMPI JUMPDEST POP POP POP PUSH2 0x3737 PUSH2 0x3732 DUP7 DUP4 ADD PUSH2 0x34C4 JUMP JUMPDEST PUSH2 0x3629 JUMP JUMPDEST ADD PUSH2 0x3580 JUMP JUMPDEST PUSH2 0x367A JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x3788 SWAP3 PUSH2 0x377A PUSH2 0x3766 PUSH2 0x3760 PUSH2 0x3783 SWAP5 DUP13 DUP10 ADD PUSH2 0x2F97 JUMP JUMPDEST SWAP1 PUSH2 0x2FDC JUMP JUMPDEST SWAP4 PUSH2 0x3774 DUP6 SWAP2 DUP13 DUP10 ADD PUSH2 0x2F97 JUMP JUMPDEST SWAP1 PUSH2 0x3529 JUMP JUMPDEST SWAP2 DUP6 DUP6 ADD PUSH2 0x3580 JUMP JUMPDEST PUSH2 0x16BA JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x3721 JUMP JUMPDEST POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x37B8 SWAP3 SWAP2 PUSH2 0x37A6 PUSH2 0x141A JUMP JUMPDEST POP SWAP1 PUSH2 0x37B2 PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x390D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x37C3 PUSH2 0xF74 JUMP JUMPDEST POP DUP1 PUSH2 0x37D7 PUSH2 0x37D1 DUP5 PUSH2 0x3CD JUMP JUMPDEST SWAP2 PUSH2 0x3CD JUMP JUMPDEST LT PUSH1 0x0 EQ PUSH2 0x37ED JUMPI SWAP1 PUSH2 0x37E9 SWAP2 PUSH2 0x3967 JUMP JUMPDEST JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x37F6 SWAP2 PUSH2 0x3967 JUMP JUMPDEST PUSH2 0x37EA JUMP JUMPDEST PUSH2 0x3803 PUSH2 0xBAC JUMP JUMPDEST POP PUSH2 0x381D PUSH2 0x3817 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0x178 JUMP JUMPDEST SWAP2 PUSH2 0x178 JUMP JUMPDEST EQ SWAP1 JUMP JUMPDEST PUSH2 0x383F SWAP2 PUSH1 0x1 PUSH2 0x383A SWAP3 PUSH2 0x3833 PUSH2 0xBAC JUMP JUMPDEST POP ADD PUSH2 0x3580 JUMP JUMPDEST PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x3852 PUSH2 0x384C PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x3860 SWAP1 PUSH2 0xC70 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x38BE PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x1244 JUMP JUMPDEST PUSH2 0x38C7 DUP2 PUSH2 0x3863 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x38E1 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x38B1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x38EB JUMPI JUMP JUMPDEST PUSH2 0x38F3 PUSH2 0x163 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x3909 PUSH1 0x4 DUP3 ADD PUSH2 0x38CB JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 PUSH1 0x0 DUP1 SWAP2 PUSH2 0x3964 SWAP6 SWAP4 PUSH2 0x391F PUSH2 0x141A JUMP JUMPDEST POP PUSH2 0x3946 PUSH2 0x392C ADDRESS PUSH2 0x3857 JUMP JUMPDEST BALANCE PUSH2 0x393F PUSH2 0x3939 DUP6 PUSH2 0x25F JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST LT ISZERO PUSH2 0x38E4 JUMP JUMPDEST DUP6 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 MLOAD SWAP3 GAS CALL SWAP2 PUSH2 0x395A PUSH2 0x141F JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x3A02 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x396F PUSH2 0xF74 JUMP JUMPDEST POP PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x39B3 PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x1244 JUMP JUMPDEST PUSH2 0x39BC DUP2 PUSH2 0x397E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x39D6 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x39A6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x39E0 JUMPI JUMP JUMPDEST PUSH2 0x39E8 PUSH2 0x163 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x39FE PUSH1 0x4 DUP3 ADD PUSH2 0x39C0 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0x3A0D PUSH2 0x141A JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0x3A53 JUMPI POP PUSH2 0x3A1F DUP3 PUSH2 0x1F1E JUMP JUMPDEST PUSH2 0x3A32 PUSH2 0x3A2C PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST EQ PUSH2 0x3A3C JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3A48 PUSH2 0x3A4D SWAP2 PUSH2 0x3AA7 JUMP JUMPDEST PUSH2 0x39D9 JUMP JUMPDEST CODESIZE PUSH2 0x3A38 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x3A5E DUP3 PUSH2 0x1F1E JUMP JUMPDEST PUSH2 0x3A71 PUSH2 0x3A6B PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x3A82 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0x3AA3 SWAP1 PUSH2 0x3A8E PUSH2 0x163 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x2ACB JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x3AAF PUSH2 0xBAC JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x3AC4 PUSH2 0x3ABE PUSH1 0x0 PUSH2 0x164E JUMP JUMPDEST SWAP2 PUSH2 0x25F JUMP JUMPDEST GT SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 DIV PUSH4 0x3B23276E 0xDD SWAP6 0xAA ORIGIN 0x2D 0xBE LOG2 OR SAR 0xA8 0xB6 BLOCKHASH NUMBER DUP16 DUP2 NOT SWAP15 ADDMOD 0xFB DUP8 0xEC SAR PUSH5 0xAA7F64736F PUSH13 0x634300081B0033608060405234 PUSH2 0x2F JUMPI PUSH2 0x19 PUSH2 0x14 PUSH2 0xFA JUMP JUMPDEST PUSH2 0x11B JUMP JUMPDEST PUSH2 0x21 PUSH2 0x34 JUMP JUMPDEST PUSH2 0x722 PUSH2 0x380 DUP3 CODECOPY PUSH2 0x722 SWAP1 RETURN JUMPDEST PUSH2 0x3A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x69 SWAP1 PUSH2 0x3F JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x81 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x49 JUMP JUMPDEST SWAP1 PUSH2 0x99 PUSH2 0x92 PUSH2 0x34 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x5F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xB4 SWAP1 PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC0 DUP2 PUSH2 0xAB JUMP JUMPDEST SUB PUSH2 0xC7 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0xD9 DUP3 PUSH2 0xB7 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xF5 JUMPI PUSH2 0xF2 SWAP2 PUSH1 0x0 ADD PUSH2 0xCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9B JUMP JUMPDEST PUSH2 0x118 PUSH2 0xAA2 DUP1 CODESIZE SUB DUP1 PUSH2 0x10D DUP2 PUSH2 0x86 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD SWAP1 PUSH2 0xDB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x12C SWAP1 PUSH2 0x127 PUSH2 0x12E JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x13E PUSH2 0x139 PUSH2 0x291 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6E206973206E6F74206120636F6E747261637400000000000000000000000000 SWAP2 PUSH32 0x5570677261646561626C65426561636F6E3A20696D706C656D656E746174696F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1A4 PUSH1 0x33 PUSH1 0x40 SWAP3 PUSH2 0x140 JUMP JUMPDEST PUSH2 0x1AD DUP2 PUSH2 0x149 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1C7 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x197 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1D1 JUMPI JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x34 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1EF PUSH1 0x4 DUP3 ADD PUSH2 0x1B1 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x20A PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x1F3 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x22B PUSH2 0x226 PUSH2 0x230 SWAP3 PUSH2 0xA0 JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23C SWAP1 PUSH2 0x217 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x248 SWAP1 PUSH2 0x233 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x263 PUSH2 0x25E PUSH2 0x26A SWAP3 PUSH2 0x23F JUMP JUMPDEST PUSH2 0x24B JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1F9 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x28A SWAP1 PUSH2 0x283 PUSH2 0x27E DUP3 PUSH2 0x35E JUMP JUMPDEST PUSH2 0x1CA JUMP JUMPDEST PUSH1 0x1 PUSH2 0x24E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x299 PUSH2 0x28C JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2BB PUSH2 0x2C0 SWAP2 PUSH2 0x29E JUMP JUMPDEST PUSH2 0x2A4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2CD SWAP1 SLOAD PUSH2 0x2AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH1 0x0 PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x2EB DUP3 PUSH1 0x0 PUSH2 0x24E JUMP JUMPDEST SWAP1 PUSH2 0x31F PUSH2 0x319 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x23F JUMP JUMPDEST SWAP2 PUSH2 0x23F JUMP JUMPDEST SWAP2 PUSH2 0x328 PUSH2 0x34 JUMP JUMPDEST DUP1 PUSH2 0x332 DUP2 PUSH2 0x2D0 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x351 PUSH2 0x35B SWAP3 PUSH2 0x33F JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH2 0x33C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x366 PUSH2 0x337 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x37B PUSH2 0x375 PUSH1 0x0 PUSH2 0x342 JUMP JUMPDEST SWAP2 PUSH2 0x33C JUMP JUMPDEST GT SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x219 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x6D JUMP JUMPDEST DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x68 JUMPI DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x63 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x5E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x59 JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x1E6 JUMP JUMPDEST PUSH2 0x1B1 JUMP JUMPDEST PUSH2 0x17E JUMP JUMPDEST PUSH2 0x149 JUMP JUMPDEST PUSH2 0xE3 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x97 SWAP1 PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA3 DUP2 PUSH2 0x8E JUMP JUMPDEST SUB PUSH2 0xAA JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xBC DUP3 PUSH2 0x9A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xD8 JUMPI PUSH2 0xD5 SWAP2 PUSH1 0x0 ADD PUSH2 0xAF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x111 JUMPI PUSH2 0xFB PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x2B3 JUMP JUMPDEST PUSH2 0x103 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x10D DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x121 JUMPI JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH2 0x12F SWAP1 PUSH2 0x8E JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x147 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x126 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x179 JUMPI PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x164 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x16C PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1AC JUMPI PUSH2 0x18E CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x35C JUMP JUMPDEST PUSH2 0x19E PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x1A8 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1E1 JUMPI PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x1DD PUSH2 0x1CC PUSH2 0x366 JUMP JUMPDEST PUSH2 0x1D4 PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH2 0x1FE PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST PUSH2 0x206 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x210 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22F SWAP1 PUSH2 0x22A PUSH2 0x501 JUMP JUMPDEST PUSH2 0x268 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x248 PUSH2 0x243 PUSH2 0x24D SWAP3 PUSH2 0x83 JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x259 SWAP1 PUSH2 0x234 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x265 SWAP1 PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x271 DUP2 PUSH2 0x61B JUMP JUMPDEST PUSH2 0x29B PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP1 PUSH2 0x2A4 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x2AE DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH2 0x2BC SWAP1 PUSH2 0x21E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2E5 SWAP2 PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x2C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F2 SWAP1 SLOAD PUSH2 0x2D4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2FD PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x308 PUSH1 0x1 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x313 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x31B PUSH2 0x348 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x334 PUSH2 0x32F PUSH2 0x339 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x345 SWAP1 PUSH2 0x320 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x355 PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x364 PUSH2 0x30B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x36E PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x379 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38D SWAP1 PUSH2 0x388 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x442 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x3FC DUP2 PUSH2 0x398 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x416 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x3E6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x420 JUMPI JUMP JUMPDEST PUSH2 0x428 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x43E PUSH1 0x4 DUP3 ADD PUSH2 0x400 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x471 SWAP1 PUSH2 0x46C DUP2 PUSH2 0x465 PUSH2 0x45F PUSH2 0x45A PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ ISZERO PUSH2 0x419 JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x47C SWAP1 PUSH2 0x37C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x4B2 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x4BB DUP2 PUSH2 0x47E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x4D5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x4A6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x4DF JUMPI JUMP JUMPDEST PUSH2 0x4E7 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x4FD PUSH1 0x4 DUP3 ADD PUSH2 0x4BF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x52B PUSH2 0x50C PUSH2 0x366 JUMP JUMPDEST PUSH2 0x525 PUSH2 0x51F PUSH2 0x51A PUSH2 0x69A JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ PUSH2 0x4D8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6E206973206E6F74206120636F6E747261637400000000000000000000000000 SWAP2 PUSH32 0x5570677261646561626C65426561636F6E3A20696D706C656D656E746174696F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x588 PUSH1 0x33 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x591 DUP2 PUSH2 0x52D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x5AB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x57B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5B5 JUMPI JUMP JUMPDEST PUSH2 0x5BD PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x5D3 PUSH1 0x4 DUP3 ADD PUSH2 0x595 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x5EE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x5D7 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x610 PUSH2 0x60B PUSH2 0x617 SWAP3 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x5F8 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x5DD JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x637 SWAP1 PUSH2 0x630 PUSH2 0x62B DUP3 PUSH2 0x6CB JUMP JUMPDEST PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x1 PUSH2 0x5FB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x643 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0x64E DUP3 PUSH1 0x0 PUSH2 0x5FB JUMP JUMPDEST SWAP1 PUSH2 0x682 PUSH2 0x67C PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x68B PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x695 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x6A2 PUSH2 0x2BE JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C3 PUSH2 0x6BE PUSH2 0x6C8 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x6AC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6D3 PUSH2 0x6A7 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x6E8 PUSH2 0x6E2 PUSH1 0x0 PUSH2 0x6AF JUMP JUMPDEST SWAP2 PUSH2 0x6AC JUMP JUMPDEST GT SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH 0xBF SWAP5 0xB3 0xAA XOR 0x2E PUSH18 0x20F7EE578F52EECCE106FBE2A323E7E4F151 SAR SWAP16 0x27 PUSH23 0x8EAD64736F6C634300081B003300000000000000000000 ",
              "sourceMap": "335:1515:38:-:0;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;534:170::-;;;:::i;:::-;610:16;;:::i;:::-;;;;;;;335:1515;;;;;610:16;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;669:13;684:12;592:34;669:13;:::i;:::-;684:12;:::i;:::-;534:170::o;610:16::-;;:::i;:::-;;:::i;689:2159:31:-;;;:::i;:::-;:::o;912:63:4:-;955:12;;;:::i;:::-;;:::i;:::-;912:63::o;335:1515:38:-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;961:189:31:-;1056:37;;:::i;:::-;;;;;;;;335:1515:38;;;;;1056:37:31;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;1047:46;1130:12;1047:46;;;:::i;:::-;1130:12;:::i;:::-;961:189::o;1056:37::-;;:::i;:::-;;:::i;335:1515:38:-;;;:::o;640:96:15:-;693:7;;:::i;:::-;719:10;;712:17;:::o;335:1515:38:-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;2426:187:4:-;2518:6;;;:::i;:::-;2534:17;2543:8;2534:17;;:::i;:::-;2597:8;2566:40;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;2426:187::o"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode": {
                  "entryPoint": 584,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_address": {
                  "entryPoint": 246,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_bytes32": {
                  "entryPoint": 285,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_fromMemory": {
                  "entryPoint": 1496,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_tuple_address": {
                  "entryPoint": 496,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint256": {
                  "entryPoint": 187,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint256t_addresst_addresst_addresst_addresst_bytes32": {
                  "entryPoint": 300,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 6
                },
                "abi_encode_address": {
                  "entryPoint": 401,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_address_address_bytes32": {
                  "entryPoint": 1723,
                  "id": null,
                  "parameterSlots": 5,
                  "returnSlots": 1
                },
                "abi_encode_address_address_bytes": {
                  "entryPoint": 3192,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_address_to_address_nonPadded_inplace": {
                  "entryPoint": 2563,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes": {
                  "entryPoint": 2626,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_bytes32": {
                  "entryPoint": 2512,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes32_to_bytes32": {
                  "entryPoint": 1050,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes_memory_ptr": {
                  "entryPoint": 3143,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_contract_UpgradeableBeacon": {
                  "entryPoint": 737,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_contract_UpgradeableBeacon_to_address": {
                  "entryPoint": 724,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_packed_bytes32_address_address_bytes": {
                  "entryPoint": 2667,
                  "id": null,
                  "parameterSlots": 5,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral": {
                  "entryPoint": 2936,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_1247": {
                  "entryPoint": 3971,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_245f": {
                  "entryPoint": 2357,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_8714": {
                  "entryPoint": 4102,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_9924": {
                  "entryPoint": 2911,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f94f": {
                  "entryPoint": 3865,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f94f9c62541b73155a9def26a7988ac5579c2c6b698df8f608ced5572b7d72ca": {
                  "entryPoint": 3839,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 527,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 414,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral": {
                  "entryPoint": 4128,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_1247": {
                  "entryPoint": 3996,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_245f": {
                  "entryPoint": 2383,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_uint256": {
                  "entryPoint": 1037,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_uint256_address_address_address_bytes32": {
                  "entryPoint": 1063,
                  "id": null,
                  "parameterSlots": 6,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 1224,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_string": {
                  "entryPoint": 1280,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 147,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_string": {
                  "entryPoint": 1245,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_bytes": {
                  "entryPoint": 1214,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_bytes": {
                  "entryPoint": 1220,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_bytes": {
                  "entryPoint": 3134,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_bytes_nonPadded_inplace": {
                  "entryPoint": 2584,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 2270,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 213,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes32": {
                  "entryPoint": 261,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 2185,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_contract_UpgradeableBeacon": {
                  "entryPoint": 604,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 2112,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 202,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 163,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_payable_to_contract_ITransparentUpgradeableBeaconProxy": {
                  "entryPoint": 3110,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 3597,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address_payable": {
                  "entryPoint": 3086,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_contract_ERC721Sale": {
                  "entryPoint": 1699,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_Create2_to_address": {
                  "entryPoint": 3741,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_ERC721Sale_to_address": {
                  "entryPoint": 1711,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_ITransparentUpgradeableBeaconProxy_to_address": {
                  "entryPoint": 3122,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_UpgradeableBeacon_to_address": {
                  "entryPoint": 712,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 2143,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 2115,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 3046,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_stringliteral_c5d2_to_bytes": {
                  "entryPoint": 1316,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 700,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address_payable": {
                  "entryPoint": 3074,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_ERC721Sale": {
                  "entryPoint": 1687,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_ITransparentUpgradeableBeaconProxy": {
                  "entryPoint": 3098,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 672,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_literal_to_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470": {
                  "entryPoint": 1303,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 2589,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "external_fun_beacon": {
                  "entryPoint": 759,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_deploy": {
                  "entryPoint": 812,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_determineAddress": {
                  "entryPoint": 436,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_owner": {
                  "entryPoint": 923,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_renounceOwnership": {
                  "entryPoint": 872,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_transferOwnership": {
                  "entryPoint": 976,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_upgradeBeacon": {
                  "entryPoint": 533,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "extract_from_storage_value_dynamict_contract_UpgradeableBeacon": {
                  "entryPoint": 615,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 2196,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_contract_UpgradeableBeacon": {
                  "entryPoint": 1452,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 1173,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun__transferOwnership": {
                  "entryPoint": 3644,
                  "id": 650,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_checkOwner": {
                  "entryPoint": 3002,
                  "id": 593,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_computeAddress": {
                  "entryPoint": 3753,
                  "id": 2031,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_computeAddress_2045": {
                  "entryPoint": 4331,
                  "id": 2045,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_computeProxyAddress": {
                  "entryPoint": 2721,
                  "id": 6099,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_createProxy": {
                  "entryPoint": 3245,
                  "id": 6056,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_deploy": {
                  "entryPoint": 1786,
                  "id": 7199,
                  "parameterSlots": 6,
                  "returnSlots": 1
                },
                "fun_deploy_2011": {
                  "entryPoint": 4194,
                  "id": 2011,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_determineAddress": {
                  "entryPoint": 1327,
                  "id": 7237,
                  "parameterSlots": 6,
                  "returnSlots": 1
                },
                "fun_msgSender": {
                  "entryPoint": 3786,
                  "id": 1955,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_owner": {
                  "entryPoint": 2229,
                  "id": 579,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_renounceOwnership": {
                  "entryPoint": 2175,
                  "id": 607,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_renounceOwnership_inner": {
                  "entryPoint": 2155,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_transferOwnership": {
                  "entryPoint": 2498,
                  "id": 630,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_transferOwnership_inner": {
                  "entryPoint": 2449,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeBeacon": {
                  "entryPoint": 1676,
                  "id": 6114,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeBeacon_inner": {
                  "entryPoint": 1529,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "getter_fun_beacon": {
                  "entryPoint": 653,
                  "id": 5974,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 669,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "leftAlign_address": {
                  "entryPoint": 2551,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "leftAlign_bytes32": {
                  "entryPoint": 2509,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "leftAlign_uint160": {
                  "entryPoint": 2539,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "modifier_onlyOwner": {
                  "entryPoint": 1427,
                  "id": 570,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_onlyOwner_597": {
                  "entryPoint": 2094,
                  "id": 570,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "modifier_onlyOwner_613": {
                  "entryPoint": 2251,
                  "id": 570,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "panic_error_0x41": {
                  "entryPoint": 1151,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 3609,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_dynamic_contract_UpgradeableBeacon": {
                  "entryPoint": 639,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 2216,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_contract_UpgradeableBeacon": {
                  "entryPoint": 1472,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral": {
                  "entryPoint": 4021,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_245f": {
                  "entryPoint": 2408,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_8714": {
                  "entryPoint": 4153,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_9924": {
                  "entryPoint": 2961,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_f94f": {
                  "entryPoint": 3890,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20": {
                  "entryPoint": 1485,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": 1027,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 153,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 158,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 1512,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 1141,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 3564,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_224": {
                  "entryPoint": 1490,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_96": {
                  "entryPoint": 2533,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_0_unsigned": {
                  "entryPoint": 1446,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 141,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned_dynamic": {
                  "entryPoint": 600,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "store_literal_in_memory_124767115c09b0dd37c31c42ddb030d84459c933a30879cc32c4c922ae5928f0": {
                  "entryPoint": 3931,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe": {
                  "entryPoint": 2279,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_87142438d464a3cd804331cca8480b31569380ef25d1f39b80404975699f0676": {
                  "entryPoint": 4062,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe": {
                  "entryPoint": 2871,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_f94f9c62541b73155a9def26a7988ac5579c2c6b698df8f608ced5572b7d72ca": {
                  "entryPoint": 3799,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 3570,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 3612,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 225,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_bytes32": {
                  "entryPoint": 264,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_uint256": {
                  "entryPoint": 166,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 1032,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "60806040526004361015610013575b610403565b61001e60003561008d565b80631a4b671d146100885780631bce45831461008357806359659e901461007e57806369b3934d14610079578063715018a6146100745780638da5cb5b1461006f5763f2fde38b0361000e576103d0565b61039b565b610368565b61032c565b6102f7565b610215565b6101b4565b60e01c90565b60405190565b600080fd5b600080fd5b90565b6100af816100a3565b036100b657565b600080fd5b905035906100c8826100a6565b565b60018060a01b031690565b6100de906100ca565b90565b6100ea816100d5565b036100f157565b600080fd5b90503590610103826100e1565b565b90565b61011181610105565b0361011857565b600080fd5b9050359061012a82610108565b565b909160c08284031261018c5761014583600084016100bb565b9261015381602085016100f6565b9261016182604083016100f6565b9261018961017284606085016100f6565b9361018081608086016100f6565b9360a00161011d565b90565b61009e565b61019a906100d5565b9052565b91906101b290600060208501940190610191565b565b346101eb576101e76101d66101ca36600461012c565b9493909392919261052f565b6101de610093565b9182918261019e565b0390f35b610099565b9060208282031261020a57610207916000016100f6565b90565b61009e565b60000190565b346102435761022d6102283660046101f0565b61068c565b610235610093565b8061023f8161020f565b0390f35b610099565b600091031261025357565b61009e565b1c90565b60018060a01b031690565b61027790600861027c9302610258565b61025c565b90565b9061028a9154610267565b90565b61029a600160009061027f565b90565b90565b6102b46102af6102b9926100ca565b61029d565b6100ca565b90565b6102c5906102a0565b90565b6102d1906102bc565b90565b6102dd906102c8565b9052565b91906102f5906000602085019401906102d4565b565b3461032757610307366004610248565b61032361031261028d565b61031a610093565b918291826102e1565b0390f35b610099565b346103635761035f61034e61034236600461012c565b949390939291926106fa565b610356610093565b9182918261019e565b0390f35b610099565b3461039657610378366004610248565b61038061087f565b610388610093565b806103928161020f565b0390f35b610099565b346103cb576103ab366004610248565b6103c76103b66108b5565b6103be610093565b9182918261019e565b0390f35b610099565b346103fe576103e86103e33660046101f0565b6109c2565b6103f0610093565b806103fa8161020f565b0390f35b610099565b600080fd5b600090565b610416906100a3565b9052565b61042390610105565b9052565b909594926104739461046261046c9261045860809661044e60a088019c600089019061040d565b6020870190610191565b6040850190610191565b6060830190610191565b019061041a565b565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061049f90610475565b810190811067ffffffffffffffff8211176104b957604052565b61047f565b60200190565b5190565b906104db6104d4610093565b9283610495565b565b67ffffffffffffffff81116104fb576104f7602091610475565b0190565b61047f565b9061051261050d836104dd565b6104c8565b918252565b6105216000610500565b90565b61052c610517565b90565b61056e9291946105909661055f92610545610408565b509395919091610553610093565b96879560208701610427565b60208201810382520382610495565b61058061057a826104c4565b916104be565b209061058a610524565b91610aa1565b90565b6105a49061059f610bba565b6105f9565b565b60001c90565b6105b86105bd916105a6565b61025c565b90565b6105ca90546105ac565b90565b600080fd5b60e01b90565b60009103126105e357565b61009e565b6105f0610093565b3d6000823e3d90fd5b61060b61060660016105c0565b6102c8565b90633659cfe690823b1561068757610643926106386000809461062c610093565b968795869485936105d2565b83526004830161019e565b03925af1801561068257610655575b50565b6106759060003d811161067b575b61066d8183610495565b8101906105d8565b38610652565b503d610663565b6105e8565b6105cd565b61069590610593565b565b6106a0906102a0565b90565b6106ac90610697565b90565b6106b8906102bc565b90565b6106f16106f8946106e76060949897956106dd608086019a6000870190610191565b6020850190610191565b6040830190610191565b019061041a565b565b9061075c9193929361070a610408565b5061073a859161072b86898b9161071f610093565b96879560208701610427565b60208201810382520382610495565b61074c610746826104c4565b916104be565b2090610756610524565b91610cad565b9361076e610769866106a3565b6106af565b906363acc14d93929490823b15610829576000946107aa869261079f94610793610093565b998a98899788966105d2565b8652600486016106bb565b03925af18015610824576107f7575b50806107f17fe3fc4d8c7984f762222579e0c4564a72a74f96cde3f6bae2751d01108c6ec240916107e8610093565b9182918261019e565b0390a190565b6108179060003d811161081d575b61080f8183610495565b8101906105d8565b386107b9565b503d610805565b6105e8565b6105cd565b610836610bba565b61083e61086b565b565b90565b61085761085261085c92610840565b61029d565b6100ca565b90565b61086890610843565b90565b61087d610878600061085f565b610e3c565b565b61088761082e565b565b60018060a01b031690565b6108a06108a5916105a6565b610889565b90565b6108b29054610894565b90565b6108bd610408565b506108c860006108a8565b90565b6108dc906108d7610bba565b610991565b565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201520152565b61094260266040926108de565b61094b816108e7565b0190565b6109659060208101906000818303910152610935565b90565b1561096f57565b610977610093565b62461bcd60e51b81528061098d6004820161094f565b0390fd5b6109c0906109bb816109b46109ae6109a9600061085f565b6100d5565b916100d5565b1415610968565b610e3c565b565b6109cb906108cb565b565b90565b6109dc6109e191610105565b6109cd565b9052565b60601b90565b6109f4906109e5565b90565b610a00906109eb565b90565b610a0f610a14916100d5565b6109f7565b9052565b905090565b60005b838110610a31575050906000910152565b806020918301518185015201610a20565b610a67610a5e92602092610a55816104c4565b94858093610a18565b93849101610a1d565b0190565b60148093610a8f602084610a87610a9796610a9e9b9a986109d0565b018092610a03565b018092610a03565b0190610a42565b90565b610b349291610ade610aed92610ab5610408565b509193610aca610ac560016105c0565b6102c8565b610ad2610093565b95869460208601610a6b565b60208201810382520382610495565b610aff610af9826104c4565b916104be565b2061148a610b0f602082016104c8565b908082526111156020830139610b2d610b27826104c4565b916104be565b2090610ea9565b90565b60007f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910152565b610b6b602080926108de565b610b7481610b37565b0190565b610b8e9060208101906000818303910152610b5f565b90565b15610b9857565b610ba0610093565b62461bcd60e51b815280610bb660048201610b78565b0390fd5b610be4610bc56108b5565b610bde610bd8610bd3610eca565b6100d5565b916100d5565b14610b91565b565b610bfa610bf5610bff92610840565b61029d565b6100a3565b90565b610c0b906102a0565b90565b610c1790610c02565b90565b610c23906102a0565b90565b610c2f90610c1a565b90565b610c3b906102bc565b90565b60209181520190565b610c66610c6f602093610c7493610c5d816104c4565b93848093610c3e565b95869101610a1d565b610475565b0190565b610c9d610caa949293610c9360608401956000850190610191565b6020830190610191565b6040818403910152610c47565b90565b610d3d9093929193610cbd610408565b50610cfd8591610cee610cd8610cd360016105c0565b6102c8565b8690610ce2610093565b95869460208601610a6b565b60208201810382520382610495565b610d0f610d09826104c4565b916104be565b2061148a610d1f602082016104c8565b908082526111156020830139610d386000929192610be6565b611062565b92610d57610d52610d4d86610c0e565b610c26565b610c32565b63cf7a1d779190610d70610d6b60016105c0565b6102c8565b9392813b15610de7576000610d9891610da38296610d8c610093565b988997889687956105d2565b855260048501610c78565b03925af18015610de257610db5575b50565b610dd59060003d8111610ddb575b610dcd8183610495565b8101906105d8565b38610db2565b503d610dc3565b6105e8565b6105cd565b60001b90565b90610e0360018060a01b0391610dec565b9181191691161790565b610e16906102bc565b90565b90565b90610e31610e2c610e3892610e0d565b610e19565b8254610df2565b9055565b610e4660006108a8565b610e51826000610e1c565b90610e85610e7f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610e0d565b91610e0d565b91610e8e610093565b80610e988161020f565b0390a3565b610ea6906102bc565b90565b90610ec791610eb6610408565b5090610ec130610e9d565b916110eb565b90565b610ed2610408565b503390565b60007f437265617465323a20696e73756666696369656e742062616c616e6365000000910152565b610f0c601d6020926108de565b610f1581610ed7565b0190565b610f2f9060208101906000818303910152610eff565b90565b15610f3957565b610f41610093565b62461bcd60e51b815280610f5760048201610f19565b0390fd5b60007f437265617465323a2062797465636f6465206c656e677468206973207a65726f910152565b610f8f602080926108de565b610f9881610f5b565b0190565b610fb29060208101906000818303910152610f83565b90565b15610fbc57565b610fc4610093565b62461bcd60e51b815280610fda60048201610f9c565b0390fd5b60007f437265617465323a204661696c6564206f6e206465706c6f7900000000000000910152565b61101360196020926108de565b61101c81610fde565b0190565b6110369060208101906000818303910152611006565b90565b1561104057565b611048610093565b62461bcd60e51b81528061105e60048201611020565b0390fd5b91909161106d610408565b5061109461107a30610e9d565b3161108d611087846100a3565b916100a3565b1015610f32565b6110ba6110a0836104c4565b6110b36110ad6000610be6565b916100a3565b1415610fb5565b60208251920190f5906110e9826110e26110dc6110d7600061085f565b6100d5565b916100d5565b1415611039565b565b90605592600b926110fa610408565b50604051926040840152602083015281520160ff8153209056fe608060405234601c57600e6020565b61145e61002c823961145e90f35b6026565b60405190565b600080fdfe6080604052361561006b5761006b565b90565b60018060a01b031690565b90565b61003461002f6100399261000f565b61001d565b610012565b90565b61004590610020565b90565b61005190610012565b90565b606090565b63ffffffff60e01b1690565b60000190565b61007361017e565b61008e610088610083600061003c565b610048565b91610048565b0361046c5761009b610054565b5063ffffffff60e01b600035166100c16100bb63cf7a1d7760e01b610059565b91610059565b146100e357600063f92ee8a960e01b8152806100df60048201610065565b0390fd5b6100eb610401565b602081519101f35b600090565b90565b90565b60001b90565b61011861011361011d926100f8565b6100fe565b6100fb565b90565b6101497fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103610104565b90565b60001c90565b60018060a01b031690565b61016961016e9161014c565b610152565b90565b61017b905461015d565b90565b6101866100f3565b506101a2600061019c610197610120565b6105a2565b01610171565b90565b90565b90565b6101bf6101ba6101c4926101a5565b61001d565b6101a8565b90565b60405190565b600080fd5b600080fd5b909392938483116101f75784116101f2576001820201920390565b6101d2565b6101cd565b91565b600080fd5b600080fd5b61021290610012565b90565b61021e81610209565b0361022557565b600080fd5b9050359061023782610215565b565b600080fd5b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061026d90610243565b810190811067ffffffffffffffff82111761028757604052565b61024d565b9061029f6102986101c7565b9283610263565b565b67ffffffffffffffff81116102bf576102bb602091610243565b0190565b61024d565b90826000939282370152565b909291926102e56102e0826102a1565b61028c565b93818552602085019082840111610301576102ff926102c4565b565b61023e565b9080601f8301121561032457816020610321933591016102d0565b90565b610239565b9160608383031261037657610341826000850161022a565b9261034f836020830161022a565b92604082013567ffffffffffffffff81116103715761036e9201610306565b90565b610204565b6101ff565b61038f61038a61039492610012565b61001d565b610012565b90565b6103a09061037b565b90565b6103ac90610397565b90565b67ffffffffffffffff81116103cd576103c9602091610243565b0190565b61024d565b906103e46103df836103af565b61028c565b918252565b6103f360006103d2565b90565b6103fe6103e9565b90565b610409610054565b506104126105cd565b61046161045761045161044761043f61043960003661043160046101ab565b9080926101d7565b906101fc565b810190610329565b93919290926103a3565b916103a3565b91909190916105ec565b6104696103f6565b90565b3361048661048061047b61017e565b610048565b91610048565b1460001461059d57610496610054565b5063ffffffff60e01b60003516806104bd6104b7631b2ce7f360e11b610059565b91610059565b146000146104d757506104ce610817565b5b602081519101f35b806104f16104eb63278f794360e11b610059565b91610059565b1460001461050857506105026107c1565b5b6104cf565b8061052261051c6308f2839760e41b610059565b91610059565b146000146105395750610533610723565b5b610503565b8061055361054d6303e1469160e61b610059565b91610059565b1460001461056a57506105646106bf565b5b610534565b61058361057d635c60da1b60e01b610059565b91610059565b146000146105985761059361067a565b610565565b61064a565b61064a565b90565b6105b96105b46105be9261000f565b61001d565b6101a8565b90565b156105c857565b600080fd5b6105ea346105e46105de60006105a5565b916101a8565b146105c1565b565b91906105f661087a565b61061161060b610606600061003c565b610048565b91610048565b0361062d5761062261062b936108b2565b9060009161098d565b565b600063f92ee8a960e01b81528061064660048201610065565b0390fd5b610652610aa6565b610ae7565b61066090610048565b9052565b919061067890600060208501940190610657565b565b610682610054565b5061068b6105cd565b6106ad6106bc610699610aa6565b6106a16101c7565b92839160208301610664565b60208201810382520382610263565b90565b6106c7610054565b506106d06105cd565b6106f26107016106de61017e565b6106e66101c7565b92839160208301610664565b60208201810382520382610263565b90565b9060208282031261071e5761071b9160000161022a565b90565b6101ff565b61072b610054565b506107346105cd565b61077061076b61076661075e61075860003661075060046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108b2565b6107786103f6565b90565b9190916040818403126107bc57610795836000830161022a565b92602082013567ffffffffffffffff81116107b7576107b49201610306565b90565b610204565b6101ff565b6107c9610054565b5061080c6108036107fc6107f46107ee6000366107e660046101ab565b9080926101d7565b906101fc565b81019061077b565b91906103a3565b90600191610b0a565b6108146103f6565b90565b61081f610054565b506108286105cd565b61086f61085f61085a61085261084c60003661084460046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108676103f6565b600091610b0a565b6108776103f6565b90565b6108826100f3565b5061088b61017e565b90565b9160206108b09294936108a960408201966000830190610657565b0190610657565b565b6108fd906108be61017e565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f916108f56108ec6101c7565b9283928361088e565b0390a1610c4d565b565b61090890610397565b90565b5190565b6109189061037b565b90565b6109249061090f565b90565b61093090610397565b90565b60e01b90565b61094281610048565b0361094957565b600080fd5b9050519061095b82610939565b565b90602082820312610977576109749160000161094e565b90565b6101ff565b6109846101c7565b3d6000823e3d90fd5b9161099783610e30565b826109c27f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e916108ff565b906109cb6101c7565b806109d581610065565b0390a26109e18261090b565b6109f46109ee60006105a5565b916101a8565b11908115610a9e575b50610a07575b5050565b6020610a1d610a18610a339461091b565b610927565b635c60da1b90610a2b6101c7565b948592610933565b82528180610a4360048201610065565b03915afa908115610a9957610a6192600092610a69575b5090610f65565b503880610a03565b610a8b91925060203d8111610a92575b610a838183610263565b81019061095d565b9038610a5a565b503d610a79565b61097c565b9050386109fd565b610aae6100f3565b50610ab7610f85565b80610ad3610acd610ac8600061003c565b610048565b91610048565b03610ae45750610ae1610f99565b90565b90565b60008091368280378136915af43d6000803e600014610b05573d6000f35b3d6000fd5b91610b148361102f565b610b1d8261090b565b610b30610b2a60006105a5565b916101a8565b11908115610b54575b50610b43575b5050565b610b4c91610f65565b503880610b3f565b905038610b39565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b610bc06026604092610b5c565b610bc981610b65565b0190565b610be39060208101906000818303910152610bb3565b90565b15610bed57565b610bf56101c7565b62461bcd60e51b815280610c0b60048201610bcd565b0390fd5b90610c2060018060a01b03916100fe565b9181191691161790565b90565b90610c42610c3d610c49926108ff565b610c2a565b8254610c0f565b9055565b610c8f90610c7781610c70610c6a610c65600061003c565b610048565b91610048565b1415610be6565b6000610c89610c84610120565b6105a2565b01610c2d565b565b60207f7472616374000000000000000000000000000000000000000000000000000000917f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e60008201520152565b610cec6025604092610b5c565b610cf581610c91565b0190565b610d0f9060208101906000818303910152610cdf565b90565b15610d1957565b610d216101c7565b62461bcd60e51b815280610d3760048201610cf9565b0390fd5b60207f73206e6f74206120636f6e747261637400000000000000000000000000000000917f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960008201520152565b610d966030604092610b5c565b610d9f81610d3b565b0190565b610db99060208101906000818303910152610d89565b90565b15610dc357565b610dcb6101c7565b62461bcd60e51b815280610de160048201610da3565b0390fd5b90565b610dfc610df7610e0192610de5565b6100fe565b6100fb565b90565b610e2d7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50610de8565b90565b610e6e90610e45610e408261107f565b610d12565b6020610e58610e538361091b565b610927565b635c60da1b90610e666101c7565b948592610933565b82528180610e7e60048201610065565b03915afa8015610eee57610ea1610ea691610ebe94600091610ec0575b5061107f565b610dbc565b6000610eb8610eb3610e04565b6105a2565b01610c2d565b565b610ee1915060203d8111610ee7575b610ed98183610263565b81019061095d565b38610e9b565b503d610ecf565b61097c565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610f4b60276103d2565b90610f5860208301610ef3565b565b610f62610f41565b90565b90610f8291610f72610054565b5090610f7c610f5a565b916110e2565b90565b610f8d6100f3565b50610f96611160565b90565b610fa16100f3565b50610fd56020610fbf610fba610fb5611187565b61091b565b610927565b635c60da1b90610fcd6101c7565b938492610933565b82528180610fe560048201610065565b03915afa90811561102a57600091610ffc575b5090565b61101d915060203d8111611023575b6110158183610263565b81019061095d565b38610ff8565b503d61100b565b61097c565b61103881611258565b6110627fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b916108ff565b9061106b6101c7565b8061107581610065565b0390a2565b600090565b61108761107a565b503b61109c61109660006105a5565b916101a8565b1190565b906110b26110ad836102a1565b61028c565b918252565b3d6000146110d4576110c83d6110a0565b903d6000602084013e5b565b6110dc610054565b906110d2565b9091600080611112946110f3610054565b508490602081019051915af4916111086110b7565b909290919261130b565b90565b90565b61112c61112761113192611115565b6100fe565b6100fb565b90565b61115d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611118565b90565b6111686100f3565b50611184600061117e611179611134565b6105a2565b01610171565b90565b61118f6100f3565b506111ab60006111a56111a0610e04565b6105a2565b01610171565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b611209602d604092610b5c565b611212816111ae565b0190565b61122c90602081019060008183039101526111fc565b90565b1561123657565b61123e6101c7565b62461bcd60e51b81528061125460048201611216565b0390fd5b6112859061126d6112688261107f565b61122f565b600061127f61127a611134565b6105a2565b01610c2d565b565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b6112bc601d602092610b5c565b6112c581611287565b0190565b6112df90602081019060008183039101526112af565b90565b156112e957565b6112f16101c7565b62461bcd60e51b815280611307600482016112c9565b0390fd5b919290611316610054565b5060001461135c57506113288261090b565b61133b61133560006105a5565b916101a8565b14611345575b5090565b6113516113569161107f565b6112e2565b38611341565b826113d5565b5190565b60005b83811061137a575050906000910152565b806020918301518185015201611369565b6113aa6113b36020936113b8936113a181611362565b93848093610b5c565b95869101611366565b610243565b0190565b6113d2916020820191600081840391015261138b565b90565b906113df8261090b565b6113f26113ec60006105a5565b916101a8565b116000146114035750805190602001fd5b6114249061140f6101c7565b91829162461bcd60e51b8352600483016113bc565b0390fdfea2646970667358221220fb1899e61f38faa78bfbab79b8dc2fa613357c2fce2699411f9fee80b624365564736f6c634300081b0033a26469706673582212206bc6c1471f4cc9c60143b475e599cedd261b753a87093c41a9601e41752618c964736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x403 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x8D JUMP JUMPDEST DUP1 PUSH4 0x1A4B671D EQ PUSH2 0x88 JUMPI DUP1 PUSH4 0x1BCE4583 EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x59659E90 EQ PUSH2 0x7E JUMPI DUP1 PUSH4 0x69B3934D EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x74 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x6F JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x3D0 JUMP JUMPDEST PUSH2 0x39B JUMP JUMPDEST PUSH2 0x368 JUMP JUMPDEST PUSH2 0x32C JUMP JUMPDEST PUSH2 0x2F7 JUMP JUMPDEST PUSH2 0x215 JUMP JUMPDEST PUSH2 0x1B4 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xAF DUP2 PUSH2 0xA3 JUMP JUMPDEST SUB PUSH2 0xB6 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xC8 DUP3 PUSH2 0xA6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xDE SWAP1 PUSH2 0xCA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xEA DUP2 PUSH2 0xD5 JUMP JUMPDEST SUB PUSH2 0xF1 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x103 DUP3 PUSH2 0xE1 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x111 DUP2 PUSH2 0x105 JUMP JUMPDEST SUB PUSH2 0x118 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x12A DUP3 PUSH2 0x108 JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0xC0 DUP3 DUP5 SUB SLT PUSH2 0x18C JUMPI PUSH2 0x145 DUP4 PUSH1 0x0 DUP5 ADD PUSH2 0xBB JUMP JUMPDEST SWAP3 PUSH2 0x153 DUP2 PUSH1 0x20 DUP6 ADD PUSH2 0xF6 JUMP JUMPDEST SWAP3 PUSH2 0x161 DUP3 PUSH1 0x40 DUP4 ADD PUSH2 0xF6 JUMP JUMPDEST SWAP3 PUSH2 0x189 PUSH2 0x172 DUP5 PUSH1 0x60 DUP6 ADD PUSH2 0xF6 JUMP JUMPDEST SWAP4 PUSH2 0x180 DUP2 PUSH1 0x80 DUP7 ADD PUSH2 0xF6 JUMP JUMPDEST SWAP4 PUSH1 0xA0 ADD PUSH2 0x11D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH2 0x19A SWAP1 PUSH2 0xD5 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1B2 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x191 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x1EB JUMPI PUSH2 0x1E7 PUSH2 0x1D6 PUSH2 0x1CA CALLDATASIZE PUSH1 0x4 PUSH2 0x12C JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0x52F JUMP JUMPDEST PUSH2 0x1DE PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x19E JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x20A JUMPI PUSH2 0x207 SWAP2 PUSH1 0x0 ADD PUSH2 0xF6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x243 JUMPI PUSH2 0x22D PUSH2 0x228 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F0 JUMP JUMPDEST PUSH2 0x68C JUMP JUMPDEST PUSH2 0x235 PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x23F DUP2 PUSH2 0x20F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x253 JUMPI JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x277 SWAP1 PUSH1 0x8 PUSH2 0x27C SWAP4 MUL PUSH2 0x258 JUMP JUMPDEST PUSH2 0x25C JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x28A SWAP2 SLOAD PUSH2 0x267 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x29A PUSH1 0x1 PUSH1 0x0 SWAP1 PUSH2 0x27F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2B4 PUSH2 0x2AF PUSH2 0x2B9 SWAP3 PUSH2 0xCA JUMP JUMPDEST PUSH2 0x29D JUMP JUMPDEST PUSH2 0xCA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2C5 SWAP1 PUSH2 0x2A0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2D1 SWAP1 PUSH2 0x2BC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2DD SWAP1 PUSH2 0x2C8 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2F5 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x2D4 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x327 JUMPI PUSH2 0x307 CALLDATASIZE PUSH1 0x4 PUSH2 0x248 JUMP JUMPDEST PUSH2 0x323 PUSH2 0x312 PUSH2 0x28D JUMP JUMPDEST PUSH2 0x31A PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2E1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x363 JUMPI PUSH2 0x35F PUSH2 0x34E PUSH2 0x342 CALLDATASIZE PUSH1 0x4 PUSH2 0x12C JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0x6FA JUMP JUMPDEST PUSH2 0x356 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x19E JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x396 JUMPI PUSH2 0x378 CALLDATASIZE PUSH1 0x4 PUSH2 0x248 JUMP JUMPDEST PUSH2 0x380 PUSH2 0x87F JUMP JUMPDEST PUSH2 0x388 PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x392 DUP2 PUSH2 0x20F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x3CB JUMPI PUSH2 0x3AB CALLDATASIZE PUSH1 0x4 PUSH2 0x248 JUMP JUMPDEST PUSH2 0x3C7 PUSH2 0x3B6 PUSH2 0x8B5 JUMP JUMPDEST PUSH2 0x3BE PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x19E JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x3FE JUMPI PUSH2 0x3E8 PUSH2 0x3E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F0 JUMP JUMPDEST PUSH2 0x9C2 JUMP JUMPDEST PUSH2 0x3F0 PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x3FA DUP2 PUSH2 0x20F JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x416 SWAP1 PUSH2 0xA3 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x423 SWAP1 PUSH2 0x105 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 SWAP6 SWAP5 SWAP3 PUSH2 0x473 SWAP5 PUSH2 0x462 PUSH2 0x46C SWAP3 PUSH2 0x458 PUSH1 0x80 SWAP7 PUSH2 0x44E PUSH1 0xA0 DUP9 ADD SWAP13 PUSH1 0x0 DUP10 ADD SWAP1 PUSH2 0x40D JUMP JUMPDEST PUSH1 0x20 DUP8 ADD SWAP1 PUSH2 0x191 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD SWAP1 PUSH2 0x191 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD SWAP1 PUSH2 0x191 JUMP JUMPDEST ADD SWAP1 PUSH2 0x41A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x49F SWAP1 PUSH2 0x475 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x4B9 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x4DB PUSH2 0x4D4 PUSH2 0x93 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x495 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4FB JUMPI PUSH2 0x4F7 PUSH1 0x20 SWAP2 PUSH2 0x475 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST SWAP1 PUSH2 0x512 PUSH2 0x50D DUP4 PUSH2 0x4DD JUMP JUMPDEST PUSH2 0x4C8 JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x521 PUSH1 0x0 PUSH2 0x500 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x52C PUSH2 0x517 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x56E SWAP3 SWAP2 SWAP5 PUSH2 0x590 SWAP7 PUSH2 0x55F SWAP3 PUSH2 0x545 PUSH2 0x408 JUMP JUMPDEST POP SWAP4 SWAP6 SWAP2 SWAP1 SWAP2 PUSH2 0x553 PUSH2 0x93 JUMP JUMPDEST SWAP7 DUP8 SWAP6 PUSH1 0x20 DUP8 ADD PUSH2 0x427 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x495 JUMP JUMPDEST PUSH2 0x580 PUSH2 0x57A DUP3 PUSH2 0x4C4 JUMP JUMPDEST SWAP2 PUSH2 0x4BE JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0x58A PUSH2 0x524 JUMP JUMPDEST SWAP2 PUSH2 0xAA1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5A4 SWAP1 PUSH2 0x59F PUSH2 0xBBA JUMP JUMPDEST PUSH2 0x5F9 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH2 0x5B8 PUSH2 0x5BD SWAP2 PUSH2 0x5A6 JUMP JUMPDEST PUSH2 0x25C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5CA SWAP1 SLOAD PUSH2 0x5AC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x5E3 JUMPI JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH2 0x5F0 PUSH2 0x93 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x60B PUSH2 0x606 PUSH1 0x1 PUSH2 0x5C0 JUMP JUMPDEST PUSH2 0x2C8 JUMP JUMPDEST SWAP1 PUSH4 0x3659CFE6 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0x687 JUMPI PUSH2 0x643 SWAP3 PUSH2 0x638 PUSH1 0x0 DUP1 SWAP5 PUSH2 0x62C PUSH2 0x93 JUMP JUMPDEST SWAP7 DUP8 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH2 0x5D2 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x19E JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x682 JUMPI PUSH2 0x655 JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0x675 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0x67B JUMPI JUMPDEST PUSH2 0x66D DUP2 DUP4 PUSH2 0x495 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x5D8 JUMP JUMPDEST CODESIZE PUSH2 0x652 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x663 JUMP JUMPDEST PUSH2 0x5E8 JUMP JUMPDEST PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x695 SWAP1 PUSH2 0x593 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x6A0 SWAP1 PUSH2 0x2A0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6AC SWAP1 PUSH2 0x697 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6B8 SWAP1 PUSH2 0x2BC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6F1 PUSH2 0x6F8 SWAP5 PUSH2 0x6E7 PUSH1 0x60 SWAP5 SWAP9 SWAP8 SWAP6 PUSH2 0x6DD PUSH1 0x80 DUP7 ADD SWAP11 PUSH1 0x0 DUP8 ADD SWAP1 PUSH2 0x191 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0x191 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x191 JUMP JUMPDEST ADD SWAP1 PUSH2 0x41A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x75C SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x70A PUSH2 0x408 JUMP JUMPDEST POP PUSH2 0x73A DUP6 SWAP2 PUSH2 0x72B DUP7 DUP10 DUP12 SWAP2 PUSH2 0x71F PUSH2 0x93 JUMP JUMPDEST SWAP7 DUP8 SWAP6 PUSH1 0x20 DUP8 ADD PUSH2 0x427 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x495 JUMP JUMPDEST PUSH2 0x74C PUSH2 0x746 DUP3 PUSH2 0x4C4 JUMP JUMPDEST SWAP2 PUSH2 0x4BE JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0x756 PUSH2 0x524 JUMP JUMPDEST SWAP2 PUSH2 0xCAD JUMP JUMPDEST SWAP4 PUSH2 0x76E PUSH2 0x769 DUP7 PUSH2 0x6A3 JUMP JUMPDEST PUSH2 0x6AF JUMP JUMPDEST SWAP1 PUSH4 0x63ACC14D SWAP4 SWAP3 SWAP5 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0x829 JUMPI PUSH1 0x0 SWAP5 PUSH2 0x7AA DUP7 SWAP3 PUSH2 0x79F SWAP5 PUSH2 0x793 PUSH2 0x93 JUMP JUMPDEST SWAP10 DUP11 SWAP9 DUP10 SWAP8 DUP9 SWAP7 PUSH2 0x5D2 JUMP JUMPDEST DUP7 MSTORE PUSH1 0x4 DUP7 ADD PUSH2 0x6BB JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x824 JUMPI PUSH2 0x7F7 JUMPI JUMPDEST POP DUP1 PUSH2 0x7F1 PUSH32 0xE3FC4D8C7984F762222579E0C4564A72A74F96CDE3F6BAE2751D01108C6EC240 SWAP2 PUSH2 0x7E8 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x19E JUMP JUMPDEST SUB SWAP1 LOG1 SWAP1 JUMP JUMPDEST PUSH2 0x817 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0x81D JUMPI JUMPDEST PUSH2 0x80F DUP2 DUP4 PUSH2 0x495 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x5D8 JUMP JUMPDEST CODESIZE PUSH2 0x7B9 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x805 JUMP JUMPDEST PUSH2 0x5E8 JUMP JUMPDEST PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x836 PUSH2 0xBBA JUMP JUMPDEST PUSH2 0x83E PUSH2 0x86B JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x857 PUSH2 0x852 PUSH2 0x85C SWAP3 PUSH2 0x840 JUMP JUMPDEST PUSH2 0x29D JUMP JUMPDEST PUSH2 0xCA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x868 SWAP1 PUSH2 0x843 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x87D PUSH2 0x878 PUSH1 0x0 PUSH2 0x85F JUMP JUMPDEST PUSH2 0xE3C JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x887 PUSH2 0x82E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x8A0 PUSH2 0x8A5 SWAP2 PUSH2 0x5A6 JUMP JUMPDEST PUSH2 0x889 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8B2 SWAP1 SLOAD PUSH2 0x894 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8BD PUSH2 0x408 JUMP JUMPDEST POP PUSH2 0x8C8 PUSH1 0x0 PUSH2 0x8A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8DC SWAP1 PUSH2 0x8D7 PUSH2 0xBBA JUMP JUMPDEST PUSH2 0x991 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x942 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x8DE JUMP JUMPDEST PUSH2 0x94B DUP2 PUSH2 0x8E7 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x965 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x935 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x96F JUMPI JUMP JUMPDEST PUSH2 0x977 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x98D PUSH1 0x4 DUP3 ADD PUSH2 0x94F JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x9C0 SWAP1 PUSH2 0x9BB DUP2 PUSH2 0x9B4 PUSH2 0x9AE PUSH2 0x9A9 PUSH1 0x0 PUSH2 0x85F JUMP JUMPDEST PUSH2 0xD5 JUMP JUMPDEST SWAP2 PUSH2 0xD5 JUMP JUMPDEST EQ ISZERO PUSH2 0x968 JUMP JUMPDEST PUSH2 0xE3C JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x9CB SWAP1 PUSH2 0x8CB JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9DC PUSH2 0x9E1 SWAP2 PUSH2 0x105 JUMP JUMPDEST PUSH2 0x9CD JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x60 SHL SWAP1 JUMP JUMPDEST PUSH2 0x9F4 SWAP1 PUSH2 0x9E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA00 SWAP1 PUSH2 0x9EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA0F PUSH2 0xA14 SWAP2 PUSH2 0xD5 JUMP JUMPDEST PUSH2 0x9F7 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0xA31 JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0xA20 JUMP JUMPDEST PUSH2 0xA67 PUSH2 0xA5E SWAP3 PUSH1 0x20 SWAP3 PUSH2 0xA55 DUP2 PUSH2 0x4C4 JUMP JUMPDEST SWAP5 DUP6 DUP1 SWAP4 PUSH2 0xA18 JUMP JUMPDEST SWAP4 DUP5 SWAP2 ADD PUSH2 0xA1D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x14 DUP1 SWAP4 PUSH2 0xA8F PUSH1 0x20 DUP5 PUSH2 0xA87 PUSH2 0xA97 SWAP7 PUSH2 0xA9E SWAP12 SWAP11 SWAP9 PUSH2 0x9D0 JUMP JUMPDEST ADD DUP1 SWAP3 PUSH2 0xA03 JUMP JUMPDEST ADD DUP1 SWAP3 PUSH2 0xA03 JUMP JUMPDEST ADD SWAP1 PUSH2 0xA42 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xB34 SWAP3 SWAP2 PUSH2 0xADE PUSH2 0xAED SWAP3 PUSH2 0xAB5 PUSH2 0x408 JUMP JUMPDEST POP SWAP2 SWAP4 PUSH2 0xACA PUSH2 0xAC5 PUSH1 0x1 PUSH2 0x5C0 JUMP JUMPDEST PUSH2 0x2C8 JUMP JUMPDEST PUSH2 0xAD2 PUSH2 0x93 JUMP JUMPDEST SWAP6 DUP7 SWAP5 PUSH1 0x20 DUP7 ADD PUSH2 0xA6B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x495 JUMP JUMPDEST PUSH2 0xAFF PUSH2 0xAF9 DUP3 PUSH2 0x4C4 JUMP JUMPDEST SWAP2 PUSH2 0x4BE JUMP JUMPDEST KECCAK256 PUSH2 0x148A PUSH2 0xB0F PUSH1 0x20 DUP3 ADD PUSH2 0x4C8 JUMP JUMPDEST SWAP1 DUP1 DUP3 MSTORE PUSH2 0x1115 PUSH1 0x20 DUP4 ADD CODECOPY PUSH2 0xB2D PUSH2 0xB27 DUP3 PUSH2 0x4C4 JUMP JUMPDEST SWAP2 PUSH2 0x4BE JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0xEA9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xB6B PUSH1 0x20 DUP1 SWAP3 PUSH2 0x8DE JUMP JUMPDEST PUSH2 0xB74 DUP2 PUSH2 0xB37 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xB8E SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xB5F JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xB98 JUMPI JUMP JUMPDEST PUSH2 0xBA0 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xBB6 PUSH1 0x4 DUP3 ADD PUSH2 0xB78 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xBE4 PUSH2 0xBC5 PUSH2 0x8B5 JUMP JUMPDEST PUSH2 0xBDE PUSH2 0xBD8 PUSH2 0xBD3 PUSH2 0xECA JUMP JUMPDEST PUSH2 0xD5 JUMP JUMPDEST SWAP2 PUSH2 0xD5 JUMP JUMPDEST EQ PUSH2 0xB91 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xBFA PUSH2 0xBF5 PUSH2 0xBFF SWAP3 PUSH2 0x840 JUMP JUMPDEST PUSH2 0x29D JUMP JUMPDEST PUSH2 0xA3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC0B SWAP1 PUSH2 0x2A0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC17 SWAP1 PUSH2 0xC02 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC23 SWAP1 PUSH2 0x2A0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC2F SWAP1 PUSH2 0xC1A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC3B SWAP1 PUSH2 0x2BC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH2 0xC66 PUSH2 0xC6F PUSH1 0x20 SWAP4 PUSH2 0xC74 SWAP4 PUSH2 0xC5D DUP2 PUSH2 0x4C4 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xC3E JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0xA1D JUMP JUMPDEST PUSH2 0x475 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xC9D PUSH2 0xCAA SWAP5 SWAP3 SWAP4 PUSH2 0xC93 PUSH1 0x60 DUP5 ADD SWAP6 PUSH1 0x0 DUP6 ADD SWAP1 PUSH2 0x191 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x191 JUMP JUMPDEST PUSH1 0x40 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xC47 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xD3D SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH2 0xCBD PUSH2 0x408 JUMP JUMPDEST POP PUSH2 0xCFD DUP6 SWAP2 PUSH2 0xCEE PUSH2 0xCD8 PUSH2 0xCD3 PUSH1 0x1 PUSH2 0x5C0 JUMP JUMPDEST PUSH2 0x2C8 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0xCE2 PUSH2 0x93 JUMP JUMPDEST SWAP6 DUP7 SWAP5 PUSH1 0x20 DUP7 ADD PUSH2 0xA6B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x495 JUMP JUMPDEST PUSH2 0xD0F PUSH2 0xD09 DUP3 PUSH2 0x4C4 JUMP JUMPDEST SWAP2 PUSH2 0x4BE JUMP JUMPDEST KECCAK256 PUSH2 0x148A PUSH2 0xD1F PUSH1 0x20 DUP3 ADD PUSH2 0x4C8 JUMP JUMPDEST SWAP1 DUP1 DUP3 MSTORE PUSH2 0x1115 PUSH1 0x20 DUP4 ADD CODECOPY PUSH2 0xD38 PUSH1 0x0 SWAP3 SWAP2 SWAP3 PUSH2 0xBE6 JUMP JUMPDEST PUSH2 0x1062 JUMP JUMPDEST SWAP3 PUSH2 0xD57 PUSH2 0xD52 PUSH2 0xD4D DUP7 PUSH2 0xC0E JUMP JUMPDEST PUSH2 0xC26 JUMP JUMPDEST PUSH2 0xC32 JUMP JUMPDEST PUSH4 0xCF7A1D77 SWAP2 SWAP1 PUSH2 0xD70 PUSH2 0xD6B PUSH1 0x1 PUSH2 0x5C0 JUMP JUMPDEST PUSH2 0x2C8 JUMP JUMPDEST SWAP4 SWAP3 DUP2 EXTCODESIZE ISZERO PUSH2 0xDE7 JUMPI PUSH1 0x0 PUSH2 0xD98 SWAP2 PUSH2 0xDA3 DUP3 SWAP7 PUSH2 0xD8C PUSH2 0x93 JUMP JUMPDEST SWAP9 DUP10 SWAP8 DUP9 SWAP7 DUP8 SWAP6 PUSH2 0x5D2 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0xC78 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xDE2 JUMPI PUSH2 0xDB5 JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0xDD5 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0xDDB JUMPI JUMPDEST PUSH2 0xDCD DUP2 DUP4 PUSH2 0x495 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x5D8 JUMP JUMPDEST CODESIZE PUSH2 0xDB2 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xDC3 JUMP JUMPDEST PUSH2 0x5E8 JUMP JUMPDEST PUSH2 0x5CD JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xE03 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xDEC JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0xE16 SWAP1 PUSH2 0x2BC JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xE31 PUSH2 0xE2C PUSH2 0xE38 SWAP3 PUSH2 0xE0D JUMP JUMPDEST PUSH2 0xE19 JUMP JUMPDEST DUP3 SLOAD PUSH2 0xDF2 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xE46 PUSH1 0x0 PUSH2 0x8A8 JUMP JUMPDEST PUSH2 0xE51 DUP3 PUSH1 0x0 PUSH2 0xE1C JUMP JUMPDEST SWAP1 PUSH2 0xE85 PUSH2 0xE7F PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0xE0D JUMP JUMPDEST SWAP2 PUSH2 0xE0D JUMP JUMPDEST SWAP2 PUSH2 0xE8E PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0xE98 DUP2 PUSH2 0x20F JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0xEA6 SWAP1 PUSH2 0x2BC JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xEC7 SWAP2 PUSH2 0xEB6 PUSH2 0x408 JUMP JUMPDEST POP SWAP1 PUSH2 0xEC1 ADDRESS PUSH2 0xE9D JUMP JUMPDEST SWAP2 PUSH2 0x10EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xED2 PUSH2 0x408 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A20696E73756666696369656E742062616C616E6365000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xF0C PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x8DE JUMP JUMPDEST PUSH2 0xF15 DUP2 PUSH2 0xED7 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xF2F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xEFF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xF39 JUMPI JUMP JUMPDEST PUSH2 0xF41 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xF57 PUSH1 0x4 DUP3 ADD PUSH2 0xF19 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A2062797465636F6465206C656E677468206973207A65726F SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xF8F PUSH1 0x20 DUP1 SWAP3 PUSH2 0x8DE JUMP JUMPDEST PUSH2 0xF98 DUP2 PUSH2 0xF5B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xFB2 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xF83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xFBC JUMPI JUMP JUMPDEST PUSH2 0xFC4 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xFDA PUSH1 0x4 DUP3 ADD PUSH2 0xF9C JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A204661696C6564206F6E206465706C6F7900000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x1013 PUSH1 0x19 PUSH1 0x20 SWAP3 PUSH2 0x8DE JUMP JUMPDEST PUSH2 0x101C DUP2 PUSH2 0xFDE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1036 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1006 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1040 JUMPI JUMP JUMPDEST PUSH2 0x1048 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x105E PUSH1 0x4 DUP3 ADD PUSH2 0x1020 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x106D PUSH2 0x408 JUMP JUMPDEST POP PUSH2 0x1094 PUSH2 0x107A ADDRESS PUSH2 0xE9D JUMP JUMPDEST BALANCE PUSH2 0x108D PUSH2 0x1087 DUP5 PUSH2 0xA3 JUMP JUMPDEST SWAP2 PUSH2 0xA3 JUMP JUMPDEST LT ISZERO PUSH2 0xF32 JUMP JUMPDEST PUSH2 0x10BA PUSH2 0x10A0 DUP4 PUSH2 0x4C4 JUMP JUMPDEST PUSH2 0x10B3 PUSH2 0x10AD PUSH1 0x0 PUSH2 0xBE6 JUMP JUMPDEST SWAP2 PUSH2 0xA3 JUMP JUMPDEST EQ ISZERO PUSH2 0xFB5 JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD SWAP3 ADD SWAP1 CREATE2 SWAP1 PUSH2 0x10E9 DUP3 PUSH2 0x10E2 PUSH2 0x10DC PUSH2 0x10D7 PUSH1 0x0 PUSH2 0x85F JUMP JUMPDEST PUSH2 0xD5 JUMP JUMPDEST SWAP2 PUSH2 0xD5 JUMP JUMPDEST EQ ISZERO PUSH2 0x1039 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x55 SWAP3 PUSH1 0xB SWAP3 PUSH2 0x10FA PUSH2 0x408 JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP3 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP4 ADD MSTORE DUP2 MSTORE ADD PUSH1 0xFF DUP2 MSTORE8 KECCAK256 SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x145E PUSH2 0x2C DUP3 CODECOPY PUSH2 0x145E SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x6B JUMPI PUSH2 0x6B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x34 PUSH2 0x2F PUSH2 0x39 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x45 SWAP1 PUSH2 0x20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x51 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x73 PUSH2 0x17E JUMP JUMPDEST PUSH2 0x8E PUSH2 0x88 PUSH2 0x83 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x46C JUMPI PUSH2 0x9B PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND PUSH2 0xC1 PUSH2 0xBB PUSH4 0xCF7A1D77 PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH2 0xE3 JUMPI PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0xDF PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xEB PUSH2 0x401 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x113 PUSH2 0x11D SWAP3 PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x149 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x104 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x16E SWAP2 PUSH2 0x14C JUMP JUMPDEST PUSH2 0x152 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17B SWAP1 SLOAD PUSH2 0x15D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1A2 PUSH1 0x0 PUSH2 0x19C PUSH2 0x197 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1BF PUSH2 0x1BA PUSH2 0x1C4 SWAP3 PUSH2 0x1A5 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x1F7 JUMPI DUP5 GT PUSH2 0x1F2 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1CD JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x212 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x21E DUP2 PUSH2 0x209 JUMP JUMPDEST SUB PUSH2 0x225 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x237 DUP3 PUSH2 0x215 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x26D SWAP1 PUSH2 0x243 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x287 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x29F PUSH2 0x298 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x263 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2BF JUMPI PUSH2 0x2BB PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2E5 PUSH2 0x2E0 DUP3 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x301 JUMPI PUSH2 0x2FF SWAP3 PUSH2 0x2C4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x23E JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x324 JUMPI DUP2 PUSH1 0x20 PUSH2 0x321 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2D0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x239 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x376 JUMPI PUSH2 0x341 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH2 0x34F DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x371 JUMPI PUSH2 0x36E SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x38F PUSH2 0x38A PUSH2 0x394 SWAP3 PUSH2 0x12 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A0 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3AC SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3CD JUMPI PUSH2 0x3C9 PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x3E4 PUSH2 0x3DF DUP4 PUSH2 0x3AF JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x0 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FE PUSH2 0x3E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x412 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x461 PUSH2 0x457 PUSH2 0x451 PUSH2 0x447 PUSH2 0x43F PUSH2 0x439 PUSH1 0x0 CALLDATASIZE PUSH2 0x431 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x329 JUMP JUMPDEST SWAP4 SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x469 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLER PUSH2 0x486 PUSH2 0x480 PUSH2 0x47B PUSH2 0x17E JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x59D JUMPI PUSH2 0x496 PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x4BD PUSH2 0x4B7 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x4D7 JUMPI POP PUSH2 0x4CE PUSH2 0x817 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0x4F1 PUSH2 0x4EB PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x508 JUMPI POP PUSH2 0x502 PUSH2 0x7C1 JUMP JUMPDEST JUMPDEST PUSH2 0x4CF JUMP JUMPDEST DUP1 PUSH2 0x522 PUSH2 0x51C PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x539 JUMPI POP PUSH2 0x533 PUSH2 0x723 JUMP JUMPDEST JUMPDEST PUSH2 0x503 JUMP JUMPDEST DUP1 PUSH2 0x553 PUSH2 0x54D PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x56A JUMPI POP PUSH2 0x564 PUSH2 0x6BF JUMP JUMPDEST JUMPDEST PUSH2 0x534 JUMP JUMPDEST PUSH2 0x583 PUSH2 0x57D PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x598 JUMPI PUSH2 0x593 PUSH2 0x67A JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5B9 PUSH2 0x5B4 PUSH2 0x5BE SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5C8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5EA CALLVALUE PUSH2 0x5E4 PUSH2 0x5DE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x5C1 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5F6 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x611 PUSH2 0x60B PUSH2 0x606 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x62D JUMPI PUSH2 0x622 PUSH2 0x62B SWAP4 PUSH2 0x8B2 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH2 0x98D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x646 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x652 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST PUSH2 0x660 SWAP1 PUSH2 0x48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x678 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x682 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x68B PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6BC PUSH2 0x699 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x6A1 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C7 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x6D0 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6F2 PUSH2 0x701 PUSH2 0x6DE PUSH2 0x17E JUMP JUMPDEST PUSH2 0x6E6 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x71E JUMPI PUSH2 0x71B SWAP2 PUSH1 0x0 ADD PUSH2 0x22A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x72B PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x734 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x770 PUSH2 0x76B PUSH2 0x766 PUSH2 0x75E PUSH2 0x758 PUSH1 0x0 CALLDATASIZE PUSH2 0x750 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x8B2 JUMP JUMPDEST PUSH2 0x778 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x7BC JUMPI PUSH2 0x795 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7B7 JUMPI PUSH2 0x7B4 SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x7C9 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x80C PUSH2 0x803 PUSH2 0x7FC PUSH2 0x7F4 PUSH2 0x7EE PUSH1 0x0 CALLDATASIZE PUSH2 0x7E6 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x77B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3A3 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x814 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x81F PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x828 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x86F PUSH2 0x85F PUSH2 0x85A PUSH2 0x852 PUSH2 0x84C PUSH1 0x0 CALLDATASIZE PUSH2 0x844 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x867 PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x877 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x882 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x88B PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x8B0 SWAP3 SWAP5 SWAP4 PUSH2 0x8A9 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8FD SWAP1 PUSH2 0x8BE PUSH2 0x17E JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x8F5 PUSH2 0x8EC PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x88E JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0xC4D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x908 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x924 SWAP1 PUSH2 0x90F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x930 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x942 DUP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x949 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x95B DUP3 PUSH2 0x939 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x977 JUMPI PUSH2 0x974 SWAP2 PUSH1 0x0 ADD PUSH2 0x94E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x984 PUSH2 0x1C7 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 PUSH2 0x997 DUP4 PUSH2 0xE30 JUMP JUMPDEST DUP3 PUSH2 0x9C2 PUSH32 0x1CF3B03A6CF19FA2BABA4DF148E9DCABEDEA7F8A5C07840E207E5C089BE95D3E SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x9CB PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x9D5 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH2 0x9E1 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x9F4 PUSH2 0x9EE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xA9E JUMPI JUMPDEST POP PUSH2 0xA07 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x20 PUSH2 0xA1D PUSH2 0xA18 PUSH2 0xA33 SWAP5 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xA2B PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xA43 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA99 JUMPI PUSH2 0xA61 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0xA69 JUMPI JUMPDEST POP SWAP1 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0xA8B SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xA92 JUMPI JUMPDEST PUSH2 0xA83 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xA5A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA79 JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x9FD JUMP JUMPDEST PUSH2 0xAAE PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xAB7 PUSH2 0xF85 JUMP JUMPDEST DUP1 PUSH2 0xAD3 PUSH2 0xACD PUSH2 0xAC8 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0xAE4 JUMPI POP PUSH2 0xAE1 PUSH2 0xF99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0xB05 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH2 0xB14 DUP4 PUSH2 0x102F JUMP JUMPDEST PUSH2 0xB1D DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0xB30 PUSH2 0xB2A PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xB54 JUMPI JUMPDEST POP PUSH2 0xB43 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xB4C SWAP2 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xB3F JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xBC0 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xBC9 DUP2 PUSH2 0xB65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xBE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xBB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xBED JUMPI JUMP JUMPDEST PUSH2 0xBF5 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC0B PUSH1 0x4 DUP3 ADD PUSH2 0xBCD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xC20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xFE JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xC42 PUSH2 0xC3D PUSH2 0xC49 SWAP3 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0xC2A JUMP JUMPDEST DUP3 SLOAD PUSH2 0xC0F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC8F SWAP1 PUSH2 0xC77 DUP2 PUSH2 0xC70 PUSH2 0xC6A PUSH2 0xC65 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ ISZERO PUSH2 0xBE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC89 PUSH2 0xC84 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7472616374000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720626561636F6E206973206E6F74206120636F6E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xCEC PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xCF5 DUP2 PUSH2 0xC91 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD0F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xCDF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xD19 JUMPI JUMP JUMPDEST PUSH2 0xD21 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xD37 PUSH1 0x4 DUP3 ADD PUSH2 0xCF9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x73206E6F74206120636F6E747261637400000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A20626561636F6E20696D706C656D656E746174696F6E2069 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xD96 PUSH1 0x30 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xD9F DUP2 PUSH2 0xD3B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xDB9 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xD89 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xDC3 JUMPI JUMP JUMPDEST PUSH2 0xDCB PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xDE1 PUSH1 0x4 DUP3 ADD PUSH2 0xDA3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDFC PUSH2 0xDF7 PUSH2 0xE01 SWAP3 PUSH2 0xDE5 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE2D PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0xDE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE6E SWAP1 PUSH2 0xE45 PUSH2 0xE40 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x20 PUSH2 0xE58 PUSH2 0xE53 DUP4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xE66 PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xE7E PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL DUP1 ISZERO PUSH2 0xEEE JUMPI PUSH2 0xEA1 PUSH2 0xEA6 SWAP2 PUSH2 0xEBE SWAP5 PUSH1 0x0 SWAP2 PUSH2 0xEC0 JUMPI JUMPDEST POP PUSH2 0x107F JUMP JUMPDEST PUSH2 0xDBC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB8 PUSH2 0xEB3 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEE1 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xEE7 JUMPI JUMPDEST PUSH2 0xED9 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xE9B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xECF JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xF4B PUSH1 0x27 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 PUSH2 0xF58 PUSH1 0x20 DUP4 ADD PUSH2 0xEF3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF62 PUSH2 0xF41 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF82 SWAP2 PUSH2 0xF72 PUSH2 0x54 JUMP JUMPDEST POP SWAP1 PUSH2 0xF7C PUSH2 0xF5A JUMP JUMPDEST SWAP2 PUSH2 0x10E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF8D PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xF96 PUSH2 0x1160 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFA1 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xFD5 PUSH1 0x20 PUSH2 0xFBF PUSH2 0xFBA PUSH2 0xFB5 PUSH2 0x1187 JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xFCD PUSH2 0x1C7 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xFE5 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x102A JUMPI PUSH1 0x0 SWAP2 PUSH2 0xFFC JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x101D SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1023 JUMPI JUMPDEST PUSH2 0x1015 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xFF8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x100B JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH2 0x1038 DUP2 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x1062 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x106B PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x1075 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1087 PUSH2 0x107A JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x109C PUSH2 0x1096 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10B2 PUSH2 0x10AD DUP4 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0x10D4 JUMPI PUSH2 0x10C8 RETURNDATASIZE PUSH2 0x10A0 JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0x10DC PUSH2 0x54 JUMP JUMPDEST SWAP1 PUSH2 0x10D2 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0x1112 SWAP5 PUSH2 0x10F3 PUSH2 0x54 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0x1108 PUSH2 0x10B7 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x130B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x112C PUSH2 0x1127 PUSH2 0x1131 SWAP3 PUSH2 0x1115 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x115D PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x1118 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1168 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1184 PUSH1 0x0 PUSH2 0x117E PUSH2 0x1179 PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x118F PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x11AB PUSH1 0x0 PUSH2 0x11A5 PUSH2 0x11A0 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1209 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x1212 DUP2 PUSH2 0x11AE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x122C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x11FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1236 JUMPI JUMP JUMPDEST PUSH2 0x123E PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1254 PUSH1 0x4 DUP3 ADD PUSH2 0x1216 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x1285 SWAP1 PUSH2 0x126D PUSH2 0x1268 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127F PUSH2 0x127A PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x12BC PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x12C5 DUP2 PUSH2 0x1287 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x12DF SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x12AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12E9 JUMPI JUMP JUMPDEST PUSH2 0x12F1 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1307 PUSH1 0x4 DUP3 ADD PUSH2 0x12C9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0x1316 PUSH2 0x54 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0x135C JUMPI POP PUSH2 0x1328 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x133B PUSH2 0x1335 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x1345 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1351 PUSH2 0x1356 SWAP2 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x12E2 JUMP JUMPDEST CODESIZE PUSH2 0x1341 JUMP JUMPDEST DUP3 PUSH2 0x13D5 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x137A JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x1369 JUMP JUMPDEST PUSH2 0x13AA PUSH2 0x13B3 PUSH1 0x20 SWAP4 PUSH2 0x13B8 SWAP4 PUSH2 0x13A1 DUP2 PUSH2 0x1362 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xB5C JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x1366 JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x13D2 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x138B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x13DF DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x13F2 PUSH2 0x13EC PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x1403 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0x1424 SWAP1 PUSH2 0x140F PUSH2 0x1C7 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x13BC JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB XOR SWAP10 0xE6 0x1F CODESIZE STATICCALL 0xA7 DUP12 0xFB 0xAB PUSH26 0xB8DC2FA613357C2FCE2699411F9FEE80B624365564736F6C6343 STOP ADDMOD SHL STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0xC6C1471F4CC9C60143B475E5 SWAP10 0xCE 0xDD 0x26 SHL PUSH22 0x3A87093C41A9601E41752618C964736F6C634300081B STOP CALLER ",
              "sourceMap": "335:1515:38:-:0;;;;;;;;;-1:-1:-1;335:1515:38;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::o;746:31:31:-;;;;;;:::i;:::-;;:::o;335:1515:38:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;:::o;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::i;:::-;;:::o;1409:438::-;1698:82;1409:438;;;1798:42;1409:438;1698:82;1409:438;1644:17;;:::i;:::-;1709:5;1716:10;1728:5;1735:21;1758;1698:82;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;1688:93;;;;:::i;:::-;;;:::i;:::-;;1825:10;1798:42;;:::i;:::-;;;:::i;:::-;1791:49;:::o;1063:62:4:-;1117:1;1063:62;;;:::i;:::-;1117:1;:::i;:::-;1063:62::o;335:1515:38:-;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;:::i;:::-;;;;;;;;2718:127:31;2806:16;:6;;;:::i;:::-;:16;:::i;:::-;;;2823:14;2806:32;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;2718:127;;:::o;2806:32::-;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;:::i;2718:127::-;;;;:::i;:::-;:::o;335:1515:38:-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;:::o;758:597::-;;1137:34;758:597;;;;978:17;;:::i;:::-;1043:5;1032:82;1050:10;1062:5;1032:82;1062:5;1069:21;1092;1032:82;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;1022:93;;;;:::i;:::-;;;:::i;:::-;;1156:10;1137:34;;:::i;:::-;;;:::i;:::-;1192:9;1181:32;:21;1192:9;1181:21;:::i;:::-;:32;:::i;:::-;;;1214:10;1226:5;1233:21;1256;1181:97;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;758:597;1312:9;;1293:29;;;;;:::i;:::-;;;;;;:::i;:::-;;;;1332:16;:::o;1181:97::-;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;:::i;1063:62:4:-;;;:::i;:::-;1117:1;;:::i;:::-;1063:62::o;335:1515:38:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;1824:101:4:-;1907:10;;1915:1;1907:10;:::i;:::-;;:::i;:::-;1824:101::o;:::-;;;:::i;:::-;:::o;335:1515:38:-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;1201:85:4:-;1247:7;;:::i;:::-;1273:6;;;;:::i;:::-;1266:13;:::o;1063:62::-;1117:1;1063:62;;;:::i;:::-;1117:1;:::i;:::-;1063:62::o;335:1515:38:-;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;2074:198:4;2256:8;2074:198;2154:73;2162:8;:22;;2174:10;2182:1;2174:10;:::i;:::-;2162:22;:::i;:::-;;;:::i;:::-;;;2154:73;:::i;:::-;2256:8;:::i;:::-;2074:198::o;:::-;;;;:::i;:::-;:::o;335:1515:38:-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;;:::o;2174:419:31:-;2538:48;2174:419;;2363:60;;2174:419;2313:7;;:::i;:::-;2380:5;2387:11;2408:6;2400:15;2408:6;;;:::i;:::-;2400:15;:::i;:::-;2363:60;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;2353:71;;;;:::i;:::-;;;:::i;:::-;;2467:52;;;;;;:::i;:::-;;;;;;;;;;2457:63;;;;:::i;:::-;;;:::i;:::-;;2538:48;;:::i;:::-;2531:55;:::o;335:1515:38:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;1359:130:4;1414:68;1422:7;;:::i;:::-;:23;;1433:12;;:::i;:::-;1422:23;:::i;:::-;;;:::i;:::-;;1414:68;:::i;:::-;1359:130::o;335:1515:38:-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;:::o;1424:523:31:-;1786:39;1424:523;;;;;1550:20;;:::i;:::-;1630:5;1613:60;1637:11;1658:6;1613:60;1650:15;1658:6;;;:::i;:::-;1650:15;:::i;:::-;1667:5;1613:60;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;1603:71;;;;:::i;:::-;;;:::i;:::-;;1708:52;;;;;;:::i;:::-;;;;;;;;;;1786:39;1801:1;1804:10;1816:8;1786:39;;:::i;:::-;;:::i;:::-;1878:12;1835:68;:57;1870:21;1878:12;1870:21;:::i;:::-;1835:57;:::i;:::-;:68;:::i;:::-;;1904:11;1925:6;1917:15;1925:6;;;:::i;:::-;1917:15;:::i;:::-;1934:5;1835:105;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;1424:523;;:::o;1835:105::-;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;:::i;335:1515:38:-;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;2426:187:4:-;2518:6;;;:::i;:::-;2534:17;2543:8;2534:17;;:::i;:::-;2597:8;2566:40;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;2426:187::o;335:1515:38:-;;;;:::i;:::-;;:::o;1769:165:16:-;;1878:49;1769:165;1852:7;;:::i;:::-;1893:4;1899:12;1913:13;1921:4;1913:13;:::i;:::-;1878:49;;:::i;:::-;1871:56;:::o;640:96:15:-;693:7;;:::i;:::-;719:10;;712:17;:::o;335:1515:38:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;1081:484:16;;;;1168:12;;:::i;:::-;1208:4;1192:73;1200:13;1208:4;1200:13;:::i;:::-;:21;:31;;1225:6;1200:31;:::i;:::-;;;:::i;:::-;;;1192:73;:::i;:::-;1275:65;1283:15;:8;:15;:::i;:::-;:20;;1302:1;1283:20;:::i;:::-;;;:::i;:::-;;;1275:65;:::i;:::-;1393:100;;;;;;;1510:4;1502:56;1510:4;:18;;1518:10;1526:1;1518:10;:::i;:::-;1510:18;:::i;:::-;;;:::i;:::-;;;1502:56;:::i;:::-;1081:484::o;2177:1772::-;;2345:1598;2177:1772;2345:1598;2177:1772;2278:12;;:::i;:::-;2345:1598;;;;;;;;;;;;;;;;;;;2177:1772;:::o"
            },
            "methodIdentifiers": {
              "beacon()": "59659e90",
              "deploy(uint256,address,address,address,address,bytes32)": "69b3934d",
              "determineAddress(uint256,address,address,address,address,bytes32)": "1a4b671d",
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b",
              "upgradeBeacon(address)": "1bce4583"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"name\":\"ERC721SaleDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beacon\",\"outputs\":[{\"internalType\":\"contract UpgradeableBeacon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"items\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"items\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"determineAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgradeBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ERC721SaleDeployed(address)\":{\"params\":{\"proxyAddr\":\"The address of the deployed proxy.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"factoryOwner\":\"The owner of the ERC-721 Sale Factory\"}},\"deploy(uint256,address,address,address,address,bytes32)\":{\"params\":{\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"items\":\"The ERC-721 Items contract address\",\"nonce\":\"Nonce for randomizing the deployment address.\",\"proxyOwner\":\"The owner of the ERC-721 Sale proxy\",\"tokenOwner\":\"The owner of the ERC-721 Sale implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-721 Sale Proxy\"}},\"determineAddress(uint256,address,address,address,address,bytes32)\":{\"params\":{\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"items\":\"The ERC-721 Items contract address\",\"nonce\":\"Nonce for randomizing the deployment address.\",\"proxyOwner\":\"The owner of the ERC-721 Sale proxy\",\"tokenOwner\":\"The owner of the ERC-721 Sale implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-721 Sale Proxy\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeBeacon(address)\":{\"params\":{\"implementation\":\"The new beacon implementation.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ERC721SaleDeployed(address)\":{\"notice\":\"Event emitted when a new ERC-721 Sale proxy contract is deployed.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Creates an ERC-721 Sale Factory.\"},\"deploy(uint256,address,address,address,address,bytes32)\":{\"notice\":\"Creates an ERC-721 Sale for given token contractThe deployed contract must be granted the MINTER_ROLE on the ERC-721 Items contract.\"},\"determineAddress(uint256,address,address,address,address,bytes32)\":{\"notice\":\"Computes the address of a proxy instance.\"},\"upgradeBeacon(address)\":{\"notice\":\"Upgrades the beacon implementation.\"}},\"notice\":\"Deployer of ERC-721 Sale proxies.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/utility/sale/ERC721SaleFactory.sol\":\"ERC721SaleFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IImplicitProjectValidation } from \\\"../registry/IImplicitProjectValidation.sol\\\";\\n\\nimport { ERC165, IERC165 } from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\nimport { ISignalsImplicitMode } from \\\"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\\\";\\nimport { Payload } from \\\"sequence-v3/src/modules/Payload.sol\\\";\\n\\n/// @title SignalsImplicitMode\\n/// @author Michael Standen\\n/// @notice Base contract for implicit mode validation by project\\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\\n\\n  IImplicitProjectValidation internal _validator;\\n  bytes32 internal _projectId;\\n\\n  /// @notice Initialize implicit mode validation\\n  /// @param validator The IImplicitProjectValidation address\\n  /// @param projectId The project id\\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\\n    _validator = IImplicitProjectValidation(validator);\\n    _projectId = projectId;\\n  }\\n\\n  /// @inheritdoc ISignalsImplicitMode\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32) {\\n    _validateImplicitRequest(wallet, attestation, call);\\n    return _validator.validateAttestation(wallet, attestation, _projectId);\\n  }\\n\\n  /// @notice Validates an implicit request\\n  /// @dev Optional hook for additional validation of the implicit requests\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  function _validateImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) internal view virtual { }\\n\\n  /// @inheritdoc IERC165\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd9107be2460f7f7ec4bdfefc3d10c79aa92b9285e1b12a75cb2a8d17b150a2ec\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"},\"src/proxies/SequenceProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport {\\n    ITransparentUpgradeableBeaconProxy,\\n    TransparentUpgradeableBeaconProxy\\n} from \\\"./TransparentUpgradeableBeaconProxy.sol\\\";\\n\\nimport { Ownable } from \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport { UpgradeableBeacon } from \\\"openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport { Create2 } from \\\"openzeppelin-contracts/contracts/utils/Create2.sol\\\";\\n\\n/**\\n * An proxy factory that deploys upgradeable beacon proxies.\\n * @dev The factory owner is able to upgrade the beacon implementation.\\n * @dev Proxy deployers are able to override the beacon reference with their own.\\n */\\nabstract contract SequenceProxyFactory is Ownable {\\n\\n    UpgradeableBeacon public beacon;\\n\\n    /**\\n     * Initialize a Sequence Proxy Factory.\\n     * @param implementation The initial beacon implementation.\\n     * @param factoryOwner The owner of the factory.\\n     */\\n    function _initialize(address implementation, address factoryOwner) internal {\\n        beacon = new UpgradeableBeacon(implementation);\\n        Ownable._transferOwnership(factoryOwner);\\n    }\\n\\n    /**\\n     * Deploys and initializes a new proxy instance.\\n     * @param _salt The deployment salt.\\n     * @param _proxyOwner The owner of the proxy.\\n     * @param _data The initialization data.\\n     * @return proxyAddress The address of the deployed proxy.\\n     */\\n    function _createProxy(\\n        bytes32 _salt,\\n        address _proxyOwner,\\n        bytes memory _data\\n    ) internal returns (address proxyAddress) {\\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\\n        bytes memory bytecode = type(TransparentUpgradeableBeaconProxy).creationCode;\\n\\n        proxyAddress = Create2.deploy(0, saltedHash, bytecode);\\n        ITransparentUpgradeableBeaconProxy(payable(proxyAddress)).initialize(_proxyOwner, address(beacon), _data);\\n    }\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param _salt The deployment salt.\\n     * @param _proxyOwner The owner of the proxy.\\n     * @return proxy The expected address of the deployed proxy.\\n     */\\n    function _computeProxyAddress(\\n        bytes32 _salt,\\n        address _proxyOwner,\\n        bytes memory _data\\n    ) internal view returns (address) {\\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\\n        bytes32 bytecodeHash = keccak256(type(TransparentUpgradeableBeaconProxy).creationCode);\\n\\n        return Create2.computeAddress(saltedHash, bytecodeHash);\\n    }\\n\\n    /**\\n     * Upgrades the beacon implementation.\\n     * @param implementation The new beacon implementation.\\n     */\\n    function upgradeBeacon(\\n        address implementation\\n    ) public onlyOwner {\\n        beacon.upgradeTo(implementation);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1cfe45a8e44b7a1b8f11631da9bdd1420fe040e2322ca725d644fbb26813de73\",\"license\":\"Apache-2.0\"},\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { BeaconProxy, Proxy } from \\\"./openzeppelin/BeaconProxy.sol\\\";\\nimport { ERC1967Proxy, TransparentUpgradeableProxy } from \\\"./openzeppelin/TransparentUpgradeableProxy.sol\\\";\\n\\ninterface ITransparentUpgradeableBeaconProxy {\\n\\n    function initialize(address admin, address beacon, bytes memory data) external;\\n\\n}\\n\\nerror InvalidInitialization();\\n\\n/**\\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * The proxy selectors are:\\n * - 0xcf7a1d77: initialize\\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\\n */\\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\\n\\n    /**\\n     * Decode the initialization data from the msg.data and call the initialize function.\\n     */\\n    function _dispatchInitialize() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\\n        initialize(admin, beacon, data);\\n\\n        return \\\"\\\";\\n    }\\n\\n    function initialize(address admin, address beacon, bytes memory data) internal {\\n        if (_admin() != address(0)) {\\n            // Redundant call. This function can only be called when the admin is not set.\\n            revert InvalidInitialization();\\n        }\\n        _changeAdmin(admin);\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\\n     */\\n    function _fallback() internal override(TransparentUpgradeableProxy, Proxy) {\\n        if (_getAdmin() == address(0)) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\\n                ret = _dispatchInitialize();\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    return(add(ret, 0x20), mload(ret))\\n                }\\n            }\\n            // When the admin is not set, the fallback function is used to initialize the proxy.\\n            revert InvalidInitialization();\\n        }\\n        TransparentUpgradeableProxy._fallback();\\n    }\\n\\n    /**\\n     * Returns the current implementation address.\\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\\n     */\\n    function _implementation() internal view override(ERC1967Proxy, BeaconProxy) returns (address) {\\n        address implementation = ERC1967Proxy._implementation();\\n        if (implementation != address(0)) {\\n            return implementation;\\n        }\\n        return BeaconProxy._implementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf7c7834545a955cedbe5228c3583f72fb332337dd0b4ebcd5fdb0b6504c5a8cb\",\"license\":\"Apache-2.0\"},\"src/proxies/openzeppelin/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2aa58701eaf7336890fae8a17f5769adf764beac64f3c5873199cd56abd66d0d\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"},\"src/tokens/ERC721/presets/items/IERC721Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721ItemsFunctions {\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param tokenId Token id to mint.\\n     */\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /**\\n     * Mint a sequential token.\\n     * @param to Address to mint token to.\\n     * @param amount Amount of tokens to mint.\\n     */\\n    function mintSequential(address to, uint256 amount) external;\\n\\n    /**\\n     * Get the total supply of tokens.\\n     * @return totalSupply The total supply of tokens.\\n     */\\n    function totalSupply() external view returns (uint256 totalSupply);\\n\\n}\\n\\ninterface IERC721ItemsSignals {\\n\\n    /**\\n     * Invalid initialization error.\\n     */\\n    error InvalidInitialization();\\n\\n}\\n\\ninterface IERC721Items is IERC721ItemsFunctions, IERC721ItemsSignals { }\\n\",\"keccak256\":\"0x3170e3d97e03d070d03c50cbe5a77ea84209bb8e2bcff3bd8fc55b88cc7f2ba1\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC721/utility/sale/ERC721Sale.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { MerkleProofSingleUse } from \\\"../../../common/MerkleProofSingleUse.sol\\\";\\nimport { SignalsImplicitModeControlled } from \\\"../../../common/SignalsImplicitModeControlled.sol\\\";\\nimport { IERC20, SafeERC20, WithdrawControlled } from \\\"../../../common/WithdrawControlled.sol\\\";\\nimport { IERC721ItemsFunctions } from \\\"../../presets/items/IERC721Items.sol\\\";\\nimport { IERC721Sale, IERC721SaleFunctions } from \\\"./IERC721Sale.sol\\\";\\n\\n/**\\n * An ERC-721 token contract with primary sale mechanisms.\\n */\\ncontract ERC721Sale is IERC721Sale, WithdrawControlled, MerkleProofSingleUse, SignalsImplicitModeControlled {\\n\\n    bytes32 internal constant MINT_ADMIN_ROLE = keccak256(\\\"MINT_ADMIN_ROLE\\\");\\n\\n    bool private _initialized;\\n    address private _items;\\n    SaleDetails private _saleDetails;\\n\\n    /**\\n     * Initialize the contract.\\n     * @param owner The owner of the contract\\n     * @param items The ERC-721 Items contract address\\n     * @param implicitModeValidator Implicit session validator address\\n     * @param implicitModeProjectId Implicit session project id\\n     * @dev This should be called immediately after deployment.\\n     */\\n    function initialize(\\n        address owner,\\n        address items,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) public virtual {\\n        if (_initialized) {\\n            revert InvalidInitialization();\\n        }\\n\\n        _items = items;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\\n        _grantRole(MINT_ADMIN_ROLE, owner);\\n        _grantRole(WITHDRAW_ROLE, owner);\\n\\n        _initializeImplicitMode(owner, implicitModeValidator, implicitModeProjectId);\\n\\n        _initialized = true;\\n    }\\n\\n    /**\\n     * Checks if the current block.timestamp is out of the give timestamp range.\\n     * @param _startTime Earliest acceptable timestamp (inclusive).\\n     * @param _endTime Latest acceptable timestamp (exclusive).\\n     * @dev A zero endTime value is always considered out of bounds.\\n     */\\n    function _blockTimeOutOfBounds(uint256 _startTime, uint256 _endTime) private view returns (bool) {\\n        // 0 end time indicates inactive sale.\\n        return _endTime == 0 || block.timestamp < _startTime || block.timestamp >= _endTime; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /**\\n     * Checks the sale is active, valid and takes payment.\\n     * @param _amount Amount of tokens to mint.\\n     * @param _expectedPaymentToken ERC20 token address to accept payment in. address(0) indicates ETH.\\n     * @param _maxTotal Maximum amount of payment tokens.\\n     * @param _proof Merkle proof for allowlist minting.\\n     */\\n    function _validateMint(\\n        uint256 _amount,\\n        address _expectedPaymentToken,\\n        uint256 _maxTotal,\\n        bytes32[] calldata _proof\\n    ) private {\\n        // Active sale test\\n        if (_blockTimeOutOfBounds(_saleDetails.startTime, _saleDetails.endTime)) {\\n            revert SaleInactive();\\n        }\\n        // Supply test\\n        if (_saleDetails.remainingSupply < _amount) {\\n            revert InsufficientSupply(_saleDetails.remainingSupply, _amount);\\n        }\\n        _saleDetails.remainingSupply -= _amount;\\n        // Check proof\\n        requireMerkleProof(_saleDetails.merkleRoot, _proof, msg.sender, \\\"\\\");\\n\\n        uint256 total = _saleDetails.cost * _amount;\\n        if (_expectedPaymentToken != _saleDetails.paymentToken) {\\n            // Caller expected different payment token\\n            revert InsufficientPayment(_saleDetails.paymentToken, total, 0);\\n        }\\n        if (_maxTotal < total) {\\n            // Caller expected to pay less\\n            revert InsufficientPayment(_expectedPaymentToken, total, _maxTotal);\\n        }\\n        if (_expectedPaymentToken == address(0)) {\\n            // Paid in ETH\\n            if (msg.value != total) {\\n                // We expect exact value match\\n                revert InsufficientPayment(_expectedPaymentToken, total, msg.value);\\n            }\\n        } else if (msg.value > 0) {\\n            // Paid in ERC20, but sent ETH\\n            revert InsufficientPayment(address(0), 0, msg.value);\\n        } else {\\n            // Paid in ERC20\\n            SafeERC20.safeTransferFrom(IERC20(_expectedPaymentToken), msg.sender, address(this), total);\\n        }\\n    }\\n\\n    //\\n    // Minting\\n    //\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param amount Amount of tokens to mint.\\n     * @param paymentToken ERC20 token address to accept payment in. address(0) indicates ETH.\\n     * @param maxTotal Maximum amount of payment tokens.\\n     * @param proof Merkle proof for allowlist minting.\\n     * @notice Sale must be active for all tokens.\\n     * @dev An empty proof is supplied when no proof is required.\\n     * @dev `paymentToken` must match the `paymentToken` in the sale details.\\n     */\\n    function mint(\\n        address to,\\n        uint256 amount,\\n        address paymentToken,\\n        uint256 maxTotal,\\n        bytes32[] calldata proof\\n    ) public payable {\\n        _validateMint(amount, paymentToken, maxTotal, proof);\\n        try IERC721ItemsFunctions(_items).mintSequential(to, amount) { }\\n        catch {\\n            // On failure, support old minting method.\\n            IERC721ItemsFunctions(_items).mint(to, amount);\\n        }\\n        emit ItemsMinted(to, amount);\\n    }\\n\\n    /**\\n     * Set the sale details.\\n     * @param remainingSupply The remaining number of tokens that can be minted by the items contract. 0 indicates unlimited supply.\\n     * @param cost The amount of payment tokens to accept for each token minted.\\n     * @param paymentToken The ERC20 token address to accept payment in. address(0) indicates ETH.\\n     * @param startTime The start time of the sale. Tokens cannot be minted before this time.\\n     * @param endTime The end time of the sale. Tokens cannot be minted after this time.\\n     * @param merkleRoot The merkle root for allowlist minting.\\n     * @dev A zero end time indicates an inactive sale.\\n     */\\n    function setSaleDetails(\\n        uint256 remainingSupply,\\n        uint256 cost,\\n        address paymentToken,\\n        uint64 startTime,\\n        uint64 endTime,\\n        bytes32 merkleRoot\\n    ) public onlyRole(MINT_ADMIN_ROLE) {\\n        // solhint-disable-next-line not-rely-on-time\\n        if (endTime < startTime || endTime <= block.timestamp) {\\n            revert InvalidSaleDetails();\\n        }\\n        if (remainingSupply == 0) {\\n            revert InvalidSaleDetails();\\n        }\\n        _saleDetails = SaleDetails(remainingSupply, cost, paymentToken, startTime, endTime, merkleRoot);\\n        emit SaleDetailsUpdated(remainingSupply, cost, paymentToken, startTime, endTime, merkleRoot);\\n    }\\n\\n    //\\n    // Views\\n    //\\n    function itemsContract() external view returns (address) {\\n        return address(_items);\\n    }\\n\\n    /**\\n     * Get sale details.\\n     * @return Sale details.\\n     */\\n    function saleDetails() external view returns (SaleDetails memory) {\\n        return _saleDetails;\\n    }\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(WithdrawControlled, SignalsImplicitModeControlled) returns (bool) {\\n        return interfaceId == type(IERC721SaleFunctions).interfaceId\\n            || WithdrawControlled.supportsInterface(interfaceId)\\n            || SignalsImplicitModeControlled.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xcc28fb79ab8f245e5aa226debd22732dbfd034955c02c30735b5e31432559416\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC721/utility/sale/ERC721SaleFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { SequenceProxyFactory } from \\\"../../../../proxies/SequenceProxyFactory.sol\\\";\\nimport { ERC721Sale } from \\\"./ERC721Sale.sol\\\";\\nimport { IERC721SaleFactory, IERC721SaleFactoryFunctions } from \\\"./IERC721SaleFactory.sol\\\";\\n\\n/**\\n * Deployer of ERC-721 Sale proxies.\\n */\\ncontract ERC721SaleFactory is IERC721SaleFactory, SequenceProxyFactory {\\n\\n    /**\\n     * Creates an ERC-721 Sale Factory.\\n     * @param factoryOwner The owner of the ERC-721 Sale Factory\\n     */\\n    constructor(\\n        address factoryOwner\\n    ) {\\n        ERC721Sale impl = new ERC721Sale();\\n        SequenceProxyFactory._initialize(address(impl), factoryOwner);\\n    }\\n\\n    /// @inheritdoc IERC721SaleFactoryFunctions\\n    function deploy(\\n        uint256 nonce,\\n        address proxyOwner,\\n        address tokenOwner,\\n        address items,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr) {\\n        bytes32 salt = keccak256(abi.encode(nonce, tokenOwner, items, implicitModeValidator, implicitModeProjectId));\\n        proxyAddr = _createProxy(salt, proxyOwner, \\\"\\\");\\n        ERC721Sale(proxyAddr).initialize(tokenOwner, items, implicitModeValidator, implicitModeProjectId);\\n        emit ERC721SaleDeployed(proxyAddr);\\n        return proxyAddr;\\n    }\\n\\n    /// @inheritdoc IERC721SaleFactoryFunctions\\n    function determineAddress(\\n        uint256 nonce,\\n        address proxyOwner,\\n        address tokenOwner,\\n        address items,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external view returns (address proxyAddr) {\\n        bytes32 salt = keccak256(abi.encode(nonce, tokenOwner, items, implicitModeValidator, implicitModeProjectId));\\n        return _computeProxyAddress(salt, proxyOwner, \\\"\\\");\\n    }\\n\\n}\\n\",\"keccak256\":\"0x3f82f8a8b1b1ce8a3b6d4118e847c1047e231fc4c3baa9d4bd8d85fd91f4defa\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC721/utility/sale/IERC721Sale.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721SaleFunctions {\\n\\n    struct SaleDetails {\\n        uint256 remainingSupply;\\n        uint256 cost;\\n        address paymentToken; // ERC20 token address for payment. address(0) indicated payment in ETH.\\n        uint64 startTime;\\n        uint64 endTime; // 0 end time indicates sale inactive\\n        bytes32 merkleRoot; // Root of allowed addresses\\n    }\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param amount Amount of tokens to mint.\\n     * @param paymentToken ERC20 token address to accept payment in. address(0) indicates ETH.\\n     * @param maxTotal Maximum amount of payment tokens.\\n     * @param proof Merkle proof for allowlist minting.\\n     * @notice Sale must be active for all tokens.\\n     * @dev An empty proof is supplied when no proof is required.\\n     */\\n    function mint(\\n        address to,\\n        uint256 amount,\\n        address paymentToken,\\n        uint256 maxTotal,\\n        bytes32[] memory proof\\n    ) external payable;\\n\\n    /**\\n     * Set the sale details.\\n     * @param remainingSupply The maximum number of tokens that can be minted in this sale.\\n     * @param cost The amount of payment tokens to accept for each token minted.\\n     * @param paymentToken The ERC20 token address to accept payment in. address(0) indicates ETH.\\n     * @param startTime The start time of the sale. Tokens cannot be minted before this time.\\n     * @param endTime The end time of the sale. Tokens cannot be minted after this time.\\n     * @param merkleRoot The merkle root for allowlist minting.\\n     */\\n    function setSaleDetails(\\n        uint256 remainingSupply,\\n        uint256 cost,\\n        address paymentToken,\\n        uint64 startTime,\\n        uint64 endTime,\\n        bytes32 merkleRoot\\n    ) external;\\n\\n    /**\\n     * Get sale details.\\n     * @return Sale details.\\n     */\\n    function saleDetails() external view returns (SaleDetails memory);\\n\\n}\\n\\ninterface IERC721SaleSignals {\\n\\n    event SaleDetailsUpdated(\\n        uint256 remainingSupply,\\n        uint256 cost,\\n        address paymentToken,\\n        uint64 startTime,\\n        uint64 endTime,\\n        bytes32 merkleRoot\\n    );\\n    event ItemsMinted(address to, uint256 amount);\\n\\n    /**\\n     * Contract already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * Sale details supplied are invalid.\\n     */\\n    error InvalidSaleDetails();\\n\\n    /**\\n     * Sale is not active.\\n     */\\n    error SaleInactive();\\n\\n    /**\\n     * Insufficient supply.\\n     * @param remainingSupply Remaining supply.\\n     * @param amount Amount to mint.\\n     */\\n    error InsufficientSupply(uint256 remainingSupply, uint256 amount);\\n\\n    /**\\n     * Insufficient tokens for payment.\\n     * @param currency Currency address. address(0) indicates ETH.\\n     * @param expected Expected amount of tokens.\\n     * @param actual Actual amount of tokens.\\n     */\\n    error InsufficientPayment(address currency, uint256 expected, uint256 actual);\\n\\n}\\n\\ninterface IERC721Sale is IERC721SaleFunctions, IERC721SaleSignals { }\\n\",\"keccak256\":\"0x8ff67e4e1077abb10501b442533e9afe85c4fad973bb7588bd28e733de85b370\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC721/utility/sale/IERC721SaleFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721SaleFactoryFunctions {\\n\\n    /**\\n     * Creates an ERC-721 Sale for given token contract\\n     * @param nonce Nonce for randomizing the deployment address.\\n     * @param proxyOwner The owner of the ERC-721 Sale proxy\\n     * @param tokenOwner The owner of the ERC-721 Sale implementation\\n     * @param items The ERC-721 Items contract address\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-721 Sale Proxy\\n     * @notice The deployed contract must be granted the MINTER_ROLE on the ERC-721 Items contract.\\n     */\\n    function deploy(\\n        uint256 nonce,\\n        address proxyOwner,\\n        address tokenOwner,\\n        address items,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param nonce Nonce for randomizing the deployment address.\\n     * @param proxyOwner The owner of the ERC-721 Sale proxy\\n     * @param tokenOwner The owner of the ERC-721 Sale implementation\\n     * @param items The ERC-721 Items contract address\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-721 Sale Proxy\\n     */\\n    function determineAddress(\\n        uint256 nonce,\\n        address proxyOwner,\\n        address tokenOwner,\\n        address items,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n}\\n\\ninterface IERC721SaleFactorySignals {\\n\\n    /**\\n     * Event emitted when a new ERC-721 Sale proxy contract is deployed.\\n     * @param proxyAddr The address of the deployed proxy.\\n     */\\n    event ERC721SaleDeployed(address proxyAddr);\\n\\n}\\n\\ninterface IERC721SaleFactory is IERC721SaleFactoryFunctions, IERC721SaleFactorySignals { }\\n\",\"keccak256\":\"0x8564c3550e7fb49ab4f086432aecf189456e31bd3c7797500544c37cc8df8c11\",\"license\":\"Apache-2.0\"},\"src/tokens/common/IMerkleProofSingleUse.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IMerkleProofSingleUseFunctions {\\n\\n    /**\\n     * Checks if the given merkle proof is valid.\\n     * @param root Merkle root.\\n     * @param proof Merkle proof.\\n     * @param addr Address to check.\\n     * @param salt Salt used to generate the merkle leaf.\\n     * @return True if the proof is valid and has not yet been used by {addr}.\\n     */\\n    function checkMerkleProof(\\n        bytes32 root,\\n        bytes32[] calldata proof,\\n        address addr,\\n        bytes32 salt\\n    ) external view returns (bool);\\n\\n}\\n\\ninterface IMerkleProofSingleUseSignals {\\n\\n    /**\\n     * Thrown when the merkle proof is invalid or has already been used.\\n     * @param root Merkle root.\\n     * @param proof Merkle proof.\\n     * @param addr Address to check.\\n     * @param salt Salt used to generate the merkle leaf.\\n     */\\n    error MerkleProofInvalid(bytes32 root, bytes32[] proof, address addr, bytes32 salt);\\n\\n}\\n\\ninterface IMerkleProofSingleUse is IMerkleProofSingleUseFunctions, IMerkleProofSingleUseSignals { }\\n\",\"keccak256\":\"0x074aba31432a82ce4297916b3615786f98cbc913026fdaebea56b8b9ce3849c5\",\"license\":\"Apache-2.0\"},\"src/tokens/common/IWithdrawControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IWithdrawControlledFunctions {\\n\\n    /**\\n     * Withdraws ERC20 tokens owned by this contract.\\n     * @param token The ERC20 token address.\\n     * @param to Address to withdraw to.\\n     * @param value Amount to withdraw.\\n     */\\n    function withdrawERC20(address token, address to, uint256 value) external;\\n\\n    /**\\n     * Withdraws ETH owned by this sale contract.\\n     * @param to Address to withdraw to.\\n     * @param value Amount to withdraw.\\n     */\\n    function withdrawETH(address to, uint256 value) external;\\n\\n}\\n\\ninterface IWithdrawControlledSignals {\\n\\n    /**\\n     * Withdraw failed error.\\n     */\\n    error WithdrawFailed();\\n\\n}\\n\\ninterface IWithdrawControlled is IWithdrawControlledFunctions, IWithdrawControlledSignals { }\\n\",\"keccak256\":\"0x2e7a9edda2114d11a23fbf06a41a961514f692daba4d07a41214b6247115f254\",\"license\":\"Apache-2.0\"},\"src/tokens/common/MerkleProofSingleUse.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { IMerkleProofSingleUse } from \\\"./IMerkleProofSingleUse.sol\\\";\\n\\nimport { MerkleProof } from \\\"openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n * Require single use merkle proofs per address.\\n */\\nabstract contract MerkleProofSingleUse is IMerkleProofSingleUse {\\n\\n    // Stores proofs used by an address\\n    mapping(address => mapping(bytes32 => bool)) private _proofUsed;\\n\\n    /**\\n     * Requires the given merkle proof to be valid.\\n     * @param root Merkle root.\\n     * @param proof Merkle proof.\\n     * @param addr Address to check.\\n     * @param salt Salt used to generate the merkle leaf.\\n     * @notice Fails when the proof is invalid or the proof has already been claimed by this address.\\n     * @dev This function reverts on failure.\\n     */\\n    function requireMerkleProof(bytes32 root, bytes32[] calldata proof, address addr, bytes32 salt) internal {\\n        if (root != bytes32(0)) {\\n            if (!checkMerkleProof(root, proof, addr, salt)) {\\n                revert MerkleProofInvalid(root, proof, addr, salt);\\n            }\\n            _proofUsed[addr][root] = true;\\n        }\\n    }\\n\\n    /**\\n     * Checks if the given merkle proof is valid.\\n     * @param root Merkle root.\\n     * @param proof Merkle proof.\\n     * @param addr Address to check.\\n     * @param salt Salt used to generate the merkle leaf.\\n     * @return True if the proof is valid and has not yet been used by {addr}.\\n     */\\n    function checkMerkleProof(\\n        bytes32 root,\\n        bytes32[] calldata proof,\\n        address addr,\\n        bytes32 salt\\n    ) public view returns (bool) {\\n        return !_proofUsed[addr][root] && MerkleProof.verify(proof, root, keccak256(abi.encodePacked(addr, salt)));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5d5d714ef0d9ed73798d5427e9df7adf2441f3ef8d9c14e7a8db157f24637475\",\"license\":\"Apache-2.0\"},\"src/tokens/common/SignalsImplicitModeControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport {\\n    IERC165,\\n    IImplicitProjectValidation,\\n    SignalsImplicitMode\\n} from \\\"signals-implicit-mode/src/helper/SignalsImplicitMode.sol\\\";\\n\\n/**\\n * An abstract contract that allows implicit session access for a given project.\\n */\\nabstract contract SignalsImplicitModeControlled is AccessControlEnumerable, SignalsImplicitMode {\\n\\n    bytes32 internal constant _IMPLICIT_MODE_ADMIN_ROLE = keccak256(\\\"IMPLICIT_MODE_ADMIN_ROLE\\\");\\n\\n    function _initializeImplicitMode(address owner, address validator, bytes32 projectId) internal {\\n        _grantRole(_IMPLICIT_MODE_ADMIN_ROLE, owner);\\n        _initializeSignalsImplicitMode(validator, projectId);\\n    }\\n\\n    /**\\n     * Updates the validator for implicit mode validation.\\n     * @param validator The validator address.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeValidator(\\n        address validator\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _validator = IImplicitProjectValidation(validator);\\n    }\\n\\n    /**\\n     * Updates the settings for implicit mode validation.\\n     * @param projectId The project id.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeProjectId(\\n        bytes32 projectId\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _projectId = projectId;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable, SignalsImplicitMode) returns (bool) {\\n        return\\n            AccessControlEnumerable.supportsInterface(interfaceId) || SignalsImplicitMode.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb1a20575f188af254f90ec7df7f70415610ba5f41f7966ce383b50063220b860\",\"license\":\"Apache-2.0\"},\"src/tokens/common/WithdrawControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { IWithdrawControlled } from \\\"./IWithdrawControlled.sol\\\";\\n\\nimport { AccessControlEnumerable, ERC165 } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { IERC20, SafeERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * An abstract contract that allows ETH and ERC20 tokens stored in the contract to be withdrawn.\\n */\\nabstract contract WithdrawControlled is AccessControlEnumerable, IWithdrawControlled {\\n\\n    bytes32 internal constant WITHDRAW_ROLE = keccak256(\\\"WITHDRAW_ROLE\\\");\\n\\n    //\\n    // Withdraw\\n    //\\n\\n    /**\\n     * Withdraws ERC20 tokens owned by this contract.\\n     * @param token The ERC20 token address.\\n     * @param to Address to withdraw to.\\n     * @param value Amount to withdraw.\\n     * @notice Only callable by an address with the withdraw role.\\n     */\\n    function withdrawERC20(address token, address to, uint256 value) public onlyRole(WITHDRAW_ROLE) {\\n        SafeERC20.safeTransfer(IERC20(token), to, value);\\n    }\\n\\n    /**\\n     * Withdraws ETH owned by this sale contract.\\n     * @param to Address to withdraw to.\\n     * @param value Amount to withdraw.\\n     * @notice Only callable by an address with the withdraw role.\\n     */\\n    function withdrawETH(address to, uint256 value) public onlyRole(WITHDRAW_ROLE) {\\n        (bool success,) = to.call{ value: value }(\\\"\\\");\\n        if (!success) {\\n            revert WithdrawFailed();\\n        }\\n    }\\n\\n    /// @inheritdoc ERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable) returns (bool) {\\n        return interfaceId == type(IWithdrawControlled).interfaceId\\n            || AccessControlEnumerable.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1431e55e474378bf9d1ed6c013bf82a2af97b12a22028ef78b274e42f14a8144\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "events": {
              "ERC721SaleDeployed(address)": {
                "notice": "Event emitted when a new ERC-721 Sale proxy contract is deployed."
              }
            },
            "kind": "user",
            "methods": {
              "constructor": {
                "notice": "Creates an ERC-721 Sale Factory."
              },
              "deploy(uint256,address,address,address,address,bytes32)": {
                "notice": "Creates an ERC-721 Sale for given token contractThe deployed contract must be granted the MINTER_ROLE on the ERC-721 Items contract."
              },
              "determineAddress(uint256,address,address,address,address,bytes32)": {
                "notice": "Computes the address of a proxy instance."
              },
              "upgradeBeacon(address)": {
                "notice": "Upgrades the beacon implementation."
              }
            },
            "notice": "Deployer of ERC-721 Sale proxies.",
            "version": 1
          }
        }
      },
      "src/tokens/ERC721/utility/sale/IERC721Sale.sol": {
        "IERC721Sale": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "expected",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "actual",
                  "type": "uint256"
                }
              ],
              "name": "InsufficientPayment",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "remainingSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "InsufficientSupply",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidInitialization",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidSaleDetails",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "SaleInactive",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "ItemsMinted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "remainingSupply",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "cost",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "paymentToken",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint64",
                  "name": "startTime",
                  "type": "uint64"
                },
                {
                  "indexed": false,
                  "internalType": "uint64",
                  "name": "endTime",
                  "type": "uint64"
                },
                {
                  "indexed": false,
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                }
              ],
              "name": "SaleDetailsUpdated",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "paymentToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "maxTotal",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "saleDetails",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "remainingSupply",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "cost",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "paymentToken",
                      "type": "address"
                    },
                    {
                      "internalType": "uint64",
                      "name": "startTime",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "endTime",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "merkleRoot",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct IERC721SaleFunctions.SaleDetails",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "remainingSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "cost",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "paymentToken",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "startTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "endTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                }
              ],
              "name": "setSaleDetails",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "errors": {
              "InsufficientPayment(address,uint256,uint256)": [
                {
                  "params": {
                    "actual": "Actual amount of tokens.",
                    "currency": "Currency address. address(0) indicates ETH.",
                    "expected": "Expected amount of tokens."
                  }
                }
              ],
              "InsufficientSupply(uint256,uint256)": [
                {
                  "params": {
                    "amount": "Amount to mint.",
                    "remainingSupply": "Remaining supply."
                  }
                }
              ]
            },
            "kind": "dev",
            "methods": {
              "mint(address,uint256,address,uint256,bytes32[])": {
                "details": "An empty proof is supplied when no proof is required.",
                "params": {
                  "amount": "Amount of tokens to mint.",
                  "maxTotal": "Maximum amount of payment tokens.",
                  "paymentToken": "ERC20 token address to accept payment in. address(0) indicates ETH.",
                  "proof": "Merkle proof for allowlist minting.",
                  "to": "Address to mint tokens to."
                }
              },
              "saleDetails()": {
                "returns": {
                  "_0": "Sale details."
                }
              },
              "setSaleDetails(uint256,uint256,address,uint64,uint64,bytes32)": {
                "params": {
                  "cost": "The amount of payment tokens to accept for each token minted.",
                  "endTime": "The end time of the sale. Tokens cannot be minted after this time.",
                  "merkleRoot": "The merkle root for allowlist minting.",
                  "paymentToken": "The ERC20 token address to accept payment in. address(0) indicates ETH.",
                  "remainingSupply": "The maximum number of tokens that can be minted in this sale.",
                  "startTime": "The start time of the sale. Tokens cannot be minted before this time."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "mint(address,uint256,address,uint256,bytes32[])": "0668d0bb",
              "saleDetails()": "3474a4a6",
              "setSaleDetails(uint256,uint256,address,uint64,uint64,bytes32)": "8c17030f"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSaleDetails\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaleInactive\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ItemsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"SaleDetailsUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotal\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"remainingSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct IERC721SaleFunctions.SaleDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setSaleDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InsufficientPayment(address,uint256,uint256)\":[{\"params\":{\"actual\":\"Actual amount of tokens.\",\"currency\":\"Currency address. address(0) indicates ETH.\",\"expected\":\"Expected amount of tokens.\"}}],\"InsufficientSupply(uint256,uint256)\":[{\"params\":{\"amount\":\"Amount to mint.\",\"remainingSupply\":\"Remaining supply.\"}}]},\"kind\":\"dev\",\"methods\":{\"mint(address,uint256,address,uint256,bytes32[])\":{\"details\":\"An empty proof is supplied when no proof is required.\",\"params\":{\"amount\":\"Amount of tokens to mint.\",\"maxTotal\":\"Maximum amount of payment tokens.\",\"paymentToken\":\"ERC20 token address to accept payment in. address(0) indicates ETH.\",\"proof\":\"Merkle proof for allowlist minting.\",\"to\":\"Address to mint tokens to.\"}},\"saleDetails()\":{\"returns\":{\"_0\":\"Sale details.\"}},\"setSaleDetails(uint256,uint256,address,uint64,uint64,bytes32)\":{\"params\":{\"cost\":\"The amount of payment tokens to accept for each token minted.\",\"endTime\":\"The end time of the sale. Tokens cannot be minted after this time.\",\"merkleRoot\":\"The merkle root for allowlist minting.\",\"paymentToken\":\"The ERC20 token address to accept payment in. address(0) indicates ETH.\",\"remainingSupply\":\"The maximum number of tokens that can be minted in this sale.\",\"startTime\":\"The start time of the sale. Tokens cannot be minted before this time.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"InsufficientPayment(address,uint256,uint256)\":[{\"notice\":\"Insufficient tokens for payment.\"}],\"InsufficientSupply(uint256,uint256)\":[{\"notice\":\"Insufficient supply.\"}],\"InvalidInitialization()\":[{\"notice\":\"Contract already initialized.\"}],\"InvalidSaleDetails()\":[{\"notice\":\"Sale details supplied are invalid.\"}],\"SaleInactive()\":[{\"notice\":\"Sale is not active.\"}]},\"kind\":\"user\",\"methods\":{\"mint(address,uint256,address,uint256,bytes32[])\":{\"notice\":\"Mint tokens.Sale must be active for all tokens.\"},\"saleDetails()\":{\"notice\":\"Get sale details.\"},\"setSaleDetails(uint256,uint256,address,uint64,uint64,bytes32)\":{\"notice\":\"Set the sale details.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/utility/sale/IERC721Sale.sol\":\"IERC721Sale\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC721/utility/sale/IERC721Sale.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721SaleFunctions {\\n\\n    struct SaleDetails {\\n        uint256 remainingSupply;\\n        uint256 cost;\\n        address paymentToken; // ERC20 token address for payment. address(0) indicated payment in ETH.\\n        uint64 startTime;\\n        uint64 endTime; // 0 end time indicates sale inactive\\n        bytes32 merkleRoot; // Root of allowed addresses\\n    }\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param amount Amount of tokens to mint.\\n     * @param paymentToken ERC20 token address to accept payment in. address(0) indicates ETH.\\n     * @param maxTotal Maximum amount of payment tokens.\\n     * @param proof Merkle proof for allowlist minting.\\n     * @notice Sale must be active for all tokens.\\n     * @dev An empty proof is supplied when no proof is required.\\n     */\\n    function mint(\\n        address to,\\n        uint256 amount,\\n        address paymentToken,\\n        uint256 maxTotal,\\n        bytes32[] memory proof\\n    ) external payable;\\n\\n    /**\\n     * Set the sale details.\\n     * @param remainingSupply The maximum number of tokens that can be minted in this sale.\\n     * @param cost The amount of payment tokens to accept for each token minted.\\n     * @param paymentToken The ERC20 token address to accept payment in. address(0) indicates ETH.\\n     * @param startTime The start time of the sale. Tokens cannot be minted before this time.\\n     * @param endTime The end time of the sale. Tokens cannot be minted after this time.\\n     * @param merkleRoot The merkle root for allowlist minting.\\n     */\\n    function setSaleDetails(\\n        uint256 remainingSupply,\\n        uint256 cost,\\n        address paymentToken,\\n        uint64 startTime,\\n        uint64 endTime,\\n        bytes32 merkleRoot\\n    ) external;\\n\\n    /**\\n     * Get sale details.\\n     * @return Sale details.\\n     */\\n    function saleDetails() external view returns (SaleDetails memory);\\n\\n}\\n\\ninterface IERC721SaleSignals {\\n\\n    event SaleDetailsUpdated(\\n        uint256 remainingSupply,\\n        uint256 cost,\\n        address paymentToken,\\n        uint64 startTime,\\n        uint64 endTime,\\n        bytes32 merkleRoot\\n    );\\n    event ItemsMinted(address to, uint256 amount);\\n\\n    /**\\n     * Contract already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * Sale details supplied are invalid.\\n     */\\n    error InvalidSaleDetails();\\n\\n    /**\\n     * Sale is not active.\\n     */\\n    error SaleInactive();\\n\\n    /**\\n     * Insufficient supply.\\n     * @param remainingSupply Remaining supply.\\n     * @param amount Amount to mint.\\n     */\\n    error InsufficientSupply(uint256 remainingSupply, uint256 amount);\\n\\n    /**\\n     * Insufficient tokens for payment.\\n     * @param currency Currency address. address(0) indicates ETH.\\n     * @param expected Expected amount of tokens.\\n     * @param actual Actual amount of tokens.\\n     */\\n    error InsufficientPayment(address currency, uint256 expected, uint256 actual);\\n\\n}\\n\\ninterface IERC721Sale is IERC721SaleFunctions, IERC721SaleSignals { }\\n\",\"keccak256\":\"0x8ff67e4e1077abb10501b442533e9afe85c4fad973bb7588bd28e733de85b370\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InsufficientPayment(address,uint256,uint256)": [
                {
                  "notice": "Insufficient tokens for payment."
                }
              ],
              "InsufficientSupply(uint256,uint256)": [
                {
                  "notice": "Insufficient supply."
                }
              ],
              "InvalidInitialization()": [
                {
                  "notice": "Contract already initialized."
                }
              ],
              "InvalidSaleDetails()": [
                {
                  "notice": "Sale details supplied are invalid."
                }
              ],
              "SaleInactive()": [
                {
                  "notice": "Sale is not active."
                }
              ]
            },
            "kind": "user",
            "methods": {
              "mint(address,uint256,address,uint256,bytes32[])": {
                "notice": "Mint tokens.Sale must be active for all tokens."
              },
              "saleDetails()": {
                "notice": "Get sale details."
              },
              "setSaleDetails(uint256,uint256,address,uint64,uint64,bytes32)": {
                "notice": "Set the sale details."
              }
            },
            "version": 1
          }
        },
        "IERC721SaleFunctions": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "paymentToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "maxTotal",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "saleDetails",
              "outputs": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "remainingSupply",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "cost",
                      "type": "uint256"
                    },
                    {
                      "internalType": "address",
                      "name": "paymentToken",
                      "type": "address"
                    },
                    {
                      "internalType": "uint64",
                      "name": "startTime",
                      "type": "uint64"
                    },
                    {
                      "internalType": "uint64",
                      "name": "endTime",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "merkleRoot",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct IERC721SaleFunctions.SaleDetails",
                  "name": "",
                  "type": "tuple"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "remainingSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "cost",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "paymentToken",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "startTime",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "endTime",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                }
              ],
              "name": "setSaleDetails",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "mint(address,uint256,address,uint256,bytes32[])": {
                "details": "An empty proof is supplied when no proof is required.",
                "params": {
                  "amount": "Amount of tokens to mint.",
                  "maxTotal": "Maximum amount of payment tokens.",
                  "paymentToken": "ERC20 token address to accept payment in. address(0) indicates ETH.",
                  "proof": "Merkle proof for allowlist minting.",
                  "to": "Address to mint tokens to."
                }
              },
              "saleDetails()": {
                "returns": {
                  "_0": "Sale details."
                }
              },
              "setSaleDetails(uint256,uint256,address,uint64,uint64,bytes32)": {
                "params": {
                  "cost": "The amount of payment tokens to accept for each token minted.",
                  "endTime": "The end time of the sale. Tokens cannot be minted after this time.",
                  "merkleRoot": "The merkle root for allowlist minting.",
                  "paymentToken": "The ERC20 token address to accept payment in. address(0) indicates ETH.",
                  "remainingSupply": "The maximum number of tokens that can be minted in this sale.",
                  "startTime": "The start time of the sale. Tokens cannot be minted before this time."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "mint(address,uint256,address,uint256,bytes32[])": "0668d0bb",
              "saleDetails()": "3474a4a6",
              "setSaleDetails(uint256,uint256,address,uint64,uint64,bytes32)": "8c17030f"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotal\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"remainingSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct IERC721SaleFunctions.SaleDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setSaleDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"mint(address,uint256,address,uint256,bytes32[])\":{\"details\":\"An empty proof is supplied when no proof is required.\",\"params\":{\"amount\":\"Amount of tokens to mint.\",\"maxTotal\":\"Maximum amount of payment tokens.\",\"paymentToken\":\"ERC20 token address to accept payment in. address(0) indicates ETH.\",\"proof\":\"Merkle proof for allowlist minting.\",\"to\":\"Address to mint tokens to.\"}},\"saleDetails()\":{\"returns\":{\"_0\":\"Sale details.\"}},\"setSaleDetails(uint256,uint256,address,uint64,uint64,bytes32)\":{\"params\":{\"cost\":\"The amount of payment tokens to accept for each token minted.\",\"endTime\":\"The end time of the sale. Tokens cannot be minted after this time.\",\"merkleRoot\":\"The merkle root for allowlist minting.\",\"paymentToken\":\"The ERC20 token address to accept payment in. address(0) indicates ETH.\",\"remainingSupply\":\"The maximum number of tokens that can be minted in this sale.\",\"startTime\":\"The start time of the sale. Tokens cannot be minted before this time.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mint(address,uint256,address,uint256,bytes32[])\":{\"notice\":\"Mint tokens.Sale must be active for all tokens.\"},\"saleDetails()\":{\"notice\":\"Get sale details.\"},\"setSaleDetails(uint256,uint256,address,uint64,uint64,bytes32)\":{\"notice\":\"Set the sale details.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/utility/sale/IERC721Sale.sol\":\"IERC721SaleFunctions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC721/utility/sale/IERC721Sale.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721SaleFunctions {\\n\\n    struct SaleDetails {\\n        uint256 remainingSupply;\\n        uint256 cost;\\n        address paymentToken; // ERC20 token address for payment. address(0) indicated payment in ETH.\\n        uint64 startTime;\\n        uint64 endTime; // 0 end time indicates sale inactive\\n        bytes32 merkleRoot; // Root of allowed addresses\\n    }\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param amount Amount of tokens to mint.\\n     * @param paymentToken ERC20 token address to accept payment in. address(0) indicates ETH.\\n     * @param maxTotal Maximum amount of payment tokens.\\n     * @param proof Merkle proof for allowlist minting.\\n     * @notice Sale must be active for all tokens.\\n     * @dev An empty proof is supplied when no proof is required.\\n     */\\n    function mint(\\n        address to,\\n        uint256 amount,\\n        address paymentToken,\\n        uint256 maxTotal,\\n        bytes32[] memory proof\\n    ) external payable;\\n\\n    /**\\n     * Set the sale details.\\n     * @param remainingSupply The maximum number of tokens that can be minted in this sale.\\n     * @param cost The amount of payment tokens to accept for each token minted.\\n     * @param paymentToken The ERC20 token address to accept payment in. address(0) indicates ETH.\\n     * @param startTime The start time of the sale. Tokens cannot be minted before this time.\\n     * @param endTime The end time of the sale. Tokens cannot be minted after this time.\\n     * @param merkleRoot The merkle root for allowlist minting.\\n     */\\n    function setSaleDetails(\\n        uint256 remainingSupply,\\n        uint256 cost,\\n        address paymentToken,\\n        uint64 startTime,\\n        uint64 endTime,\\n        bytes32 merkleRoot\\n    ) external;\\n\\n    /**\\n     * Get sale details.\\n     * @return Sale details.\\n     */\\n    function saleDetails() external view returns (SaleDetails memory);\\n\\n}\\n\\ninterface IERC721SaleSignals {\\n\\n    event SaleDetailsUpdated(\\n        uint256 remainingSupply,\\n        uint256 cost,\\n        address paymentToken,\\n        uint64 startTime,\\n        uint64 endTime,\\n        bytes32 merkleRoot\\n    );\\n    event ItemsMinted(address to, uint256 amount);\\n\\n    /**\\n     * Contract already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * Sale details supplied are invalid.\\n     */\\n    error InvalidSaleDetails();\\n\\n    /**\\n     * Sale is not active.\\n     */\\n    error SaleInactive();\\n\\n    /**\\n     * Insufficient supply.\\n     * @param remainingSupply Remaining supply.\\n     * @param amount Amount to mint.\\n     */\\n    error InsufficientSupply(uint256 remainingSupply, uint256 amount);\\n\\n    /**\\n     * Insufficient tokens for payment.\\n     * @param currency Currency address. address(0) indicates ETH.\\n     * @param expected Expected amount of tokens.\\n     * @param actual Actual amount of tokens.\\n     */\\n    error InsufficientPayment(address currency, uint256 expected, uint256 actual);\\n\\n}\\n\\ninterface IERC721Sale is IERC721SaleFunctions, IERC721SaleSignals { }\\n\",\"keccak256\":\"0x8ff67e4e1077abb10501b442533e9afe85c4fad973bb7588bd28e733de85b370\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "mint(address,uint256,address,uint256,bytes32[])": {
                "notice": "Mint tokens.Sale must be active for all tokens."
              },
              "saleDetails()": {
                "notice": "Get sale details."
              },
              "setSaleDetails(uint256,uint256,address,uint64,uint64,bytes32)": {
                "notice": "Set the sale details."
              }
            },
            "version": 1
          }
        },
        "IERC721SaleSignals": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "currency",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "expected",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "actual",
                  "type": "uint256"
                }
              ],
              "name": "InsufficientPayment",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "remainingSupply",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "InsufficientSupply",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidInitialization",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidSaleDetails",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "SaleInactive",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "ItemsMinted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "remainingSupply",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "cost",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "paymentToken",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint64",
                  "name": "startTime",
                  "type": "uint64"
                },
                {
                  "indexed": false,
                  "internalType": "uint64",
                  "name": "endTime",
                  "type": "uint64"
                },
                {
                  "indexed": false,
                  "internalType": "bytes32",
                  "name": "merkleRoot",
                  "type": "bytes32"
                }
              ],
              "name": "SaleDetailsUpdated",
              "type": "event"
            }
          ],
          "devdoc": {
            "errors": {
              "InsufficientPayment(address,uint256,uint256)": [
                {
                  "params": {
                    "actual": "Actual amount of tokens.",
                    "currency": "Currency address. address(0) indicates ETH.",
                    "expected": "Expected amount of tokens."
                  }
                }
              ],
              "InsufficientSupply(uint256,uint256)": [
                {
                  "params": {
                    "amount": "Amount to mint.",
                    "remainingSupply": "Remaining supply."
                  }
                }
              ]
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"remainingSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSaleDetails\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaleInactive\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ItemsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"startTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"SaleDetailsUpdated\",\"type\":\"event\"}],\"devdoc\":{\"errors\":{\"InsufficientPayment(address,uint256,uint256)\":[{\"params\":{\"actual\":\"Actual amount of tokens.\",\"currency\":\"Currency address. address(0) indicates ETH.\",\"expected\":\"Expected amount of tokens.\"}}],\"InsufficientSupply(uint256,uint256)\":[{\"params\":{\"amount\":\"Amount to mint.\",\"remainingSupply\":\"Remaining supply.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"InsufficientPayment(address,uint256,uint256)\":[{\"notice\":\"Insufficient tokens for payment.\"}],\"InsufficientSupply(uint256,uint256)\":[{\"notice\":\"Insufficient supply.\"}],\"InvalidInitialization()\":[{\"notice\":\"Contract already initialized.\"}],\"InvalidSaleDetails()\":[{\"notice\":\"Sale details supplied are invalid.\"}],\"SaleInactive()\":[{\"notice\":\"Sale is not active.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/utility/sale/IERC721Sale.sol\":\"IERC721SaleSignals\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC721/utility/sale/IERC721Sale.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721SaleFunctions {\\n\\n    struct SaleDetails {\\n        uint256 remainingSupply;\\n        uint256 cost;\\n        address paymentToken; // ERC20 token address for payment. address(0) indicated payment in ETH.\\n        uint64 startTime;\\n        uint64 endTime; // 0 end time indicates sale inactive\\n        bytes32 merkleRoot; // Root of allowed addresses\\n    }\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param amount Amount of tokens to mint.\\n     * @param paymentToken ERC20 token address to accept payment in. address(0) indicates ETH.\\n     * @param maxTotal Maximum amount of payment tokens.\\n     * @param proof Merkle proof for allowlist minting.\\n     * @notice Sale must be active for all tokens.\\n     * @dev An empty proof is supplied when no proof is required.\\n     */\\n    function mint(\\n        address to,\\n        uint256 amount,\\n        address paymentToken,\\n        uint256 maxTotal,\\n        bytes32[] memory proof\\n    ) external payable;\\n\\n    /**\\n     * Set the sale details.\\n     * @param remainingSupply The maximum number of tokens that can be minted in this sale.\\n     * @param cost The amount of payment tokens to accept for each token minted.\\n     * @param paymentToken The ERC20 token address to accept payment in. address(0) indicates ETH.\\n     * @param startTime The start time of the sale. Tokens cannot be minted before this time.\\n     * @param endTime The end time of the sale. Tokens cannot be minted after this time.\\n     * @param merkleRoot The merkle root for allowlist minting.\\n     */\\n    function setSaleDetails(\\n        uint256 remainingSupply,\\n        uint256 cost,\\n        address paymentToken,\\n        uint64 startTime,\\n        uint64 endTime,\\n        bytes32 merkleRoot\\n    ) external;\\n\\n    /**\\n     * Get sale details.\\n     * @return Sale details.\\n     */\\n    function saleDetails() external view returns (SaleDetails memory);\\n\\n}\\n\\ninterface IERC721SaleSignals {\\n\\n    event SaleDetailsUpdated(\\n        uint256 remainingSupply,\\n        uint256 cost,\\n        address paymentToken,\\n        uint64 startTime,\\n        uint64 endTime,\\n        bytes32 merkleRoot\\n    );\\n    event ItemsMinted(address to, uint256 amount);\\n\\n    /**\\n     * Contract already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * Sale details supplied are invalid.\\n     */\\n    error InvalidSaleDetails();\\n\\n    /**\\n     * Sale is not active.\\n     */\\n    error SaleInactive();\\n\\n    /**\\n     * Insufficient supply.\\n     * @param remainingSupply Remaining supply.\\n     * @param amount Amount to mint.\\n     */\\n    error InsufficientSupply(uint256 remainingSupply, uint256 amount);\\n\\n    /**\\n     * Insufficient tokens for payment.\\n     * @param currency Currency address. address(0) indicates ETH.\\n     * @param expected Expected amount of tokens.\\n     * @param actual Actual amount of tokens.\\n     */\\n    error InsufficientPayment(address currency, uint256 expected, uint256 actual);\\n\\n}\\n\\ninterface IERC721Sale is IERC721SaleFunctions, IERC721SaleSignals { }\\n\",\"keccak256\":\"0x8ff67e4e1077abb10501b442533e9afe85c4fad973bb7588bd28e733de85b370\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InsufficientPayment(address,uint256,uint256)": [
                {
                  "notice": "Insufficient tokens for payment."
                }
              ],
              "InsufficientSupply(uint256,uint256)": [
                {
                  "notice": "Insufficient supply."
                }
              ],
              "InvalidInitialization()": [
                {
                  "notice": "Contract already initialized."
                }
              ],
              "InvalidSaleDetails()": [
                {
                  "notice": "Sale details supplied are invalid."
                }
              ],
              "SaleInactive()": [
                {
                  "notice": "Sale is not active."
                }
              ]
            },
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/tokens/ERC721/utility/sale/IERC721SaleFactory.sol": {
        "IERC721SaleFactory": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "name": "ERC721SaleDeployed",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "items",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "deploy",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "items",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "determineAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "events": {
              "ERC721SaleDeployed(address)": {
                "params": {
                  "proxyAddr": "The address of the deployed proxy."
                }
              }
            },
            "kind": "dev",
            "methods": {
              "deploy(uint256,address,address,address,address,bytes32)": {
                "params": {
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "items": "The ERC-721 Items contract address",
                  "nonce": "Nonce for randomizing the deployment address.",
                  "proxyOwner": "The owner of the ERC-721 Sale proxy",
                  "tokenOwner": "The owner of the ERC-721 Sale implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-721 Sale Proxy"
                }
              },
              "determineAddress(uint256,address,address,address,address,bytes32)": {
                "params": {
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "items": "The ERC-721 Items contract address",
                  "nonce": "Nonce for randomizing the deployment address.",
                  "proxyOwner": "The owner of the ERC-721 Sale proxy",
                  "tokenOwner": "The owner of the ERC-721 Sale implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-721 Sale Proxy"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "deploy(uint256,address,address,address,address,bytes32)": "69b3934d",
              "determineAddress(uint256,address,address,address,address,bytes32)": "1a4b671d"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"name\":\"ERC721SaleDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"items\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"items\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"determineAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ERC721SaleDeployed(address)\":{\"params\":{\"proxyAddr\":\"The address of the deployed proxy.\"}}},\"kind\":\"dev\",\"methods\":{\"deploy(uint256,address,address,address,address,bytes32)\":{\"params\":{\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"items\":\"The ERC-721 Items contract address\",\"nonce\":\"Nonce for randomizing the deployment address.\",\"proxyOwner\":\"The owner of the ERC-721 Sale proxy\",\"tokenOwner\":\"The owner of the ERC-721 Sale implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-721 Sale Proxy\"}},\"determineAddress(uint256,address,address,address,address,bytes32)\":{\"params\":{\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"items\":\"The ERC-721 Items contract address\",\"nonce\":\"Nonce for randomizing the deployment address.\",\"proxyOwner\":\"The owner of the ERC-721 Sale proxy\",\"tokenOwner\":\"The owner of the ERC-721 Sale implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-721 Sale Proxy\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ERC721SaleDeployed(address)\":{\"notice\":\"Event emitted when a new ERC-721 Sale proxy contract is deployed.\"}},\"kind\":\"user\",\"methods\":{\"deploy(uint256,address,address,address,address,bytes32)\":{\"notice\":\"Creates an ERC-721 Sale for given token contractThe deployed contract must be granted the MINTER_ROLE on the ERC-721 Items contract.\"},\"determineAddress(uint256,address,address,address,address,bytes32)\":{\"notice\":\"Computes the address of a proxy instance.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/utility/sale/IERC721SaleFactory.sol\":\"IERC721SaleFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC721/utility/sale/IERC721SaleFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721SaleFactoryFunctions {\\n\\n    /**\\n     * Creates an ERC-721 Sale for given token contract\\n     * @param nonce Nonce for randomizing the deployment address.\\n     * @param proxyOwner The owner of the ERC-721 Sale proxy\\n     * @param tokenOwner The owner of the ERC-721 Sale implementation\\n     * @param items The ERC-721 Items contract address\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-721 Sale Proxy\\n     * @notice The deployed contract must be granted the MINTER_ROLE on the ERC-721 Items contract.\\n     */\\n    function deploy(\\n        uint256 nonce,\\n        address proxyOwner,\\n        address tokenOwner,\\n        address items,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param nonce Nonce for randomizing the deployment address.\\n     * @param proxyOwner The owner of the ERC-721 Sale proxy\\n     * @param tokenOwner The owner of the ERC-721 Sale implementation\\n     * @param items The ERC-721 Items contract address\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-721 Sale Proxy\\n     */\\n    function determineAddress(\\n        uint256 nonce,\\n        address proxyOwner,\\n        address tokenOwner,\\n        address items,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n}\\n\\ninterface IERC721SaleFactorySignals {\\n\\n    /**\\n     * Event emitted when a new ERC-721 Sale proxy contract is deployed.\\n     * @param proxyAddr The address of the deployed proxy.\\n     */\\n    event ERC721SaleDeployed(address proxyAddr);\\n\\n}\\n\\ninterface IERC721SaleFactory is IERC721SaleFactoryFunctions, IERC721SaleFactorySignals { }\\n\",\"keccak256\":\"0x8564c3550e7fb49ab4f086432aecf189456e31bd3c7797500544c37cc8df8c11\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "events": {
              "ERC721SaleDeployed(address)": {
                "notice": "Event emitted when a new ERC-721 Sale proxy contract is deployed."
              }
            },
            "kind": "user",
            "methods": {
              "deploy(uint256,address,address,address,address,bytes32)": {
                "notice": "Creates an ERC-721 Sale for given token contractThe deployed contract must be granted the MINTER_ROLE on the ERC-721 Items contract."
              },
              "determineAddress(uint256,address,address,address,address,bytes32)": {
                "notice": "Computes the address of a proxy instance."
              }
            },
            "version": 1
          }
        },
        "IERC721SaleFactoryFunctions": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "items",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "deploy",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "items",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "determineAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "deploy(uint256,address,address,address,address,bytes32)": {
                "params": {
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "items": "The ERC-721 Items contract address",
                  "nonce": "Nonce for randomizing the deployment address.",
                  "proxyOwner": "The owner of the ERC-721 Sale proxy",
                  "tokenOwner": "The owner of the ERC-721 Sale implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-721 Sale Proxy"
                }
              },
              "determineAddress(uint256,address,address,address,address,bytes32)": {
                "params": {
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "items": "The ERC-721 Items contract address",
                  "nonce": "Nonce for randomizing the deployment address.",
                  "proxyOwner": "The owner of the ERC-721 Sale proxy",
                  "tokenOwner": "The owner of the ERC-721 Sale implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-721 Sale Proxy"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "deploy(uint256,address,address,address,address,bytes32)": "69b3934d",
              "determineAddress(uint256,address,address,address,address,bytes32)": "1a4b671d"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"items\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"items\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"determineAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(uint256,address,address,address,address,bytes32)\":{\"params\":{\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"items\":\"The ERC-721 Items contract address\",\"nonce\":\"Nonce for randomizing the deployment address.\",\"proxyOwner\":\"The owner of the ERC-721 Sale proxy\",\"tokenOwner\":\"The owner of the ERC-721 Sale implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-721 Sale Proxy\"}},\"determineAddress(uint256,address,address,address,address,bytes32)\":{\"params\":{\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"items\":\"The ERC-721 Items contract address\",\"nonce\":\"Nonce for randomizing the deployment address.\",\"proxyOwner\":\"The owner of the ERC-721 Sale proxy\",\"tokenOwner\":\"The owner of the ERC-721 Sale implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-721 Sale Proxy\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy(uint256,address,address,address,address,bytes32)\":{\"notice\":\"Creates an ERC-721 Sale for given token contractThe deployed contract must be granted the MINTER_ROLE on the ERC-721 Items contract.\"},\"determineAddress(uint256,address,address,address,address,bytes32)\":{\"notice\":\"Computes the address of a proxy instance.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/utility/sale/IERC721SaleFactory.sol\":\"IERC721SaleFactoryFunctions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC721/utility/sale/IERC721SaleFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721SaleFactoryFunctions {\\n\\n    /**\\n     * Creates an ERC-721 Sale for given token contract\\n     * @param nonce Nonce for randomizing the deployment address.\\n     * @param proxyOwner The owner of the ERC-721 Sale proxy\\n     * @param tokenOwner The owner of the ERC-721 Sale implementation\\n     * @param items The ERC-721 Items contract address\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-721 Sale Proxy\\n     * @notice The deployed contract must be granted the MINTER_ROLE on the ERC-721 Items contract.\\n     */\\n    function deploy(\\n        uint256 nonce,\\n        address proxyOwner,\\n        address tokenOwner,\\n        address items,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param nonce Nonce for randomizing the deployment address.\\n     * @param proxyOwner The owner of the ERC-721 Sale proxy\\n     * @param tokenOwner The owner of the ERC-721 Sale implementation\\n     * @param items The ERC-721 Items contract address\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-721 Sale Proxy\\n     */\\n    function determineAddress(\\n        uint256 nonce,\\n        address proxyOwner,\\n        address tokenOwner,\\n        address items,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n}\\n\\ninterface IERC721SaleFactorySignals {\\n\\n    /**\\n     * Event emitted when a new ERC-721 Sale proxy contract is deployed.\\n     * @param proxyAddr The address of the deployed proxy.\\n     */\\n    event ERC721SaleDeployed(address proxyAddr);\\n\\n}\\n\\ninterface IERC721SaleFactory is IERC721SaleFactoryFunctions, IERC721SaleFactorySignals { }\\n\",\"keccak256\":\"0x8564c3550e7fb49ab4f086432aecf189456e31bd3c7797500544c37cc8df8c11\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "deploy(uint256,address,address,address,address,bytes32)": {
                "notice": "Creates an ERC-721 Sale for given token contractThe deployed contract must be granted the MINTER_ROLE on the ERC-721 Items contract."
              },
              "determineAddress(uint256,address,address,address,address,bytes32)": {
                "notice": "Computes the address of a proxy instance."
              }
            },
            "version": 1
          }
        },
        "IERC721SaleFactorySignals": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "name": "ERC721SaleDeployed",
              "type": "event"
            }
          ],
          "devdoc": {
            "events": {
              "ERC721SaleDeployed(address)": {
                "params": {
                  "proxyAddr": "The address of the deployed proxy."
                }
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"name\":\"ERC721SaleDeployed\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"ERC721SaleDeployed(address)\":{\"params\":{\"proxyAddr\":\"The address of the deployed proxy.\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"ERC721SaleDeployed(address)\":{\"notice\":\"Event emitted when a new ERC-721 Sale proxy contract is deployed.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/utility/sale/IERC721SaleFactory.sol\":\"IERC721SaleFactorySignals\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC721/utility/sale/IERC721SaleFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC721SaleFactoryFunctions {\\n\\n    /**\\n     * Creates an ERC-721 Sale for given token contract\\n     * @param nonce Nonce for randomizing the deployment address.\\n     * @param proxyOwner The owner of the ERC-721 Sale proxy\\n     * @param tokenOwner The owner of the ERC-721 Sale implementation\\n     * @param items The ERC-721 Items contract address\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-721 Sale Proxy\\n     * @notice The deployed contract must be granted the MINTER_ROLE on the ERC-721 Items contract.\\n     */\\n    function deploy(\\n        uint256 nonce,\\n        address proxyOwner,\\n        address tokenOwner,\\n        address items,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param nonce Nonce for randomizing the deployment address.\\n     * @param proxyOwner The owner of the ERC-721 Sale proxy\\n     * @param tokenOwner The owner of the ERC-721 Sale implementation\\n     * @param items The ERC-721 Items contract address\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-721 Sale Proxy\\n     */\\n    function determineAddress(\\n        uint256 nonce,\\n        address proxyOwner,\\n        address tokenOwner,\\n        address items,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n}\\n\\ninterface IERC721SaleFactorySignals {\\n\\n    /**\\n     * Event emitted when a new ERC-721 Sale proxy contract is deployed.\\n     * @param proxyAddr The address of the deployed proxy.\\n     */\\n    event ERC721SaleDeployed(address proxyAddr);\\n\\n}\\n\\ninterface IERC721SaleFactory is IERC721SaleFactoryFunctions, IERC721SaleFactorySignals { }\\n\",\"keccak256\":\"0x8564c3550e7fb49ab4f086432aecf189456e31bd3c7797500544c37cc8df8c11\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "events": {
              "ERC721SaleDeployed(address)": {
                "notice": "Event emitted when a new ERC-721 Sale proxy contract is deployed."
              }
            },
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/tokens/common/IMerkleProofSingleUse.sol": {
        "IMerkleProofSingleUse": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "root",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "salt",
                  "type": "bytes32"
                }
              ],
              "name": "MerkleProofInvalid",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "root",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "salt",
                  "type": "bytes32"
                }
              ],
              "name": "checkMerkleProof",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "errors": {
              "MerkleProofInvalid(bytes32,bytes32[],address,bytes32)": [
                {
                  "params": {
                    "addr": "Address to check.",
                    "proof": "Merkle proof.",
                    "root": "Merkle root.",
                    "salt": "Salt used to generate the merkle leaf."
                  }
                }
              ]
            },
            "kind": "dev",
            "methods": {
              "checkMerkleProof(bytes32,bytes32[],address,bytes32)": {
                "params": {
                  "addr": "Address to check.",
                  "proof": "Merkle proof.",
                  "root": "Merkle root.",
                  "salt": "Salt used to generate the merkle leaf."
                },
                "returns": {
                  "_0": "True if the proof is valid and has not yet been used by {addr}."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "checkMerkleProof(bytes32,bytes32[],address,bytes32)": "bad43661"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"MerkleProofInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"checkMerkleProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"MerkleProofInvalid(bytes32,bytes32[],address,bytes32)\":[{\"params\":{\"addr\":\"Address to check.\",\"proof\":\"Merkle proof.\",\"root\":\"Merkle root.\",\"salt\":\"Salt used to generate the merkle leaf.\"}}]},\"kind\":\"dev\",\"methods\":{\"checkMerkleProof(bytes32,bytes32[],address,bytes32)\":{\"params\":{\"addr\":\"Address to check.\",\"proof\":\"Merkle proof.\",\"root\":\"Merkle root.\",\"salt\":\"Salt used to generate the merkle leaf.\"},\"returns\":{\"_0\":\"True if the proof is valid and has not yet been used by {addr}.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"MerkleProofInvalid(bytes32,bytes32[],address,bytes32)\":[{\"notice\":\"Thrown when the merkle proof is invalid or has already been used.\"}]},\"kind\":\"user\",\"methods\":{\"checkMerkleProof(bytes32,bytes32[],address,bytes32)\":{\"notice\":\"Checks if the given merkle proof is valid.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/common/IMerkleProofSingleUse.sol\":\"IMerkleProofSingleUse\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/common/IMerkleProofSingleUse.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IMerkleProofSingleUseFunctions {\\n\\n    /**\\n     * Checks if the given merkle proof is valid.\\n     * @param root Merkle root.\\n     * @param proof Merkle proof.\\n     * @param addr Address to check.\\n     * @param salt Salt used to generate the merkle leaf.\\n     * @return True if the proof is valid and has not yet been used by {addr}.\\n     */\\n    function checkMerkleProof(\\n        bytes32 root,\\n        bytes32[] calldata proof,\\n        address addr,\\n        bytes32 salt\\n    ) external view returns (bool);\\n\\n}\\n\\ninterface IMerkleProofSingleUseSignals {\\n\\n    /**\\n     * Thrown when the merkle proof is invalid or has already been used.\\n     * @param root Merkle root.\\n     * @param proof Merkle proof.\\n     * @param addr Address to check.\\n     * @param salt Salt used to generate the merkle leaf.\\n     */\\n    error MerkleProofInvalid(bytes32 root, bytes32[] proof, address addr, bytes32 salt);\\n\\n}\\n\\ninterface IMerkleProofSingleUse is IMerkleProofSingleUseFunctions, IMerkleProofSingleUseSignals { }\\n\",\"keccak256\":\"0x074aba31432a82ce4297916b3615786f98cbc913026fdaebea56b8b9ce3849c5\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "MerkleProofInvalid(bytes32,bytes32[],address,bytes32)": [
                {
                  "notice": "Thrown when the merkle proof is invalid or has already been used."
                }
              ]
            },
            "kind": "user",
            "methods": {
              "checkMerkleProof(bytes32,bytes32[],address,bytes32)": {
                "notice": "Checks if the given merkle proof is valid."
              }
            },
            "version": 1
          }
        },
        "IMerkleProofSingleUseFunctions": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "root",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "salt",
                  "type": "bytes32"
                }
              ],
              "name": "checkMerkleProof",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "checkMerkleProof(bytes32,bytes32[],address,bytes32)": {
                "params": {
                  "addr": "Address to check.",
                  "proof": "Merkle proof.",
                  "root": "Merkle root.",
                  "salt": "Salt used to generate the merkle leaf."
                },
                "returns": {
                  "_0": "True if the proof is valid and has not yet been used by {addr}."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "checkMerkleProof(bytes32,bytes32[],address,bytes32)": "bad43661"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"checkMerkleProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkMerkleProof(bytes32,bytes32[],address,bytes32)\":{\"params\":{\"addr\":\"Address to check.\",\"proof\":\"Merkle proof.\",\"root\":\"Merkle root.\",\"salt\":\"Salt used to generate the merkle leaf.\"},\"returns\":{\"_0\":\"True if the proof is valid and has not yet been used by {addr}.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkMerkleProof(bytes32,bytes32[],address,bytes32)\":{\"notice\":\"Checks if the given merkle proof is valid.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/common/IMerkleProofSingleUse.sol\":\"IMerkleProofSingleUseFunctions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/common/IMerkleProofSingleUse.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IMerkleProofSingleUseFunctions {\\n\\n    /**\\n     * Checks if the given merkle proof is valid.\\n     * @param root Merkle root.\\n     * @param proof Merkle proof.\\n     * @param addr Address to check.\\n     * @param salt Salt used to generate the merkle leaf.\\n     * @return True if the proof is valid and has not yet been used by {addr}.\\n     */\\n    function checkMerkleProof(\\n        bytes32 root,\\n        bytes32[] calldata proof,\\n        address addr,\\n        bytes32 salt\\n    ) external view returns (bool);\\n\\n}\\n\\ninterface IMerkleProofSingleUseSignals {\\n\\n    /**\\n     * Thrown when the merkle proof is invalid or has already been used.\\n     * @param root Merkle root.\\n     * @param proof Merkle proof.\\n     * @param addr Address to check.\\n     * @param salt Salt used to generate the merkle leaf.\\n     */\\n    error MerkleProofInvalid(bytes32 root, bytes32[] proof, address addr, bytes32 salt);\\n\\n}\\n\\ninterface IMerkleProofSingleUse is IMerkleProofSingleUseFunctions, IMerkleProofSingleUseSignals { }\\n\",\"keccak256\":\"0x074aba31432a82ce4297916b3615786f98cbc913026fdaebea56b8b9ce3849c5\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "checkMerkleProof(bytes32,bytes32[],address,bytes32)": {
                "notice": "Checks if the given merkle proof is valid."
              }
            },
            "version": 1
          }
        },
        "IMerkleProofSingleUseSignals": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "root",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "salt",
                  "type": "bytes32"
                }
              ],
              "name": "MerkleProofInvalid",
              "type": "error"
            }
          ],
          "devdoc": {
            "errors": {
              "MerkleProofInvalid(bytes32,bytes32[],address,bytes32)": [
                {
                  "params": {
                    "addr": "Address to check.",
                    "proof": "Merkle proof.",
                    "root": "Merkle root.",
                    "salt": "Salt used to generate the merkle leaf."
                  }
                }
              ]
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"MerkleProofInvalid\",\"type\":\"error\"}],\"devdoc\":{\"errors\":{\"MerkleProofInvalid(bytes32,bytes32[],address,bytes32)\":[{\"params\":{\"addr\":\"Address to check.\",\"proof\":\"Merkle proof.\",\"root\":\"Merkle root.\",\"salt\":\"Salt used to generate the merkle leaf.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"MerkleProofInvalid(bytes32,bytes32[],address,bytes32)\":[{\"notice\":\"Thrown when the merkle proof is invalid or has already been used.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/common/IMerkleProofSingleUse.sol\":\"IMerkleProofSingleUseSignals\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/common/IMerkleProofSingleUse.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IMerkleProofSingleUseFunctions {\\n\\n    /**\\n     * Checks if the given merkle proof is valid.\\n     * @param root Merkle root.\\n     * @param proof Merkle proof.\\n     * @param addr Address to check.\\n     * @param salt Salt used to generate the merkle leaf.\\n     * @return True if the proof is valid and has not yet been used by {addr}.\\n     */\\n    function checkMerkleProof(\\n        bytes32 root,\\n        bytes32[] calldata proof,\\n        address addr,\\n        bytes32 salt\\n    ) external view returns (bool);\\n\\n}\\n\\ninterface IMerkleProofSingleUseSignals {\\n\\n    /**\\n     * Thrown when the merkle proof is invalid or has already been used.\\n     * @param root Merkle root.\\n     * @param proof Merkle proof.\\n     * @param addr Address to check.\\n     * @param salt Salt used to generate the merkle leaf.\\n     */\\n    error MerkleProofInvalid(bytes32 root, bytes32[] proof, address addr, bytes32 salt);\\n\\n}\\n\\ninterface IMerkleProofSingleUse is IMerkleProofSingleUseFunctions, IMerkleProofSingleUseSignals { }\\n\",\"keccak256\":\"0x074aba31432a82ce4297916b3615786f98cbc913026fdaebea56b8b9ce3849c5\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "MerkleProofInvalid(bytes32,bytes32[],address,bytes32)": [
                {
                  "notice": "Thrown when the merkle proof is invalid or has already been used."
                }
              ]
            },
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/tokens/common/IWithdrawControlled.sol": {
        "IWithdrawControlled": {
          "abi": [
            {
              "inputs": [],
              "name": "WithdrawFailed",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "withdrawERC20",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "withdrawETH",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "withdrawERC20(address,address,uint256)": {
                "params": {
                  "to": "Address to withdraw to.",
                  "token": "The ERC20 token address.",
                  "value": "Amount to withdraw."
                }
              },
              "withdrawETH(address,uint256)": {
                "params": {
                  "to": "Address to withdraw to.",
                  "value": "Amount to withdraw."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "withdrawERC20(address,address,uint256)": "44004cc1",
              "withdrawETH(address,uint256)": "4782f779"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"withdrawERC20(address,address,uint256)\":{\"params\":{\"to\":\"Address to withdraw to.\",\"token\":\"The ERC20 token address.\",\"value\":\"Amount to withdraw.\"}},\"withdrawETH(address,uint256)\":{\"params\":{\"to\":\"Address to withdraw to.\",\"value\":\"Amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"WithdrawFailed()\":[{\"notice\":\"Withdraw failed error.\"}]},\"kind\":\"user\",\"methods\":{\"withdrawERC20(address,address,uint256)\":{\"notice\":\"Withdraws ERC20 tokens owned by this contract.\"},\"withdrawETH(address,uint256)\":{\"notice\":\"Withdraws ETH owned by this sale contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/common/IWithdrawControlled.sol\":\"IWithdrawControlled\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/common/IWithdrawControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IWithdrawControlledFunctions {\\n\\n    /**\\n     * Withdraws ERC20 tokens owned by this contract.\\n     * @param token The ERC20 token address.\\n     * @param to Address to withdraw to.\\n     * @param value Amount to withdraw.\\n     */\\n    function withdrawERC20(address token, address to, uint256 value) external;\\n\\n    /**\\n     * Withdraws ETH owned by this sale contract.\\n     * @param to Address to withdraw to.\\n     * @param value Amount to withdraw.\\n     */\\n    function withdrawETH(address to, uint256 value) external;\\n\\n}\\n\\ninterface IWithdrawControlledSignals {\\n\\n    /**\\n     * Withdraw failed error.\\n     */\\n    error WithdrawFailed();\\n\\n}\\n\\ninterface IWithdrawControlled is IWithdrawControlledFunctions, IWithdrawControlledSignals { }\\n\",\"keccak256\":\"0x2e7a9edda2114d11a23fbf06a41a961514f692daba4d07a41214b6247115f254\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "WithdrawFailed()": [
                {
                  "notice": "Withdraw failed error."
                }
              ]
            },
            "kind": "user",
            "methods": {
              "withdrawERC20(address,address,uint256)": {
                "notice": "Withdraws ERC20 tokens owned by this contract."
              },
              "withdrawETH(address,uint256)": {
                "notice": "Withdraws ETH owned by this sale contract."
              }
            },
            "version": 1
          }
        },
        "IWithdrawControlledFunctions": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "withdrawERC20",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "withdrawETH",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "withdrawERC20(address,address,uint256)": {
                "params": {
                  "to": "Address to withdraw to.",
                  "token": "The ERC20 token address.",
                  "value": "Amount to withdraw."
                }
              },
              "withdrawETH(address,uint256)": {
                "params": {
                  "to": "Address to withdraw to.",
                  "value": "Amount to withdraw."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "withdrawERC20(address,address,uint256)": "44004cc1",
              "withdrawETH(address,uint256)": "4782f779"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"withdrawERC20(address,address,uint256)\":{\"params\":{\"to\":\"Address to withdraw to.\",\"token\":\"The ERC20 token address.\",\"value\":\"Amount to withdraw.\"}},\"withdrawETH(address,uint256)\":{\"params\":{\"to\":\"Address to withdraw to.\",\"value\":\"Amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"withdrawERC20(address,address,uint256)\":{\"notice\":\"Withdraws ERC20 tokens owned by this contract.\"},\"withdrawETH(address,uint256)\":{\"notice\":\"Withdraws ETH owned by this sale contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/common/IWithdrawControlled.sol\":\"IWithdrawControlledFunctions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/common/IWithdrawControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IWithdrawControlledFunctions {\\n\\n    /**\\n     * Withdraws ERC20 tokens owned by this contract.\\n     * @param token The ERC20 token address.\\n     * @param to Address to withdraw to.\\n     * @param value Amount to withdraw.\\n     */\\n    function withdrawERC20(address token, address to, uint256 value) external;\\n\\n    /**\\n     * Withdraws ETH owned by this sale contract.\\n     * @param to Address to withdraw to.\\n     * @param value Amount to withdraw.\\n     */\\n    function withdrawETH(address to, uint256 value) external;\\n\\n}\\n\\ninterface IWithdrawControlledSignals {\\n\\n    /**\\n     * Withdraw failed error.\\n     */\\n    error WithdrawFailed();\\n\\n}\\n\\ninterface IWithdrawControlled is IWithdrawControlledFunctions, IWithdrawControlledSignals { }\\n\",\"keccak256\":\"0x2e7a9edda2114d11a23fbf06a41a961514f692daba4d07a41214b6247115f254\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "withdrawERC20(address,address,uint256)": {
                "notice": "Withdraws ERC20 tokens owned by this contract."
              },
              "withdrawETH(address,uint256)": {
                "notice": "Withdraws ETH owned by this sale contract."
              }
            },
            "version": 1
          }
        },
        "IWithdrawControlledSignals": {
          "abi": [
            {
              "inputs": [],
              "name": "WithdrawFailed",
              "type": "error"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"WithdrawFailed()\":[{\"notice\":\"Withdraw failed error.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/common/IWithdrawControlled.sol\":\"IWithdrawControlledSignals\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/common/IWithdrawControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IWithdrawControlledFunctions {\\n\\n    /**\\n     * Withdraws ERC20 tokens owned by this contract.\\n     * @param token The ERC20 token address.\\n     * @param to Address to withdraw to.\\n     * @param value Amount to withdraw.\\n     */\\n    function withdrawERC20(address token, address to, uint256 value) external;\\n\\n    /**\\n     * Withdraws ETH owned by this sale contract.\\n     * @param to Address to withdraw to.\\n     * @param value Amount to withdraw.\\n     */\\n    function withdrawETH(address to, uint256 value) external;\\n\\n}\\n\\ninterface IWithdrawControlledSignals {\\n\\n    /**\\n     * Withdraw failed error.\\n     */\\n    error WithdrawFailed();\\n\\n}\\n\\ninterface IWithdrawControlled is IWithdrawControlledFunctions, IWithdrawControlledSignals { }\\n\",\"keccak256\":\"0x2e7a9edda2114d11a23fbf06a41a961514f692daba4d07a41214b6247115f254\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "WithdrawFailed()": [
                {
                  "notice": "Withdraw failed error."
                }
              ]
            },
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/tokens/common/MerkleProofSingleUse.sol": {
        "MerkleProofSingleUse": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "root",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "salt",
                  "type": "bytes32"
                }
              ],
              "name": "MerkleProofInvalid",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "root",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32[]",
                  "name": "proof",
                  "type": "bytes32[]"
                },
                {
                  "internalType": "address",
                  "name": "addr",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "salt",
                  "type": "bytes32"
                }
              ],
              "name": "checkMerkleProof",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "errors": {
              "MerkleProofInvalid(bytes32,bytes32[],address,bytes32)": [
                {
                  "params": {
                    "addr": "Address to check.",
                    "proof": "Merkle proof.",
                    "root": "Merkle root.",
                    "salt": "Salt used to generate the merkle leaf."
                  }
                }
              ]
            },
            "kind": "dev",
            "methods": {
              "checkMerkleProof(bytes32,bytes32[],address,bytes32)": {
                "params": {
                  "addr": "Address to check.",
                  "proof": "Merkle proof.",
                  "root": "Merkle root.",
                  "salt": "Salt used to generate the merkle leaf."
                },
                "returns": {
                  "_0": "True if the proof is valid and has not yet been used by {addr}."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "checkMerkleProof(bytes32,bytes32[],address,bytes32)": "bad43661"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"MerkleProofInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"checkMerkleProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"MerkleProofInvalid(bytes32,bytes32[],address,bytes32)\":[{\"params\":{\"addr\":\"Address to check.\",\"proof\":\"Merkle proof.\",\"root\":\"Merkle root.\",\"salt\":\"Salt used to generate the merkle leaf.\"}}]},\"kind\":\"dev\",\"methods\":{\"checkMerkleProof(bytes32,bytes32[],address,bytes32)\":{\"params\":{\"addr\":\"Address to check.\",\"proof\":\"Merkle proof.\",\"root\":\"Merkle root.\",\"salt\":\"Salt used to generate the merkle leaf.\"},\"returns\":{\"_0\":\"True if the proof is valid and has not yet been used by {addr}.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"MerkleProofInvalid(bytes32,bytes32[],address,bytes32)\":[{\"notice\":\"Thrown when the merkle proof is invalid or has already been used.\"}]},\"kind\":\"user\",\"methods\":{\"checkMerkleProof(bytes32,bytes32[],address,bytes32)\":{\"notice\":\"Checks if the given merkle proof is valid.\"}},\"notice\":\"Require single use merkle proofs per address.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/common/MerkleProofSingleUse.sol\":\"MerkleProofSingleUse\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\"},\"src/tokens/common/IMerkleProofSingleUse.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IMerkleProofSingleUseFunctions {\\n\\n    /**\\n     * Checks if the given merkle proof is valid.\\n     * @param root Merkle root.\\n     * @param proof Merkle proof.\\n     * @param addr Address to check.\\n     * @param salt Salt used to generate the merkle leaf.\\n     * @return True if the proof is valid and has not yet been used by {addr}.\\n     */\\n    function checkMerkleProof(\\n        bytes32 root,\\n        bytes32[] calldata proof,\\n        address addr,\\n        bytes32 salt\\n    ) external view returns (bool);\\n\\n}\\n\\ninterface IMerkleProofSingleUseSignals {\\n\\n    /**\\n     * Thrown when the merkle proof is invalid or has already been used.\\n     * @param root Merkle root.\\n     * @param proof Merkle proof.\\n     * @param addr Address to check.\\n     * @param salt Salt used to generate the merkle leaf.\\n     */\\n    error MerkleProofInvalid(bytes32 root, bytes32[] proof, address addr, bytes32 salt);\\n\\n}\\n\\ninterface IMerkleProofSingleUse is IMerkleProofSingleUseFunctions, IMerkleProofSingleUseSignals { }\\n\",\"keccak256\":\"0x074aba31432a82ce4297916b3615786f98cbc913026fdaebea56b8b9ce3849c5\",\"license\":\"Apache-2.0\"},\"src/tokens/common/MerkleProofSingleUse.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { IMerkleProofSingleUse } from \\\"./IMerkleProofSingleUse.sol\\\";\\n\\nimport { MerkleProof } from \\\"openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n * Require single use merkle proofs per address.\\n */\\nabstract contract MerkleProofSingleUse is IMerkleProofSingleUse {\\n\\n    // Stores proofs used by an address\\n    mapping(address => mapping(bytes32 => bool)) private _proofUsed;\\n\\n    /**\\n     * Requires the given merkle proof to be valid.\\n     * @param root Merkle root.\\n     * @param proof Merkle proof.\\n     * @param addr Address to check.\\n     * @param salt Salt used to generate the merkle leaf.\\n     * @notice Fails when the proof is invalid or the proof has already been claimed by this address.\\n     * @dev This function reverts on failure.\\n     */\\n    function requireMerkleProof(bytes32 root, bytes32[] calldata proof, address addr, bytes32 salt) internal {\\n        if (root != bytes32(0)) {\\n            if (!checkMerkleProof(root, proof, addr, salt)) {\\n                revert MerkleProofInvalid(root, proof, addr, salt);\\n            }\\n            _proofUsed[addr][root] = true;\\n        }\\n    }\\n\\n    /**\\n     * Checks if the given merkle proof is valid.\\n     * @param root Merkle root.\\n     * @param proof Merkle proof.\\n     * @param addr Address to check.\\n     * @param salt Salt used to generate the merkle leaf.\\n     * @return True if the proof is valid and has not yet been used by {addr}.\\n     */\\n    function checkMerkleProof(\\n        bytes32 root,\\n        bytes32[] calldata proof,\\n        address addr,\\n        bytes32 salt\\n    ) public view returns (bool) {\\n        return !_proofUsed[addr][root] && MerkleProof.verify(proof, root, keccak256(abi.encodePacked(addr, salt)));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5d5d714ef0d9ed73798d5427e9df7adf2441f3ef8d9c14e7a8db157f24637475\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "MerkleProofInvalid(bytes32,bytes32[],address,bytes32)": [
                {
                  "notice": "Thrown when the merkle proof is invalid or has already been used."
                }
              ]
            },
            "kind": "user",
            "methods": {
              "checkMerkleProof(bytes32,bytes32[],address,bytes32)": {
                "notice": "Checks if the given merkle proof is valid."
              }
            },
            "notice": "Require single use merkle proofs per address.",
            "version": 1
          }
        }
      },
      "src/tokens/common/SignalsImplicitModeControlled.sol": {
        "SignalsImplicitModeControlled": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "delegateCall",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "onlyFallback",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "behaviorOnError",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Payload.Call",
                  "name": "call",
                  "type": "tuple"
                }
              ],
              "name": "acceptImplicitRequest",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "projectId",
                  "type": "bytes32"
                }
              ],
              "name": "setImplicitModeProjectId",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "validator",
                  "type": "address"
                }
              ],
              "name": "setImplicitModeValidator",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "params": {
                  "attestation": "The attestation data",
                  "call": "The call to validate",
                  "wallet": "The wallet's address"
                },
                "returns": {
                  "_0": "The hash of the implicit request if valid"
                }
              },
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "setImplicitModeProjectId(bytes32)": {
                "params": {
                  "projectId": "The project id."
                }
              },
              "setImplicitModeValidator(address)": {
                "params": {
                  "validator": "The validator address."
                }
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": "9d043a66",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "setImplicitModeProjectId(bytes32)": "ed4c2ac7",
              "setImplicitModeValidator(address)": "0bb310de",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delegateCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onlyFallback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"behaviorOnError\",\"type\":\"uint256\"}],\"internalType\":\"struct Payload.Call\",\"name\":\"call\",\"type\":\"tuple\"}],\"name\":\"acceptImplicitRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"setImplicitModeProjectId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"setImplicitModeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"params\":{\"attestation\":\"The attestation data\",\"call\":\"The call to validate\",\"wallet\":\"The wallet's address\"},\"returns\":{\"_0\":\"The hash of the implicit request if valid\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setImplicitModeProjectId(bytes32)\":{\"params\":{\"projectId\":\"The project id.\"}},\"setImplicitModeValidator(address)\":{\"params\":{\"validator\":\"The validator address.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"notice\":\"Determines if an implicit request is valid\"},\"setImplicitModeProjectId(bytes32)\":{\"notice\":\"Updates the settings for implicit mode validation.Only callable by an address with the project admin role.\"},\"setImplicitModeValidator(address)\":{\"notice\":\"Updates the validator for implicit mode validation.Only callable by an address with the project admin role.\"}},\"notice\":\"An abstract contract that allows implicit session access for a given project.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/common/SignalsImplicitModeControlled.sol\":\"SignalsImplicitModeControlled\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IImplicitProjectValidation } from \\\"../registry/IImplicitProjectValidation.sol\\\";\\n\\nimport { ERC165, IERC165 } from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\nimport { ISignalsImplicitMode } from \\\"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\\\";\\nimport { Payload } from \\\"sequence-v3/src/modules/Payload.sol\\\";\\n\\n/// @title SignalsImplicitMode\\n/// @author Michael Standen\\n/// @notice Base contract for implicit mode validation by project\\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\\n\\n  IImplicitProjectValidation internal _validator;\\n  bytes32 internal _projectId;\\n\\n  /// @notice Initialize implicit mode validation\\n  /// @param validator The IImplicitProjectValidation address\\n  /// @param projectId The project id\\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\\n    _validator = IImplicitProjectValidation(validator);\\n    _projectId = projectId;\\n  }\\n\\n  /// @inheritdoc ISignalsImplicitMode\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32) {\\n    _validateImplicitRequest(wallet, attestation, call);\\n    return _validator.validateAttestation(wallet, attestation, _projectId);\\n  }\\n\\n  /// @notice Validates an implicit request\\n  /// @dev Optional hook for additional validation of the implicit requests\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  function _validateImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) internal view virtual { }\\n\\n  /// @inheritdoc IERC165\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd9107be2460f7f7ec4bdfefc3d10c79aa92b9285e1b12a75cb2a8d17b150a2ec\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"},\"src/tokens/common/SignalsImplicitModeControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport {\\n    IERC165,\\n    IImplicitProjectValidation,\\n    SignalsImplicitMode\\n} from \\\"signals-implicit-mode/src/helper/SignalsImplicitMode.sol\\\";\\n\\n/**\\n * An abstract contract that allows implicit session access for a given project.\\n */\\nabstract contract SignalsImplicitModeControlled is AccessControlEnumerable, SignalsImplicitMode {\\n\\n    bytes32 internal constant _IMPLICIT_MODE_ADMIN_ROLE = keccak256(\\\"IMPLICIT_MODE_ADMIN_ROLE\\\");\\n\\n    function _initializeImplicitMode(address owner, address validator, bytes32 projectId) internal {\\n        _grantRole(_IMPLICIT_MODE_ADMIN_ROLE, owner);\\n        _initializeSignalsImplicitMode(validator, projectId);\\n    }\\n\\n    /**\\n     * Updates the validator for implicit mode validation.\\n     * @param validator The validator address.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeValidator(\\n        address validator\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _validator = IImplicitProjectValidation(validator);\\n    }\\n\\n    /**\\n     * Updates the settings for implicit mode validation.\\n     * @param projectId The project id.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeProjectId(\\n        bytes32 projectId\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _projectId = projectId;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable, SignalsImplicitMode) returns (bool) {\\n        return\\n            AccessControlEnumerable.supportsInterface(interfaceId) || SignalsImplicitMode.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb1a20575f188af254f90ec7df7f70415610ba5f41f7966ce383b50063220b860\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "notice": "Determines if an implicit request is valid"
              },
              "setImplicitModeProjectId(bytes32)": {
                "notice": "Updates the settings for implicit mode validation.Only callable by an address with the project admin role."
              },
              "setImplicitModeValidator(address)": {
                "notice": "Updates the validator for implicit mode validation.Only callable by an address with the project admin role."
              }
            },
            "notice": "An abstract contract that allows implicit session access for a given project.",
            "version": 1
          }
        }
      },
      "src/tokens/common/WithdrawControlled.sol": {
        "WithdrawControlled": {
          "abi": [
            {
              "inputs": [],
              "name": "WithdrawFailed",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "withdrawERC20",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "withdrawETH",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              },
              "withdrawERC20(address,address,uint256)": {
                "params": {
                  "to": "Address to withdraw to.",
                  "token": "The ERC20 token address.",
                  "value": "Amount to withdraw."
                }
              },
              "withdrawETH(address,uint256)": {
                "params": {
                  "to": "Address to withdraw to.",
                  "value": "Amount to withdraw."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "supportsInterface(bytes4)": "01ffc9a7",
              "withdrawERC20(address,address,uint256)": "44004cc1",
              "withdrawETH(address,uint256)": "4782f779"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"withdrawERC20(address,address,uint256)\":{\"params\":{\"to\":\"Address to withdraw to.\",\"token\":\"The ERC20 token address.\",\"value\":\"Amount to withdraw.\"}},\"withdrawETH(address,uint256)\":{\"params\":{\"to\":\"Address to withdraw to.\",\"value\":\"Amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"WithdrawFailed()\":[{\"notice\":\"Withdraw failed error.\"}]},\"kind\":\"user\",\"methods\":{\"withdrawERC20(address,address,uint256)\":{\"notice\":\"Withdraws ERC20 tokens owned by this contract.Only callable by an address with the withdraw role.\"},\"withdrawETH(address,uint256)\":{\"notice\":\"Withdraws ETH owned by this sale contract.Only callable by an address with the withdraw role.\"}},\"notice\":\"An abstract contract that allows ETH and ERC20 tokens stored in the contract to be withdrawn.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/common/WithdrawControlled.sol\":\"WithdrawControlled\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"src/tokens/common/IWithdrawControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IWithdrawControlledFunctions {\\n\\n    /**\\n     * Withdraws ERC20 tokens owned by this contract.\\n     * @param token The ERC20 token address.\\n     * @param to Address to withdraw to.\\n     * @param value Amount to withdraw.\\n     */\\n    function withdrawERC20(address token, address to, uint256 value) external;\\n\\n    /**\\n     * Withdraws ETH owned by this sale contract.\\n     * @param to Address to withdraw to.\\n     * @param value Amount to withdraw.\\n     */\\n    function withdrawETH(address to, uint256 value) external;\\n\\n}\\n\\ninterface IWithdrawControlledSignals {\\n\\n    /**\\n     * Withdraw failed error.\\n     */\\n    error WithdrawFailed();\\n\\n}\\n\\ninterface IWithdrawControlled is IWithdrawControlledFunctions, IWithdrawControlledSignals { }\\n\",\"keccak256\":\"0x2e7a9edda2114d11a23fbf06a41a961514f692daba4d07a41214b6247115f254\",\"license\":\"Apache-2.0\"},\"src/tokens/common/WithdrawControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { IWithdrawControlled } from \\\"./IWithdrawControlled.sol\\\";\\n\\nimport { AccessControlEnumerable, ERC165 } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport { IERC20, SafeERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * An abstract contract that allows ETH and ERC20 tokens stored in the contract to be withdrawn.\\n */\\nabstract contract WithdrawControlled is AccessControlEnumerable, IWithdrawControlled {\\n\\n    bytes32 internal constant WITHDRAW_ROLE = keccak256(\\\"WITHDRAW_ROLE\\\");\\n\\n    //\\n    // Withdraw\\n    //\\n\\n    /**\\n     * Withdraws ERC20 tokens owned by this contract.\\n     * @param token The ERC20 token address.\\n     * @param to Address to withdraw to.\\n     * @param value Amount to withdraw.\\n     * @notice Only callable by an address with the withdraw role.\\n     */\\n    function withdrawERC20(address token, address to, uint256 value) public onlyRole(WITHDRAW_ROLE) {\\n        SafeERC20.safeTransfer(IERC20(token), to, value);\\n    }\\n\\n    /**\\n     * Withdraws ETH owned by this sale contract.\\n     * @param to Address to withdraw to.\\n     * @param value Amount to withdraw.\\n     * @notice Only callable by an address with the withdraw role.\\n     */\\n    function withdrawETH(address to, uint256 value) public onlyRole(WITHDRAW_ROLE) {\\n        (bool success,) = to.call{ value: value }(\\\"\\\");\\n        if (!success) {\\n            revert WithdrawFailed();\\n        }\\n    }\\n\\n    /// @inheritdoc ERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable) returns (bool) {\\n        return interfaceId == type(IWithdrawControlled).interfaceId\\n            || AccessControlEnumerable.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1431e55e474378bf9d1ed6c013bf82a2af97b12a22028ef78b274e42f14a8144\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "WithdrawFailed()": [
                {
                  "notice": "Withdraw failed error."
                }
              ]
            },
            "kind": "user",
            "methods": {
              "withdrawERC20(address,address,uint256)": {
                "notice": "Withdraws ERC20 tokens owned by this contract.Only callable by an address with the withdraw role."
              },
              "withdrawETH(address,uint256)": {
                "notice": "Withdraws ETH owned by this sale contract.Only callable by an address with the withdraw role."
              }
            },
            "notice": "An abstract contract that allows ETH and ERC20 tokens stored in the contract to be withdrawn.",
            "version": 1
          }
        }
      }
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
        "id": 0
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol": {
        "id": 1
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "id": 2
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol": {
        "id": 3
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "id": 4
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
        "id": 5
      },
      "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
        "id": 6
      },
      "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
        "id": 7
      },
      "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
        "id": 8
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
        "id": 9
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol": {
        "id": 10
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "id": 11
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
        "id": 12
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
        "id": 13
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "id": 14
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "id": 15
      },
      "lib/openzeppelin-contracts/contracts/utils/Create2.sol": {
        "id": 16
      },
      "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
        "id": 17
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "id": 18
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
        "id": 19
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "id": 20
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "id": 21
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "id": 22
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "id": 23
      },
      "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
        "id": 24
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol": {
        "id": 25
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol": {
        "id": 26
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol": {
        "id": 27
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol": {
        "id": 28
      },
      "lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol": {
        "id": 29
      },
      "lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol": {
        "id": 30
      },
      "src/proxies/SequenceProxyFactory.sol": {
        "id": 31
      },
      "src/proxies/TransparentUpgradeableBeaconProxy.sol": {
        "id": 32
      },
      "src/proxies/openzeppelin/BeaconProxy.sol": {
        "id": 33
      },
      "src/proxies/openzeppelin/ERC1967Proxy.sol": {
        "id": 34
      },
      "src/proxies/openzeppelin/TransparentUpgradeableProxy.sol": {
        "id": 35
      },
      "src/tokens/ERC721/presets/items/IERC721Items.sol": {
        "id": 36
      },
      "src/tokens/ERC721/utility/sale/ERC721Sale.sol": {
        "id": 37
      },
      "src/tokens/ERC721/utility/sale/ERC721SaleFactory.sol": {
        "id": 38
      },
      "src/tokens/ERC721/utility/sale/IERC721Sale.sol": {
        "id": 39
      },
      "src/tokens/ERC721/utility/sale/IERC721SaleFactory.sol": {
        "id": 40
      },
      "src/tokens/common/IMerkleProofSingleUse.sol": {
        "id": 41
      },
      "src/tokens/common/IWithdrawControlled.sol": {
        "id": 42
      },
      "src/tokens/common/MerkleProofSingleUse.sol": {
        "id": 43
      },
      "src/tokens/common/SignalsImplicitModeControlled.sol": {
        "id": 44
      },
      "src/tokens/common/WithdrawControlled.sol": {
        "id": 45
      }
    }
  },
  "solcLongVersion": "0.8.27+commit.40a35a09",
  "solcVersion": "0.8.27"
}
