{
  "id": "bb33c2cc7808f33ca6486f04ea4a29e09827ef2d",
  "source_id_to_path": {
    "0": "src/tokens/ERC20/presets/items/ERC20ItemsFactory.sol",
    "1": "src/proxies/SequenceProxyFactory.sol",
    "2": "src/tokens/ERC20/presets/items/ERC20Items.sol",
    "3": "src/tokens/ERC20/presets/items/IERC20ItemsFactory.sol",
    "4": "src/proxies/TransparentUpgradeableBeaconProxy.sol",
    "5": "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
    "6": "lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol",
    "7": "lib/openzeppelin-contracts/contracts/utils/Create2.sol",
    "8": "src/tokens/ERC20/ERC20BaseToken.sol",
    "9": "src/tokens/ERC20/presets/items/IERC20Items.sol",
    "10": "src/proxies/openzeppelin/BeaconProxy.sol",
    "11": "src/proxies/openzeppelin/TransparentUpgradeableProxy.sol",
    "12": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
    "13": "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol",
    "14": "lib/openzeppelin-contracts/contracts/utils/Address.sol",
    "15": "src/tokens/common/SignalsImplicitModeControlled.sol",
    "16": "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol",
    "17": "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol",
    "18": "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol",
    "19": "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol",
    "20": "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol",
    "21": "src/proxies/openzeppelin/ERC1967Proxy.sol",
    "22": "lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol",
    "23": "lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol",
    "24": "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol",
    "25": "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol",
    "26": "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
    "27": "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol",
    "28": "lib/openzeppelin-contracts/contracts/access/AccessControl.sol",
    "29": "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol",
    "30": "lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol",
    "31": "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
    "32": "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol",
    "33": "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol",
    "34": "lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol",
    "35": "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol",
    "36": "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
    "37": "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
    "38": "lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol",
    "39": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
    "40": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol"
  },
  "language": "Solidity",
  "_format": "ethers-rs-sol-build-info-1",
  "input": {
    "version": "0.8.27",
    "language": "Solidity",
    "sources": {
      "src/tokens/ERC20/presets/items/ERC20ItemsFactory.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { SequenceProxyFactory } from \"../../../../proxies/SequenceProxyFactory.sol\";\nimport { ERC20Items } from \"./ERC20Items.sol\";\nimport { IERC20ItemsFactory, IERC20ItemsFactoryFunctions } from \"./IERC20ItemsFactory.sol\";\n\n/**\n * Deployer of ERC-20 Items proxies.\n */\ncontract ERC20ItemsFactory is IERC20ItemsFactory, SequenceProxyFactory {\n\n    /**\n     * Creates an ERC-20 Items Factory.\n     * @param factoryOwner The owner of the ERC-20 Items Factory\n     */\n    constructor(\n        address factoryOwner\n    ) {\n        ERC20Items impl = new ERC20Items();\n        SequenceProxyFactory._initialize(address(impl), factoryOwner);\n    }\n\n    /// @inheritdoc IERC20ItemsFactoryFunctions\n    function deploy(\n        address proxyOwner,\n        address tokenOwner,\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) external returns (address proxyAddr) {\n        bytes32 salt =\n            keccak256(abi.encode(tokenOwner, name, symbol, decimals, implicitModeValidator, implicitModeProjectId));\n        proxyAddr = _createProxy(salt, proxyOwner, \"\");\n        ERC20Items(proxyAddr).initialize(\n            tokenOwner, name, symbol, decimals, implicitModeValidator, implicitModeProjectId\n        );\n        emit ERC20ItemsDeployed(proxyAddr);\n        return proxyAddr;\n    }\n\n    /// @inheritdoc IERC20ItemsFactoryFunctions\n    function determineAddress(\n        address proxyOwner,\n        address tokenOwner,\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) external view returns (address proxyAddr) {\n        bytes32 salt =\n            keccak256(abi.encode(tokenOwner, name, symbol, decimals, implicitModeValidator, implicitModeProjectId));\n        return _computeProxyAddress(salt, proxyOwner, \"\");\n    }\n\n}\n"
      },
      "src/proxies/SequenceProxyFactory.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport {\n    ITransparentUpgradeableBeaconProxy,\n    TransparentUpgradeableBeaconProxy\n} from \"./TransparentUpgradeableBeaconProxy.sol\";\n\nimport { Ownable } from \"openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport { UpgradeableBeacon } from \"openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport { Create2 } from \"openzeppelin-contracts/contracts/utils/Create2.sol\";\n\n/**\n * An proxy factory that deploys upgradeable beacon proxies.\n * @dev The factory owner is able to upgrade the beacon implementation.\n * @dev Proxy deployers are able to override the beacon reference with their own.\n */\nabstract contract SequenceProxyFactory is Ownable {\n\n    UpgradeableBeacon public beacon;\n\n    /**\n     * Initialize a Sequence Proxy Factory.\n     * @param implementation The initial beacon implementation.\n     * @param factoryOwner The owner of the factory.\n     */\n    function _initialize(address implementation, address factoryOwner) internal {\n        beacon = new UpgradeableBeacon(implementation);\n        Ownable._transferOwnership(factoryOwner);\n    }\n\n    /**\n     * Deploys and initializes a new proxy instance.\n     * @param _salt The deployment salt.\n     * @param _proxyOwner The owner of the proxy.\n     * @param _data The initialization data.\n     * @return proxyAddress The address of the deployed proxy.\n     */\n    function _createProxy(\n        bytes32 _salt,\n        address _proxyOwner,\n        bytes memory _data\n    ) internal returns (address proxyAddress) {\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\n        bytes memory bytecode = type(TransparentUpgradeableBeaconProxy).creationCode;\n\n        proxyAddress = Create2.deploy(0, saltedHash, bytecode);\n        ITransparentUpgradeableBeaconProxy(payable(proxyAddress)).initialize(_proxyOwner, address(beacon), _data);\n    }\n\n    /**\n     * Computes the address of a proxy instance.\n     * @param _salt The deployment salt.\n     * @param _proxyOwner The owner of the proxy.\n     * @return proxy The expected address of the deployed proxy.\n     */\n    function _computeProxyAddress(\n        bytes32 _salt,\n        address _proxyOwner,\n        bytes memory _data\n    ) internal view returns (address) {\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\n        bytes32 bytecodeHash = keccak256(type(TransparentUpgradeableBeaconProxy).creationCode);\n\n        return Create2.computeAddress(saltedHash, bytecodeHash);\n    }\n\n    /**\n     * Upgrades the beacon implementation.\n     * @param implementation The new beacon implementation.\n     */\n    function upgradeBeacon(\n        address implementation\n    ) public onlyOwner {\n        beacon.upgradeTo(implementation);\n    }\n\n}\n"
      },
      "src/tokens/ERC20/presets/items/ERC20Items.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { ERC20BaseToken } from \"../../ERC20BaseToken.sol\";\nimport { IERC20Items, IERC20ItemsFunctions } from \"./IERC20Items.sol\";\n\n/**\n * A ready made implementation of ERC-20 capable of minting when role provided.\n */\ncontract ERC20Items is ERC20BaseToken, IERC20Items {\n\n    bytes32 internal constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n\n    address private immutable _initializer;\n    bool private _initialized;\n\n    constructor() {\n        _initializer = msg.sender;\n    }\n\n    /**\n     * Initialize contract.\n     * @param owner The owner of the contract\n     * @param tokenName Name of the token\n     * @param tokenSymbol Symbol of the token\n     * @param tokenDecimals Number of decimals\n     * @param implicitModeValidator The implicit mode validator address\n     * @param implicitModeProjectId The implicit mode project id\n     * @dev This should be called immediately after deployment.\n     */\n    function initialize(\n        address owner,\n        string memory tokenName,\n        string memory tokenSymbol,\n        uint8 tokenDecimals,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) public virtual override {\n        if (msg.sender != _initializer || _initialized) {\n            revert InvalidInitialization();\n        }\n\n        ERC20BaseToken.initialize(\n            owner, tokenName, tokenSymbol, tokenDecimals, implicitModeValidator, implicitModeProjectId\n        );\n\n        _grantRole(MINTER_ROLE, owner);\n\n        _initialized = true;\n    }\n\n    //\n    // Minting\n    //\n\n    /**\n     * Mint tokens.\n     * @param to Address to mint tokens to.\n     * @param amount Amount of tokens to mint.\n     * @notice This function can only be called by a items.\n     */\n    function mint(address to, uint256 amount) external onlyRole(MINTER_ROLE) {\n        _mint(to, amount);\n    }\n\n    //\n    // Admin\n    //\n\n    /**\n     * Set name and symbol of token.\n     * @param tokenName Name of token.\n     * @param tokenSymbol Symbol of token.\n     */\n    function setNameAndSymbol(\n        string memory tokenName,\n        string memory tokenSymbol\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _tokenName = tokenName;\n        _tokenSymbol = tokenSymbol;\n    }\n\n    //\n    // Views\n    //\n\n    /**\n     * Check interface support.\n     * @param interfaceId Interface id\n     * @return True if supported\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override returns (bool) {\n        return type(IERC20ItemsFunctions).interfaceId == interfaceId || ERC20BaseToken.supportsInterface(interfaceId)\n            || super.supportsInterface(interfaceId);\n    }\n\n}\n"
      },
      "src/tokens/ERC20/presets/items/IERC20ItemsFactory.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IERC20ItemsFactoryFunctions {\n\n    /**\n     * Creates an ERC-20 Items proxy.\n     * @param proxyOwner The owner of the ERC-20 Items proxy\n     * @param tokenOwner The owner of the ERC-20 Items implementation\n     * @param name The name of the ERC-20 Items proxy\n     * @param symbol The symbol of the ERC-20 Items proxy\n     * @param decimals The decimals of the ERC-20 Items proxy\n     * @param implicitModeValidator The implicit mode validator address\n     * @param implicitModeProjectId The implicit mode project id\n     * @return proxyAddr The address of the ERC-20 Items Proxy\n     */\n    function deploy(\n        address proxyOwner,\n        address tokenOwner,\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) external returns (address proxyAddr);\n\n    /**\n     * Computes the address of a proxy instance.\n     * @param proxyOwner The owner of the ERC-20 Items proxy\n     * @param tokenOwner The owner of the ERC-20 Items implementation\n     * @param name The name of the ERC-20 Items proxy\n     * @param symbol The symbol of the ERC-20 Items proxy\n     * @param decimals The decimals of the ERC-20 Items proxy\n     * @param implicitModeValidator The implicit mode validator address\n     * @param implicitModeProjectId The implicit mode project id\n     * @return proxyAddr The address of the ERC-20 Items Proxy\n     */\n    function determineAddress(\n        address proxyOwner,\n        address tokenOwner,\n        string memory name,\n        string memory symbol,\n        uint8 decimals,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) external view returns (address proxyAddr);\n\n}\n\ninterface IERC20ItemsFactorySignals {\n\n    /**\n     * Event emitted when a new ERC-20 Items proxy contract is deployed.\n     * @param proxyAddr The address of the deployed proxy.\n     */\n    event ERC20ItemsDeployed(address proxyAddr);\n\n}\n\ninterface IERC20ItemsFactory is IERC20ItemsFactoryFunctions, IERC20ItemsFactorySignals { }\n"
      },
      "src/proxies/TransparentUpgradeableBeaconProxy.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { BeaconProxy, Proxy } from \"./openzeppelin/BeaconProxy.sol\";\nimport { ERC1967Proxy, TransparentUpgradeableProxy } from \"./openzeppelin/TransparentUpgradeableProxy.sol\";\n\ninterface ITransparentUpgradeableBeaconProxy {\n\n    function initialize(address admin, address beacon, bytes memory data) external;\n\n}\n\nerror InvalidInitialization();\n\n/**\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\n * The proxy selectors are:\n * - 0xcf7a1d77: initialize\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\n */\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\n\n    /**\n     * Decode the initialization data from the msg.data and call the initialize function.\n     */\n    function _dispatchInitialize() private returns (bytes memory) {\n        _requireZeroValue();\n\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\n        initialize(admin, beacon, data);\n\n        return \"\";\n    }\n\n    function initialize(address admin, address beacon, bytes memory data) internal {\n        if (_admin() != address(0)) {\n            // Redundant call. This function can only be called when the admin is not set.\n            revert InvalidInitialization();\n        }\n        _changeAdmin(admin);\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\n     */\n    function _fallback() internal override(TransparentUpgradeableProxy, Proxy) {\n        if (_getAdmin() == address(0)) {\n            bytes memory ret;\n            bytes4 selector = msg.sig;\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\n                ret = _dispatchInitialize();\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    return(add(ret, 0x20), mload(ret))\n                }\n            }\n            // When the admin is not set, the fallback function is used to initialize the proxy.\n            revert InvalidInitialization();\n        }\n        TransparentUpgradeableProxy._fallback();\n    }\n\n    /**\n     * Returns the current implementation address.\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\n     */\n    function _implementation() internal view override(ERC1967Proxy, BeaconProxy) returns (address) {\n        address implementation = ERC1967Proxy._implementation();\n        if (implementation != address(0)) {\n            return implementation;\n        }\n        return BeaconProxy._implementation();\n    }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/Create2.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n"
      },
      "src/tokens/ERC20/ERC20BaseToken.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { SignalsImplicitModeControlled } from \"../common/SignalsImplicitModeControlled.sol\";\n\nimport { ERC20 } from \"openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\";\nimport { IERC20 } from \"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport { IERC20Metadata } from \"openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nerror InvalidInitialization();\n\n/**\n * A standard base implementation of ERC-20 for use in Sequence library contracts.\n */\nabstract contract ERC20BaseToken is ERC20, SignalsImplicitModeControlled {\n\n    string internal _tokenName;\n    string internal _tokenSymbol;\n    uint8 private _tokenDecimals;\n\n    address private immutable _initializer;\n    bool private _initialized;\n\n    constructor() ERC20(\"\", \"\") {\n        _initializer = msg.sender;\n    }\n\n    /**\n     * Initialize contract.\n     * @param owner The owner of the contract\n     * @param tokenName Name of the token\n     * @param tokenSymbol Symbol of the token\n     * @param tokenDecimals Number of decimals\n     * @param implicitModeValidator Implicit session validator address\n     * @param implicitModeProjectId Implicit session project id\n     * @dev This should be called immediately after deployment.\n     */\n    function initialize(\n        address owner,\n        string memory tokenName,\n        string memory tokenSymbol,\n        uint8 tokenDecimals,\n        address implicitModeValidator,\n        bytes32 implicitModeProjectId\n    ) public virtual {\n        if (msg.sender != _initializer || _initialized) {\n            revert InvalidInitialization();\n        }\n\n        _tokenName = tokenName;\n        _tokenSymbol = tokenSymbol;\n        _tokenDecimals = tokenDecimals;\n\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\n\n        _initializeImplicitMode(owner, implicitModeValidator, implicitModeProjectId);\n\n        _initialized = true;\n    }\n\n    //\n    // Burn\n    //\n\n    /**\n     * Allows the owner of the token to burn their tokens.\n     * @param amount Amount of tokens to burn\n     */\n    function burn(\n        uint256 amount\n    ) public virtual {\n        _burn(msg.sender, amount);\n    }\n\n    //\n    // Views\n    //\n\n    /**\n     * Check interface support.\n     * @param interfaceId Interface id\n     * @return True if supported\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override returns (bool) {\n        return interfaceId == type(IERC20).interfaceId || interfaceId == type(IERC20Metadata).interfaceId\n            || super.supportsInterface(interfaceId);\n    }\n\n    //\n    // ERC20 Overrides\n    //\n\n    /**\n     * Override the ERC20 name function.\n     */\n    function name() public view override returns (string memory) {\n        return _tokenName;\n    }\n\n    /**\n     * Override the ERC20 symbol function.\n     */\n    function symbol() public view override returns (string memory) {\n        return _tokenSymbol;\n    }\n\n    /**\n     * Override the ERC20 decimals function.\n     */\n    function decimals() public view override returns (uint8) {\n        return _tokenDecimals;\n    }\n\n}\n"
      },
      "src/tokens/ERC20/presets/items/IERC20Items.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\ninterface IERC20ItemsFunctions {\n\n    /**\n     * Mint tokens.\n     * @param to Address to mint tokens to.\n     * @param amount Amount of tokens to mint.\n     */\n    function mint(address to, uint256 amount) external;\n\n    /**\n     * Set name and symbol of token.\n     * @param tokenName Name of token.\n     * @param tokenSymbol Symbol of token.\n     */\n    function setNameAndSymbol(string memory tokenName, string memory tokenSymbol) external;\n\n}\n\ninterface IERC20ItemsSignals {\n\n    /**\n     * Invalid initialization error.\n     */\n    error InvalidInitialization();\n\n}\n\ninterface IERC20Items is IERC20ItemsFunctions, IERC20ItemsSignals { }\n"
      },
      "src/proxies/openzeppelin/BeaconProxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\n\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\n\npragma solidity ^0.8.19;\n\nimport \"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\";\nimport \"openzeppelin-contracts/contracts/proxy/Proxy.sol\";\nimport \"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n}\n"
      },
      "src/proxies/openzeppelin/TransparentUpgradeableProxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\n/// - Pragma updated\n/// - Imports updated\n/// - Constructor removed\n/// - Allows admin to call implementation\n\npragma solidity ^0.8.19;\n\nimport \"./ERC1967Proxy.sol\";\n\n/**\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\n * include them in the ABI so this interface must be used to interact with it.\n */\ninterface ITransparentUpgradeableProxy is IERC1967 {\n\n    function admin() external view returns (address);\n\n    function implementation() external view returns (address);\n\n    function changeAdmin(\n        address\n    ) external;\n\n    function upgradeTo(\n        address\n    ) external;\n\n    function upgradeToAndCall(address, bytes memory) external payable;\n\n}\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\n * This potentially exposes the admin to a proxy selector attack. See\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\n * The proxy selectors are:\n * - 0x3659cfe6: upgradeTo\n * - 0x4f1ef286: upgradeToAndCall\n * - 0x8f283970: changeAdmin\n * - 0xf851a440: admin\n * - 0x5c60da1b: implementation\n *\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\n * implementation.\n *\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     *\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\n     * implementation provides a function with the same selector.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\n     */\n    function _fallback() internal virtual override {\n        if (msg.sender == _getAdmin()) {\n            bytes memory ret;\n            bytes4 selector = msg.sig;\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\n                ret = _dispatchUpgradeTo();\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\n                ret = _dispatchUpgradeToAndCall();\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\n                ret = _dispatchChangeAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\n                ret = _dispatchAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\n                ret = _dispatchImplementation();\n            } else {\n                // Call implementation\n                return super._fallback();\n            }\n            assembly {\n                return(add(ret, 0x20), mload(ret))\n            }\n        } else {\n            super._fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function _dispatchAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address admin = _getAdmin();\n        return abi.encode(admin);\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function _dispatchImplementation() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address implementation = _implementation();\n        return abi.encode(implementation);\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _dispatchChangeAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newAdmin = abi.decode(msg.data[4:], (address));\n        _changeAdmin(newAdmin);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     */\n    function _dispatchUpgradeTo() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newImplementation = abi.decode(msg.data[4:], (address));\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     */\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\n        _upgradeToAndCall(newImplementation, data, true);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\n     */\n    function _requireZeroValue() internal {\n        require(msg.value == 0);\n    }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
      },
      "src/tokens/common/SignalsImplicitModeControlled.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.19;\n\nimport { AccessControlEnumerable } from \"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\";\nimport {\n    IERC165,\n    IImplicitProjectValidation,\n    SignalsImplicitMode\n} from \"signals-implicit-mode/src/helper/SignalsImplicitMode.sol\";\n\n/**\n * An abstract contract that allows implicit session access for a given project.\n */\nabstract contract SignalsImplicitModeControlled is AccessControlEnumerable, SignalsImplicitMode {\n\n    bytes32 internal constant _IMPLICIT_MODE_ADMIN_ROLE = keccak256(\"IMPLICIT_MODE_ADMIN_ROLE\");\n\n    function _initializeImplicitMode(address owner, address validator, bytes32 projectId) internal {\n        _grantRole(_IMPLICIT_MODE_ADMIN_ROLE, owner);\n        _initializeSignalsImplicitMode(validator, projectId);\n    }\n\n    /**\n     * Updates the validator for implicit mode validation.\n     * @param validator The validator address.\n     * @notice Only callable by an address with the project admin role.\n     */\n    function setImplicitModeValidator(\n        address validator\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\n        _validator = IImplicitProjectValidation(validator);\n    }\n\n    /**\n     * Updates the settings for implicit mode validation.\n     * @param projectId The project id.\n     * @notice Only callable by an address with the project admin role.\n     */\n    function setImplicitModeProjectId(\n        bytes32 projectId\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\n        _projectId = projectId;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(AccessControlEnumerable, SignalsImplicitMode) returns (bool) {\n        return\n            AccessControlEnumerable.supportsInterface(interfaceId) || SignalsImplicitMode.supportsInterface(interfaceId);\n    }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
      },
      "src/proxies/openzeppelin/ERC1967Proxy.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\n\npragma solidity ^0.8.19;\n\nimport \"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\";\nimport \"openzeppelin-contracts/contracts/proxy/Proxy.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
      },
      "lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.13;\n\nimport { IImplicitProjectValidation } from \"../registry/IImplicitProjectValidation.sol\";\n\nimport { ERC165, IERC165 } from \"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\";\nimport { Attestation } from \"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\";\nimport { ISignalsImplicitMode } from \"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\";\nimport { Payload } from \"sequence-v3/src/modules/Payload.sol\";\n\n/// @title SignalsImplicitMode\n/// @author Michael Standen\n/// @notice Base contract for implicit mode validation by project\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\n\n  IImplicitProjectValidation internal _validator;\n  bytes32 internal _projectId;\n\n  /// @notice Initialize implicit mode validation\n  /// @param validator The IImplicitProjectValidation address\n  /// @param projectId The project id\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\n    _validator = IImplicitProjectValidation(validator);\n    _projectId = projectId;\n  }\n\n  /// @inheritdoc ISignalsImplicitMode\n  function acceptImplicitRequest(\n    address wallet,\n    Attestation calldata attestation,\n    Payload.Call calldata call\n  ) external view returns (bytes32) {\n    _validateImplicitRequest(wallet, attestation, call);\n    return _validator.validateAttestation(wallet, attestation, _projectId);\n  }\n\n  /// @notice Validates an implicit request\n  /// @dev Optional hook for additional validation of the implicit requests\n  /// @param wallet The wallet's address\n  /// @param attestation The attestation data\n  /// @param call The call to validate\n  function _validateImplicitRequest(\n    address wallet,\n    Attestation calldata attestation,\n    Payload.Call calldata call\n  ) internal view virtual { }\n\n  /// @inheritdoc IERC165\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\n  }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
      },
      "lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.13;\n\nimport { Attestation } from \"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\";\n\n/// @title IImplicitProjectValidation\n/// @author Michael Standen\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\ninterface IImplicitProjectValidation {\n\n  /// @notice Invalid redirect url error\n  error InvalidRedirectUrl();\n\n  /// @notice Check if a project has a code\n  /// @param wallet The wallet address\n  /// @param attestation The attestation\n  /// @param projectId The project id\n  /// @return magic The attestation magic bytes for the wallet address\n  function validateAttestation(\n    address wallet,\n    Attestation calldata attestation,\n    bytes32 projectId\n  ) external view returns (bytes32);\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.27;\n\nimport { LibBytes } from \"../../../utils/LibBytes.sol\";\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \"./ISignalsImplicitMode.sol\";\n\nusing LibBytes for bytes;\n\n/// @notice Attestation for a specific session\n/// @param approvedSigner Address of the approved signer\n/// @param identityType Identity type\n/// @param issuerHash Hash of the issuer\n/// @param audienceHash Hash of the audience\n/// @param applicationData Unspecified application data\n/// @param authData Auth data\nstruct Attestation {\n  address approvedSigner;\n  bytes4 identityType;\n  bytes32 issuerHash;\n  bytes32 audienceHash;\n  bytes applicationData;\n  AuthData authData;\n}\n\n/// @notice Auth data for an attestation\n/// @param redirectUrl Authorization redirect URL\n/// @param issuedAt Timestamp of the attestation issuance\nstruct AuthData {\n  string redirectUrl;\n  uint64 issuedAt;\n}\n\n/// @title LibAttestation\n/// @author Michael Standen\n/// @notice Library for attestation management\nlibrary LibAttestation {\n\n  /// @notice Hashes an attestation\n  function toHash(\n    Attestation memory attestation\n  ) internal pure returns (bytes32) {\n    return keccak256(toPacked(attestation));\n  }\n\n  /// @notice Decodes an attestation from a packed bytes array\n  /// @param encoded The packed bytes array\n  /// @param pointer The pointer to the start of the attestation\n  /// @return attestation The decoded attestation\n  /// @return newPointer The new pointer to the end of the attestation\n  function fromPacked(\n    bytes calldata encoded,\n    uint256 pointer\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\n    newPointer = pointer;\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\n    // Application data (arbitrary bytes)\n    uint256 dataSize;\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\n    newPointer += dataSize;\n    // Auth data\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\n    return (attestation, newPointer);\n  }\n\n  /// @notice Decodes the auth data from a packed bytes\n  /// @param encoded The packed bytes containing the auth data\n  /// @param pointer The pointer to the start of the auth data within the encoded data\n  /// @return authData The decoded auth data\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\n  function fromPackedAuthData(\n    bytes calldata encoded,\n    uint256 pointer\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\n    uint24 redirectUrlLength;\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\n    pointer += redirectUrlLength;\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\n    return (authData, pointer);\n  }\n\n  /// @notice Encodes an attestation into a packed bytes array\n  /// @param attestation The attestation to encode\n  /// @return encoded The packed bytes array\n  function toPacked(\n    Attestation memory attestation\n  ) internal pure returns (bytes memory encoded) {\n    return abi.encodePacked(\n      attestation.approvedSigner,\n      attestation.identityType,\n      attestation.issuerHash,\n      attestation.audienceHash,\n      uint24(attestation.applicationData.length),\n      attestation.applicationData,\n      toPackAuthData(attestation.authData)\n    );\n  }\n\n  /// @notice Encodes the auth data into a packed bytes array\n  /// @param authData The auth data to encode\n  /// @return encoded The packed bytes array\n  function toPackAuthData(\n    AuthData memory authData\n  ) internal pure returns (bytes memory encoded) {\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\n  }\n\n  /// @notice Generates the implicit request magic return value\n  /// @param attestation The attestation\n  /// @param wallet The wallet\n  /// @return magic The expected implicit request magic\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\n    return keccak256(\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\n    );\n  }\n\n}\n"
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.27;\n\nimport { Payload } from \"../../../modules/Payload.sol\";\nimport { Attestation } from \"./Attestation.sol\";\n\n/// @dev Magic prefix for the implicit request\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\"acceptImplicitRequest\"));\n\n/// @title ISignalsImplicitMode\n/// @author Agustin Aguilar, Michael Standen\n/// @notice Interface for the contracts that support implicit mode validation\ninterface ISignalsImplicitMode {\n\n  /// @notice Determines if an implicit request is valid\n  /// @param wallet The wallet's address\n  /// @param attestation The attestation data\n  /// @param call The call to validate\n  /// @return magic The hash of the implicit request if valid\n  function acceptImplicitRequest(\n    address wallet,\n    Attestation calldata attestation,\n    Payload.Call calldata call\n  ) external view returns (bytes32 magic);\n\n}\n"
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.27;\n\nimport { LibBytes } from \"../utils/LibBytes.sol\";\n\nusing LibBytes for bytes;\n\n/// @title Payload\n/// @author Agustin Aguilar, Michael Standen, William Hua\n/// @notice Library for encoding and decoding payloads\nlibrary Payload {\n\n  /// @notice Error thrown when the kind is invalid\n  error InvalidKind(uint8 kind);\n\n  /// @dev keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\n\n  /// @dev keccak256(\"Sequence Wallet\")\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\n\n  /// @dev keccak256(\"3\")\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\n\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\n    return keccak256(\n      abi.encode(\n        EIP712_DOMAIN_TYPEHASH,\n        EIP712_DOMAIN_NAME_SEQUENCE,\n        EIP712_DOMAIN_VERSION_SEQUENCE,\n        _noChainId ? uint256(0) : uint256(block.chainid),\n        _wallet\n      )\n    );\n  }\n\n  /// @dev keccak256(\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\")\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\n\n  /// @dev keccak256(\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\")\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\n\n  /// @dev keccak256(\"Message(bytes message,address[] wallets)\")\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\n\n  /// @dev keccak256(\"ConfigUpdate(bytes32 imageHash,address[] wallets)\")\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\n\n  /// @notice Kind of transaction\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\n  /// @notice Kind of digest\n  uint8 public constant KIND_MESSAGE = 0x01;\n  /// @notice Kind of config update\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\n  /// @notice Kind of message\n  uint8 public constant KIND_DIGEST = 0x03;\n\n  /// @notice Behavior on error: ignore error\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\n  /// @notice Behavior on error: revert on error\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\n  /// @notice Behavior on error: abort on error\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\n\n  /// @notice Payload call information\n  /// @param to Address of the target contract\n  /// @param value Value to send with the call\n  /// @param data Data to send with the call\n  /// @param gasLimit Gas limit for the call\n  /// @param delegateCall If the call is a delegate call\n  /// @param onlyFallback If the call should only be executed in an error scenario\n  /// @param behaviorOnError Behavior on error\n  struct Call {\n    address to;\n    uint256 value;\n    bytes data;\n    uint256 gasLimit;\n    bool delegateCall;\n    bool onlyFallback;\n    uint256 behaviorOnError;\n  }\n\n  /// @notice Decoded payload\n  /// @param kind Kind of payload\n  /// @param noChainId If the chain ID should be omitted\n  /// @param calls Array of calls (transaction kind)\n  /// @param space Nonce space for the calls (transaction kind)\n  /// @param nonce Nonce value for the calls (transaction kind)\n  /// @param message Message to validate (message kind)\n  /// @param imageHash Image hash to update to (config update kind)\n  /// @param digest Digest to validate (digest kind)\n  /// @param parentWallets Parent wallets\n  struct Decoded {\n    uint8 kind;\n    bool noChainId;\n    // Transaction kind\n    Call[] calls;\n    uint256 space;\n    uint256 nonce;\n    // Message kind\n    // TODO: Maybe native 721 ?\n    bytes message;\n    // Config update kind\n    bytes32 imageHash;\n    // Digest kind for 1271\n    bytes32 digest;\n    // Parent wallets\n    address[] parentWallets;\n  }\n\n  function fromMessage(\n    bytes memory message\n  ) internal pure returns (Decoded memory _decoded) {\n    _decoded.kind = KIND_MESSAGE;\n    _decoded.message = message;\n  }\n\n  function fromConfigUpdate(\n    bytes32 imageHash\n  ) internal pure returns (Decoded memory _decoded) {\n    _decoded.kind = KIND_CONFIG_UPDATE;\n    _decoded.imageHash = imageHash;\n  }\n\n  function fromDigest(\n    bytes32 digest\n  ) internal pure returns (Decoded memory _decoded) {\n    _decoded.kind = KIND_DIGEST;\n    _decoded.digest = digest;\n  }\n\n  function fromPackedCalls(\n    bytes calldata packed\n  ) internal view returns (Decoded memory _decoded) {\n    _decoded.kind = KIND_TRANSACTIONS;\n\n    // Read the global flag\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\n\n    // First bit determines if space is zero or not\n    if (globalFlag & 0x01 == 0x01) {\n      _decoded.space = 0;\n    } else {\n      (_decoded.space, pointer) = packed.readUint160(pointer);\n    }\n\n    // Next 3 bits determine the size of the nonce\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\n\n    if (nonceSize > 0) {\n      // Read the nonce\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\n    }\n\n    uint256 numCalls;\n\n    // Bit 5 determines if the batch contains a single call\n    if (globalFlag & 0x10 == 0x10) {\n      numCalls = 1;\n    } else {\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\n      if (globalFlag & 0x20 == 0x20) {\n        (numCalls, pointer) = packed.readUint16(pointer);\n      } else {\n        (numCalls, pointer) = packed.readUint8(pointer);\n      }\n    }\n\n    // Read the calls\n    _decoded.calls = new Call[](numCalls);\n\n    for (uint256 i = 0; i < numCalls; i++) {\n      uint8 flags;\n      (flags, pointer) = packed.readUint8(pointer);\n\n      // First bit determines if this is a call to self\n      // or a call to another address\n      if (flags & 0x01 == 0x01) {\n        // Call to self\n        _decoded.calls[i].to = address(this);\n      } else {\n        // Call to another address\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\n      }\n\n      // Second bit determines if the call has value or not\n      if (flags & 0x02 == 0x02) {\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\n      }\n\n      // Third bit determines if the call has data or not\n      if (flags & 0x04 == 0x04) {\n        // 3 bytes determine the size of the calldata\n        uint256 calldataSize;\n        (calldataSize, pointer) = packed.readUint24(pointer);\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\n        pointer += calldataSize;\n      }\n\n      // Fourth bit determines if the call has a gas limit or not\n      if (flags & 0x08 == 0x08) {\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\n      }\n\n      // Fifth bit determines if the call is a delegate call or not\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\n\n      // Sixth bit determines if the call is fallback only\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\n\n      // Last 2 bits are directly mapped to the behavior on error\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\n    }\n  }\n\n  function hashCall(\n    Call memory c\n  ) internal pure returns (bytes32) {\n    return keccak256(\n      abi.encode(\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\n      )\n    );\n  }\n\n  function hashCalls(\n    Call[] memory calls\n  ) internal pure returns (bytes32) {\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\n    // hashes of each item. So we hash each Call, pack them, and hash again.\n    bytes32[] memory callHashes = new bytes32[](calls.length);\n    for (uint256 i = 0; i < calls.length; i++) {\n      callHashes[i] = hashCall(calls[i]);\n    }\n    return keccak256(abi.encodePacked(callHashes));\n  }\n\n  function toEIP712(\n    Decoded memory _decoded\n  ) internal pure returns (bytes32) {\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\n\n    if (_decoded.kind == KIND_TRANSACTIONS) {\n      bytes32 callsHash = hashCalls(_decoded.calls);\n      // The top-level struct for Calls might be something like:\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\n    } else if (_decoded.kind == KIND_MESSAGE) {\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\n    } else if (_decoded.kind == KIND_DIGEST) {\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\n    } else {\n      // Unknown kind\n      revert InvalidKind(_decoded.kind);\n    }\n  }\n\n  function hash(\n    Decoded memory _decoded\n  ) internal view returns (bytes32) {\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\n    bytes32 structHash = toEIP712(_decoded);\n    return keccak256(abi.encodePacked(\"\\x19\\x01\", domain, structHash));\n  }\n\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\n    bytes32 structHash = toEIP712(_decoded);\n    return keccak256(abi.encodePacked(\"\\x19\\x01\", domain, structHash));\n  }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.18;\n\n/// @title Library for reading data from bytes arrays\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\n/// @notice This library contains functions for reading data from bytes arrays.\n/// @dev These functions do not check if the input index is within the bounds of the data array.\n/// @dev Reading out of bounds may return dirty values.\nlibrary LibBytes {\n\n  function readFirstUint8(\n    bytes calldata _data\n  ) internal pure returns (uint8 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(_data.offset)\n      a := shr(248, word)\n      newPointer := 1\n    }\n  }\n\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := shr(248, word)\n      newPointer := add(_index, 1)\n    }\n  }\n\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := shr(240, word)\n      newPointer := add(_index, 2)\n    }\n  }\n\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := shr(232, word)\n      newPointer := add(_index, 3)\n    }\n  }\n\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := shr(192, word)\n      newPointer := add(_index, 8)\n    }\n  }\n\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := shr(96, word)\n      newPointer := add(_index, 20)\n    }\n  }\n\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\n    assembly {\n      a := calldataload(add(_index, _data.offset))\n      newPointer := add(_index, 32)\n    }\n  }\n\n  function readUintX(\n    bytes calldata _data,\n    uint256 _index,\n    uint256 _length\n  ) internal pure returns (uint256 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      let shift := sub(256, mul(_length, 8))\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\n      newPointer := add(_index, _length)\n    }\n  }\n\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_pointer, _data.offset))\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n      newPointer := add(_pointer, 4)\n    }\n  }\n\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\n    assembly {\n      a := calldataload(add(_pointer, _data.offset))\n      newPointer := add(_pointer, 32)\n    }\n  }\n\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\n    assembly {\n      let word := calldataload(add(_index, _data.offset))\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\n      newPointer := add(_index, 20)\n    }\n  }\n\n  /// @dev ERC-2098 Compact Signature\n  function readRSVCompact(\n    bytes calldata _data,\n    uint256 _index\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\n    uint256 yParityAndS;\n    assembly {\n      r := calldataload(add(_index, _data.offset))\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\n      newPointer := add(_index, 64)\n    }\n    uint256 yParity = uint256(yParityAndS >> 255);\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\n    v = uint8(yParity) + 27;\n  }\n\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/",
        "ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/",
        "erc2470-libs/=lib/erc2470-libs/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "murky/=lib/murky/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/",
        "signals-implicit-mode/=lib/signals-implicit-mode/",
        "solady/=lib/solady/src/"
      ],
      "optimizer": {
        "enabled": false,
        "runs": 200
      },
      "metadata": {
        "useLiteralContent": true,
        "bytecodeHash": "ipfs",
        "appendCBOR": true
      },
      "outputSelection": {
        "*": {
          "*": [
            "evm.bytecode",
            "evm.deployedBytecode",
            "devdoc",
            "userdoc",
            "metadata",
            "abi",
            "evm.methodIdentifiers"
          ]
        }
      },
      "evmVersion": "paris",
      "viaIR": true,
      "libraries": {}
    },
    "evmVersion": "paris",
    "viaIR": true,
    "libraries": {}
  },
  "allowPaths": [
    "/home/michael/Code/Horizon/live-contracts"
  ],
  "basePath": "/home/michael/Code/Horizon/live-contracts",
  "includePaths": [
    "/home/michael/Code/Horizon/live-contracts"
  ],
  "output": {
    "contracts": {
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
        "AccessControl": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.",
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol": {
        "AccessControlEnumerable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Extension of {AccessControl} that allows enumerating the members of each role.",
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {AccessControl} that allows enumerating the members of each role.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":\"AccessControlEnumerable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "IAccessControl": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "External interface of AccessControl declared to support ERC165 detection.",
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "getRoleAdmin(bytes32)": "248a9ca3",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol": {
        "IAccessControlEnumerable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "External interface of AccessControlEnumerable declared to support ERC165 detection.",
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControlEnumerable declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":\"IAccessControlEnumerable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "Ownable": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
            "kind": "dev",
            "methods": {
              "constructor": {
                "details": "Initializes the contract setting the deployer as the initial owner."
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
        "IERC1967": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            }
          ],
          "devdoc": {
            "details": "ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":\"IERC1967\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
        "IERC1822Proxiable": {
          "abi": [
            {
              "inputs": [],
              "name": "proxiableUUID",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.",
            "kind": "dev",
            "methods": {
              "proxiableUUID()": {
                "details": "Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "proxiableUUID()": "52d1902d"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":\"IERC1822Proxiable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
        "ERC1967Upgrade": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            }
          ],
          "devdoc": {
            "details": "This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "stateVariables": {
              "_ADMIN_SLOT": {
                "details": "Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."
              },
              "_BEACON_SLOT": {
                "details": "The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."
              },
              "_IMPLEMENTATION_SLOT": {
                "details": "Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":\"ERC1967Upgrade\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
        "Proxy": {
          "abi": [
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "details": "This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":\"Proxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
        "IBeacon": {
          "abi": [
            {
              "inputs": [],
              "name": "implementation",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "This is the interface that {BeaconProxy} expects of its beacon.",
            "kind": "dev",
            "methods": {
              "implementation()": {
                "details": "Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "implementation()": "5c60da1b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":\"IBeacon\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol": {
        "UpgradeableBeacon": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "implementation_",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "implementation",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newImplementation",
                  "type": "address"
                }
              ],
              "name": "upgradeTo",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their implementation contract, which is where they will delegate all function calls. An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.",
            "events": {
              "Upgraded(address)": {
                "details": "Emitted when the implementation returned by the beacon is changed."
              }
            },
            "kind": "dev",
            "methods": {
              "constructor": {
                "details": "Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the beacon."
              },
              "implementation()": {
                "details": "Returns the current implementation address."
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              },
              "upgradeTo(address)": {
                "details": "Upgrades the beacon to a new implementation. Emits an {Upgraded} event. Requirements: - msg.sender must be the owner of the contract. - `newImplementation` must be a contract."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "abi_decode_address_fromMemory": {
                  "entryPoint": 204,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_fromMemory": {
                  "entryPoint": 219,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_5ccc": {
                  "entryPoint": 407,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 720,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_5ccc": {
                  "entryPoint": 433,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 134,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 52,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 320,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 171,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 676,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 831,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 160,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 828,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constructor_Ownable": {
                  "entryPoint": 302,
                  "id": 562,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "constructor_UpgradeableBeacon": {
                  "entryPoint": 283,
                  "id": 1076,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "convert_address_to_address": {
                  "entryPoint": 575,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 834,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 563,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 535,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_arguments_for_constructor_object_UpgradeableBeacon": {
                  "entryPoint": 250,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 687,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 95,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_isContract": {
                  "entryPoint": 862,
                  "id": 1831,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_msgSender": {
                  "entryPoint": 657,
                  "id": 2155,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_setImplementation": {
                  "entryPoint": 622,
                  "id": 1122,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_transferOwnership": {
                  "entryPoint": 726,
                  "id": 650,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "identity": {
                  "entryPoint": 532,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 73,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 587,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 707,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral_5ccc": {
                  "entryPoint": 458,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 58,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 155,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 63,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 499,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 670,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "store_literal_in_memory_5ccca6b0666a32006e874c0f8fc30910124098b6e8e91ea2ea1baa45ce41f1e6": {
                  "entryPoint": 329,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 505,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 590,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 183,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 652,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 823,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "60806040523461002f576100196100146100fa565b61011b565b610021610034565b610722610380823961072290f35b61003a565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100699061003f565b810190811060018060401b0382111761008157604052565b610049565b90610099610092610034565b928361005f565b565b600080fd5b60018060a01b031690565b6100b4906100a0565b90565b6100c0816100ab565b036100c757565b600080fd5b905051906100d9826100b7565b565b906020828203126100f5576100f2916000016100cc565b90565b61009b565b610118610aa28038038061010d81610086565b9283398101906100db565b90565b61012c9061012761012e565b61026e565b565b61013e610139610291565b6102d6565b565b60209181520190565b60207f6e206973206e6f74206120636f6e747261637400000000000000000000000000917f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60008201520152565b6101a46033604092610140565b6101ad81610149565b0190565b6101c79060208101906000818303910152610197565b90565b156101d157565b6101d9610034565b62461bcd60e51b8152806101ef600482016101b1565b0390fd5b60001b90565b9061020a60018060a01b03916101f3565b9181191691161790565b90565b61022b610226610230926100a0565b610214565b6100a0565b90565b61023c90610217565b90565b61024890610233565b90565b90565b9061026361025e61026a9261023f565b61024b565b82546101f9565b9055565b61028a9061028361027e8261035e565b6101ca565b600161024e565b565b600090565b61029961028c565b503390565b60001c90565b60018060a01b031690565b6102bb6102c09161029e565b6102a4565b90565b6102cd90546102af565b90565b60000190565b6102e060006102c3565b6102eb82600061024e565b9061031f6103197f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361023f565b9161023f565b91610328610034565b80610332816102d0565b0390a3565b600090565b90565b90565b61035661035161035b9261033f565b610214565b61033c565b90565b610366610337565b503b61037b6103756000610342565b9161033c565b119056fe60806040526004361015610013575b610219565b61001e60003561006d565b80633659cfe6146100685780635c60da1b14610063578063715018a61461005e5780638da5cb5b146100595763f2fde38b0361000e576101e6565b6101b1565b61017e565b610149565b6100e3565b60e01c90565b60405190565b600080fd5b600080fd5b60018060a01b031690565b61009790610083565b90565b6100a38161008e565b036100aa57565b600080fd5b905035906100bc8261009a565b565b906020828203126100d8576100d5916000016100af565b90565b61007e565b60000190565b34610111576100fb6100f63660046100be565b6102b3565b610103610073565b8061010d816100dd565b0390f35b610079565b600091031261012157565b61007e565b61012f9061008e565b9052565b919061014790600060208501940190610126565b565b3461017957610159366004610116565b6101756101646102f5565b61016c610073565b91829182610133565b0390f35b610079565b346101ac5761018e366004610116565b61019661035c565b61019e610073565b806101a8816100dd565b0390f35b610079565b346101e1576101c1366004610116565b6101dd6101cc610366565b6101d4610073565b91829182610133565b0390f35b610079565b34610214576101fe6101f93660046100be565b610473565b610206610073565b80610210816100dd565b0390f35b610079565b600080fd5b61022f9061022a610501565b610268565b565b90565b61024861024361024d92610083565b610231565b610083565b90565b61025990610234565b90565b61026590610250565b90565b6102718161061b565b61029b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9161025c565b906102a4610073565b806102ae816100dd565b0390a2565b6102bc9061021e565b565b600090565b60001c90565b60018060a01b031690565b6102e06102e5916102c3565b6102c9565b90565b6102f290546102d4565b90565b6102fd6102be565b5061030860016102e8565b90565b610313610501565b61031b610348565b565b90565b61033461032f6103399261031d565b610231565b610083565b90565b61034590610320565b90565b61035a610355600061033c565b610639565b565b61036461030b565b565b61036e6102be565b5061037960006102e8565b90565b61038d90610388610501565b610442565b565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201520152565b6103f3602660409261038f565b6103fc81610398565b0190565b61041690602081019060008183039101526103e6565b90565b1561042057565b610428610073565b62461bcd60e51b81528061043e60048201610400565b0390fd5b6104719061046c8161046561045f61045a600061033c565b61008e565b9161008e565b1415610419565b610639565b565b61047c9061037c565b565b60007f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910152565b6104b26020809261038f565b6104bb8161047e565b0190565b6104d590602081019060008183039101526104a6565b90565b156104df57565b6104e7610073565b62461bcd60e51b8152806104fd600482016104bf565b0390fd5b61052b61050c610366565b61052561051f61051a61069a565b61008e565b9161008e565b146104d8565b565b60207f6e206973206e6f74206120636f6e747261637400000000000000000000000000917f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60008201520152565b610588603360409261038f565b6105918161052d565b0190565b6105ab906020810190600081830391015261057b565b90565b156105b557565b6105bd610073565b62461bcd60e51b8152806105d360048201610595565b0390fd5b60001b90565b906105ee60018060a01b03916105d7565b9181191691161790565b90565b9061061061060b6106179261025c565b6105f8565b82546105dd565b9055565b6106379061063061062b826106cb565b6105ae565b60016105fb565b565b61064360006102e8565b61064e8260006105fb565b9061068261067c7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361025c565b9161025c565b9161068b610073565b80610695816100dd565b0390a3565b6106a26102be565b503390565b600090565b90565b6106c36106be6106c89261031d565b610231565b6106ac565b90565b6106d36106a7565b503b6106e86106e260006106af565b916106ac565b119056fea26469706673582212203fbf94b3aa182e7120f7ee578f52eecce106fbe2a323e7e4f1511d9f27768ead64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x2F JUMPI PUSH2 0x19 PUSH2 0x14 PUSH2 0xFA JUMP JUMPDEST PUSH2 0x11B JUMP JUMPDEST PUSH2 0x21 PUSH2 0x34 JUMP JUMPDEST PUSH2 0x722 PUSH2 0x380 DUP3 CODECOPY PUSH2 0x722 SWAP1 RETURN JUMPDEST PUSH2 0x3A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x69 SWAP1 PUSH2 0x3F JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x81 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x49 JUMP JUMPDEST SWAP1 PUSH2 0x99 PUSH2 0x92 PUSH2 0x34 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x5F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xB4 SWAP1 PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC0 DUP2 PUSH2 0xAB JUMP JUMPDEST SUB PUSH2 0xC7 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0xD9 DUP3 PUSH2 0xB7 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xF5 JUMPI PUSH2 0xF2 SWAP2 PUSH1 0x0 ADD PUSH2 0xCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9B JUMP JUMPDEST PUSH2 0x118 PUSH2 0xAA2 DUP1 CODESIZE SUB DUP1 PUSH2 0x10D DUP2 PUSH2 0x86 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD SWAP1 PUSH2 0xDB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x12C SWAP1 PUSH2 0x127 PUSH2 0x12E JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x13E PUSH2 0x139 PUSH2 0x291 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6E206973206E6F74206120636F6E747261637400000000000000000000000000 SWAP2 PUSH32 0x5570677261646561626C65426561636F6E3A20696D706C656D656E746174696F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1A4 PUSH1 0x33 PUSH1 0x40 SWAP3 PUSH2 0x140 JUMP JUMPDEST PUSH2 0x1AD DUP2 PUSH2 0x149 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1C7 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x197 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1D1 JUMPI JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x34 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1EF PUSH1 0x4 DUP3 ADD PUSH2 0x1B1 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x20A PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x1F3 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x22B PUSH2 0x226 PUSH2 0x230 SWAP3 PUSH2 0xA0 JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23C SWAP1 PUSH2 0x217 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x248 SWAP1 PUSH2 0x233 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x263 PUSH2 0x25E PUSH2 0x26A SWAP3 PUSH2 0x23F JUMP JUMPDEST PUSH2 0x24B JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1F9 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x28A SWAP1 PUSH2 0x283 PUSH2 0x27E DUP3 PUSH2 0x35E JUMP JUMPDEST PUSH2 0x1CA JUMP JUMPDEST PUSH1 0x1 PUSH2 0x24E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x299 PUSH2 0x28C JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2BB PUSH2 0x2C0 SWAP2 PUSH2 0x29E JUMP JUMPDEST PUSH2 0x2A4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2CD SWAP1 SLOAD PUSH2 0x2AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH1 0x0 PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x2EB DUP3 PUSH1 0x0 PUSH2 0x24E JUMP JUMPDEST SWAP1 PUSH2 0x31F PUSH2 0x319 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x23F JUMP JUMPDEST SWAP2 PUSH2 0x23F JUMP JUMPDEST SWAP2 PUSH2 0x328 PUSH2 0x34 JUMP JUMPDEST DUP1 PUSH2 0x332 DUP2 PUSH2 0x2D0 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x351 PUSH2 0x35B SWAP3 PUSH2 0x33F JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH2 0x33C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x366 PUSH2 0x337 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x37B PUSH2 0x375 PUSH1 0x0 PUSH2 0x342 JUMP JUMPDEST SWAP2 PUSH2 0x33C JUMP JUMPDEST GT SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x219 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x6D JUMP JUMPDEST DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x68 JUMPI DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x63 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x5E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x59 JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x1E6 JUMP JUMPDEST PUSH2 0x1B1 JUMP JUMPDEST PUSH2 0x17E JUMP JUMPDEST PUSH2 0x149 JUMP JUMPDEST PUSH2 0xE3 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x97 SWAP1 PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA3 DUP2 PUSH2 0x8E JUMP JUMPDEST SUB PUSH2 0xAA JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xBC DUP3 PUSH2 0x9A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xD8 JUMPI PUSH2 0xD5 SWAP2 PUSH1 0x0 ADD PUSH2 0xAF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x111 JUMPI PUSH2 0xFB PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x2B3 JUMP JUMPDEST PUSH2 0x103 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x10D DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x121 JUMPI JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH2 0x12F SWAP1 PUSH2 0x8E JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x147 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x126 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x179 JUMPI PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x164 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x16C PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1AC JUMPI PUSH2 0x18E CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x35C JUMP JUMPDEST PUSH2 0x19E PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x1A8 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1E1 JUMPI PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x1DD PUSH2 0x1CC PUSH2 0x366 JUMP JUMPDEST PUSH2 0x1D4 PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH2 0x1FE PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST PUSH2 0x206 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x210 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22F SWAP1 PUSH2 0x22A PUSH2 0x501 JUMP JUMPDEST PUSH2 0x268 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x248 PUSH2 0x243 PUSH2 0x24D SWAP3 PUSH2 0x83 JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x259 SWAP1 PUSH2 0x234 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x265 SWAP1 PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x271 DUP2 PUSH2 0x61B JUMP JUMPDEST PUSH2 0x29B PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP1 PUSH2 0x2A4 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x2AE DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH2 0x2BC SWAP1 PUSH2 0x21E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2E5 SWAP2 PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x2C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F2 SWAP1 SLOAD PUSH2 0x2D4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2FD PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x308 PUSH1 0x1 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x313 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x31B PUSH2 0x348 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x334 PUSH2 0x32F PUSH2 0x339 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x345 SWAP1 PUSH2 0x320 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x355 PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x364 PUSH2 0x30B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x36E PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x379 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38D SWAP1 PUSH2 0x388 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x442 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x3FC DUP2 PUSH2 0x398 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x416 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x3E6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x420 JUMPI JUMP JUMPDEST PUSH2 0x428 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x43E PUSH1 0x4 DUP3 ADD PUSH2 0x400 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x471 SWAP1 PUSH2 0x46C DUP2 PUSH2 0x465 PUSH2 0x45F PUSH2 0x45A PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ ISZERO PUSH2 0x419 JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x47C SWAP1 PUSH2 0x37C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x4B2 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x4BB DUP2 PUSH2 0x47E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x4D5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x4A6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x4DF JUMPI JUMP JUMPDEST PUSH2 0x4E7 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x4FD PUSH1 0x4 DUP3 ADD PUSH2 0x4BF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x52B PUSH2 0x50C PUSH2 0x366 JUMP JUMPDEST PUSH2 0x525 PUSH2 0x51F PUSH2 0x51A PUSH2 0x69A JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ PUSH2 0x4D8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6E206973206E6F74206120636F6E747261637400000000000000000000000000 SWAP2 PUSH32 0x5570677261646561626C65426561636F6E3A20696D706C656D656E746174696F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x588 PUSH1 0x33 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x591 DUP2 PUSH2 0x52D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x5AB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x57B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5B5 JUMPI JUMP JUMPDEST PUSH2 0x5BD PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x5D3 PUSH1 0x4 DUP3 ADD PUSH2 0x595 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x5EE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x5D7 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x610 PUSH2 0x60B PUSH2 0x617 SWAP3 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x5F8 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x5DD JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x637 SWAP1 PUSH2 0x630 PUSH2 0x62B DUP3 PUSH2 0x6CB JUMP JUMPDEST PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x1 PUSH2 0x5FB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x643 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0x64E DUP3 PUSH1 0x0 PUSH2 0x5FB JUMP JUMPDEST SWAP1 PUSH2 0x682 PUSH2 0x67C PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x68B PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x695 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x6A2 PUSH2 0x2BE JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C3 PUSH2 0x6BE PUSH2 0x6C8 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x6AC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6D3 PUSH2 0x6A7 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x6E8 PUSH2 0x6E2 PUSH1 0x0 PUSH2 0x6AF JUMP JUMPDEST SWAP2 PUSH2 0x6AC JUMP JUMPDEST GT SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH 0xBF SWAP5 0xB3 0xAA XOR 0x2E PUSH18 0x20F7EE578F52EECCE106FBE2A323E7E4F151 SAR SWAP16 0x27 PUSH23 0x8EAD64736F6C634300081B003300000000000000000000 ",
              "sourceMap": "543:1496:10:-:0;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;:::o;931:89::-;997:15;931:89;;;:::i;:::-;997:15;:::i;:::-;931:89::o;912:63:4:-;955:12;;;:::i;:::-;;:::i;:::-;912:63::o;543:1496:10:-;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;1811:226::-;1995:35;1811:226;1884:101;1892:37;1911:17;1892:37;:::i;:::-;1884:101;:::i;:::-;1995:35;;:::i;:::-;1811:226::o;543:1496::-;;;:::o;640:96:15:-;693:7;;:::i;:::-;719:10;;712:17;:::o;543:1496:10:-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;:::o;2426:187:4:-;2518:6;;;:::i;:::-;2534:17;2543:8;2534:17;;:::i;:::-;2597:8;2566:40;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;2426:187::o;543:1496:10:-;;;:::o;:::-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;1412:320:14:-;1472:4;;:::i;:::-;1702:7;:19;:23;;1724:1;1702:23;:::i;:::-;;;:::i;:::-;;1695:30;:::o"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode": {
                  "entryPoint": 278,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_address": {
                  "entryPoint": 175,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address": {
                  "entryPoint": 190,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 294,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_stringliteral": {
                  "entryPoint": 1215,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_245f": {
                  "entryPoint": 998,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_5ccc": {
                  "entryPoint": 1403,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_9924": {
                  "entryPoint": 1190,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 221,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 307,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_245f": {
                  "entryPoint": 1024,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_5ccc": {
                  "entryPoint": 1429,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 115,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 911,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 142,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 713,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 797,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 131,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 1708,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 604,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 828,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 800,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 1711,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 592,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 564,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "external_fun_implementation": {
                  "entryPoint": 329,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_owner": {
                  "entryPoint": 433,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_renounceOwnership": {
                  "entryPoint": 382,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_transferOwnership": {
                  "entryPoint": 486,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_upgradeTo": {
                  "entryPoint": 227,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 724,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun__transferOwnership": {
                  "entryPoint": 1593,
                  "id": 650,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_checkOwner": {
                  "entryPoint": 1281,
                  "id": 593,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_implementation": {
                  "entryPoint": 757,
                  "id": 1086,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_isContract": {
                  "entryPoint": 1739,
                  "id": 1831,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_msgSender": {
                  "entryPoint": 1690,
                  "id": 2155,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_owner": {
                  "entryPoint": 870,
                  "id": 579,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_renounceOwnership": {
                  "entryPoint": 860,
                  "id": 607,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_renounceOwnership_inner": {
                  "entryPoint": 840,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_setImplementation": {
                  "entryPoint": 1563,
                  "id": 1122,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_transferOwnership": {
                  "entryPoint": 1139,
                  "id": 630,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_transferOwnership_inner": {
                  "entryPoint": 1090,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeTo": {
                  "entryPoint": 691,
                  "id": 1103,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeTo_inner": {
                  "entryPoint": 616,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "identity": {
                  "entryPoint": 561,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "modifier_onlyOwner": {
                  "entryPoint": 779,
                  "id": 570,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "modifier_onlyOwner_1092": {
                  "entryPoint": 542,
                  "id": 570,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_onlyOwner_613": {
                  "entryPoint": 892,
                  "id": 570,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 1528,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 744,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral": {
                  "entryPoint": 1240,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_245f": {
                  "entryPoint": 1049,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_5ccc": {
                  "entryPoint": 1454,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": 537,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 121,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 126,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "shift_left": {
                  "entryPoint": 1495,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_0_unsigned": {
                  "entryPoint": 707,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 109,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe": {
                  "entryPoint": 920,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_5ccca6b0666a32006e874c0f8fc30910124098b6e8e91ea2ea1baa45ce41f1e6": {
                  "entryPoint": 1325,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe": {
                  "entryPoint": 1150,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 1501,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 1531,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 154,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 702,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 1703,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "60806040526004361015610013575b610219565b61001e60003561006d565b80633659cfe6146100685780635c60da1b14610063578063715018a61461005e5780638da5cb5b146100595763f2fde38b0361000e576101e6565b6101b1565b61017e565b610149565b6100e3565b60e01c90565b60405190565b600080fd5b600080fd5b60018060a01b031690565b61009790610083565b90565b6100a38161008e565b036100aa57565b600080fd5b905035906100bc8261009a565b565b906020828203126100d8576100d5916000016100af565b90565b61007e565b60000190565b34610111576100fb6100f63660046100be565b6102b3565b610103610073565b8061010d816100dd565b0390f35b610079565b600091031261012157565b61007e565b61012f9061008e565b9052565b919061014790600060208501940190610126565b565b3461017957610159366004610116565b6101756101646102f5565b61016c610073565b91829182610133565b0390f35b610079565b346101ac5761018e366004610116565b61019661035c565b61019e610073565b806101a8816100dd565b0390f35b610079565b346101e1576101c1366004610116565b6101dd6101cc610366565b6101d4610073565b91829182610133565b0390f35b610079565b34610214576101fe6101f93660046100be565b610473565b610206610073565b80610210816100dd565b0390f35b610079565b600080fd5b61022f9061022a610501565b610268565b565b90565b61024861024361024d92610083565b610231565b610083565b90565b61025990610234565b90565b61026590610250565b90565b6102718161061b565b61029b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9161025c565b906102a4610073565b806102ae816100dd565b0390a2565b6102bc9061021e565b565b600090565b60001c90565b60018060a01b031690565b6102e06102e5916102c3565b6102c9565b90565b6102f290546102d4565b90565b6102fd6102be565b5061030860016102e8565b90565b610313610501565b61031b610348565b565b90565b61033461032f6103399261031d565b610231565b610083565b90565b61034590610320565b90565b61035a610355600061033c565b610639565b565b61036461030b565b565b61036e6102be565b5061037960006102e8565b90565b61038d90610388610501565b610442565b565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201520152565b6103f3602660409261038f565b6103fc81610398565b0190565b61041690602081019060008183039101526103e6565b90565b1561042057565b610428610073565b62461bcd60e51b81528061043e60048201610400565b0390fd5b6104719061046c8161046561045f61045a600061033c565b61008e565b9161008e565b1415610419565b610639565b565b61047c9061037c565b565b60007f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910152565b6104b26020809261038f565b6104bb8161047e565b0190565b6104d590602081019060008183039101526104a6565b90565b156104df57565b6104e7610073565b62461bcd60e51b8152806104fd600482016104bf565b0390fd5b61052b61050c610366565b61052561051f61051a61069a565b61008e565b9161008e565b146104d8565b565b60207f6e206973206e6f74206120636f6e747261637400000000000000000000000000917f5570677261646561626c65426561636f6e3a20696d706c656d656e746174696f60008201520152565b610588603360409261038f565b6105918161052d565b0190565b6105ab906020810190600081830391015261057b565b90565b156105b557565b6105bd610073565b62461bcd60e51b8152806105d360048201610595565b0390fd5b60001b90565b906105ee60018060a01b03916105d7565b9181191691161790565b90565b9061061061060b6106179261025c565b6105f8565b82546105dd565b9055565b6106379061063061062b826106cb565b6105ae565b60016105fb565b565b61064360006102e8565b61064e8260006105fb565b9061068261067c7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09361025c565b9161025c565b9161068b610073565b80610695816100dd565b0390a3565b6106a26102be565b503390565b600090565b90565b6106c36106be6106c89261031d565b610231565b6106ac565b90565b6106d36106a7565b503b6106e86106e260006106af565b916106ac565b119056fea26469706673582212203fbf94b3aa182e7120f7ee578f52eecce106fbe2a323e7e4f1511d9f27768ead64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x219 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x6D JUMP JUMPDEST DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x68 JUMPI DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x63 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x5E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x59 JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x1E6 JUMP JUMPDEST PUSH2 0x1B1 JUMP JUMPDEST PUSH2 0x17E JUMP JUMPDEST PUSH2 0x149 JUMP JUMPDEST PUSH2 0xE3 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x97 SWAP1 PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA3 DUP2 PUSH2 0x8E JUMP JUMPDEST SUB PUSH2 0xAA JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xBC DUP3 PUSH2 0x9A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xD8 JUMPI PUSH2 0xD5 SWAP2 PUSH1 0x0 ADD PUSH2 0xAF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x111 JUMPI PUSH2 0xFB PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x2B3 JUMP JUMPDEST PUSH2 0x103 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x10D DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x121 JUMPI JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH2 0x12F SWAP1 PUSH2 0x8E JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x147 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x126 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x179 JUMPI PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x164 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x16C PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1AC JUMPI PUSH2 0x18E CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x35C JUMP JUMPDEST PUSH2 0x19E PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x1A8 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1E1 JUMPI PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x1DD PUSH2 0x1CC PUSH2 0x366 JUMP JUMPDEST PUSH2 0x1D4 PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH2 0x1FE PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST PUSH2 0x206 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x210 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22F SWAP1 PUSH2 0x22A PUSH2 0x501 JUMP JUMPDEST PUSH2 0x268 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x248 PUSH2 0x243 PUSH2 0x24D SWAP3 PUSH2 0x83 JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x259 SWAP1 PUSH2 0x234 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x265 SWAP1 PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x271 DUP2 PUSH2 0x61B JUMP JUMPDEST PUSH2 0x29B PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP1 PUSH2 0x2A4 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x2AE DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH2 0x2BC SWAP1 PUSH2 0x21E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2E5 SWAP2 PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x2C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F2 SWAP1 SLOAD PUSH2 0x2D4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2FD PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x308 PUSH1 0x1 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x313 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x31B PUSH2 0x348 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x334 PUSH2 0x32F PUSH2 0x339 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x345 SWAP1 PUSH2 0x320 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x355 PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x364 PUSH2 0x30B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x36E PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x379 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38D SWAP1 PUSH2 0x388 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x442 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x3FC DUP2 PUSH2 0x398 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x416 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x3E6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x420 JUMPI JUMP JUMPDEST PUSH2 0x428 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x43E PUSH1 0x4 DUP3 ADD PUSH2 0x400 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x471 SWAP1 PUSH2 0x46C DUP2 PUSH2 0x465 PUSH2 0x45F PUSH2 0x45A PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ ISZERO PUSH2 0x419 JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x47C SWAP1 PUSH2 0x37C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x4B2 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x4BB DUP2 PUSH2 0x47E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x4D5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x4A6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x4DF JUMPI JUMP JUMPDEST PUSH2 0x4E7 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x4FD PUSH1 0x4 DUP3 ADD PUSH2 0x4BF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x52B PUSH2 0x50C PUSH2 0x366 JUMP JUMPDEST PUSH2 0x525 PUSH2 0x51F PUSH2 0x51A PUSH2 0x69A JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ PUSH2 0x4D8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6E206973206E6F74206120636F6E747261637400000000000000000000000000 SWAP2 PUSH32 0x5570677261646561626C65426561636F6E3A20696D706C656D656E746174696F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x588 PUSH1 0x33 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x591 DUP2 PUSH2 0x52D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x5AB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x57B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5B5 JUMPI JUMP JUMPDEST PUSH2 0x5BD PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x5D3 PUSH1 0x4 DUP3 ADD PUSH2 0x595 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x5EE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x5D7 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x610 PUSH2 0x60B PUSH2 0x617 SWAP3 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x5F8 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x5DD JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x637 SWAP1 PUSH2 0x630 PUSH2 0x62B DUP3 PUSH2 0x6CB JUMP JUMPDEST PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x1 PUSH2 0x5FB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x643 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0x64E DUP3 PUSH1 0x0 PUSH2 0x5FB JUMP JUMPDEST SWAP1 PUSH2 0x682 PUSH2 0x67C PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x68B PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x695 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x6A2 PUSH2 0x2BE JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C3 PUSH2 0x6BE PUSH2 0x6C8 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x6AC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6D3 PUSH2 0x6A7 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x6E8 PUSH2 0x6E2 PUSH1 0x0 PUSH2 0x6AF JUMP JUMPDEST SWAP2 PUSH2 0x6AC JUMP JUMPDEST GT SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH 0xBF SWAP5 0xB3 0xAA XOR 0x2E PUSH18 0x20F7EE578F52EECCE106FBE2A323E7E4F151 SAR SWAP16 0x27 PUSH23 0x8EAD64736F6C634300081B003300000000000000000000 ",
              "sourceMap": "543:1496:10:-:0;;;;;;;;;-1:-1:-1;543:1496:10;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;1063:62:4;1117:1;1063:62;;;:::i;:::-;1117:1;:::i;:::-;1063:62::o;543:1496:10:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;1469:167::-;1569:17;;;:::i;:::-;1602:27;;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;1469:167::o;:::-;;;;:::i;:::-;:::o;543:1496::-;;;:::o;:::-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;1098:112::-;1162:7;;:::i;:::-;1188:15;;;;:::i;:::-;1181:22;:::o;1063:62:4:-;;;:::i;:::-;1117:1;;:::i;:::-;1063:62::o;543:1496:10:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;1824:101:4:-;1907:10;;1915:1;1907:10;:::i;:::-;;:::i;:::-;1824:101::o;:::-;;;:::i;:::-;:::o;1201:85::-;1247:7;;:::i;:::-;1273:6;;;;:::i;:::-;1266:13;:::o;1063:62::-;1117:1;1063:62;;;:::i;:::-;1117:1;:::i;:::-;1063:62::o;543:1496:10:-;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;2074:198:4;2256:8;2074:198;2154:73;2162:8;:22;;2174:10;2182:1;2174:10;:::i;:::-;2162:22;:::i;:::-;;;:::i;:::-;;;2154:73;:::i;:::-;2256:8;:::i;:::-;2074:198::o;:::-;;;;:::i;:::-;:::o;543:1496:10:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;1359:130:4;1414:68;1422:7;;:::i;:::-;:23;;1433:12;;:::i;:::-;1422:23;:::i;:::-;;;:::i;:::-;;1414:68;:::i;:::-;1359:130::o;543:1496:10:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;1811:226::-;1995:35;1811:226;1884:101;1892:37;1911:17;1892:37;:::i;:::-;1884:101;:::i;:::-;1995:35;;:::i;:::-;1811:226::o;2426:187:4:-;2518:6;;;:::i;:::-;2534:17;2543:8;2534:17;;:::i;:::-;2597:8;2566:40;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;2426:187::o;640:96:15:-;693:7;;:::i;:::-;719:10;;712:17;:::o;543:1496:10:-;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;1412:320:14:-;1472:4;;:::i;:::-;1702:7;:19;:23;;1724:1;1702:23;:::i;:::-;;;:::i;:::-;;1695:30;:::o"
            },
            "methodIdentifiers": {
              "implementation()": "5c60da1b",
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b",
              "upgradeTo(address)": "3659cfe6"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their implementation contract, which is where they will delegate all function calls. An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\",\"events\":{\"Upgraded(address)\":{\"details\":\"Emitted when the implementation returned by the beacon is changed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the beacon.\"},\"implementation()\":{\"details\":\"Returns the current implementation address.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrades the beacon to a new implementation. Emits an {Upgraded} event. Requirements: - msg.sender must be the owner of the contract. - `newImplementation` must be a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\":\"UpgradeableBeacon\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
        "ERC20": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "name_",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol_",
                  "type": "string"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "subtractedValue",
                  "type": "uint256"
                }
              ],
              "name": "decreaseAllowance",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "addedValue",
                  "type": "uint256"
                }
              ],
              "name": "increaseAllowance",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
            "events": {
              "Approval(address,address,uint256)": {
                "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
              },
              "Transfer(address,address,uint256)": {
                "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
              }
            },
            "kind": "dev",
            "methods": {
              "allowance(address,address)": {
                "details": "See {IERC20-allowance}."
              },
              "approve(address,uint256)": {
                "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
              },
              "balanceOf(address)": {
                "details": "See {IERC20-balanceOf}."
              },
              "constructor": {
                "details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
              },
              "decimals()": {
                "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
              },
              "decreaseAllowance(address,uint256)": {
                "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
              },
              "increaseAllowance(address,uint256)": {
                "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
              },
              "name()": {
                "details": "Returns the name of the token."
              },
              "symbol()": {
                "details": "Returns the symbol of the token, usually a shorter version of the name."
              },
              "totalSupply()": {
                "details": "See {IERC20-totalSupply}."
              },
              "transfer(address,uint256)": {
                "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
              },
              "transferFrom(address,address,uint256)": {
                "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "abi_decode_available_length_string_fromMemory": {
                  "entryPoint": 246,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_string_fromMemory": {
                  "entryPoint": 300,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_stringt_string_fromMemory": {
                  "entryPoint": 335,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "allocate_memory": {
                  "entryPoint": 135,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 53,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_string": {
                  "entryPoint": 176,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_string_storage": {
                  "entryPoint": 527,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_string": {
                  "entryPoint": 459,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "clean_up_bytearray_end_slots_string_storage": {
                  "entryPoint": 718,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "cleanup_uint256": {
                  "entryPoint": 590,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "clear_storage_range_bytes1": {
                  "entryPoint": 686,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "constructor_ERC20": {
                  "entryPoint": 1068,
                  "id": 1168,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "convert_uint256_to_uint256": {
                  "entryPoint": 596,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_arguments_for_constructor_object_ERC20": {
                  "entryPoint": 425,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 2
                },
                "copy_byte_array_to_storage_from_string_to_string": {
                  "entryPoint": 849,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 209,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "divide_by_ceil": {
                  "entryPoint": 538,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_byte_array_length": {
                  "entryPoint": 485,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_used_part_and_set_length_of_short_byte_array": {
                  "entryPoint": 831,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 96,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "identity": {
                  "entryPoint": 593,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mask_bytes_dynamic": {
                  "entryPoint": 809,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "panic_error_0x22": {
                  "entryPoint": 463,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x41": {
                  "entryPoint": 74,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_uint256": {
                  "entryPoint": 624,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
                  "entryPoint": 166,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
                  "entryPoint": 171,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
                  "entryPoint": 161,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 59,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 156,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 64,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_dynamic": {
                  "entryPoint": 548,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "shift_right_unsigned_dynamic": {
                  "entryPoint": 805,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "storage_set_to_zero_uint256": {
                  "entryPoint": 666,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_byte_slice_dynamic32": {
                  "entryPoint": 552,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_string_to_string": {
                  "entryPoint": 1056,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_uint256_to_uint256": {
                  "entryPoint": 627,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "zero_value_for_split_uint256": {
                  "entryPoint": 661,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "6080604052346100305761001a6100146101a9565b9061042c565b610022610035565b6110f561044582396110f590f35b61003b565b60405190565b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061006a90610040565b810190811060018060401b0382111761008257604052565b61004a565b9061009a610093610035565b9283610060565b565b600080fd5b600080fd5b600080fd5b600080fd5b60018060401b0381116100cc576100c8602091610040565b0190565b61004a565b60005b8381106100e5575050906000910152565b8060209183015181850152016100d4565b9092919261010b610106826100b0565b610087565b9381855260208501908284011161012757610125926100d1565b565b6100ab565b9080601f8301121561014a57816020610147935191016100f6565b90565b6100a6565b9190916040818403126101a457600081015160018060401b03811161019f578361017a91830161012c565b92602082015160018060401b03811161019a57610197920161012c565b90565b6100a1565b6100a1565b61009c565b6101c761153a803803806101bc81610087565b92833981019061014f565b9091565b5190565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610205575b602083101461020057565b6101cf565b91607f16916101f5565b600052602060002090565b601f602091010490565b1b90565b9190600861024491029161023e60001984610224565b92610224565b9181191691161790565b90565b90565b61026861026361026d9261024e565b610251565b61024e565b90565b90565b919061028961028461029193610254565b610270565b908354610228565b9055565b600090565b6102ac916102a6610295565b91610273565b565b5b8181106102ba575050565b806102c8600060019361029a565b016102af565b9190601f81116102de575b505050565b6102ea61030f9361020f565b9060206102f68461021a565b83019310610317575b6103089061021a565b01906102ae565b3880806102d9565b9150610308819290506102ff565b1c90565b9061033a9060001990600802610325565b191690565b8161034991610329565b906002021790565b9061035b816101cb565b9060018060401b03821161041b5761037d8261037785546101e5565b856102ce565b602090601f83116001146103b2579180916103a1936000926103a6575b505061033f565b90555b565b9091500151388061039a565b601f198316916103c18561020f565b9260005b818110610403575091600293918560019694106103e9575b505050020190556103a4565b6103f9910151601f841690610329565b90553880806103dd565b919360206001819287870151815501950192016103c5565b61004a565b9061042a91610351565b565b9061043b610442926003610420565b6004610420565b56fe60806040526004361015610013575b610552565b61001e6000356100cd565b806306fdde03146100c8578063095ea7b3146100c357806318160ddd146100be57806323b872dd146100b9578063313ce567146100b457806339509351146100af57806370a08231146100aa57806395d89b41146100a5578063a457c2d7146100a0578063a9059cbb1461009b5763dd62ed3e0361000e5761051c565b6104b8565b610482565b61044d565b610418565b6103c3565b61038e565b61032f565b6102bf565b610266565b610179565b60e01c90565b60405190565b600080fd5b600080fd5b60009103126100ee57565b6100de565b5190565b60209181520190565b60005b838110610114575050906000910152565b806020918301518185015201610103565b601f801991011690565b61014e61015760209361015c93610145816100f3565b938480936100f7565b95869101610100565b610125565b0190565b610176916020820191600081840391015261012f565b90565b346101a9576101893660046100e3565b6101a56101946106b9565b61019c6100d3565b91829182610160565b0390f35b6100d9565b60018060a01b031690565b6101c2906101ae565b90565b6101ce816101b9565b036101d557565b600080fd5b905035906101e7826101c5565b565b90565b6101f5816101e9565b036101fc57565b600080fd5b9050359061020e826101ec565b565b9190604083820312610239578061022d61023692600086016101da565b93602001610201565b90565b6100de565b151590565b61024c9061023e565b9052565b919061026490600060208501940190610243565b565b346102975761029361028261027c366004610210565b906106d4565b61028a6100d3565b91829182610250565b0390f35b6100d9565b6102a5906101e9565b9052565b91906102bd9060006020850194019061029c565b565b346102ef576102cf3660046100e3565b6102eb6102da610725565b6102e26100d3565b918291826102a9565b0390f35b6100d9565b909160608284031261032a5761032761031084600085016101da565b9361031e81602086016101da565b93604001610201565b90565b6100de565b346103605761035c61034b6103453660046102f4565b9161073b565b6103536100d3565b91829182610250565b0390f35b6100d9565b60ff1690565b61037490610365565b9052565b919061038c9060006020850194019061036b565b565b346103be5761039e3660046100e3565b6103ba6103a9610791565b6103b16100d3565b91829182610378565b0390f35b6100d9565b346103f4576103f06103df6103d9366004610210565b906107e2565b6103e76100d3565b91829182610250565b0390f35b6100d9565b9060208282031261041357610410916000016101da565b90565b6100de565b346104485761044461043361042e3660046103f9565b610863565b61043b6100d3565b918291826102a9565b0390f35b6100d9565b3461047d5761045d3660046100e3565b610479610468610882565b6104706100d3565b91829182610160565b0390f35b6100d9565b346104b3576104af61049e610498366004610210565b90610950565b6104a66100d3565b91829182610250565b0390f35b6100d9565b346104e9576104e56104d46104ce366004610210565b906109a4565b6104dc6100d3565b91829182610250565b0390f35b6100d9565b9190604083820312610517578061050b61051492600086016101da565b936020016101da565b90565b6100de565b3461054d576105496105386105323660046104ee565b906109de565b6105406100d3565b918291826102a9565b0390f35b6100d9565b600080fd5b606090565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610592575b602083101461058d57565b61055c565b91607f1691610582565b60209181520190565b600052602060002090565b90600092918054906105cb6105c483610572565b809461059c565b9160018116908160001461062457506001146105e7575b505050565b6105f491929394506105a5565b916000925b81841061060c57505001903880806105e2565b600181602092959395548486015201910192906105f9565b92949550505060ff19168252151560200201903880806105e2565b90610649916105b0565b90565b634e487b7160e01b600052604160045260246000fd5b9061066c90610125565b810190811067ffffffffffffffff82111761068657604052565b61064c565b906106ab6106a49261069b6100d3565b9384809261063f565b0383610662565b565b6106b69061068b565b90565b6106c1610557565b506106cc60036106ad565b90565b600090565b6106f1916106e06106cf565b506106e9610a0b565b919091610bf3565b600190565b600090565b60001c90565b90565b610710610715916106fb565b610701565b90565b6107229054610704565b90565b61072d6106f6565b506107386002610718565b90565b91610765926107486106cf565b5061075d610754610a0b565b82908491610d35565b919091610fa9565b600190565b600090565b90565b90565b61078961078461078e9261076f565b610772565b610365565b90565b61079961076a565b506107a46012610775565b90565b634e487b7160e01b600052601160045260246000fd5b6107cc6107d2919392936101e9565b926101e9565b82018092116107dd57565b6107a7565b610812916107ee6106cf565b5061080c6107fa610a0b565b91610807839480946109de565b6107bd565b91610bf3565b600190565b61082b610826610830926101ae565b610772565b6101ae565b90565b61083c90610817565b90565b61084890610833565b90565b906108559061083f565b600052602052604060002090565b61087a61087f916108726106f6565b50600061084b565b610718565b90565b61088a610557565b5061089560046106ad565b90565b60207f207a65726f000000000000000000000000000000000000000000000000000000917f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201520152565b6108f360256040926100f7565b6108fc81610898565b0190565b61091690602081019060008183039101526108e6565b90565b1561092057565b6109286100d3565b62461bcd60e51b81528061093e60048201610900565b0390fd5b9061094d91036101e9565b90565b61099f9161095c6106cf565b50610999610968610a0b565b916109748385906109de565b926109928461098b610985856101e9565b916101e9565b1015610919565b9392610942565b91610bf3565b600190565b6109c1916109b06106cf565b506109b9610a0b565b919091610fa9565b600190565b906109d09061083f565b600052602052604060002090565b610a03916109f96109fe926109f16106f6565b5060016109c6565b61084b565b610718565b90565b600090565b610a13610a06565b503390565b90565b610a2f610a2a610a3492610a18565b610772565b6101ae565b90565b610a4090610a1b565b90565b60207f7265737300000000000000000000000000000000000000000000000000000000917f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201520152565b610a9e60246040926100f7565b610aa781610a43565b0190565b610ac19060208101906000818303910152610a91565b90565b15610acb57565b610ad36100d3565b62461bcd60e51b815280610ae960048201610aab565b0390fd5b60207f7373000000000000000000000000000000000000000000000000000000000000917f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201520152565b610b4860226040926100f7565b610b5181610aed565b0190565b610b6b9060208101906000818303910152610b3b565b90565b15610b7557565b610b7d6100d3565b62461bcd60e51b815280610b9360048201610b55565b0390fd5b60001b90565b90610baa60001991610b97565b9181191691161790565b610bc8610bc3610bcd926101e9565b610772565b6101e9565b90565b90565b90610be8610be3610bef92610bb4565b610bd0565b8254610b9d565b9055565b919091610c1c81610c15610c0f610c0a6000610a37565b6101b9565b916101b9565b1415610ac4565b610c4283610c3b610c35610c306000610a37565b6101b9565b916101b9565b1415610b6e565b610c6182610c5c610c55600185906109c6565b869061084b565b610bd3565b919091610cac610c9a610c947f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259361083f565b9361083f565b93610ca36100d3565b918291826102a9565b0390a3565b60007f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000910152565b610ce6601d6020926100f7565b610cef81610cb1565b0190565b610d099060208101906000818303910152610cd9565b90565b15610d1357565b610d1b6100d3565b62461bcd60e51b815280610d3160048201610cf3565b0390fd5b610d408183906109de565b9081610d56610d506000196101e9565b916101e9565b03610d62575b50505050565b610d9493610d8e91610d8784610d80610d7a856101e9565b916101e9565b1015610d0c565b9392610942565b91610bf3565b38808080610d5c565b60207f6472657373000000000000000000000000000000000000000000000000000000917f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201520152565b610df860256040926100f7565b610e0181610d9d565b0190565b610e1b9060208101906000818303910152610deb565b90565b15610e2557565b610e2d6100d3565b62461bcd60e51b815280610e4360048201610e05565b0390fd5b60207f6573730000000000000000000000000000000000000000000000000000000000917f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201520152565b610ea260236040926100f7565b610eab81610e47565b0190565b610ec59060208101906000818303910152610e95565b90565b15610ecf57565b610ed76100d3565b62461bcd60e51b815280610eed60048201610eaf565b0390fd5b60207f616c616e63650000000000000000000000000000000000000000000000000000917f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201520152565b610f4c60266040926100f7565b610f5581610ef1565b0190565b610f6f9060208101906000818303910152610f3f565b90565b15610f7957565b610f816100d3565b62461bcd60e51b815280610f9760048201610f59565b0390fd5b90610fa691016101e9565b90565b919091610fd281610fcb610fc5610fc06000610a37565b6101b9565b916101b9565b1415610e1e565b610ff883610ff1610feb610fe66000610a37565b6101b9565b916101b9565b1415610ec8565b61104761103661101261100d6000859061084b565b610718565b61102f81611028611022886101e9565b916101e9565b1015610f72565b8490610942565b6110426000849061084b565b610bd3565b61106f8261106961105a6000879061084b565b9161106483610718565b610f9b565b90610bd3565b9190916110ba6110a86110a27fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9361083f565b9361083f565b936110b16100d3565b918291826102a9565b0390a356fea2646970667358221220ae16b81308639e5f9a90f0b1fedc6d2b21a354164b3404636925601bdc7efa5964736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x30 JUMPI PUSH2 0x1A PUSH2 0x14 PUSH2 0x1A9 JUMP JUMPDEST SWAP1 PUSH2 0x42C JUMP JUMPDEST PUSH2 0x22 PUSH2 0x35 JUMP JUMPDEST PUSH2 0x10F5 PUSH2 0x445 DUP3 CODECOPY PUSH2 0x10F5 SWAP1 RETURN JUMPDEST PUSH2 0x3B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x6A SWAP1 PUSH2 0x40 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x82 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x4A JUMP JUMPDEST SWAP1 PUSH2 0x9A PUSH2 0x93 PUSH2 0x35 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x60 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xCC JUMPI PUSH2 0xC8 PUSH1 0x20 SWAP2 PUSH2 0x40 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x4A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0xE5 JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0xD4 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x10B PUSH2 0x106 DUP3 PUSH2 0xB0 JUMP JUMPDEST PUSH2 0x87 JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x127 JUMPI PUSH2 0x125 SWAP3 PUSH2 0xD1 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xAB JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x14A JUMPI DUP2 PUSH1 0x20 PUSH2 0x147 SWAP4 MLOAD SWAP2 ADD PUSH2 0xF6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA6 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x1A4 JUMPI PUSH1 0x0 DUP2 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x19F JUMPI DUP4 PUSH2 0x17A SWAP2 DUP4 ADD PUSH2 0x12C JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x19A JUMPI PUSH2 0x197 SWAP3 ADD PUSH2 0x12C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA1 JUMP JUMPDEST PUSH2 0xA1 JUMP JUMPDEST PUSH2 0x9C JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x153A DUP1 CODESIZE SUB DUP1 PUSH2 0x1BC DUP2 PUSH2 0x87 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD SWAP1 PUSH2 0x14F JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x2 DUP4 DIV SWAP3 AND DUP1 ISZERO PUSH2 0x205 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x200 JUMPI JUMP JUMPDEST PUSH2 0x1CF JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1F5 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1F PUSH1 0x20 SWAP2 ADD DIV SWAP1 JUMP JUMPDEST SHL SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x8 PUSH2 0x244 SWAP2 MUL SWAP2 PUSH2 0x23E PUSH1 0x0 NOT DUP5 PUSH2 0x224 JUMP JUMPDEST SWAP3 PUSH2 0x224 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x268 PUSH2 0x263 PUSH2 0x26D SWAP3 PUSH2 0x24E JUMP JUMPDEST PUSH2 0x251 JUMP JUMPDEST PUSH2 0x24E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x289 PUSH2 0x284 PUSH2 0x291 SWAP4 PUSH2 0x254 JUMP JUMPDEST PUSH2 0x270 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x228 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2AC SWAP2 PUSH2 0x2A6 PUSH2 0x295 JUMP JUMPDEST SWAP2 PUSH2 0x273 JUMP JUMPDEST JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT PUSH2 0x2BA JUMPI POP POP JUMP JUMPDEST DUP1 PUSH2 0x2C8 PUSH1 0x0 PUSH1 0x1 SWAP4 PUSH2 0x29A JUMP JUMPDEST ADD PUSH2 0x2AF JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x2DE JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2EA PUSH2 0x30F SWAP4 PUSH2 0x20F JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x2F6 DUP5 PUSH2 0x21A JUMP JUMPDEST DUP4 ADD SWAP4 LT PUSH2 0x317 JUMPI JUMPDEST PUSH2 0x308 SWAP1 PUSH2 0x21A JUMP JUMPDEST ADD SWAP1 PUSH2 0x2AE JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x2D9 JUMP JUMPDEST SWAP2 POP PUSH2 0x308 DUP2 SWAP3 SWAP1 POP PUSH2 0x2FF JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x33A SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x8 MUL PUSH2 0x325 JUMP JUMPDEST NOT AND SWAP1 JUMP JUMPDEST DUP2 PUSH2 0x349 SWAP2 PUSH2 0x329 JUMP JUMPDEST SWAP1 PUSH1 0x2 MUL OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x35B DUP2 PUSH2 0x1CB JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x41B JUMPI PUSH2 0x37D DUP3 PUSH2 0x377 DUP6 SLOAD PUSH2 0x1E5 JUMP JUMPDEST DUP6 PUSH2 0x2CE JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x3B2 JUMPI SWAP2 DUP1 SWAP2 PUSH2 0x3A1 SWAP4 PUSH1 0x0 SWAP3 PUSH2 0x3A6 JUMPI JUMPDEST POP POP PUSH2 0x33F JUMP JUMPDEST SWAP1 SSTORE JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 POP ADD MLOAD CODESIZE DUP1 PUSH2 0x39A JUMP JUMPDEST PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH2 0x3C1 DUP6 PUSH2 0x20F JUMP JUMPDEST SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x403 JUMPI POP SWAP2 PUSH1 0x2 SWAP4 SWAP2 DUP6 PUSH1 0x1 SWAP7 SWAP5 LT PUSH2 0x3E9 JUMPI JUMPDEST POP POP POP MUL ADD SWAP1 SSTORE PUSH2 0x3A4 JUMP JUMPDEST PUSH2 0x3F9 SWAP2 ADD MLOAD PUSH1 0x1F DUP5 AND SWAP1 PUSH2 0x329 JUMP JUMPDEST SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x3DD JUMP JUMPDEST SWAP2 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP8 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP3 ADD PUSH2 0x3C5 JUMP JUMPDEST PUSH2 0x4A JUMP JUMPDEST SWAP1 PUSH2 0x42A SWAP2 PUSH2 0x351 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x43B PUSH2 0x442 SWAP3 PUSH1 0x3 PUSH2 0x420 JUMP JUMPDEST PUSH1 0x4 PUSH2 0x420 JUMP JUMPDEST JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x552 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0xCD JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xC8 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xBE JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0xB4 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0xAF JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xAA JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0xA5 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0xA0 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x9B JUMPI PUSH4 0xDD62ED3E SUB PUSH2 0xE JUMPI PUSH2 0x51C JUMP JUMPDEST PUSH2 0x4B8 JUMP JUMPDEST PUSH2 0x482 JUMP JUMPDEST PUSH2 0x44D JUMP JUMPDEST PUSH2 0x418 JUMP JUMPDEST PUSH2 0x3C3 JUMP JUMPDEST PUSH2 0x38E JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST PUSH2 0x2BF JUMP JUMPDEST PUSH2 0x266 JUMP JUMPDEST PUSH2 0x179 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0xEE JUMPI JUMP JUMPDEST PUSH2 0xDE JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x114 JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x103 JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x157 PUSH1 0x20 SWAP4 PUSH2 0x15C SWAP4 PUSH2 0x145 DUP2 PUSH2 0xF3 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xF7 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x100 JUMP JUMPDEST PUSH2 0x125 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x176 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x12F JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x1A9 JUMPI PUSH2 0x189 CALLDATASIZE PUSH1 0x4 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x194 PUSH2 0x6B9 JUMP JUMPDEST PUSH2 0x19C PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x160 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1C2 SWAP1 PUSH2 0x1AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1CE DUP2 PUSH2 0x1B9 JUMP JUMPDEST SUB PUSH2 0x1D5 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x1E7 DUP3 PUSH2 0x1C5 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F5 DUP2 PUSH2 0x1E9 JUMP JUMPDEST SUB PUSH2 0x1FC JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x20E DUP3 PUSH2 0x1EC JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x239 JUMPI DUP1 PUSH2 0x22D PUSH2 0x236 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x1DA JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x201 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDE JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x24C SWAP1 PUSH2 0x23E JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x264 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x243 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x297 JUMPI PUSH2 0x293 PUSH2 0x282 PUSH2 0x27C CALLDATASIZE PUSH1 0x4 PUSH2 0x210 JUMP JUMPDEST SWAP1 PUSH2 0x6D4 JUMP JUMPDEST PUSH2 0x28A PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x250 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST PUSH2 0x2A5 SWAP1 PUSH2 0x1E9 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2BD SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x29C JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x2EF JUMPI PUSH2 0x2CF CALLDATASIZE PUSH1 0x4 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x2EB PUSH2 0x2DA PUSH2 0x725 JUMP JUMPDEST PUSH2 0x2E2 PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2A9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0x32A JUMPI PUSH2 0x327 PUSH2 0x310 DUP5 PUSH1 0x0 DUP6 ADD PUSH2 0x1DA JUMP JUMPDEST SWAP4 PUSH2 0x31E DUP2 PUSH1 0x20 DUP7 ADD PUSH2 0x1DA JUMP JUMPDEST SWAP4 PUSH1 0x40 ADD PUSH2 0x201 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDE JUMP JUMPDEST CALLVALUE PUSH2 0x360 JUMPI PUSH2 0x35C PUSH2 0x34B PUSH2 0x345 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F4 JUMP JUMPDEST SWAP2 PUSH2 0x73B JUMP JUMPDEST PUSH2 0x353 PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x250 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x374 SWAP1 PUSH2 0x365 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x38C SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x36B JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x3BE JUMPI PUSH2 0x39E CALLDATASIZE PUSH1 0x4 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x3BA PUSH2 0x3A9 PUSH2 0x791 JUMP JUMPDEST PUSH2 0x3B1 PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x378 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST CALLVALUE PUSH2 0x3F4 JUMPI PUSH2 0x3F0 PUSH2 0x3DF PUSH2 0x3D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x210 JUMP JUMPDEST SWAP1 PUSH2 0x7E2 JUMP JUMPDEST PUSH2 0x3E7 PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x250 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x413 JUMPI PUSH2 0x410 SWAP2 PUSH1 0x0 ADD PUSH2 0x1DA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDE JUMP JUMPDEST CALLVALUE PUSH2 0x448 JUMPI PUSH2 0x444 PUSH2 0x433 PUSH2 0x42E CALLDATASIZE PUSH1 0x4 PUSH2 0x3F9 JUMP JUMPDEST PUSH2 0x863 JUMP JUMPDEST PUSH2 0x43B PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2A9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST CALLVALUE PUSH2 0x47D JUMPI PUSH2 0x45D CALLDATASIZE PUSH1 0x4 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x479 PUSH2 0x468 PUSH2 0x882 JUMP JUMPDEST PUSH2 0x470 PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x160 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST CALLVALUE PUSH2 0x4B3 JUMPI PUSH2 0x4AF PUSH2 0x49E PUSH2 0x498 CALLDATASIZE PUSH1 0x4 PUSH2 0x210 JUMP JUMPDEST SWAP1 PUSH2 0x950 JUMP JUMPDEST PUSH2 0x4A6 PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x250 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST CALLVALUE PUSH2 0x4E9 JUMPI PUSH2 0x4E5 PUSH2 0x4D4 PUSH2 0x4CE CALLDATASIZE PUSH1 0x4 PUSH2 0x210 JUMP JUMPDEST SWAP1 PUSH2 0x9A4 JUMP JUMPDEST PUSH2 0x4DC PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x250 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x517 JUMPI DUP1 PUSH2 0x50B PUSH2 0x514 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x1DA JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x1DA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDE JUMP JUMPDEST CALLVALUE PUSH2 0x54D JUMPI PUSH2 0x549 PUSH2 0x538 PUSH2 0x532 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EE JUMP JUMPDEST SWAP1 PUSH2 0x9DE JUMP JUMPDEST PUSH2 0x540 PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2A9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x2 DUP4 DIV SWAP3 AND DUP1 ISZERO PUSH2 0x592 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x58D JUMPI JUMP JUMPDEST PUSH2 0x55C JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x582 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 SWAP2 DUP1 SLOAD SWAP1 PUSH2 0x5CB PUSH2 0x5C4 DUP4 PUSH2 0x572 JUMP JUMPDEST DUP1 SWAP5 PUSH2 0x59C JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x624 JUMPI POP PUSH1 0x1 EQ PUSH2 0x5E7 JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x5F4 SWAP2 SWAP3 SWAP4 SWAP5 POP PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP2 DUP5 LT PUSH2 0x60C JUMPI POP POP ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x5E2 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SWAP6 SWAP4 SWAP6 SLOAD DUP5 DUP7 ADD MSTORE ADD SWAP2 ADD SWAP3 SWAP1 PUSH2 0x5F9 JUMP JUMPDEST SWAP3 SWAP5 SWAP6 POP POP POP PUSH1 0xFF NOT AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 MUL ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x5E2 JUMP JUMPDEST SWAP1 PUSH2 0x649 SWAP2 PUSH2 0x5B0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x66C SWAP1 PUSH2 0x125 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x686 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x64C JUMP JUMPDEST SWAP1 PUSH2 0x6AB PUSH2 0x6A4 SWAP3 PUSH2 0x69B PUSH2 0xD3 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP3 PUSH2 0x63F JUMP JUMPDEST SUB DUP4 PUSH2 0x662 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x6B6 SWAP1 PUSH2 0x68B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C1 PUSH2 0x557 JUMP JUMPDEST POP PUSH2 0x6CC PUSH1 0x3 PUSH2 0x6AD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x6F1 SWAP2 PUSH2 0x6E0 PUSH2 0x6CF JUMP JUMPDEST POP PUSH2 0x6E9 PUSH2 0xA0B JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0xBF3 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x710 PUSH2 0x715 SWAP2 PUSH2 0x6FB JUMP JUMPDEST PUSH2 0x701 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x722 SWAP1 SLOAD PUSH2 0x704 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x72D PUSH2 0x6F6 JUMP JUMPDEST POP PUSH2 0x738 PUSH1 0x2 PUSH2 0x718 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x765 SWAP3 PUSH2 0x748 PUSH2 0x6CF JUMP JUMPDEST POP PUSH2 0x75D PUSH2 0x754 PUSH2 0xA0B JUMP JUMPDEST DUP3 SWAP1 DUP5 SWAP2 PUSH2 0xD35 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0xFA9 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x789 PUSH2 0x784 PUSH2 0x78E SWAP3 PUSH2 0x76F JUMP JUMPDEST PUSH2 0x772 JUMP JUMPDEST PUSH2 0x365 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x799 PUSH2 0x76A JUMP JUMPDEST POP PUSH2 0x7A4 PUSH1 0x12 PUSH2 0x775 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x7CC PUSH2 0x7D2 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x1E9 JUMP JUMPDEST SWAP3 PUSH2 0x1E9 JUMP JUMPDEST DUP3 ADD DUP1 SWAP3 GT PUSH2 0x7DD JUMPI JUMP JUMPDEST PUSH2 0x7A7 JUMP JUMPDEST PUSH2 0x812 SWAP2 PUSH2 0x7EE PUSH2 0x6CF JUMP JUMPDEST POP PUSH2 0x80C PUSH2 0x7FA PUSH2 0xA0B JUMP JUMPDEST SWAP2 PUSH2 0x807 DUP4 SWAP5 DUP1 SWAP5 PUSH2 0x9DE JUMP JUMPDEST PUSH2 0x7BD JUMP JUMPDEST SWAP2 PUSH2 0xBF3 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x82B PUSH2 0x826 PUSH2 0x830 SWAP3 PUSH2 0x1AE JUMP JUMPDEST PUSH2 0x772 JUMP JUMPDEST PUSH2 0x1AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x83C SWAP1 PUSH2 0x817 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x848 SWAP1 PUSH2 0x833 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x855 SWAP1 PUSH2 0x83F JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x87A PUSH2 0x87F SWAP2 PUSH2 0x872 PUSH2 0x6F6 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x84B JUMP JUMPDEST PUSH2 0x718 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x88A PUSH2 0x557 JUMP JUMPDEST POP PUSH2 0x895 PUSH1 0x4 PUSH2 0x6AD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x8F3 PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0xF7 JUMP JUMPDEST PUSH2 0x8FC DUP2 PUSH2 0x898 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x916 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x8E6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x920 JUMPI JUMP JUMPDEST PUSH2 0x928 PUSH2 0xD3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x93E PUSH1 0x4 DUP3 ADD PUSH2 0x900 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x94D SWAP2 SUB PUSH2 0x1E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x99F SWAP2 PUSH2 0x95C PUSH2 0x6CF JUMP JUMPDEST POP PUSH2 0x999 PUSH2 0x968 PUSH2 0xA0B JUMP JUMPDEST SWAP2 PUSH2 0x974 DUP4 DUP6 SWAP1 PUSH2 0x9DE JUMP JUMPDEST SWAP3 PUSH2 0x992 DUP5 PUSH2 0x98B PUSH2 0x985 DUP6 PUSH2 0x1E9 JUMP JUMPDEST SWAP2 PUSH2 0x1E9 JUMP JUMPDEST LT ISZERO PUSH2 0x919 JUMP JUMPDEST SWAP4 SWAP3 PUSH2 0x942 JUMP JUMPDEST SWAP2 PUSH2 0xBF3 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x9C1 SWAP2 PUSH2 0x9B0 PUSH2 0x6CF JUMP JUMPDEST POP PUSH2 0x9B9 PUSH2 0xA0B JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0xFA9 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x9D0 SWAP1 PUSH2 0x83F JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0xA03 SWAP2 PUSH2 0x9F9 PUSH2 0x9FE SWAP3 PUSH2 0x9F1 PUSH2 0x6F6 JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x9C6 JUMP JUMPDEST PUSH2 0x84B JUMP JUMPDEST PUSH2 0x718 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xA13 PUSH2 0xA06 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA2F PUSH2 0xA2A PUSH2 0xA34 SWAP3 PUSH2 0xA18 JUMP JUMPDEST PUSH2 0x772 JUMP JUMPDEST PUSH2 0x1AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA40 SWAP1 PUSH2 0xA1B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xA9E PUSH1 0x24 PUSH1 0x40 SWAP3 PUSH2 0xF7 JUMP JUMPDEST PUSH2 0xAA7 DUP2 PUSH2 0xA43 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xAC1 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xA91 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xACB JUMPI JUMP JUMPDEST PUSH2 0xAD3 PUSH2 0xD3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xAE9 PUSH1 0x4 DUP3 ADD PUSH2 0xAAB JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xB48 PUSH1 0x22 PUSH1 0x40 SWAP3 PUSH2 0xF7 JUMP JUMPDEST PUSH2 0xB51 DUP2 PUSH2 0xAED JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xB6B SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xB3B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xB75 JUMPI JUMP JUMPDEST PUSH2 0xB7D PUSH2 0xD3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xB93 PUSH1 0x4 DUP3 ADD PUSH2 0xB55 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xBAA PUSH1 0x0 NOT SWAP2 PUSH2 0xB97 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0xBC8 PUSH2 0xBC3 PUSH2 0xBCD SWAP3 PUSH2 0x1E9 JUMP JUMPDEST PUSH2 0x772 JUMP JUMPDEST PUSH2 0x1E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xBE8 PUSH2 0xBE3 PUSH2 0xBEF SWAP3 PUSH2 0xBB4 JUMP JUMPDEST PUSH2 0xBD0 JUMP JUMPDEST DUP3 SLOAD PUSH2 0xB9D JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0xC1C DUP2 PUSH2 0xC15 PUSH2 0xC0F PUSH2 0xC0A PUSH1 0x0 PUSH2 0xA37 JUMP JUMPDEST PUSH2 0x1B9 JUMP JUMPDEST SWAP2 PUSH2 0x1B9 JUMP JUMPDEST EQ ISZERO PUSH2 0xAC4 JUMP JUMPDEST PUSH2 0xC42 DUP4 PUSH2 0xC3B PUSH2 0xC35 PUSH2 0xC30 PUSH1 0x0 PUSH2 0xA37 JUMP JUMPDEST PUSH2 0x1B9 JUMP JUMPDEST SWAP2 PUSH2 0x1B9 JUMP JUMPDEST EQ ISZERO PUSH2 0xB6E JUMP JUMPDEST PUSH2 0xC61 DUP3 PUSH2 0xC5C PUSH2 0xC55 PUSH1 0x1 DUP6 SWAP1 PUSH2 0x9C6 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH2 0xBD3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0xCAC PUSH2 0xC9A PUSH2 0xC94 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP4 PUSH2 0x83F JUMP JUMPDEST SWAP4 PUSH2 0x83F JUMP JUMPDEST SWAP4 PUSH2 0xCA3 PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2A9 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xCE6 PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0xF7 JUMP JUMPDEST PUSH2 0xCEF DUP2 PUSH2 0xCB1 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD09 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xCD9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xD13 JUMPI JUMP JUMPDEST PUSH2 0xD1B PUSH2 0xD3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xD31 PUSH1 0x4 DUP3 ADD PUSH2 0xCF3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xD40 DUP2 DUP4 SWAP1 PUSH2 0x9DE JUMP JUMPDEST SWAP1 DUP2 PUSH2 0xD56 PUSH2 0xD50 PUSH1 0x0 NOT PUSH2 0x1E9 JUMP JUMPDEST SWAP2 PUSH2 0x1E9 JUMP JUMPDEST SUB PUSH2 0xD62 JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xD94 SWAP4 PUSH2 0xD8E SWAP2 PUSH2 0xD87 DUP5 PUSH2 0xD80 PUSH2 0xD7A DUP6 PUSH2 0x1E9 JUMP JUMPDEST SWAP2 PUSH2 0x1E9 JUMP JUMPDEST LT ISZERO PUSH2 0xD0C JUMP JUMPDEST SWAP4 SWAP3 PUSH2 0x942 JUMP JUMPDEST SWAP2 PUSH2 0xBF3 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 PUSH2 0xD5C JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xDF8 PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0xF7 JUMP JUMPDEST PUSH2 0xE01 DUP2 PUSH2 0xD9D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xE1B SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xDEB JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xE25 JUMPI JUMP JUMPDEST PUSH2 0xE2D PUSH2 0xD3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xE43 PUSH1 0x4 DUP3 ADD PUSH2 0xE05 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xEA2 PUSH1 0x23 PUSH1 0x40 SWAP3 PUSH2 0xF7 JUMP JUMPDEST PUSH2 0xEAB DUP2 PUSH2 0xE47 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xEC5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xE95 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xECF JUMPI JUMP JUMPDEST PUSH2 0xED7 PUSH2 0xD3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xEED PUSH1 0x4 DUP3 ADD PUSH2 0xEAF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xF4C PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0xF7 JUMP JUMPDEST PUSH2 0xF55 DUP2 PUSH2 0xEF1 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xF6F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xF3F JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xF79 JUMPI JUMP JUMPDEST PUSH2 0xF81 PUSH2 0xD3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xF97 PUSH1 0x4 DUP3 ADD PUSH2 0xF59 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xFA6 SWAP2 ADD PUSH2 0x1E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0xFD2 DUP2 PUSH2 0xFCB PUSH2 0xFC5 PUSH2 0xFC0 PUSH1 0x0 PUSH2 0xA37 JUMP JUMPDEST PUSH2 0x1B9 JUMP JUMPDEST SWAP2 PUSH2 0x1B9 JUMP JUMPDEST EQ ISZERO PUSH2 0xE1E JUMP JUMPDEST PUSH2 0xFF8 DUP4 PUSH2 0xFF1 PUSH2 0xFEB PUSH2 0xFE6 PUSH1 0x0 PUSH2 0xA37 JUMP JUMPDEST PUSH2 0x1B9 JUMP JUMPDEST SWAP2 PUSH2 0x1B9 JUMP JUMPDEST EQ ISZERO PUSH2 0xEC8 JUMP JUMPDEST PUSH2 0x1047 PUSH2 0x1036 PUSH2 0x1012 PUSH2 0x100D PUSH1 0x0 DUP6 SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH2 0x718 JUMP JUMPDEST PUSH2 0x102F DUP2 PUSH2 0x1028 PUSH2 0x1022 DUP9 PUSH2 0x1E9 JUMP JUMPDEST SWAP2 PUSH2 0x1E9 JUMP JUMPDEST LT ISZERO PUSH2 0xF72 JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x942 JUMP JUMPDEST PUSH2 0x1042 PUSH1 0x0 DUP5 SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH2 0xBD3 JUMP JUMPDEST PUSH2 0x106F DUP3 PUSH2 0x1069 PUSH2 0x105A PUSH1 0x0 DUP8 SWAP1 PUSH2 0x84B JUMP JUMPDEST SWAP2 PUSH2 0x1064 DUP4 PUSH2 0x718 JUMP JUMPDEST PUSH2 0xF9B JUMP JUMPDEST SWAP1 PUSH2 0xBD3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x10BA PUSH2 0x10A8 PUSH2 0x10A2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP4 PUSH2 0x83F JUMP JUMPDEST SWAP4 PUSH2 0x83F JUMP JUMPDEST SWAP4 PUSH2 0x10B1 PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2A9 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAE AND 0xB8 SGT ADDMOD PUSH4 0x9E5F9A90 CREATE 0xB1 INVALID 0xDC PUSH14 0x2B21A354164B3404636925601BDC PUSH31 0xFA5964736F6C634300081B0033000000000000000000000000000000000000 ",
              "sourceMap": "1532:11312:11:-:0;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;:::o;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;;;;:::i;:::-;;;:::o;:::-;;;:::o;:::-;;;;;:::i;:::-;;;:::i;:::-;:::o;:::-;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;:::o;1980:113::-;;2046:13;2069:17;1980:113;2046:13;;:::i;:::-;2069:17;;:::i;:::-;1980:113::o"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode": {
                  "entryPoint": 227,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_address": {
                  "entryPoint": 474,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_addresst_address": {
                  "entryPoint": 1262,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_addresst_addresst_uint256": {
                  "entryPoint": 756,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_decode_addresst_uint256": {
                  "entryPoint": 528,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_tuple_address": {
                  "entryPoint": 1017,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint256": {
                  "entryPoint": 513,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encodeUpdatedPos_string_storage": {
                  "entryPoint": 1599,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_bool": {
                  "entryPoint": 592,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_bool_to_bool": {
                  "entryPoint": 579,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_string": {
                  "entryPoint": 352,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_memory_ptr": {
                  "entryPoint": 303,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_storage": {
                  "entryPoint": 1456,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral": {
                  "entryPoint": 3903,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_0557": {
                  "entryPoint": 3733,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_2488": {
                  "entryPoint": 2901,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029": {
                  "entryPoint": 2875,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_3b66": {
                  "entryPoint": 3289,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_baec": {
                  "entryPoint": 3589,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea": {
                  "entryPoint": 3563,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_c953": {
                  "entryPoint": 2731,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208": {
                  "entryPoint": 2705,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f8b4": {
                  "entryPoint": 2304,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8": {
                  "entryPoint": 2278,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral": {
                  "entryPoint": 3759,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_3b66": {
                  "entryPoint": 3315,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_4107": {
                  "entryPoint": 3929,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_uint256": {
                  "entryPoint": 681,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_uint256_to_uint256": {
                  "entryPoint": 668,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_uint8": {
                  "entryPoint": 888,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_uint8_to_uint8": {
                  "entryPoint": 875,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "allocate_unbounded": {
                  "entryPoint": 211,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_dataslot_string_storage": {
                  "entryPoint": 1445,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_string": {
                  "entryPoint": 243,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 1436,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string_fromStack": {
                  "entryPoint": 247,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_add_uint256": {
                  "entryPoint": 1981,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 441,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bool": {
                  "entryPoint": 574,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_uint256": {
                  "entryPoint": 1793,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 1903,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by": {
                  "entryPoint": 2584,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 430,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 489,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint8": {
                  "entryPoint": 869,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 2111,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_array_string_storage_to_string": {
                  "entryPoint": 1709,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 2615,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 2587,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint8": {
                  "entryPoint": 1909,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 2099,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 2071,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint256_to_uint256": {
                  "entryPoint": 2996,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_array_from_storage_to_memory_string": {
                  "entryPoint": 1675,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 256,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "external_fun_allowance": {
                  "entryPoint": 1308,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_approve": {
                  "entryPoint": 614,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_balanceOf": {
                  "entryPoint": 1048,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_decimals": {
                  "entryPoint": 910,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_decreaseAllowance": {
                  "entryPoint": 1154,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_increaseAllowance": {
                  "entryPoint": 963,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_name": {
                  "entryPoint": 377,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_symbol": {
                  "entryPoint": 1101,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_totalSupply": {
                  "entryPoint": 703,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_transfer": {
                  "entryPoint": 1208,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_transferFrom": {
                  "entryPoint": 815,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "extract_byte_array_length": {
                  "entryPoint": 1394,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_uint256": {
                  "entryPoint": 1796,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 1634,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun__approve": {
                  "entryPoint": 3059,
                  "id": 1644,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_allowance": {
                  "entryPoint": 2526,
                  "id": 1265,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_approve": {
                  "entryPoint": 1748,
                  "id": 1290,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_balanceOf": {
                  "entryPoint": 2147,
                  "id": 1222,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_decimals": {
                  "entryPoint": 1937,
                  "id": 1198,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_decreaseAllowance": {
                  "entryPoint": 2384,
                  "id": 1393,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_increaseAllowance": {
                  "entryPoint": 2018,
                  "id": 1352,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_msgSender": {
                  "entryPoint": 2571,
                  "id": 2155,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_name": {
                  "entryPoint": 1721,
                  "id": 1178,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_spendAllowance": {
                  "entryPoint": 3381,
                  "id": 1687,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_symbol": {
                  "entryPoint": 2178,
                  "id": 1188,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_totalSupply": {
                  "entryPoint": 1829,
                  "id": 1208,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_transfer": {
                  "entryPoint": 4009,
                  "id": 1470,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_transferFrom": {
                  "entryPoint": 1851,
                  "id": 1323,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_transfer_1247": {
                  "entryPoint": 2468,
                  "id": 1247,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 1906,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_mapping_address_uint256_of_address": {
                  "entryPoint": 2502,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_uint256_of_address": {
                  "entryPoint": 2123,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "panic_error_0x11": {
                  "entryPoint": 1959,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x22": {
                  "entryPoint": 1372,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x41": {
                  "entryPoint": 1612,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_uint256": {
                  "entryPoint": 3024,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_uint256": {
                  "entryPoint": 1816,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral": {
                  "entryPoint": 3784,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_2488": {
                  "entryPoint": 2926,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_3b66": {
                  "entryPoint": 3340,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_4107": {
                  "entryPoint": 3954,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_baec": {
                  "entryPoint": 3614,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_c953": {
                  "entryPoint": 2756,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_f8b4": {
                  "entryPoint": 2329,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": 1362,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 217,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 222,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 293,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 2967,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_0_unsigned": {
                  "entryPoint": 1787,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 205,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f": {
                  "entryPoint": 3655,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029": {
                  "entryPoint": 2797,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe": {
                  "entryPoint": 3249,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6": {
                  "entryPoint": 3825,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea": {
                  "entryPoint": 3485,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208": {
                  "entryPoint": 2627,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8": {
                  "entryPoint": 2200,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 2973,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_uint256_to_uint256": {
                  "entryPoint": 3027,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 453,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_uint256": {
                  "entryPoint": 492,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "wrapping_add_uint256": {
                  "entryPoint": 3995,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "wrapping_sub_uint256": {
                  "entryPoint": 2370,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "zero_value_for_split_address": {
                  "entryPoint": 2566,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 1743,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_string": {
                  "entryPoint": 1367,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_uint256": {
                  "entryPoint": 1782,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_uint8": {
                  "entryPoint": 1898,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x552 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0xCD JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xC8 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xBE JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0xB4 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0xAF JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xAA JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0xA5 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0xA0 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x9B JUMPI PUSH4 0xDD62ED3E SUB PUSH2 0xE JUMPI PUSH2 0x51C JUMP JUMPDEST PUSH2 0x4B8 JUMP JUMPDEST PUSH2 0x482 JUMP JUMPDEST PUSH2 0x44D JUMP JUMPDEST PUSH2 0x418 JUMP JUMPDEST PUSH2 0x3C3 JUMP JUMPDEST PUSH2 0x38E JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST PUSH2 0x2BF JUMP JUMPDEST PUSH2 0x266 JUMP JUMPDEST PUSH2 0x179 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0xEE JUMPI JUMP JUMPDEST PUSH2 0xDE JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x114 JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x103 JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x157 PUSH1 0x20 SWAP4 PUSH2 0x15C SWAP4 PUSH2 0x145 DUP2 PUSH2 0xF3 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xF7 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x100 JUMP JUMPDEST PUSH2 0x125 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x176 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x12F JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x1A9 JUMPI PUSH2 0x189 CALLDATASIZE PUSH1 0x4 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x194 PUSH2 0x6B9 JUMP JUMPDEST PUSH2 0x19C PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x160 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1C2 SWAP1 PUSH2 0x1AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1CE DUP2 PUSH2 0x1B9 JUMP JUMPDEST SUB PUSH2 0x1D5 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x1E7 DUP3 PUSH2 0x1C5 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F5 DUP2 PUSH2 0x1E9 JUMP JUMPDEST SUB PUSH2 0x1FC JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x20E DUP3 PUSH2 0x1EC JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x239 JUMPI DUP1 PUSH2 0x22D PUSH2 0x236 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x1DA JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x201 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDE JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x24C SWAP1 PUSH2 0x23E JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x264 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x243 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x297 JUMPI PUSH2 0x293 PUSH2 0x282 PUSH2 0x27C CALLDATASIZE PUSH1 0x4 PUSH2 0x210 JUMP JUMPDEST SWAP1 PUSH2 0x6D4 JUMP JUMPDEST PUSH2 0x28A PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x250 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST PUSH2 0x2A5 SWAP1 PUSH2 0x1E9 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2BD SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x29C JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x2EF JUMPI PUSH2 0x2CF CALLDATASIZE PUSH1 0x4 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x2EB PUSH2 0x2DA PUSH2 0x725 JUMP JUMPDEST PUSH2 0x2E2 PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2A9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0x32A JUMPI PUSH2 0x327 PUSH2 0x310 DUP5 PUSH1 0x0 DUP6 ADD PUSH2 0x1DA JUMP JUMPDEST SWAP4 PUSH2 0x31E DUP2 PUSH1 0x20 DUP7 ADD PUSH2 0x1DA JUMP JUMPDEST SWAP4 PUSH1 0x40 ADD PUSH2 0x201 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDE JUMP JUMPDEST CALLVALUE PUSH2 0x360 JUMPI PUSH2 0x35C PUSH2 0x34B PUSH2 0x345 CALLDATASIZE PUSH1 0x4 PUSH2 0x2F4 JUMP JUMPDEST SWAP2 PUSH2 0x73B JUMP JUMPDEST PUSH2 0x353 PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x250 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x374 SWAP1 PUSH2 0x365 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x38C SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x36B JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x3BE JUMPI PUSH2 0x39E CALLDATASIZE PUSH1 0x4 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x3BA PUSH2 0x3A9 PUSH2 0x791 JUMP JUMPDEST PUSH2 0x3B1 PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x378 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST CALLVALUE PUSH2 0x3F4 JUMPI PUSH2 0x3F0 PUSH2 0x3DF PUSH2 0x3D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x210 JUMP JUMPDEST SWAP1 PUSH2 0x7E2 JUMP JUMPDEST PUSH2 0x3E7 PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x250 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x413 JUMPI PUSH2 0x410 SWAP2 PUSH1 0x0 ADD PUSH2 0x1DA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDE JUMP JUMPDEST CALLVALUE PUSH2 0x448 JUMPI PUSH2 0x444 PUSH2 0x433 PUSH2 0x42E CALLDATASIZE PUSH1 0x4 PUSH2 0x3F9 JUMP JUMPDEST PUSH2 0x863 JUMP JUMPDEST PUSH2 0x43B PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2A9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST CALLVALUE PUSH2 0x47D JUMPI PUSH2 0x45D CALLDATASIZE PUSH1 0x4 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x479 PUSH2 0x468 PUSH2 0x882 JUMP JUMPDEST PUSH2 0x470 PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x160 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST CALLVALUE PUSH2 0x4B3 JUMPI PUSH2 0x4AF PUSH2 0x49E PUSH2 0x498 CALLDATASIZE PUSH1 0x4 PUSH2 0x210 JUMP JUMPDEST SWAP1 PUSH2 0x950 JUMP JUMPDEST PUSH2 0x4A6 PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x250 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST CALLVALUE PUSH2 0x4E9 JUMPI PUSH2 0x4E5 PUSH2 0x4D4 PUSH2 0x4CE CALLDATASIZE PUSH1 0x4 PUSH2 0x210 JUMP JUMPDEST SWAP1 PUSH2 0x9A4 JUMP JUMPDEST PUSH2 0x4DC PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x250 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x517 JUMPI DUP1 PUSH2 0x50B PUSH2 0x514 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x1DA JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x1DA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDE JUMP JUMPDEST CALLVALUE PUSH2 0x54D JUMPI PUSH2 0x549 PUSH2 0x538 PUSH2 0x532 CALLDATASIZE PUSH1 0x4 PUSH2 0x4EE JUMP JUMPDEST SWAP1 PUSH2 0x9DE JUMP JUMPDEST PUSH2 0x540 PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2A9 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0xD9 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x2 DUP4 DIV SWAP3 AND DUP1 ISZERO PUSH2 0x592 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x58D JUMPI JUMP JUMPDEST PUSH2 0x55C JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x582 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 SWAP2 DUP1 SLOAD SWAP1 PUSH2 0x5CB PUSH2 0x5C4 DUP4 PUSH2 0x572 JUMP JUMPDEST DUP1 SWAP5 PUSH2 0x59C JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x624 JUMPI POP PUSH1 0x1 EQ PUSH2 0x5E7 JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x5F4 SWAP2 SWAP3 SWAP4 SWAP5 POP PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP2 DUP5 LT PUSH2 0x60C JUMPI POP POP ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x5E2 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SWAP6 SWAP4 SWAP6 SLOAD DUP5 DUP7 ADD MSTORE ADD SWAP2 ADD SWAP3 SWAP1 PUSH2 0x5F9 JUMP JUMPDEST SWAP3 SWAP5 SWAP6 POP POP POP PUSH1 0xFF NOT AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 MUL ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0x5E2 JUMP JUMPDEST SWAP1 PUSH2 0x649 SWAP2 PUSH2 0x5B0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x66C SWAP1 PUSH2 0x125 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x686 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x64C JUMP JUMPDEST SWAP1 PUSH2 0x6AB PUSH2 0x6A4 SWAP3 PUSH2 0x69B PUSH2 0xD3 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP3 PUSH2 0x63F JUMP JUMPDEST SUB DUP4 PUSH2 0x662 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x6B6 SWAP1 PUSH2 0x68B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C1 PUSH2 0x557 JUMP JUMPDEST POP PUSH2 0x6CC PUSH1 0x3 PUSH2 0x6AD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x6F1 SWAP2 PUSH2 0x6E0 PUSH2 0x6CF JUMP JUMPDEST POP PUSH2 0x6E9 PUSH2 0xA0B JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0xBF3 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x710 PUSH2 0x715 SWAP2 PUSH2 0x6FB JUMP JUMPDEST PUSH2 0x701 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x722 SWAP1 SLOAD PUSH2 0x704 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x72D PUSH2 0x6F6 JUMP JUMPDEST POP PUSH2 0x738 PUSH1 0x2 PUSH2 0x718 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x765 SWAP3 PUSH2 0x748 PUSH2 0x6CF JUMP JUMPDEST POP PUSH2 0x75D PUSH2 0x754 PUSH2 0xA0B JUMP JUMPDEST DUP3 SWAP1 DUP5 SWAP2 PUSH2 0xD35 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0xFA9 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x789 PUSH2 0x784 PUSH2 0x78E SWAP3 PUSH2 0x76F JUMP JUMPDEST PUSH2 0x772 JUMP JUMPDEST PUSH2 0x365 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x799 PUSH2 0x76A JUMP JUMPDEST POP PUSH2 0x7A4 PUSH1 0x12 PUSH2 0x775 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x7CC PUSH2 0x7D2 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x1E9 JUMP JUMPDEST SWAP3 PUSH2 0x1E9 JUMP JUMPDEST DUP3 ADD DUP1 SWAP3 GT PUSH2 0x7DD JUMPI JUMP JUMPDEST PUSH2 0x7A7 JUMP JUMPDEST PUSH2 0x812 SWAP2 PUSH2 0x7EE PUSH2 0x6CF JUMP JUMPDEST POP PUSH2 0x80C PUSH2 0x7FA PUSH2 0xA0B JUMP JUMPDEST SWAP2 PUSH2 0x807 DUP4 SWAP5 DUP1 SWAP5 PUSH2 0x9DE JUMP JUMPDEST PUSH2 0x7BD JUMP JUMPDEST SWAP2 PUSH2 0xBF3 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x82B PUSH2 0x826 PUSH2 0x830 SWAP3 PUSH2 0x1AE JUMP JUMPDEST PUSH2 0x772 JUMP JUMPDEST PUSH2 0x1AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x83C SWAP1 PUSH2 0x817 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x848 SWAP1 PUSH2 0x833 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x855 SWAP1 PUSH2 0x83F JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x87A PUSH2 0x87F SWAP2 PUSH2 0x872 PUSH2 0x6F6 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x84B JUMP JUMPDEST PUSH2 0x718 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x88A PUSH2 0x557 JUMP JUMPDEST POP PUSH2 0x895 PUSH1 0x4 PUSH2 0x6AD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x8F3 PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0xF7 JUMP JUMPDEST PUSH2 0x8FC DUP2 PUSH2 0x898 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x916 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x8E6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x920 JUMPI JUMP JUMPDEST PUSH2 0x928 PUSH2 0xD3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x93E PUSH1 0x4 DUP3 ADD PUSH2 0x900 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x94D SWAP2 SUB PUSH2 0x1E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x99F SWAP2 PUSH2 0x95C PUSH2 0x6CF JUMP JUMPDEST POP PUSH2 0x999 PUSH2 0x968 PUSH2 0xA0B JUMP JUMPDEST SWAP2 PUSH2 0x974 DUP4 DUP6 SWAP1 PUSH2 0x9DE JUMP JUMPDEST SWAP3 PUSH2 0x992 DUP5 PUSH2 0x98B PUSH2 0x985 DUP6 PUSH2 0x1E9 JUMP JUMPDEST SWAP2 PUSH2 0x1E9 JUMP JUMPDEST LT ISZERO PUSH2 0x919 JUMP JUMPDEST SWAP4 SWAP3 PUSH2 0x942 JUMP JUMPDEST SWAP2 PUSH2 0xBF3 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x9C1 SWAP2 PUSH2 0x9B0 PUSH2 0x6CF JUMP JUMPDEST POP PUSH2 0x9B9 PUSH2 0xA0B JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0xFA9 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x9D0 SWAP1 PUSH2 0x83F JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0xA03 SWAP2 PUSH2 0x9F9 PUSH2 0x9FE SWAP3 PUSH2 0x9F1 PUSH2 0x6F6 JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x9C6 JUMP JUMPDEST PUSH2 0x84B JUMP JUMPDEST PUSH2 0x718 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xA13 PUSH2 0xA06 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA2F PUSH2 0xA2A PUSH2 0xA34 SWAP3 PUSH2 0xA18 JUMP JUMPDEST PUSH2 0x772 JUMP JUMPDEST PUSH2 0x1AE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA40 SWAP1 PUSH2 0xA1B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xA9E PUSH1 0x24 PUSH1 0x40 SWAP3 PUSH2 0xF7 JUMP JUMPDEST PUSH2 0xAA7 DUP2 PUSH2 0xA43 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xAC1 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xA91 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xACB JUMPI JUMP JUMPDEST PUSH2 0xAD3 PUSH2 0xD3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xAE9 PUSH1 0x4 DUP3 ADD PUSH2 0xAAB JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xB48 PUSH1 0x22 PUSH1 0x40 SWAP3 PUSH2 0xF7 JUMP JUMPDEST PUSH2 0xB51 DUP2 PUSH2 0xAED JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xB6B SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xB3B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xB75 JUMPI JUMP JUMPDEST PUSH2 0xB7D PUSH2 0xD3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xB93 PUSH1 0x4 DUP3 ADD PUSH2 0xB55 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xBAA PUSH1 0x0 NOT SWAP2 PUSH2 0xB97 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0xBC8 PUSH2 0xBC3 PUSH2 0xBCD SWAP3 PUSH2 0x1E9 JUMP JUMPDEST PUSH2 0x772 JUMP JUMPDEST PUSH2 0x1E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xBE8 PUSH2 0xBE3 PUSH2 0xBEF SWAP3 PUSH2 0xBB4 JUMP JUMPDEST PUSH2 0xBD0 JUMP JUMPDEST DUP3 SLOAD PUSH2 0xB9D JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0xC1C DUP2 PUSH2 0xC15 PUSH2 0xC0F PUSH2 0xC0A PUSH1 0x0 PUSH2 0xA37 JUMP JUMPDEST PUSH2 0x1B9 JUMP JUMPDEST SWAP2 PUSH2 0x1B9 JUMP JUMPDEST EQ ISZERO PUSH2 0xAC4 JUMP JUMPDEST PUSH2 0xC42 DUP4 PUSH2 0xC3B PUSH2 0xC35 PUSH2 0xC30 PUSH1 0x0 PUSH2 0xA37 JUMP JUMPDEST PUSH2 0x1B9 JUMP JUMPDEST SWAP2 PUSH2 0x1B9 JUMP JUMPDEST EQ ISZERO PUSH2 0xB6E JUMP JUMPDEST PUSH2 0xC61 DUP3 PUSH2 0xC5C PUSH2 0xC55 PUSH1 0x1 DUP6 SWAP1 PUSH2 0x9C6 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH2 0xBD3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0xCAC PUSH2 0xC9A PUSH2 0xC94 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP4 PUSH2 0x83F JUMP JUMPDEST SWAP4 PUSH2 0x83F JUMP JUMPDEST SWAP4 PUSH2 0xCA3 PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2A9 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xCE6 PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0xF7 JUMP JUMPDEST PUSH2 0xCEF DUP2 PUSH2 0xCB1 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD09 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xCD9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xD13 JUMPI JUMP JUMPDEST PUSH2 0xD1B PUSH2 0xD3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xD31 PUSH1 0x4 DUP3 ADD PUSH2 0xCF3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xD40 DUP2 DUP4 SWAP1 PUSH2 0x9DE JUMP JUMPDEST SWAP1 DUP2 PUSH2 0xD56 PUSH2 0xD50 PUSH1 0x0 NOT PUSH2 0x1E9 JUMP JUMPDEST SWAP2 PUSH2 0x1E9 JUMP JUMPDEST SUB PUSH2 0xD62 JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xD94 SWAP4 PUSH2 0xD8E SWAP2 PUSH2 0xD87 DUP5 PUSH2 0xD80 PUSH2 0xD7A DUP6 PUSH2 0x1E9 JUMP JUMPDEST SWAP2 PUSH2 0x1E9 JUMP JUMPDEST LT ISZERO PUSH2 0xD0C JUMP JUMPDEST SWAP4 SWAP3 PUSH2 0x942 JUMP JUMPDEST SWAP2 PUSH2 0xBF3 JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 PUSH2 0xD5C JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xDF8 PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0xF7 JUMP JUMPDEST PUSH2 0xE01 DUP2 PUSH2 0xD9D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xE1B SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xDEB JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xE25 JUMPI JUMP JUMPDEST PUSH2 0xE2D PUSH2 0xD3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xE43 PUSH1 0x4 DUP3 ADD PUSH2 0xE05 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xEA2 PUSH1 0x23 PUSH1 0x40 SWAP3 PUSH2 0xF7 JUMP JUMPDEST PUSH2 0xEAB DUP2 PUSH2 0xE47 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xEC5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xE95 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xECF JUMPI JUMP JUMPDEST PUSH2 0xED7 PUSH2 0xD3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xEED PUSH1 0x4 DUP3 ADD PUSH2 0xEAF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xF4C PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0xF7 JUMP JUMPDEST PUSH2 0xF55 DUP2 PUSH2 0xEF1 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xF6F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xF3F JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xF79 JUMPI JUMP JUMPDEST PUSH2 0xF81 PUSH2 0xD3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xF97 PUSH1 0x4 DUP3 ADD PUSH2 0xF59 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xFA6 SWAP2 ADD PUSH2 0x1E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0xFD2 DUP2 PUSH2 0xFCB PUSH2 0xFC5 PUSH2 0xFC0 PUSH1 0x0 PUSH2 0xA37 JUMP JUMPDEST PUSH2 0x1B9 JUMP JUMPDEST SWAP2 PUSH2 0x1B9 JUMP JUMPDEST EQ ISZERO PUSH2 0xE1E JUMP JUMPDEST PUSH2 0xFF8 DUP4 PUSH2 0xFF1 PUSH2 0xFEB PUSH2 0xFE6 PUSH1 0x0 PUSH2 0xA37 JUMP JUMPDEST PUSH2 0x1B9 JUMP JUMPDEST SWAP2 PUSH2 0x1B9 JUMP JUMPDEST EQ ISZERO PUSH2 0xEC8 JUMP JUMPDEST PUSH2 0x1047 PUSH2 0x1036 PUSH2 0x1012 PUSH2 0x100D PUSH1 0x0 DUP6 SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH2 0x718 JUMP JUMPDEST PUSH2 0x102F DUP2 PUSH2 0x1028 PUSH2 0x1022 DUP9 PUSH2 0x1E9 JUMP JUMPDEST SWAP2 PUSH2 0x1E9 JUMP JUMPDEST LT ISZERO PUSH2 0xF72 JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x942 JUMP JUMPDEST PUSH2 0x1042 PUSH1 0x0 DUP5 SWAP1 PUSH2 0x84B JUMP JUMPDEST PUSH2 0xBD3 JUMP JUMPDEST PUSH2 0x106F DUP3 PUSH2 0x1069 PUSH2 0x105A PUSH1 0x0 DUP8 SWAP1 PUSH2 0x84B JUMP JUMPDEST SWAP2 PUSH2 0x1064 DUP4 PUSH2 0x718 JUMP JUMPDEST PUSH2 0xF9B JUMP JUMPDEST SWAP1 PUSH2 0xBD3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x10BA PUSH2 0x10A8 PUSH2 0x10A2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP4 PUSH2 0x83F JUMP JUMPDEST SWAP4 PUSH2 0x83F JUMP JUMPDEST SWAP4 PUSH2 0x10B1 PUSH2 0xD3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x2A9 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAE AND 0xB8 SGT ADDMOD PUSH4 0x9E5F9A90 CREATE 0xB1 INVALID 0xDC PUSH14 0x2B21A354164B3404636925601BDC PUSH31 0xFA5964736F6C634300081B0033000000000000000000000000000000000000 ",
              "sourceMap": "1532:11312:11:-:0;;;;;;;;;-1:-1:-1;1532:11312:11;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;:::i;:::-;;:::o;2158:98::-;2212:13;;:::i;:::-;2244:5;2237:12;2244:5;2237:12;:::i;:::-;;:::o;1532:11312::-;;;:::o;4444:197::-;4606:6;4444:197;4527:4;;:::i;:::-;4559:12;;;:::i;:::-;4597:7;4606:6;;;:::i;:::-;4630:4;4623:11;:::o;1532:11312::-;;;:::o;:::-;;;;:::o;:::-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;3255:106::-;3316:7;;:::i;:::-;3342:12;;;;:::i;:::-;3335:19;:::o;5203:256::-;;5424:6;5203:256;5300:4;;:::i;:::-;5334:12;5387:6;5334:12;;:::i;:::-;5372:4;5378:7;5387:6;;;:::i;:::-;5420:2;5424:6;;;:::i;:::-;5448:4;5441:11;:::o;1532:11312::-;;;:::o;:::-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;3104:91::-;3162:5;;:::i;:::-;3186:2;3179:9;3186:2;3179:9;:::i;:::-;;:::o;1532:11312::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;:::o;:::-;;:::i;5854:234::-;6021:38;5854:234;5942:4;;:::i;:::-;5974:12;6021:38;5974:12;;:::i;:::-;6005:5;6021:25;6005:5;6012:7;;6031:5;6021:25;:::i;:::-;:38;:::i;:::-;;;:::i;:::-;6077:4;6070:11;:::o;1532:11312::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;:::o;3419:125::-;3519:18;;3419:125;3493:7;;:::i;:::-;3519:9;;:18;:::i;:::-;;:::i;:::-;3512:25;:::o;2369:102::-;2425:13;;:::i;:::-;2457:7;2450:14;2457:7;2450:14;:::i;:::-;;:::o;1532:11312::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;:::o;6575:427::-;6928:34;6575:427;6668:4;;:::i;:::-;6700:12;6928:34;6700:12;;:::i;:::-;6759:5;6749:25;6759:5;6766:7;6749:25;;:::i;:::-;6792:16;6784:85;6792:16;:35;;6812:15;6792:35;:::i;:::-;;;:::i;:::-;;;6784:85;:::i;:::-;6919:7;6928:16;:34;:::i;:::-;;;:::i;:::-;6991:4;6984:11;:::o;3740:189::-;3894:6;3740:189;3819:4;;:::i;:::-;3851:12;;;:::i;:::-;3890:2;3894:6;;;:::i;:::-;3918:4;3911:11;:::o;1532:11312::-;;;;;:::i;:::-;;;;;;;;;:::o;3987:149::-;4102:27;3987:149;4102:18;:27;3987:149;4076:7;;:::i;:::-;4102:11;;:18;:::i;:::-;:27;:::i;:::-;;:::i;:::-;4095:34;:::o;1532:11312::-;;;:::o;640:96:15:-;693:7;;:::i;:::-;719:10;;712:17;:::o;1532:11312:11:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;10457:340::-;;;;10550:68;10558:5;:19;;10567:10;10575:1;10567:10;:::i;:::-;10558:19;:::i;:::-;;;:::i;:::-;;;10550:68;:::i;:::-;10628;10636:7;:21;;10647:10;10655:1;10647:10;:::i;:::-;10636:21;:::i;:::-;;;:::i;:::-;;;10628:68;:::i;:::-;10707:36;10737:6;10707:27;:18;:11;10719:5;10707:18;;:::i;:::-;10726:7;10707:27;;:::i;:::-;:36;:::i;:::-;10774:7;10783:6;10758:32;;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;;:::i;:::-;;;;10457:340::o;1532:11312::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;11078:411;11205:25;11215:5;11222:7;11205:25;;:::i;:::-;11244:16;;:37;;1532:11312;;11244:37;:::i;:::-;;;:::i;:::-;;11240:243;;11078:411;;;;;:::o;11240:243::-;11432:25;11305:16;11432:25;11305:16;11297:68;11305:16;:26;;11325:6;11305:26;:::i;:::-;;;:::i;:::-;;;11297:68;:::i;:::-;11423:7;11432:16;:25;:::i;:::-;;;:::i;:::-;11240:243;;;;;;1532:11312;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;:::o;7456:788::-;;;;7544:68;7552:4;:18;;7560:10;7568:1;7560:10;:::i;:::-;7552:18;:::i;:::-;;;:::i;:::-;;;7544:68;:::i;:::-;7622:64;7630:2;:16;;7636:10;7644:1;7636:10;:::i;:::-;7630:16;:::i;:::-;;;:::i;:::-;;;7622:64;:::i;:::-;7899:38;7917:20;7768:15;;:9;7778:4;7768:15;;:::i;:::-;;:::i;:::-;7793:72;7801:11;:21;;7816:6;7801:21;:::i;:::-;;;:::i;:::-;;;7793:72;:::i;:::-;7931:6;7917:20;;:::i;:::-;7899:15;:9;7909:4;7899:15;;:::i;:::-;:38;:::i;:::-;8114:23;8131:6;8114:23;:13;:9;8124:2;8114:13;;:::i;:::-;:23;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;8178:2;8182:6;8163:26;;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;;:::i;:::-;;;;7456:788::o"
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "decimals()": "313ce567",
              "decreaseAllowance(address,uint256)": "a457c2d7",
              "increaseAllowance(address,uint256)": "39509351",
              "name()": "06fdde03",
              "symbol()": "95d89b41",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "IERC20": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface of the ERC20 standard as defined in the EIP.",
            "events": {
              "Approval(address,address,uint256)": {
                "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
              },
              "Transfer(address,address,uint256)": {
                "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
              }
            },
            "kind": "dev",
            "methods": {
              "allowance(address,address)": {
                "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
              },
              "approve(address,uint256)": {
                "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
              },
              "balanceOf(address)": {
                "details": "Returns the amount of tokens owned by `account`."
              },
              "totalSupply()": {
                "details": "Returns the amount of tokens in existence."
              },
              "transfer(address,uint256)": {
                "details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
              },
              "transferFrom(address,address,uint256)": {
                "details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "IERC20Metadata": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
            "events": {
              "Approval(address,address,uint256)": {
                "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
              },
              "Transfer(address,address,uint256)": {
                "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
              }
            },
            "kind": "dev",
            "methods": {
              "allowance(address,address)": {
                "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
              },
              "approve(address,uint256)": {
                "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
              },
              "balanceOf(address)": {
                "details": "Returns the amount of tokens owned by `account`."
              },
              "decimals()": {
                "details": "Returns the decimals places of the token."
              },
              "name()": {
                "details": "Returns the name of the token."
              },
              "symbol()": {
                "details": "Returns the symbol of the token."
              },
              "totalSupply()": {
                "details": "Returns the amount of tokens in existence."
              },
              "transfer(address,uint256)": {
                "details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
              },
              "transferFrom(address,address,uint256)": {
                "details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "decimals()": "313ce567",
              "name()": "06fdde03",
              "symbol()": "95d89b41",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "Address": {
          "abi": [],
          "devdoc": {
            "details": "Collection of functions related to the address type",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220d3abc0af33203caad0ad432e6222e8d6d0ceccd4e030fc68e3979c41224f1fb664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 0xAB 0xC0 0xAF CALLER KECCAK256 EXTCODECOPY 0xAA 0xD0 0xAD NUMBER 0x2E PUSH3 0x22E8D6 0xD0 0xCE 0xCC 0xD4 0xE0 ADDRESS 0xFC PUSH9 0xE3979C41224F1FB664 PUSH20 0x6F6C634300081B00330000000000000000000000 ",
              "sourceMap": "194:9169:14:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220d3abc0af33203caad0ad432e6222e8d6d0ceccd4e030fc68e3979c41224f1fb664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD3 0xAB 0xC0 0xAF CALLER KECCAK256 EXTCODECOPY 0xAA 0xD0 0xAD NUMBER 0x2E PUSH3 0x22E8D6 0xD0 0xCE 0xCC 0xD4 0xE0 ADDRESS 0xFC PUSH9 0xE3979C41224F1FB664 PUSH20 0x6F6C634300081B00330000000000000000000000 ",
              "sourceMap": "194:9169:14:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "Context": {
          "abi": [],
          "devdoc": {
            "details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/Create2.sol": {
        "Create2": {
          "abi": [],
          "devdoc": {
            "details": "Helper to make usage of the `CREATE2` EVM opcode easier and safer. `CREATE2` can be used to compute in advance the address where a smart contract will be deployed, which allows for interesting new mechanisms known as 'counterfactual interactions'. See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more information.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea264697066735822122077e98127935e88f2846383618bee3670867107bbcac7fd9a50b5a7c0801ff5a864736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0xE98127935E88F2846383618BEE3670867107BBCAC7FD9A50 0xB5 0xA7 0xC0 DUP1 0x1F CREATE2 0xA8 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "494:3457:16:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea264697066735822122077e98127935e88f2846383618bee3670867107bbcac7fd9a50b5a7c0801ff5a864736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0xE98127935E88F2846383618BEE3670867107BBCAC7FD9A50 0xB5 0xA7 0xC0 DUP1 0x1F CREATE2 0xA8 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "494:3457:16:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Helper to make usage of the `CREATE2` EVM opcode easier and safer. `CREATE2` can be used to compute in advance the address where a smart contract will be deployed, which allows for interesting new mechanisms known as 'counterfactual interactions'. See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more information.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Create2.sol\":\"Create2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
        "StorageSlot": {
          "abi": [],
          "devdoc": {
            "details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220fea4d0016025f5b5539ed9ba7edda868730b01b468a9222627078c87c88fd27d64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID LOG4 0xD0 ADD PUSH1 0x25 CREATE2 0xB5 MSTORE8 SWAP15 0xD9 0xBA PUSH31 0xDDA868730B01B468A9222627078C87C88FD27D64736F6C634300081B003300 ",
              "sourceMap": "1420:2685:17:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220fea4d0016025f5b5539ed9ba7edda868730b01b468a9222627078c87c88fd27d64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID LOG4 0xD0 ADD PUSH1 0x25 CREATE2 0xB5 MSTORE8 SWAP15 0xD9 0xBA PUSH31 0xDDA868730B01B468A9222627078C87C88FD27D64736F6C634300081B003300 ",
              "sourceMap": "1420:2685:17:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "Strings": {
          "abi": [],
          "devdoc": {
            "details": "String operations.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220e16e8e97b4990e0095cd8ebb32493f3de436302fe791387e70d534f04d35056664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 PUSH15 0x8E97B4990E0095CD8EBB32493F3DE4 CALLDATASIZE ADDRESS 0x2F 0xE7 SWAP2 CODESIZE PUSH31 0x70D534F04D35056664736F6C634300081B0033000000000000000000000000 ",
              "sourceMap": "220:2559:18:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220e16e8e97b4990e0095cd8ebb32493f3de436302fe791387e70d534f04d35056664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 PUSH15 0x8E97B4990E0095CD8EBB32493F3DE4 CALLDATASIZE ADDRESS 0x2F 0xE7 SWAP2 CODESIZE PUSH31 0x70D534F04D35056664736F6C634300081B0033000000000000000000000000 ",
              "sourceMap": "220:2559:18:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "ERC165": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
            "kind": "dev",
            "methods": {
              "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "IERC165": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
            "kind": "dev",
            "methods": {
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "Math": {
          "abi": [],
          "devdoc": {
            "details": "Standard math utilities missing in the Solidity language.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220676481f5aa8789a1b0bf561f5296bfb25a92e9cad555d352e316bee4902555b764736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH8 0x6481F5AA8789A1B0 0xBF JUMP 0x1F MSTORE SWAP7 0xBF 0xB2 GAS SWAP3 0xE9 0xCA 0xD5 SSTORE 0xD3 MSTORE 0xE3 AND 0xBE 0xE4 SWAP1 0x25 SSTORE 0xB7 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "202:12582:21:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220676481f5aa8789a1b0bf561f5296bfb25a92e9cad555d352e316bee4902555b764736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH8 0x6481F5AA8789A1B0 0xBF JUMP 0x1F MSTORE SWAP7 0xBF 0xB2 GAS SWAP3 0xE9 0xCA 0xD5 SSTORE 0xD3 MSTORE 0xE3 AND 0xBE 0xE4 SWAP1 0x25 SSTORE 0xB7 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "202:12582:21:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "SignedMath": {
          "abi": [],
          "devdoc": {
            "details": "Standard signed math utilities missing in the Solidity language.",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea264697066735822122091e9af2458177a811dc5c7789df16dc4acd95f66f4cac72f86aafa46ede9435264736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 0xE9 0xAF 0x24 PC OR PUSH27 0x811DC5C7789DF16DC4ACD95F66F4CAC72F86AAFA46EDE943526473 PUSH16 0x6C634300081B00330000000000000000 ",
              "sourceMap": "215:1047:22:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea264697066735822122091e9af2458177a811dc5c7789df16dc4acd95f66f4cac72f86aafa46ede9435264736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 0xE9 0xAF 0x24 PC OR PUSH27 0x811DC5C7789DF16DC4ACD95F66F4CAC72F86AAFA46EDE943526473 PUSH16 0x6C634300081B00330000000000000000 ",
              "sourceMap": "215:1047:22:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
        "EnumerableSet": {
          "abi": [],
          "devdoc": {
            "details": "Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====",
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea26469706673582212202b929ee990d5c52293f80d23bfb8e62ce8663222af518d55741c676314b72d1964736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B SWAP3 SWAP15 0xE9 SWAP1 0xD5 0xC5 0x22 SWAP4 0xF8 0xD 0x23 0xBF 0xB8 0xE6 0x2C 0xE8 PUSH7 0x3222AF518D5574 SHR PUSH8 0x6314B72D1964736F PUSH13 0x634300081B0033000000000000 ",
              "sourceMap": "1329:11630:23:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea26469706673582212202b929ee990d5c52293f80d23bfb8e62ce8663222af518d55741c676314b72d1964736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B SWAP3 SWAP15 0xE9 SWAP1 0xD5 0xC5 0x22 SWAP4 0xF8 0xD 0x23 0xBF 0xB8 0xE6 0x2C 0xE8 PUSH7 0x3222AF518D5574 SHR PUSH8 0x6314B72D1964736F PUSH13 0x634300081B0033000000000000 ",
              "sourceMap": "1329:11630:23:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol": {
        "LibAttestation": {
          "abi": [],
          "devdoc": {
            "author": "Michael Standen",
            "kind": "dev",
            "methods": {},
            "title": "LibAttestation",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220bd25df253d044562c56b7ce685e9cf01fd41e647520276a7146d198ffafe523e64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD 0x25 0xDF 0x25 RETURNDATASIZE DIV GASLIMIT PUSH3 0xC56B7C 0xE6 DUP6 0xE9 0xCF ADD REVERT COINBASE 0xE6 SELFBALANCE MSTORE MUL PUSH23 0xA7146D198FFAFE523E64736F6C634300081B0033000000 ",
              "sourceMap": "1023:3579:24:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220bd25df253d044562c56b7ce685e9cf01fd41e647520276a7146d198ffafe523e64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD 0x25 0xDF 0x25 RETURNDATASIZE DIV GASLIMIT PUSH3 0xC56B7C 0xE6 DUP6 0xE9 0xCF ADD REVERT COINBASE 0xE6 SELFBALANCE MSTORE MUL PUSH23 0xA7146D198FFAFE523E64736F6C634300081B0033000000 ",
              "sourceMap": "1023:3579:24:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Michael Standen\",\"kind\":\"dev\",\"methods\":{},\"title\":\"LibAttestation\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library for attestation management\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":\"LibAttestation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "notice": "Library for attestation management",
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol": {
        "ISignalsImplicitMode": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "delegateCall",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "onlyFallback",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "behaviorOnError",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Payload.Call",
                  "name": "call",
                  "type": "tuple"
                }
              ],
              "name": "acceptImplicitRequest",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "magic",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Agustin Aguilar, Michael Standen",
            "kind": "dev",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "params": {
                  "attestation": "The attestation data",
                  "call": "The call to validate",
                  "wallet": "The wallet's address"
                },
                "returns": {
                  "magic": "The hash of the implicit request if valid"
                }
              }
            },
            "title": "ISignalsImplicitMode",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": "9d043a66"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delegateCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onlyFallback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"behaviorOnError\",\"type\":\"uint256\"}],\"internalType\":\"struct Payload.Call\",\"name\":\"call\",\"type\":\"tuple\"}],\"name\":\"acceptImplicitRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"magic\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Agustin Aguilar, Michael Standen\",\"kind\":\"dev\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"params\":{\"attestation\":\"The attestation data\",\"call\":\"The call to validate\",\"wallet\":\"The wallet's address\"},\"returns\":{\"magic\":\"The hash of the implicit request if valid\"}}},\"title\":\"ISignalsImplicitMode\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"notice\":\"Determines if an implicit request is valid\"}},\"notice\":\"Interface for the contracts that support implicit mode validation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":\"ISignalsImplicitMode\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "notice": "Determines if an implicit request is valid"
              }
            },
            "notice": "Interface for the contracts that support implicit mode validation",
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol": {
        "Payload": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint8",
                  "name": "kind",
                  "type": "uint8"
                }
              ],
              "name": "InvalidKind",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "BEHAVIOR_ABORT_ON_ERROR",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "BEHAVIOR_IGNORE_ERROR",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "BEHAVIOR_REVERT_ON_ERROR",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "KIND_CONFIG_UPDATE",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "KIND_DIGEST",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "KIND_MESSAGE",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "KIND_TRANSACTIONS",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Agustin Aguilar, Michael Standen, William Hua",
            "kind": "dev",
            "methods": {},
            "stateVariables": {
              "CALLS_TYPEHASH": {
                "details": "keccak256(\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\")"
              },
              "CALL_TYPEHASH": {
                "details": "keccak256(\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\")"
              },
              "CONFIG_UPDATE_TYPEHASH": {
                "details": "keccak256(\"ConfigUpdate(bytes32 imageHash,address[] wallets)\")"
              },
              "EIP712_DOMAIN_NAME_SEQUENCE": {
                "details": "keccak256(\"Sequence Wallet\")"
              },
              "EIP712_DOMAIN_TYPEHASH": {
                "details": "keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")"
              },
              "EIP712_DOMAIN_VERSION_SEQUENCE": {
                "details": "keccak256(\"3\")"
              },
              "MESSAGE_TYPEHASH": {
                "details": "keccak256(\"Message(bytes message,address[] wallets)\")"
              }
            },
            "title": "Payload",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 36,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 42,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234602057600e6024565b61036661003082393081505061036690f35b602a565b60405190565b600080fdfe60806040526004361015610013575b61032b565b61001e60003561008d565b80630739d59a14610088578063075a3d2d146100835780633d5c1f9b1461007e578063420b0c25146100795780634a7d2aa0146100745780634e5f57151461006f5763b570180a0361000e57610300565b61029e565b61025b565b610218565b6101d5565b610173565b610111565b60e01c90565b60405190565b600080fd5b60009103126100a957565b610099565b90565b60ff1690565b90565b6100ce6100c96100d3926100ae565b6100b7565b6100b1565b90565b6100e060026100ba565b90565b6100eb6100d6565b90565b6100f7906100b1565b9052565b919061010f906000602085019401906100ee565b565b61011c36600461009e565b6101386101276100e3565b61012f610093565b918291826100fb565b0390f35b90565b61015361014e6101589261013c565b6100b7565b6100b1565b90565b610165600061013f565b90565b61017061015b565b90565b61017e36600461009e565b61019a610189610168565b610191610093565b918291826100fb565b0390f35b90565b6101b56101b06101ba9261019e565b6100b7565b6100b1565b90565b6101c760016101a1565b90565b6101d26101bd565b90565b6101e036600461009e565b6101fc6101eb6101ca565b6101f3610093565b918291826100fb565b0390f35b61020a60026100ba565b90565b610215610200565b90565b61022336600461009e565b61023f61022e61020d565b610236610093565b918291826100fb565b0390f35b61024d600061013f565b90565b610258610243565b90565b61026636600461009e565b610282610271610250565b610279610093565b918291826100fb565b0390f35b61029060016101a1565b90565b61029b610286565b90565b6102a936600461009e565b6102c56102b4610293565b6102bc610093565b918291826100fb565b0390f35b90565b6102e06102db6102e5926102c9565b6100b7565b6100b1565b90565b6102f260036102cc565b90565b6102fd6102e8565b90565b61030b36600461009e565b6103276103166102f5565b61031e610093565b918291826100fb565b0390f35b600080fdfea2646970667358221220714f957bdbb5bed9ebb923b2f3ca9dcba81930f3a808fefe68fd60002a4b772364736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x20 JUMPI PUSH1 0xE PUSH1 0x24 JUMP JUMPDEST PUSH2 0x366 PUSH2 0x30 DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH2 0x366 SWAP1 RETURN JUMPDEST PUSH1 0x2A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x32B JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x8D JUMP JUMPDEST DUP1 PUSH4 0x739D59A EQ PUSH2 0x88 JUMPI DUP1 PUSH4 0x75A3D2D EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x3D5C1F9B EQ PUSH2 0x7E JUMPI DUP1 PUSH4 0x420B0C25 EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x4A7D2AA0 EQ PUSH2 0x74 JUMPI DUP1 PUSH4 0x4E5F5715 EQ PUSH2 0x6F JUMPI PUSH4 0xB570180A SUB PUSH2 0xE JUMPI PUSH2 0x300 JUMP JUMPDEST PUSH2 0x29E JUMP JUMPDEST PUSH2 0x25B JUMP JUMPDEST PUSH2 0x218 JUMP JUMPDEST PUSH2 0x1D5 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x111 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0xA9 JUMPI JUMP JUMPDEST PUSH2 0x99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCE PUSH2 0xC9 PUSH2 0xD3 SWAP3 PUSH2 0xAE JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE0 PUSH1 0x2 PUSH2 0xBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xEB PUSH2 0xD6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF7 SWAP1 PUSH2 0xB1 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x10F SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0xEE JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x138 PUSH2 0x127 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x12F PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x153 PUSH2 0x14E PUSH2 0x158 SWAP3 PUSH2 0x13C JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x165 PUSH1 0x0 PUSH2 0x13F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x15B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17E CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x19A PUSH2 0x189 PUSH2 0x168 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x1B0 PUSH2 0x1BA SWAP3 PUSH2 0x19E JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1C7 PUSH1 0x1 PUSH2 0x1A1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D2 PUSH2 0x1BD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x1FC PUSH2 0x1EB PUSH2 0x1CA JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x20A PUSH1 0x2 PUSH2 0xBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x215 PUSH2 0x200 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x223 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x23F PUSH2 0x22E PUSH2 0x20D JUMP JUMPDEST PUSH2 0x236 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x24D PUSH1 0x0 PUSH2 0x13F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x258 PUSH2 0x243 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x282 PUSH2 0x271 PUSH2 0x250 JUMP JUMPDEST PUSH2 0x279 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x290 PUSH1 0x1 PUSH2 0x1A1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x29B PUSH2 0x286 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x2C5 PUSH2 0x2B4 PUSH2 0x293 JUMP JUMPDEST PUSH2 0x2BC PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2DB PUSH2 0x2E5 SWAP3 PUSH2 0x2C9 JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F2 PUSH1 0x3 PUSH2 0x2CC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2FD PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x327 PUSH2 0x316 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x31E PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x4F957BDBB5BED9EBB923B2F3CA9DCBA81930 RETURN 0xA8 ADDMOD INVALID INVALID PUSH9 0xFD60002A4B77236473 PUSH16 0x6C634300081B00330000000000000000 ",
              "sourceMap": "275:9850:26:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode": {
                  "entryPoint": 158,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_tuple_uint8": {
                  "entryPoint": 251,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_uint8": {
                  "entryPoint": 238,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "allocate_unbounded": {
                  "entryPoint": 147,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 414,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by_1": {
                  "entryPoint": 174,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by": {
                  "entryPoint": 316,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by_1": {
                  "entryPoint": 713,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint8": {
                  "entryPoint": 177,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_BEHAVIOR_ABORT_ON_ERROR": {
                  "entryPoint": 512,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_BEHAVIOR_IGNORE_ERROR": {
                  "entryPoint": 579,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_BEHAVIOR_REVERT_ON_ERROR": {
                  "entryPoint": 646,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_KIND_CONFIG_UPDATE": {
                  "entryPoint": 214,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_KIND_DIGEST": {
                  "entryPoint": 744,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_KIND_MESSAGE": {
                  "entryPoint": 445,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_KIND_TRANSACTIONS": {
                  "entryPoint": 347,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_rational_0_by_1_to_uint8": {
                  "entryPoint": 319,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_2_by_1_to_uint8": {
                  "entryPoint": 186,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint8": {
                  "entryPoint": 716,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint8": {
                  "entryPoint": 417,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "external_fun_BEHAVIOR_ABORT_ON_ERROR": {
                  "entryPoint": 536,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_BEHAVIOR_IGNORE_ERROR": {
                  "entryPoint": 603,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_BEHAVIOR_REVERT_ON_ERROR": {
                  "entryPoint": 670,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_KIND_CONFIG_UPDATE": {
                  "entryPoint": 273,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_KIND_DIGEST": {
                  "entryPoint": 768,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_KIND_MESSAGE": {
                  "entryPoint": 469,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_KIND_TRANSACTIONS": {
                  "entryPoint": 371,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "getter_fun_BEHAVIOR_ABORT_ON_ERROR": {
                  "entryPoint": 525,
                  "id": 4635,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_BEHAVIOR_IGNORE_ERROR": {
                  "entryPoint": 592,
                  "id": 4627,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_BEHAVIOR_REVERT_ON_ERROR": {
                  "entryPoint": 659,
                  "id": 4631,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_KIND_CONFIG_UPDATE": {
                  "entryPoint": 227,
                  "id": 4619,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_KIND_DIGEST": {
                  "entryPoint": 757,
                  "id": 4623,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_KIND_MESSAGE": {
                  "entryPoint": 458,
                  "id": 4615,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "getter_fun_KIND_TRANSACTIONS": {
                  "entryPoint": 360,
                  "id": 4611,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 183,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": 811,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 153,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "shift_right_unsigned": {
                  "entryPoint": 141,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "60806040526004361015610013575b61032b565b61001e60003561008d565b80630739d59a14610088578063075a3d2d146100835780633d5c1f9b1461007e578063420b0c25146100795780634a7d2aa0146100745780634e5f57151461006f5763b570180a0361000e57610300565b61029e565b61025b565b610218565b6101d5565b610173565b610111565b60e01c90565b60405190565b600080fd5b60009103126100a957565b610099565b90565b60ff1690565b90565b6100ce6100c96100d3926100ae565b6100b7565b6100b1565b90565b6100e060026100ba565b90565b6100eb6100d6565b90565b6100f7906100b1565b9052565b919061010f906000602085019401906100ee565b565b61011c36600461009e565b6101386101276100e3565b61012f610093565b918291826100fb565b0390f35b90565b61015361014e6101589261013c565b6100b7565b6100b1565b90565b610165600061013f565b90565b61017061015b565b90565b61017e36600461009e565b61019a610189610168565b610191610093565b918291826100fb565b0390f35b90565b6101b56101b06101ba9261019e565b6100b7565b6100b1565b90565b6101c760016101a1565b90565b6101d26101bd565b90565b6101e036600461009e565b6101fc6101eb6101ca565b6101f3610093565b918291826100fb565b0390f35b61020a60026100ba565b90565b610215610200565b90565b61022336600461009e565b61023f61022e61020d565b610236610093565b918291826100fb565b0390f35b61024d600061013f565b90565b610258610243565b90565b61026636600461009e565b610282610271610250565b610279610093565b918291826100fb565b0390f35b61029060016101a1565b90565b61029b610286565b90565b6102a936600461009e565b6102c56102b4610293565b6102bc610093565b918291826100fb565b0390f35b90565b6102e06102db6102e5926102c9565b6100b7565b6100b1565b90565b6102f260036102cc565b90565b6102fd6102e8565b90565b61030b36600461009e565b6103276103166102f5565b61031e610093565b918291826100fb565b0390f35b600080fdfea2646970667358221220714f957bdbb5bed9ebb923b2f3ca9dcba81930f3a808fefe68fd60002a4b772364736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x32B JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x8D JUMP JUMPDEST DUP1 PUSH4 0x739D59A EQ PUSH2 0x88 JUMPI DUP1 PUSH4 0x75A3D2D EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x3D5C1F9B EQ PUSH2 0x7E JUMPI DUP1 PUSH4 0x420B0C25 EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x4A7D2AA0 EQ PUSH2 0x74 JUMPI DUP1 PUSH4 0x4E5F5715 EQ PUSH2 0x6F JUMPI PUSH4 0xB570180A SUB PUSH2 0xE JUMPI PUSH2 0x300 JUMP JUMPDEST PUSH2 0x29E JUMP JUMPDEST PUSH2 0x25B JUMP JUMPDEST PUSH2 0x218 JUMP JUMPDEST PUSH2 0x1D5 JUMP JUMPDEST PUSH2 0x173 JUMP JUMPDEST PUSH2 0x111 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0xA9 JUMPI JUMP JUMPDEST PUSH2 0x99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCE PUSH2 0xC9 PUSH2 0xD3 SWAP3 PUSH2 0xAE JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE0 PUSH1 0x2 PUSH2 0xBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xEB PUSH2 0xD6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF7 SWAP1 PUSH2 0xB1 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x10F SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0xEE JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x138 PUSH2 0x127 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x12F PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x153 PUSH2 0x14E PUSH2 0x158 SWAP3 PUSH2 0x13C JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x165 PUSH1 0x0 PUSH2 0x13F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x170 PUSH2 0x15B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17E CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x19A PUSH2 0x189 PUSH2 0x168 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B5 PUSH2 0x1B0 PUSH2 0x1BA SWAP3 PUSH2 0x19E JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1C7 PUSH1 0x1 PUSH2 0x1A1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D2 PUSH2 0x1BD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x1FC PUSH2 0x1EB PUSH2 0x1CA JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x20A PUSH1 0x2 PUSH2 0xBA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x215 PUSH2 0x200 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x223 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x23F PUSH2 0x22E PUSH2 0x20D JUMP JUMPDEST PUSH2 0x236 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x24D PUSH1 0x0 PUSH2 0x13F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x258 PUSH2 0x243 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x266 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x282 PUSH2 0x271 PUSH2 0x250 JUMP JUMPDEST PUSH2 0x279 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x290 PUSH1 0x1 PUSH2 0x1A1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x29B PUSH2 0x286 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x2C5 PUSH2 0x2B4 PUSH2 0x293 JUMP JUMPDEST PUSH2 0x2BC PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2DB PUSH2 0x2E5 SWAP3 PUSH2 0x2C9 JUMP JUMPDEST PUSH2 0xB7 JUMP JUMPDEST PUSH2 0xB1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F2 PUSH1 0x3 PUSH2 0x2CC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2FD PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x9E JUMP JUMPDEST PUSH2 0x327 PUSH2 0x316 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x31E PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xFB JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x4F957BDBB5BED9EBB923B2F3CA9DCBA81930 RETURN 0xA8 ADDMOD INVALID INVALID PUSH9 0xFD60002A4B77236473 PUSH16 0x6C634300081B00330000000000000000 ",
              "sourceMap": "275:9850:26:-:0;;;;;;;;;-1:-1:-1;275:9850:26;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2439:47::-;2482:4;;;:::i;:::-;2439:47;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2279:46::-;2321:4;;;:::i;:::-;2279:46;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2358:41::-;2395:4;;;:::i;:::-;2358:41;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;2819:52;2867:4;;;:::i;:::-;2819:52;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;2611:50;2657:4;;;:::i;:::-;2611:50;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;2714:53;2763:4;;;:::i;:::-;2714:53;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2520:40::-;2556:4;;;:::i;:::-;2520:40;:::o;:::-;;;:::i;:::-;;:::o;275:9850::-;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;"
            },
            "methodIdentifiers": {
              "BEHAVIOR_ABORT_ON_ERROR()": "420b0c25",
              "BEHAVIOR_IGNORE_ERROR()": "4a7d2aa0",
              "BEHAVIOR_REVERT_ON_ERROR()": "4e5f5715",
              "KIND_CONFIG_UPDATE()": "0739d59a",
              "KIND_DIGEST()": "b570180a",
              "KIND_MESSAGE()": "3d5c1f9b",
              "KIND_TRANSACTIONS()": "075a3d2d"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"kind\",\"type\":\"uint8\"}],\"name\":\"InvalidKind\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BEHAVIOR_ABORT_ON_ERROR\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BEHAVIOR_IGNORE_ERROR\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BEHAVIOR_REVERT_ON_ERROR\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KIND_CONFIG_UPDATE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KIND_DIGEST\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KIND_MESSAGE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KIND_TRANSACTIONS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Agustin Aguilar, Michael Standen, William Hua\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"CALLS_TYPEHASH\":{\"details\":\"keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\"},\"CALL_TYPEHASH\":{\"details\":\"keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\"},\"CONFIG_UPDATE_TYPEHASH\":{\"details\":\"keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\"},\"EIP712_DOMAIN_NAME_SEQUENCE\":{\"details\":\"keccak256(\\\"Sequence Wallet\\\")\"},\"EIP712_DOMAIN_TYPEHASH\":{\"details\":\"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"},\"EIP712_DOMAIN_VERSION_SEQUENCE\":{\"details\":\"keccak256(\\\"3\\\")\"},\"MESSAGE_TYPEHASH\":{\"details\":\"keccak256(\\\"Message(bytes message,address[] wallets)\\\")\"}},\"title\":\"Payload\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidKind(uint8)\":[{\"notice\":\"Error thrown when the kind is invalid\"}]},\"kind\":\"user\",\"methods\":{\"BEHAVIOR_ABORT_ON_ERROR()\":{\"notice\":\"Behavior on error: abort on error\"},\"BEHAVIOR_IGNORE_ERROR()\":{\"notice\":\"Behavior on error: ignore error\"},\"BEHAVIOR_REVERT_ON_ERROR()\":{\"notice\":\"Behavior on error: revert on error\"},\"KIND_CONFIG_UPDATE()\":{\"notice\":\"Kind of config update\"},\"KIND_DIGEST()\":{\"notice\":\"Kind of message\"},\"KIND_MESSAGE()\":{\"notice\":\"Kind of digest\"},\"KIND_TRANSACTIONS()\":{\"notice\":\"Kind of transaction\"}},\"notice\":\"Library for encoding and decoding payloads\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":\"Payload\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidKind(uint8)": [
                {
                  "notice": "Error thrown when the kind is invalid"
                }
              ]
            },
            "kind": "user",
            "methods": {
              "BEHAVIOR_ABORT_ON_ERROR()": {
                "notice": "Behavior on error: abort on error"
              },
              "BEHAVIOR_IGNORE_ERROR()": {
                "notice": "Behavior on error: ignore error"
              },
              "BEHAVIOR_REVERT_ON_ERROR()": {
                "notice": "Behavior on error: revert on error"
              },
              "KIND_CONFIG_UPDATE()": {
                "notice": "Kind of config update"
              },
              "KIND_DIGEST()": {
                "notice": "Kind of message"
              },
              "KIND_MESSAGE()": {
                "notice": "Kind of digest"
              },
              "KIND_TRANSACTIONS()": {
                "notice": "Kind of transaction"
              }
            },
            "notice": "Library for encoding and decoding payloads",
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol": {
        "LibBytes": {
          "abi": [],
          "devdoc": {
            "author": "Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)",
            "details": "These functions do not check if the input index is within the bounds of the data array.Reading out of bounds may return dirty values.",
            "kind": "dev",
            "methods": {},
            "title": "Library for reading data from bytes arrays",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 39,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601d57600e6021565b603f602d823930815050603f90f35b6027565b60405190565b600080fdfe6080604052600080fdfea2646970667358221220b886fd9282ab0a0dfa5f7e2f338fde4d1c548db31d6419208930f13c4577fe5564736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1D JUMPI PUSH1 0xE PUSH1 0x21 JUMP JUMPDEST PUSH1 0x3F PUSH1 0x2D DUP3 CODECOPY ADDRESS DUP2 POP POP PUSH1 0x3F SWAP1 RETURN JUMPDEST PUSH1 0x27 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB8 DUP7 REVERT SWAP3 DUP3 0xAB EXP 0xD STATICCALL PUSH0 PUSH31 0x2F338FDE4D1C548DB31D6419208930F13C4577FE5564736F6C634300081B00 CALLER ",
              "sourceMap": "432:3576:27:-:0;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": null,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea2646970667358221220b886fd9282ab0a0dfa5f7e2f338fde4d1c548db31d6419208930f13c4577fe5564736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB8 DUP7 REVERT SWAP3 DUP3 0xAB EXP 0xD STATICCALL PUSH0 PUSH31 0x2F338FDE4D1C548DB31D6419208930F13C4577FE5564736F6C634300081B00 CALLER ",
              "sourceMap": "432:3576:27:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\",\"details\":\"These functions do not check if the input index is within the bounds of the data array.Reading out of bounds may return dirty values.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Library for reading data from bytes arrays\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This library contains functions for reading data from bytes arrays.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":\"LibBytes\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "notice": "This library contains functions for reading data from bytes arrays.",
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol": {
        "SignalsImplicitMode": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "delegateCall",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "onlyFallback",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "behaviorOnError",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Payload.Call",
                  "name": "call",
                  "type": "tuple"
                }
              ],
              "name": "acceptImplicitRequest",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Michael Standen",
            "kind": "dev",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "params": {
                  "attestation": "The attestation data",
                  "call": "The call to validate",
                  "wallet": "The wallet's address"
                },
                "returns": {
                  "_0": "The hash of the implicit request if valid"
                }
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              }
            },
            "title": "SignalsImplicitMode",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": "9d043a66",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delegateCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onlyFallback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"behaviorOnError\",\"type\":\"uint256\"}],\"internalType\":\"struct Payload.Call\",\"name\":\"call\",\"type\":\"tuple\"}],\"name\":\"acceptImplicitRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Standen\",\"kind\":\"dev\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"params\":{\"attestation\":\"The attestation data\",\"call\":\"The call to validate\",\"wallet\":\"The wallet's address\"},\"returns\":{\"_0\":\"The hash of the implicit request if valid\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"SignalsImplicitMode\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"notice\":\"Determines if an implicit request is valid\"}},\"notice\":\"Base contract for implicit mode validation by project\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":\"SignalsImplicitMode\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IImplicitProjectValidation } from \\\"../registry/IImplicitProjectValidation.sol\\\";\\n\\nimport { ERC165, IERC165 } from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\nimport { ISignalsImplicitMode } from \\\"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\\\";\\nimport { Payload } from \\\"sequence-v3/src/modules/Payload.sol\\\";\\n\\n/// @title SignalsImplicitMode\\n/// @author Michael Standen\\n/// @notice Base contract for implicit mode validation by project\\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\\n\\n  IImplicitProjectValidation internal _validator;\\n  bytes32 internal _projectId;\\n\\n  /// @notice Initialize implicit mode validation\\n  /// @param validator The IImplicitProjectValidation address\\n  /// @param projectId The project id\\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\\n    _validator = IImplicitProjectValidation(validator);\\n    _projectId = projectId;\\n  }\\n\\n  /// @inheritdoc ISignalsImplicitMode\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32) {\\n    _validateImplicitRequest(wallet, attestation, call);\\n    return _validator.validateAttestation(wallet, attestation, _projectId);\\n  }\\n\\n  /// @notice Validates an implicit request\\n  /// @dev Optional hook for additional validation of the implicit requests\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  function _validateImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) internal view virtual { }\\n\\n  /// @inheritdoc IERC165\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd9107be2460f7f7ec4bdfefc3d10c79aa92b9285e1b12a75cb2a8d17b150a2ec\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "notice": "Determines if an implicit request is valid"
              }
            },
            "notice": "Base contract for implicit mode validation by project",
            "version": 1
          }
        }
      },
      "lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol": {
        "IImplicitProjectValidation": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidRedirectUrl",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes32",
                  "name": "projectId",
                  "type": "bytes32"
                }
              ],
              "name": "validateAttestation",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "author": "Michael Standen",
            "kind": "dev",
            "methods": {
              "validateAttestation(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),bytes32)": {
                "params": {
                  "attestation": "The attestation",
                  "projectId": "The project id",
                  "wallet": "The wallet address"
                },
                "returns": {
                  "_0": "magic The attestation magic bytes for the wallet address"
                }
              }
            },
            "title": "IImplicitProjectValidation",
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "validateAttestation(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),bytes32)": "3808a90b"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidRedirectUrl\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"validateAttestation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Standen\",\"kind\":\"dev\",\"methods\":{\"validateAttestation(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),bytes32)\":{\"params\":{\"attestation\":\"The attestation\",\"projectId\":\"The project id\",\"wallet\":\"The wallet address\"},\"returns\":{\"_0\":\"magic The attestation magic bytes for the wallet address\"}}},\"title\":\"IImplicitProjectValidation\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidRedirectUrl()\":[{\"notice\":\"Invalid redirect url error\"}]},\"kind\":\"user\",\"methods\":{\"validateAttestation(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),bytes32)\":{\"notice\":\"Check if a project has a code\"}},\"notice\":\"Interface for contracts supporting validation of implicit sessions for projects\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":\"IImplicitProjectValidation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidRedirectUrl()": [
                {
                  "notice": "Invalid redirect url error"
                }
              ]
            },
            "kind": "user",
            "methods": {
              "validateAttestation(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),bytes32)": {
                "notice": "Check if a project has a code"
              }
            },
            "notice": "Interface for contracts supporting validation of implicit sessions for projects",
            "version": 1
          }
        }
      },
      "src/proxies/SequenceProxyFactory.sol": {
        "SequenceProxyFactory": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "beacon",
              "outputs": [
                {
                  "internalType": "contract UpgradeableBeacon",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "upgradeBeacon",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "The factory owner is able to upgrade the beacon implementation.Proxy deployers are able to override the beacon reference with their own.",
            "kind": "dev",
            "methods": {
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              },
              "upgradeBeacon(address)": {
                "params": {
                  "implementation": "The new beacon implementation."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "beacon()": "59659e90",
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b",
              "upgradeBeacon(address)": "1bce4583"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beacon\",\"outputs\":[{\"internalType\":\"contract UpgradeableBeacon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgradeBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The factory owner is able to upgrade the beacon implementation.Proxy deployers are able to override the beacon reference with their own.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeBeacon(address)\":{\"params\":{\"implementation\":\"The new beacon implementation.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"upgradeBeacon(address)\":{\"notice\":\"Upgrades the beacon implementation.\"}},\"notice\":\"An proxy factory that deploys upgradeable beacon proxies.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/SequenceProxyFactory.sol\":\"SequenceProxyFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/SequenceProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport {\\n    ITransparentUpgradeableBeaconProxy,\\n    TransparentUpgradeableBeaconProxy\\n} from \\\"./TransparentUpgradeableBeaconProxy.sol\\\";\\n\\nimport { Ownable } from \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport { UpgradeableBeacon } from \\\"openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport { Create2 } from \\\"openzeppelin-contracts/contracts/utils/Create2.sol\\\";\\n\\n/**\\n * An proxy factory that deploys upgradeable beacon proxies.\\n * @dev The factory owner is able to upgrade the beacon implementation.\\n * @dev Proxy deployers are able to override the beacon reference with their own.\\n */\\nabstract contract SequenceProxyFactory is Ownable {\\n\\n    UpgradeableBeacon public beacon;\\n\\n    /**\\n     * Initialize a Sequence Proxy Factory.\\n     * @param implementation The initial beacon implementation.\\n     * @param factoryOwner The owner of the factory.\\n     */\\n    function _initialize(address implementation, address factoryOwner) internal {\\n        beacon = new UpgradeableBeacon(implementation);\\n        Ownable._transferOwnership(factoryOwner);\\n    }\\n\\n    /**\\n     * Deploys and initializes a new proxy instance.\\n     * @param _salt The deployment salt.\\n     * @param _proxyOwner The owner of the proxy.\\n     * @param _data The initialization data.\\n     * @return proxyAddress The address of the deployed proxy.\\n     */\\n    function _createProxy(\\n        bytes32 _salt,\\n        address _proxyOwner,\\n        bytes memory _data\\n    ) internal returns (address proxyAddress) {\\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\\n        bytes memory bytecode = type(TransparentUpgradeableBeaconProxy).creationCode;\\n\\n        proxyAddress = Create2.deploy(0, saltedHash, bytecode);\\n        ITransparentUpgradeableBeaconProxy(payable(proxyAddress)).initialize(_proxyOwner, address(beacon), _data);\\n    }\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param _salt The deployment salt.\\n     * @param _proxyOwner The owner of the proxy.\\n     * @return proxy The expected address of the deployed proxy.\\n     */\\n    function _computeProxyAddress(\\n        bytes32 _salt,\\n        address _proxyOwner,\\n        bytes memory _data\\n    ) internal view returns (address) {\\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\\n        bytes32 bytecodeHash = keccak256(type(TransparentUpgradeableBeaconProxy).creationCode);\\n\\n        return Create2.computeAddress(saltedHash, bytecodeHash);\\n    }\\n\\n    /**\\n     * Upgrades the beacon implementation.\\n     * @param implementation The new beacon implementation.\\n     */\\n    function upgradeBeacon(\\n        address implementation\\n    ) public onlyOwner {\\n        beacon.upgradeTo(implementation);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1cfe45a8e44b7a1b8f11631da9bdd1420fe040e2322ca725d644fbb26813de73\",\"license\":\"Apache-2.0\"},\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { BeaconProxy, Proxy } from \\\"./openzeppelin/BeaconProxy.sol\\\";\\nimport { ERC1967Proxy, TransparentUpgradeableProxy } from \\\"./openzeppelin/TransparentUpgradeableProxy.sol\\\";\\n\\ninterface ITransparentUpgradeableBeaconProxy {\\n\\n    function initialize(address admin, address beacon, bytes memory data) external;\\n\\n}\\n\\nerror InvalidInitialization();\\n\\n/**\\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * The proxy selectors are:\\n * - 0xcf7a1d77: initialize\\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\\n */\\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\\n\\n    /**\\n     * Decode the initialization data from the msg.data and call the initialize function.\\n     */\\n    function _dispatchInitialize() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\\n        initialize(admin, beacon, data);\\n\\n        return \\\"\\\";\\n    }\\n\\n    function initialize(address admin, address beacon, bytes memory data) internal {\\n        if (_admin() != address(0)) {\\n            // Redundant call. This function can only be called when the admin is not set.\\n            revert InvalidInitialization();\\n        }\\n        _changeAdmin(admin);\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\\n     */\\n    function _fallback() internal override(TransparentUpgradeableProxy, Proxy) {\\n        if (_getAdmin() == address(0)) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\\n                ret = _dispatchInitialize();\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    return(add(ret, 0x20), mload(ret))\\n                }\\n            }\\n            // When the admin is not set, the fallback function is used to initialize the proxy.\\n            revert InvalidInitialization();\\n        }\\n        TransparentUpgradeableProxy._fallback();\\n    }\\n\\n    /**\\n     * Returns the current implementation address.\\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\\n     */\\n    function _implementation() internal view override(ERC1967Proxy, BeaconProxy) returns (address) {\\n        address implementation = ERC1967Proxy._implementation();\\n        if (implementation != address(0)) {\\n            return implementation;\\n        }\\n        return BeaconProxy._implementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf7c7834545a955cedbe5228c3583f72fb332337dd0b4ebcd5fdb0b6504c5a8cb\",\"license\":\"Apache-2.0\"},\"src/proxies/openzeppelin/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2aa58701eaf7336890fae8a17f5769adf764beac64f3c5873199cd56abd66d0d\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "upgradeBeacon(address)": {
                "notice": "Upgrades the beacon implementation."
              }
            },
            "notice": "An proxy factory that deploys upgradeable beacon proxies.",
            "version": 1
          }
        }
      },
      "src/proxies/TransparentUpgradeableBeaconProxy.sol": {
        "ITransparentUpgradeableBeaconProxy": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "admin",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "initialize",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "initialize(address,address,bytes)": "cf7a1d77"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":\"ITransparentUpgradeableBeaconProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { BeaconProxy, Proxy } from \\\"./openzeppelin/BeaconProxy.sol\\\";\\nimport { ERC1967Proxy, TransparentUpgradeableProxy } from \\\"./openzeppelin/TransparentUpgradeableProxy.sol\\\";\\n\\ninterface ITransparentUpgradeableBeaconProxy {\\n\\n    function initialize(address admin, address beacon, bytes memory data) external;\\n\\n}\\n\\nerror InvalidInitialization();\\n\\n/**\\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * The proxy selectors are:\\n * - 0xcf7a1d77: initialize\\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\\n */\\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\\n\\n    /**\\n     * Decode the initialization data from the msg.data and call the initialize function.\\n     */\\n    function _dispatchInitialize() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\\n        initialize(admin, beacon, data);\\n\\n        return \\\"\\\";\\n    }\\n\\n    function initialize(address admin, address beacon, bytes memory data) internal {\\n        if (_admin() != address(0)) {\\n            // Redundant call. This function can only be called when the admin is not set.\\n            revert InvalidInitialization();\\n        }\\n        _changeAdmin(admin);\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\\n     */\\n    function _fallback() internal override(TransparentUpgradeableProxy, Proxy) {\\n        if (_getAdmin() == address(0)) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\\n                ret = _dispatchInitialize();\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    return(add(ret, 0x20), mload(ret))\\n                }\\n            }\\n            // When the admin is not set, the fallback function is used to initialize the proxy.\\n            revert InvalidInitialization();\\n        }\\n        TransparentUpgradeableProxy._fallback();\\n    }\\n\\n    /**\\n     * Returns the current implementation address.\\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\\n     */\\n    function _implementation() internal view override(ERC1967Proxy, BeaconProxy) returns (address) {\\n        address implementation = ERC1967Proxy._implementation();\\n        if (implementation != address(0)) {\\n            return implementation;\\n        }\\n        return BeaconProxy._implementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf7c7834545a955cedbe5228c3583f72fb332337dd0b4ebcd5fdb0b6504c5a8cb\",\"license\":\"Apache-2.0\"},\"src/proxies/openzeppelin/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2aa58701eaf7336890fae8a17f5769adf764beac64f3c5873199cd56abd66d0d\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "TransparentUpgradeableBeaconProxy": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidInitialization",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "details": "As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation, care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors. See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing]. The proxy selectors are: - 0xcf7a1d77: initialize - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy) - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy) - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy) - 0xf851a440: admin (from TransparentUpgradeableProxy) - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601c57600e6020565b61145e61002c823961145e90f35b6026565b60405190565b600080fdfe6080604052361561006b5761006b565b90565b60018060a01b031690565b90565b61003461002f6100399261000f565b61001d565b610012565b90565b61004590610020565b90565b61005190610012565b90565b606090565b63ffffffff60e01b1690565b60000190565b61007361017e565b61008e610088610083600061003c565b610048565b91610048565b0361046c5761009b610054565b5063ffffffff60e01b600035166100c16100bb63cf7a1d7760e01b610059565b91610059565b146100e357600063f92ee8a960e01b8152806100df60048201610065565b0390fd5b6100eb610401565b602081519101f35b600090565b90565b90565b60001b90565b61011861011361011d926100f8565b6100fe565b6100fb565b90565b6101497fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103610104565b90565b60001c90565b60018060a01b031690565b61016961016e9161014c565b610152565b90565b61017b905461015d565b90565b6101866100f3565b506101a2600061019c610197610120565b6105a2565b01610171565b90565b90565b90565b6101bf6101ba6101c4926101a5565b61001d565b6101a8565b90565b60405190565b600080fd5b600080fd5b909392938483116101f75784116101f2576001820201920390565b6101d2565b6101cd565b91565b600080fd5b600080fd5b61021290610012565b90565b61021e81610209565b0361022557565b600080fd5b9050359061023782610215565b565b600080fd5b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061026d90610243565b810190811067ffffffffffffffff82111761028757604052565b61024d565b9061029f6102986101c7565b9283610263565b565b67ffffffffffffffff81116102bf576102bb602091610243565b0190565b61024d565b90826000939282370152565b909291926102e56102e0826102a1565b61028c565b93818552602085019082840111610301576102ff926102c4565b565b61023e565b9080601f8301121561032457816020610321933591016102d0565b90565b610239565b9160608383031261037657610341826000850161022a565b9261034f836020830161022a565b92604082013567ffffffffffffffff81116103715761036e9201610306565b90565b610204565b6101ff565b61038f61038a61039492610012565b61001d565b610012565b90565b6103a09061037b565b90565b6103ac90610397565b90565b67ffffffffffffffff81116103cd576103c9602091610243565b0190565b61024d565b906103e46103df836103af565b61028c565b918252565b6103f360006103d2565b90565b6103fe6103e9565b90565b610409610054565b506104126105cd565b61046161045761045161044761043f61043960003661043160046101ab565b9080926101d7565b906101fc565b810190610329565b93919290926103a3565b916103a3565b91909190916105ec565b6104696103f6565b90565b3361048661048061047b61017e565b610048565b91610048565b1460001461059d57610496610054565b5063ffffffff60e01b60003516806104bd6104b7631b2ce7f360e11b610059565b91610059565b146000146104d757506104ce610817565b5b602081519101f35b806104f16104eb63278f794360e11b610059565b91610059565b1460001461050857506105026107c1565b5b6104cf565b8061052261051c6308f2839760e41b610059565b91610059565b146000146105395750610533610723565b5b610503565b8061055361054d6303e1469160e61b610059565b91610059565b1460001461056a57506105646106bf565b5b610534565b61058361057d635c60da1b60e01b610059565b91610059565b146000146105985761059361067a565b610565565b61064a565b61064a565b90565b6105b96105b46105be9261000f565b61001d565b6101a8565b90565b156105c857565b600080fd5b6105ea346105e46105de60006105a5565b916101a8565b146105c1565b565b91906105f661087a565b61061161060b610606600061003c565b610048565b91610048565b0361062d5761062261062b936108b2565b9060009161098d565b565b600063f92ee8a960e01b81528061064660048201610065565b0390fd5b610652610aa6565b610ae7565b61066090610048565b9052565b919061067890600060208501940190610657565b565b610682610054565b5061068b6105cd565b6106ad6106bc610699610aa6565b6106a16101c7565b92839160208301610664565b60208201810382520382610263565b90565b6106c7610054565b506106d06105cd565b6106f26107016106de61017e565b6106e66101c7565b92839160208301610664565b60208201810382520382610263565b90565b9060208282031261071e5761071b9160000161022a565b90565b6101ff565b61072b610054565b506107346105cd565b61077061076b61076661075e61075860003661075060046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108b2565b6107786103f6565b90565b9190916040818403126107bc57610795836000830161022a565b92602082013567ffffffffffffffff81116107b7576107b49201610306565b90565b610204565b6101ff565b6107c9610054565b5061080c6108036107fc6107f46107ee6000366107e660046101ab565b9080926101d7565b906101fc565b81019061077b565b91906103a3565b90600191610b0a565b6108146103f6565b90565b61081f610054565b506108286105cd565b61086f61085f61085a61085261084c60003661084460046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108676103f6565b600091610b0a565b6108776103f6565b90565b6108826100f3565b5061088b61017e565b90565b9160206108b09294936108a960408201966000830190610657565b0190610657565b565b6108fd906108be61017e565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f916108f56108ec6101c7565b9283928361088e565b0390a1610c4d565b565b61090890610397565b90565b5190565b6109189061037b565b90565b6109249061090f565b90565b61093090610397565b90565b60e01b90565b61094281610048565b0361094957565b600080fd5b9050519061095b82610939565b565b90602082820312610977576109749160000161094e565b90565b6101ff565b6109846101c7565b3d6000823e3d90fd5b9161099783610e30565b826109c27f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e916108ff565b906109cb6101c7565b806109d581610065565b0390a26109e18261090b565b6109f46109ee60006105a5565b916101a8565b11908115610a9e575b50610a07575b5050565b6020610a1d610a18610a339461091b565b610927565b635c60da1b90610a2b6101c7565b948592610933565b82528180610a4360048201610065565b03915afa908115610a9957610a6192600092610a69575b5090610f65565b503880610a03565b610a8b91925060203d8111610a92575b610a838183610263565b81019061095d565b9038610a5a565b503d610a79565b61097c565b9050386109fd565b610aae6100f3565b50610ab7610f85565b80610ad3610acd610ac8600061003c565b610048565b91610048565b03610ae45750610ae1610f99565b90565b90565b60008091368280378136915af43d6000803e600014610b05573d6000f35b3d6000fd5b91610b148361102f565b610b1d8261090b565b610b30610b2a60006105a5565b916101a8565b11908115610b54575b50610b43575b5050565b610b4c91610f65565b503880610b3f565b905038610b39565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b610bc06026604092610b5c565b610bc981610b65565b0190565b610be39060208101906000818303910152610bb3565b90565b15610bed57565b610bf56101c7565b62461bcd60e51b815280610c0b60048201610bcd565b0390fd5b90610c2060018060a01b03916100fe565b9181191691161790565b90565b90610c42610c3d610c49926108ff565b610c2a565b8254610c0f565b9055565b610c8f90610c7781610c70610c6a610c65600061003c565b610048565b91610048565b1415610be6565b6000610c89610c84610120565b6105a2565b01610c2d565b565b60207f7472616374000000000000000000000000000000000000000000000000000000917f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e60008201520152565b610cec6025604092610b5c565b610cf581610c91565b0190565b610d0f9060208101906000818303910152610cdf565b90565b15610d1957565b610d216101c7565b62461bcd60e51b815280610d3760048201610cf9565b0390fd5b60207f73206e6f74206120636f6e747261637400000000000000000000000000000000917f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960008201520152565b610d966030604092610b5c565b610d9f81610d3b565b0190565b610db99060208101906000818303910152610d89565b90565b15610dc357565b610dcb6101c7565b62461bcd60e51b815280610de160048201610da3565b0390fd5b90565b610dfc610df7610e0192610de5565b6100fe565b6100fb565b90565b610e2d7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50610de8565b90565b610e6e90610e45610e408261107f565b610d12565b6020610e58610e538361091b565b610927565b635c60da1b90610e666101c7565b948592610933565b82528180610e7e60048201610065565b03915afa8015610eee57610ea1610ea691610ebe94600091610ec0575b5061107f565b610dbc565b6000610eb8610eb3610e04565b6105a2565b01610c2d565b565b610ee1915060203d8111610ee7575b610ed98183610263565b81019061095d565b38610e9b565b503d610ecf565b61097c565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610f4b60276103d2565b90610f5860208301610ef3565b565b610f62610f41565b90565b90610f8291610f72610054565b5090610f7c610f5a565b916110e2565b90565b610f8d6100f3565b50610f96611160565b90565b610fa16100f3565b50610fd56020610fbf610fba610fb5611187565b61091b565b610927565b635c60da1b90610fcd6101c7565b938492610933565b82528180610fe560048201610065565b03915afa90811561102a57600091610ffc575b5090565b61101d915060203d8111611023575b6110158183610263565b81019061095d565b38610ff8565b503d61100b565b61097c565b61103881611258565b6110627fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b916108ff565b9061106b6101c7565b8061107581610065565b0390a2565b600090565b61108761107a565b503b61109c61109660006105a5565b916101a8565b1190565b906110b26110ad836102a1565b61028c565b918252565b3d6000146110d4576110c83d6110a0565b903d6000602084013e5b565b6110dc610054565b906110d2565b9091600080611112946110f3610054565b508490602081019051915af4916111086110b7565b909290919261130b565b90565b90565b61112c61112761113192611115565b6100fe565b6100fb565b90565b61115d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611118565b90565b6111686100f3565b50611184600061117e611179611134565b6105a2565b01610171565b90565b61118f6100f3565b506111ab60006111a56111a0610e04565b6105a2565b01610171565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b611209602d604092610b5c565b611212816111ae565b0190565b61122c90602081019060008183039101526111fc565b90565b1561123657565b61123e6101c7565b62461bcd60e51b81528061125460048201611216565b0390fd5b6112859061126d6112688261107f565b61122f565b600061127f61127a611134565b6105a2565b01610c2d565b565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b6112bc601d602092610b5c565b6112c581611287565b0190565b6112df90602081019060008183039101526112af565b90565b156112e957565b6112f16101c7565b62461bcd60e51b815280611307600482016112c9565b0390fd5b919290611316610054565b5060001461135c57506113288261090b565b61133b61133560006105a5565b916101a8565b14611345575b5090565b6113516113569161107f565b6112e2565b38611341565b826113d5565b5190565b60005b83811061137a575050906000910152565b806020918301518185015201611369565b6113aa6113b36020936113b8936113a181611362565b93848093610b5c565b95869101611366565b610243565b0190565b6113d2916020820191600081840391015261138b565b90565b906113df8261090b565b6113f26113ec60006105a5565b916101a8565b116000146114035750805190602001fd5b6114249061140f6101c7565b91829162461bcd60e51b8352600483016113bc565b0390fdfea2646970667358221220fb1899e61f38faa78bfbab79b8dc2fa613357c2fce2699411f9fee80b624365564736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x145E PUSH2 0x2C DUP3 CODECOPY PUSH2 0x145E SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x6B JUMPI PUSH2 0x6B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x34 PUSH2 0x2F PUSH2 0x39 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x45 SWAP1 PUSH2 0x20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x51 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x73 PUSH2 0x17E JUMP JUMPDEST PUSH2 0x8E PUSH2 0x88 PUSH2 0x83 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x46C JUMPI PUSH2 0x9B PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND PUSH2 0xC1 PUSH2 0xBB PUSH4 0xCF7A1D77 PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH2 0xE3 JUMPI PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0xDF PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xEB PUSH2 0x401 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x113 PUSH2 0x11D SWAP3 PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x149 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x104 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x16E SWAP2 PUSH2 0x14C JUMP JUMPDEST PUSH2 0x152 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17B SWAP1 SLOAD PUSH2 0x15D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1A2 PUSH1 0x0 PUSH2 0x19C PUSH2 0x197 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1BF PUSH2 0x1BA PUSH2 0x1C4 SWAP3 PUSH2 0x1A5 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x1F7 JUMPI DUP5 GT PUSH2 0x1F2 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1CD JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x212 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x21E DUP2 PUSH2 0x209 JUMP JUMPDEST SUB PUSH2 0x225 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x237 DUP3 PUSH2 0x215 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x26D SWAP1 PUSH2 0x243 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x287 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x29F PUSH2 0x298 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x263 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2BF JUMPI PUSH2 0x2BB PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2E5 PUSH2 0x2E0 DUP3 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x301 JUMPI PUSH2 0x2FF SWAP3 PUSH2 0x2C4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x23E JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x324 JUMPI DUP2 PUSH1 0x20 PUSH2 0x321 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2D0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x239 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x376 JUMPI PUSH2 0x341 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH2 0x34F DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x371 JUMPI PUSH2 0x36E SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x38F PUSH2 0x38A PUSH2 0x394 SWAP3 PUSH2 0x12 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A0 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3AC SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3CD JUMPI PUSH2 0x3C9 PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x3E4 PUSH2 0x3DF DUP4 PUSH2 0x3AF JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x0 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FE PUSH2 0x3E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x412 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x461 PUSH2 0x457 PUSH2 0x451 PUSH2 0x447 PUSH2 0x43F PUSH2 0x439 PUSH1 0x0 CALLDATASIZE PUSH2 0x431 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x329 JUMP JUMPDEST SWAP4 SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x469 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLER PUSH2 0x486 PUSH2 0x480 PUSH2 0x47B PUSH2 0x17E JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x59D JUMPI PUSH2 0x496 PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x4BD PUSH2 0x4B7 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x4D7 JUMPI POP PUSH2 0x4CE PUSH2 0x817 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0x4F1 PUSH2 0x4EB PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x508 JUMPI POP PUSH2 0x502 PUSH2 0x7C1 JUMP JUMPDEST JUMPDEST PUSH2 0x4CF JUMP JUMPDEST DUP1 PUSH2 0x522 PUSH2 0x51C PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x539 JUMPI POP PUSH2 0x533 PUSH2 0x723 JUMP JUMPDEST JUMPDEST PUSH2 0x503 JUMP JUMPDEST DUP1 PUSH2 0x553 PUSH2 0x54D PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x56A JUMPI POP PUSH2 0x564 PUSH2 0x6BF JUMP JUMPDEST JUMPDEST PUSH2 0x534 JUMP JUMPDEST PUSH2 0x583 PUSH2 0x57D PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x598 JUMPI PUSH2 0x593 PUSH2 0x67A JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5B9 PUSH2 0x5B4 PUSH2 0x5BE SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5C8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5EA CALLVALUE PUSH2 0x5E4 PUSH2 0x5DE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x5C1 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5F6 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x611 PUSH2 0x60B PUSH2 0x606 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x62D JUMPI PUSH2 0x622 PUSH2 0x62B SWAP4 PUSH2 0x8B2 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH2 0x98D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x646 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x652 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST PUSH2 0x660 SWAP1 PUSH2 0x48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x678 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x682 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x68B PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6BC PUSH2 0x699 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x6A1 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C7 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x6D0 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6F2 PUSH2 0x701 PUSH2 0x6DE PUSH2 0x17E JUMP JUMPDEST PUSH2 0x6E6 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x71E JUMPI PUSH2 0x71B SWAP2 PUSH1 0x0 ADD PUSH2 0x22A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x72B PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x734 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x770 PUSH2 0x76B PUSH2 0x766 PUSH2 0x75E PUSH2 0x758 PUSH1 0x0 CALLDATASIZE PUSH2 0x750 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x8B2 JUMP JUMPDEST PUSH2 0x778 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x7BC JUMPI PUSH2 0x795 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7B7 JUMPI PUSH2 0x7B4 SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x7C9 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x80C PUSH2 0x803 PUSH2 0x7FC PUSH2 0x7F4 PUSH2 0x7EE PUSH1 0x0 CALLDATASIZE PUSH2 0x7E6 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x77B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3A3 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x814 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x81F PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x828 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x86F PUSH2 0x85F PUSH2 0x85A PUSH2 0x852 PUSH2 0x84C PUSH1 0x0 CALLDATASIZE PUSH2 0x844 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x867 PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x877 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x882 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x88B PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x8B0 SWAP3 SWAP5 SWAP4 PUSH2 0x8A9 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8FD SWAP1 PUSH2 0x8BE PUSH2 0x17E JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x8F5 PUSH2 0x8EC PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x88E JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0xC4D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x908 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x924 SWAP1 PUSH2 0x90F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x930 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x942 DUP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x949 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x95B DUP3 PUSH2 0x939 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x977 JUMPI PUSH2 0x974 SWAP2 PUSH1 0x0 ADD PUSH2 0x94E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x984 PUSH2 0x1C7 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 PUSH2 0x997 DUP4 PUSH2 0xE30 JUMP JUMPDEST DUP3 PUSH2 0x9C2 PUSH32 0x1CF3B03A6CF19FA2BABA4DF148E9DCABEDEA7F8A5C07840E207E5C089BE95D3E SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x9CB PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x9D5 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH2 0x9E1 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x9F4 PUSH2 0x9EE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xA9E JUMPI JUMPDEST POP PUSH2 0xA07 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x20 PUSH2 0xA1D PUSH2 0xA18 PUSH2 0xA33 SWAP5 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xA2B PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xA43 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA99 JUMPI PUSH2 0xA61 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0xA69 JUMPI JUMPDEST POP SWAP1 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0xA8B SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xA92 JUMPI JUMPDEST PUSH2 0xA83 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xA5A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA79 JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x9FD JUMP JUMPDEST PUSH2 0xAAE PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xAB7 PUSH2 0xF85 JUMP JUMPDEST DUP1 PUSH2 0xAD3 PUSH2 0xACD PUSH2 0xAC8 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0xAE4 JUMPI POP PUSH2 0xAE1 PUSH2 0xF99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0xB05 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH2 0xB14 DUP4 PUSH2 0x102F JUMP JUMPDEST PUSH2 0xB1D DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0xB30 PUSH2 0xB2A PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xB54 JUMPI JUMPDEST POP PUSH2 0xB43 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xB4C SWAP2 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xB3F JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xBC0 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xBC9 DUP2 PUSH2 0xB65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xBE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xBB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xBED JUMPI JUMP JUMPDEST PUSH2 0xBF5 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC0B PUSH1 0x4 DUP3 ADD PUSH2 0xBCD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xC20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xFE JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xC42 PUSH2 0xC3D PUSH2 0xC49 SWAP3 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0xC2A JUMP JUMPDEST DUP3 SLOAD PUSH2 0xC0F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC8F SWAP1 PUSH2 0xC77 DUP2 PUSH2 0xC70 PUSH2 0xC6A PUSH2 0xC65 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ ISZERO PUSH2 0xBE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC89 PUSH2 0xC84 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7472616374000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720626561636F6E206973206E6F74206120636F6E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xCEC PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xCF5 DUP2 PUSH2 0xC91 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD0F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xCDF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xD19 JUMPI JUMP JUMPDEST PUSH2 0xD21 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xD37 PUSH1 0x4 DUP3 ADD PUSH2 0xCF9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x73206E6F74206120636F6E747261637400000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A20626561636F6E20696D706C656D656E746174696F6E2069 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xD96 PUSH1 0x30 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xD9F DUP2 PUSH2 0xD3B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xDB9 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xD89 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xDC3 JUMPI JUMP JUMPDEST PUSH2 0xDCB PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xDE1 PUSH1 0x4 DUP3 ADD PUSH2 0xDA3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDFC PUSH2 0xDF7 PUSH2 0xE01 SWAP3 PUSH2 0xDE5 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE2D PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0xDE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE6E SWAP1 PUSH2 0xE45 PUSH2 0xE40 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x20 PUSH2 0xE58 PUSH2 0xE53 DUP4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xE66 PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xE7E PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL DUP1 ISZERO PUSH2 0xEEE JUMPI PUSH2 0xEA1 PUSH2 0xEA6 SWAP2 PUSH2 0xEBE SWAP5 PUSH1 0x0 SWAP2 PUSH2 0xEC0 JUMPI JUMPDEST POP PUSH2 0x107F JUMP JUMPDEST PUSH2 0xDBC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB8 PUSH2 0xEB3 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEE1 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xEE7 JUMPI JUMPDEST PUSH2 0xED9 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xE9B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xECF JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xF4B PUSH1 0x27 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 PUSH2 0xF58 PUSH1 0x20 DUP4 ADD PUSH2 0xEF3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF62 PUSH2 0xF41 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF82 SWAP2 PUSH2 0xF72 PUSH2 0x54 JUMP JUMPDEST POP SWAP1 PUSH2 0xF7C PUSH2 0xF5A JUMP JUMPDEST SWAP2 PUSH2 0x10E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF8D PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xF96 PUSH2 0x1160 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFA1 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xFD5 PUSH1 0x20 PUSH2 0xFBF PUSH2 0xFBA PUSH2 0xFB5 PUSH2 0x1187 JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xFCD PUSH2 0x1C7 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xFE5 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x102A JUMPI PUSH1 0x0 SWAP2 PUSH2 0xFFC JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x101D SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1023 JUMPI JUMPDEST PUSH2 0x1015 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xFF8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x100B JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH2 0x1038 DUP2 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x1062 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x106B PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x1075 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1087 PUSH2 0x107A JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x109C PUSH2 0x1096 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10B2 PUSH2 0x10AD DUP4 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0x10D4 JUMPI PUSH2 0x10C8 RETURNDATASIZE PUSH2 0x10A0 JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0x10DC PUSH2 0x54 JUMP JUMPDEST SWAP1 PUSH2 0x10D2 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0x1112 SWAP5 PUSH2 0x10F3 PUSH2 0x54 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0x1108 PUSH2 0x10B7 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x130B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x112C PUSH2 0x1127 PUSH2 0x1131 SWAP3 PUSH2 0x1115 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x115D PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x1118 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1168 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1184 PUSH1 0x0 PUSH2 0x117E PUSH2 0x1179 PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x118F PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x11AB PUSH1 0x0 PUSH2 0x11A5 PUSH2 0x11A0 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1209 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x1212 DUP2 PUSH2 0x11AE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x122C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x11FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1236 JUMPI JUMP JUMPDEST PUSH2 0x123E PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1254 PUSH1 0x4 DUP3 ADD PUSH2 0x1216 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x1285 SWAP1 PUSH2 0x126D PUSH2 0x1268 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127F PUSH2 0x127A PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x12BC PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x12C5 DUP2 PUSH2 0x1287 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x12DF SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x12AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12E9 JUMPI JUMP JUMPDEST PUSH2 0x12F1 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1307 PUSH1 0x4 DUP3 ADD PUSH2 0x12C9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0x1316 PUSH2 0x54 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0x135C JUMPI POP PUSH2 0x1328 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x133B PUSH2 0x1335 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x1345 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1351 PUSH2 0x1356 SWAP2 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x12E2 JUMP JUMPDEST CODESIZE PUSH2 0x1341 JUMP JUMPDEST DUP3 PUSH2 0x13D5 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x137A JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x1369 JUMP JUMPDEST PUSH2 0x13AA PUSH2 0x13B3 PUSH1 0x20 SWAP4 PUSH2 0x13B8 SWAP4 PUSH2 0x13A1 DUP2 PUSH2 0x1362 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xB5C JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x1366 JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x13D2 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x138B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x13DF DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x13F2 PUSH2 0x13EC PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x1403 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0x1424 SWAP1 PUSH2 0x140F PUSH2 0x1C7 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x13BC JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB XOR SWAP10 0xE6 0x1F CODESIZE STATICCALL 0xA7 DUP12 0xFB 0xAB PUSH26 0xB8DC2FA613357C2FCE2699411F9FEE80B624365564736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "1165:2219:31:-:0;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode_address_fromMemory": {
                  "entryPoint": 2382,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_address_payable": {
                  "entryPoint": 554,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_address_payablet_address_payablet_bytes": {
                  "entryPoint": 809,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_decode_address_payablet_bytes": {
                  "entryPoint": 1915,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_available_length_bytes": {
                  "entryPoint": 720,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_bytes": {
                  "entryPoint": 774,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_fromMemory": {
                  "entryPoint": 2397,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_payable": {
                  "entryPoint": 1796,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 1623,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_address": {
                  "entryPoint": 2190,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 5052,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_memory_ptr": {
                  "entryPoint": 5003,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral": {
                  "entryPoint": 3321,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_3820": {
                  "entryPoint": 2995,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_9589": {
                  "entryPoint": 3295,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_972b": {
                  "entryPoint": 4604,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_cc2e": {
                  "entryPoint": 4809,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
                  "entryPoint": 4783,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f95f": {
                  "entryPoint": 3491,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8": {
                  "entryPoint": 3465,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 101,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 1636,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral": {
                  "entryPoint": 3021,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_972b": {
                  "entryPoint": 4630,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 652,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_bytes": {
                  "entryPoint": 4256,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_string": {
                  "entryPoint": 978,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 455,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_bytes": {
                  "entryPoint": 673,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_allocation_size_string": {
                  "entryPoint": 943,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_bytes": {
                  "entryPoint": 2315,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_string": {
                  "entryPoint": 4962,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 2908,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_array_index_range_access_bytes_calldata": {
                  "entryPoint": 471,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 2
                },
                "cleanup_address": {
                  "entryPoint": 72,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_address_payable": {
                  "entryPoint": 521,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes32": {
                  "entryPoint": 251,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes4": {
                  "entryPoint": 89,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 338,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by": {
                  "entryPoint": 4373,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 3557,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by_1": {
                  "entryPoint": 248,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by": {
                  "entryPoint": 421,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by_1": {
                  "entryPoint": 15,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 18,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 424,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_ADMIN_SLOT": {
                  "entryPoint": 288,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_BEACON_SLOT": {
                  "entryPoint": 3588,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_IMPLEMENTATION_SLOT": {
                  "entryPoint": 4404,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_address_payable_to_address": {
                  "entryPoint": 931,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 2303,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_contract_IBeacon": {
                  "entryPoint": 2331,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_bytes_calldata_slice_to_bytes_calldata": {
                  "entryPoint": 508,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "convert_contract_IBeacon_to_address": {
                  "entryPoint": 2343,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1_to_bytes32": {
                  "entryPoint": 3560,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 60,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_bytes32": {
                  "entryPoint": 4376,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 427,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_stringliteral_9fdc_to_string": {
                  "entryPoint": 3930,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_c5d2_to_bytes": {
                  "entryPoint": 1014,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_bytes32": {
                  "entryPoint": 260,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint256": {
                  "entryPoint": 1445,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 919,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_IBeacon": {
                  "entryPoint": 2319,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 891,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_calldata_to_memory_with_cleanup": {
                  "entryPoint": 708,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_literal_to_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398": {
                  "entryPoint": 3905,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_literal_to_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470": {
                  "entryPoint": 1001,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 4966,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 349,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_returndata": {
                  "entryPoint": 4279,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 611,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun": {
                  "entryPoint": null,
                  "id": 1032,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_": {
                  "entryPoint": null,
                  "id": 1024,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun__fallback": {
                  "entryPoint": 1132,
                  "id": 6179,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun__implementation": {
                  "entryPoint": 2726,
                  "id": 5959,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_admin": {
                  "entryPoint": 2170,
                  "id": 6324,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_changeAdmin": {
                  "entryPoint": 2226,
                  "id": 894,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_delegate": {
                  "entryPoint": 2791,
                  "id": 997,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_dispatchAdmin": {
                  "entryPoint": 1727,
                  "id": 6199,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchChangeAdmin": {
                  "entryPoint": 1827,
                  "id": 6248,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchImplementation": {
                  "entryPoint": 1658,
                  "id": 6219,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchInitialize": {
                  "entryPoint": 1025,
                  "id": 5851,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchUpgradeTo": {
                  "entryPoint": 2071,
                  "id": 6282,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchUpgradeToAndCall": {
                  "entryPoint": 1985,
                  "id": 6314,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_fallback": {
                  "entryPoint": 107,
                  "id": 5929,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_fallback_1016": {
                  "entryPoint": 1610,
                  "id": 1016,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_functionDelegateCall": {
                  "entryPoint": 3941,
                  "id": 2030,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_functionDelegateCall_2059": {
                  "entryPoint": 4322,
                  "id": 2059,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_getAddressSlot": {
                  "entryPoint": 1442,
                  "id": 2278,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getAdmin": {
                  "entryPoint": 382,
                  "id": 851,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_getBeacon": {
                  "entryPoint": 4487,
                  "id": 911,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_getImplementation": {
                  "entryPoint": 4448,
                  "id": 712,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_implementation": {
                  "entryPoint": 3993,
                  "id": 5995,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_implementation_6032": {
                  "entryPoint": 3973,
                  "id": 6032,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_initialize": {
                  "entryPoint": 1516,
                  "id": 5883,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_isContract": {
                  "entryPoint": 4223,
                  "id": 1831,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_requireZeroValue": {
                  "entryPoint": 1485,
                  "id": 6336,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_revert": {
                  "entryPoint": 5077,
                  "id": 2142,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_setAdmin": {
                  "entryPoint": 3149,
                  "id": 877,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setBeacon": {
                  "entryPoint": 3632,
                  "id": 947,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setImplementation": {
                  "entryPoint": 4696,
                  "id": 736,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeBeaconToAndCall": {
                  "entryPoint": 2445,
                  "id": 985,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_upgradeTo": {
                  "entryPoint": 4143,
                  "id": 751,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeToAndCall": {
                  "entryPoint": 2826,
                  "id": 781,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_verifyCallResultFromTarget": {
                  "entryPoint": 4875,
                  "id": 2098,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 29,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 589,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 3114,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 369,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper": {
                  "entryPoint": 1473,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral": {
                  "entryPoint": 3046,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_9589": {
                  "entryPoint": 3346,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_972b": {
                  "entryPoint": 4655,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_cc2e": {
                  "entryPoint": 4834,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_f95f": {
                  "entryPoint": 3516,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
                  "entryPoint": 569,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_46e3e63c93837e9efa638abb3b4e76ced8c11259a873f1381a0abdf6ae6a823c": {
                  "entryPoint": 466,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_7678404c0552a58cf14944d1a786cf4c81aab3563e2735cb332aee47bbb57c4a": {
                  "entryPoint": 461,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
                  "entryPoint": 574,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
                  "entryPoint": 516,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 511,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 2428,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 579,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 254,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_224": {
                  "entryPoint": 2355,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 332,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "store_literal_in_memory_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5": {
                  "entryPoint": 2917,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470": {
                  "entryPoint": 3217,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65": {
                  "entryPoint": 4526,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398": {
                  "entryPoint": 3827,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
                  "entryPoint": 4743,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8": {
                  "entryPoint": 3387,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 3087,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 3117,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 2361,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_address_payable": {
                  "entryPoint": 533,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 243,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 4218,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bytes": {
                  "entryPoint": 84,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052361561006b5761006b565b90565b60018060a01b031690565b90565b61003461002f6100399261000f565b61001d565b610012565b90565b61004590610020565b90565b61005190610012565b90565b606090565b63ffffffff60e01b1690565b60000190565b61007361017e565b61008e610088610083600061003c565b610048565b91610048565b0361046c5761009b610054565b5063ffffffff60e01b600035166100c16100bb63cf7a1d7760e01b610059565b91610059565b146100e357600063f92ee8a960e01b8152806100df60048201610065565b0390fd5b6100eb610401565b602081519101f35b600090565b90565b90565b60001b90565b61011861011361011d926100f8565b6100fe565b6100fb565b90565b6101497fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103610104565b90565b60001c90565b60018060a01b031690565b61016961016e9161014c565b610152565b90565b61017b905461015d565b90565b6101866100f3565b506101a2600061019c610197610120565b6105a2565b01610171565b90565b90565b90565b6101bf6101ba6101c4926101a5565b61001d565b6101a8565b90565b60405190565b600080fd5b600080fd5b909392938483116101f75784116101f2576001820201920390565b6101d2565b6101cd565b91565b600080fd5b600080fd5b61021290610012565b90565b61021e81610209565b0361022557565b600080fd5b9050359061023782610215565b565b600080fd5b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061026d90610243565b810190811067ffffffffffffffff82111761028757604052565b61024d565b9061029f6102986101c7565b9283610263565b565b67ffffffffffffffff81116102bf576102bb602091610243565b0190565b61024d565b90826000939282370152565b909291926102e56102e0826102a1565b61028c565b93818552602085019082840111610301576102ff926102c4565b565b61023e565b9080601f8301121561032457816020610321933591016102d0565b90565b610239565b9160608383031261037657610341826000850161022a565b9261034f836020830161022a565b92604082013567ffffffffffffffff81116103715761036e9201610306565b90565b610204565b6101ff565b61038f61038a61039492610012565b61001d565b610012565b90565b6103a09061037b565b90565b6103ac90610397565b90565b67ffffffffffffffff81116103cd576103c9602091610243565b0190565b61024d565b906103e46103df836103af565b61028c565b918252565b6103f360006103d2565b90565b6103fe6103e9565b90565b610409610054565b506104126105cd565b61046161045761045161044761043f61043960003661043160046101ab565b9080926101d7565b906101fc565b810190610329565b93919290926103a3565b916103a3565b91909190916105ec565b6104696103f6565b90565b3361048661048061047b61017e565b610048565b91610048565b1460001461059d57610496610054565b5063ffffffff60e01b60003516806104bd6104b7631b2ce7f360e11b610059565b91610059565b146000146104d757506104ce610817565b5b602081519101f35b806104f16104eb63278f794360e11b610059565b91610059565b1460001461050857506105026107c1565b5b6104cf565b8061052261051c6308f2839760e41b610059565b91610059565b146000146105395750610533610723565b5b610503565b8061055361054d6303e1469160e61b610059565b91610059565b1460001461056a57506105646106bf565b5b610534565b61058361057d635c60da1b60e01b610059565b91610059565b146000146105985761059361067a565b610565565b61064a565b61064a565b90565b6105b96105b46105be9261000f565b61001d565b6101a8565b90565b156105c857565b600080fd5b6105ea346105e46105de60006105a5565b916101a8565b146105c1565b565b91906105f661087a565b61061161060b610606600061003c565b610048565b91610048565b0361062d5761062261062b936108b2565b9060009161098d565b565b600063f92ee8a960e01b81528061064660048201610065565b0390fd5b610652610aa6565b610ae7565b61066090610048565b9052565b919061067890600060208501940190610657565b565b610682610054565b5061068b6105cd565b6106ad6106bc610699610aa6565b6106a16101c7565b92839160208301610664565b60208201810382520382610263565b90565b6106c7610054565b506106d06105cd565b6106f26107016106de61017e565b6106e66101c7565b92839160208301610664565b60208201810382520382610263565b90565b9060208282031261071e5761071b9160000161022a565b90565b6101ff565b61072b610054565b506107346105cd565b61077061076b61076661075e61075860003661075060046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108b2565b6107786103f6565b90565b9190916040818403126107bc57610795836000830161022a565b92602082013567ffffffffffffffff81116107b7576107b49201610306565b90565b610204565b6101ff565b6107c9610054565b5061080c6108036107fc6107f46107ee6000366107e660046101ab565b9080926101d7565b906101fc565b81019061077b565b91906103a3565b90600191610b0a565b6108146103f6565b90565b61081f610054565b506108286105cd565b61086f61085f61085a61085261084c60003661084460046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108676103f6565b600091610b0a565b6108776103f6565b90565b6108826100f3565b5061088b61017e565b90565b9160206108b09294936108a960408201966000830190610657565b0190610657565b565b6108fd906108be61017e565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f916108f56108ec6101c7565b9283928361088e565b0390a1610c4d565b565b61090890610397565b90565b5190565b6109189061037b565b90565b6109249061090f565b90565b61093090610397565b90565b60e01b90565b61094281610048565b0361094957565b600080fd5b9050519061095b82610939565b565b90602082820312610977576109749160000161094e565b90565b6101ff565b6109846101c7565b3d6000823e3d90fd5b9161099783610e30565b826109c27f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e916108ff565b906109cb6101c7565b806109d581610065565b0390a26109e18261090b565b6109f46109ee60006105a5565b916101a8565b11908115610a9e575b50610a07575b5050565b6020610a1d610a18610a339461091b565b610927565b635c60da1b90610a2b6101c7565b948592610933565b82528180610a4360048201610065565b03915afa908115610a9957610a6192600092610a69575b5090610f65565b503880610a03565b610a8b91925060203d8111610a92575b610a838183610263565b81019061095d565b9038610a5a565b503d610a79565b61097c565b9050386109fd565b610aae6100f3565b50610ab7610f85565b80610ad3610acd610ac8600061003c565b610048565b91610048565b03610ae45750610ae1610f99565b90565b90565b60008091368280378136915af43d6000803e600014610b05573d6000f35b3d6000fd5b91610b148361102f565b610b1d8261090b565b610b30610b2a60006105a5565b916101a8565b11908115610b54575b50610b43575b5050565b610b4c91610f65565b503880610b3f565b905038610b39565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b610bc06026604092610b5c565b610bc981610b65565b0190565b610be39060208101906000818303910152610bb3565b90565b15610bed57565b610bf56101c7565b62461bcd60e51b815280610c0b60048201610bcd565b0390fd5b90610c2060018060a01b03916100fe565b9181191691161790565b90565b90610c42610c3d610c49926108ff565b610c2a565b8254610c0f565b9055565b610c8f90610c7781610c70610c6a610c65600061003c565b610048565b91610048565b1415610be6565b6000610c89610c84610120565b6105a2565b01610c2d565b565b60207f7472616374000000000000000000000000000000000000000000000000000000917f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e60008201520152565b610cec6025604092610b5c565b610cf581610c91565b0190565b610d0f9060208101906000818303910152610cdf565b90565b15610d1957565b610d216101c7565b62461bcd60e51b815280610d3760048201610cf9565b0390fd5b60207f73206e6f74206120636f6e747261637400000000000000000000000000000000917f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960008201520152565b610d966030604092610b5c565b610d9f81610d3b565b0190565b610db99060208101906000818303910152610d89565b90565b15610dc357565b610dcb6101c7565b62461bcd60e51b815280610de160048201610da3565b0390fd5b90565b610dfc610df7610e0192610de5565b6100fe565b6100fb565b90565b610e2d7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50610de8565b90565b610e6e90610e45610e408261107f565b610d12565b6020610e58610e538361091b565b610927565b635c60da1b90610e666101c7565b948592610933565b82528180610e7e60048201610065565b03915afa8015610eee57610ea1610ea691610ebe94600091610ec0575b5061107f565b610dbc565b6000610eb8610eb3610e04565b6105a2565b01610c2d565b565b610ee1915060203d8111610ee7575b610ed98183610263565b81019061095d565b38610e9b565b503d610ecf565b61097c565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610f4b60276103d2565b90610f5860208301610ef3565b565b610f62610f41565b90565b90610f8291610f72610054565b5090610f7c610f5a565b916110e2565b90565b610f8d6100f3565b50610f96611160565b90565b610fa16100f3565b50610fd56020610fbf610fba610fb5611187565b61091b565b610927565b635c60da1b90610fcd6101c7565b938492610933565b82528180610fe560048201610065565b03915afa90811561102a57600091610ffc575b5090565b61101d915060203d8111611023575b6110158183610263565b81019061095d565b38610ff8565b503d61100b565b61097c565b61103881611258565b6110627fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b916108ff565b9061106b6101c7565b8061107581610065565b0390a2565b600090565b61108761107a565b503b61109c61109660006105a5565b916101a8565b1190565b906110b26110ad836102a1565b61028c565b918252565b3d6000146110d4576110c83d6110a0565b903d6000602084013e5b565b6110dc610054565b906110d2565b9091600080611112946110f3610054565b508490602081019051915af4916111086110b7565b909290919261130b565b90565b90565b61112c61112761113192611115565b6100fe565b6100fb565b90565b61115d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611118565b90565b6111686100f3565b50611184600061117e611179611134565b6105a2565b01610171565b90565b61118f6100f3565b506111ab60006111a56111a0610e04565b6105a2565b01610171565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b611209602d604092610b5c565b611212816111ae565b0190565b61122c90602081019060008183039101526111fc565b90565b1561123657565b61123e6101c7565b62461bcd60e51b81528061125460048201611216565b0390fd5b6112859061126d6112688261107f565b61122f565b600061127f61127a611134565b6105a2565b01610c2d565b565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b6112bc601d602092610b5c565b6112c581611287565b0190565b6112df90602081019060008183039101526112af565b90565b156112e957565b6112f16101c7565b62461bcd60e51b815280611307600482016112c9565b0390fd5b919290611316610054565b5060001461135c57506113288261090b565b61133b61133560006105a5565b916101a8565b14611345575b5090565b6113516113569161107f565b6112e2565b38611341565b826113d5565b5190565b60005b83811061137a575050906000910152565b806020918301518185015201611369565b6113aa6113b36020936113b8936113a181611362565b93848093610b5c565b95869101611366565b610243565b0190565b6113d2916020820191600081840391015261138b565b90565b906113df8261090b565b6113f26113ec60006105a5565b916101a8565b116000146114035750805190602001fd5b6114249061140f6101c7565b91829162461bcd60e51b8352600483016113bc565b0390fdfea2646970667358221220fb1899e61f38faa78bfbab79b8dc2fa613357c2fce2699411f9fee80b624365564736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x6B JUMPI PUSH2 0x6B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x34 PUSH2 0x2F PUSH2 0x39 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x45 SWAP1 PUSH2 0x20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x51 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x73 PUSH2 0x17E JUMP JUMPDEST PUSH2 0x8E PUSH2 0x88 PUSH2 0x83 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x46C JUMPI PUSH2 0x9B PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND PUSH2 0xC1 PUSH2 0xBB PUSH4 0xCF7A1D77 PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH2 0xE3 JUMPI PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0xDF PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xEB PUSH2 0x401 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x113 PUSH2 0x11D SWAP3 PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x149 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x104 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x16E SWAP2 PUSH2 0x14C JUMP JUMPDEST PUSH2 0x152 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17B SWAP1 SLOAD PUSH2 0x15D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1A2 PUSH1 0x0 PUSH2 0x19C PUSH2 0x197 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1BF PUSH2 0x1BA PUSH2 0x1C4 SWAP3 PUSH2 0x1A5 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x1F7 JUMPI DUP5 GT PUSH2 0x1F2 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1CD JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x212 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x21E DUP2 PUSH2 0x209 JUMP JUMPDEST SUB PUSH2 0x225 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x237 DUP3 PUSH2 0x215 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x26D SWAP1 PUSH2 0x243 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x287 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x29F PUSH2 0x298 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x263 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2BF JUMPI PUSH2 0x2BB PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2E5 PUSH2 0x2E0 DUP3 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x301 JUMPI PUSH2 0x2FF SWAP3 PUSH2 0x2C4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x23E JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x324 JUMPI DUP2 PUSH1 0x20 PUSH2 0x321 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2D0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x239 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x376 JUMPI PUSH2 0x341 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH2 0x34F DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x371 JUMPI PUSH2 0x36E SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x38F PUSH2 0x38A PUSH2 0x394 SWAP3 PUSH2 0x12 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A0 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3AC SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3CD JUMPI PUSH2 0x3C9 PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x3E4 PUSH2 0x3DF DUP4 PUSH2 0x3AF JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x0 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FE PUSH2 0x3E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x412 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x461 PUSH2 0x457 PUSH2 0x451 PUSH2 0x447 PUSH2 0x43F PUSH2 0x439 PUSH1 0x0 CALLDATASIZE PUSH2 0x431 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x329 JUMP JUMPDEST SWAP4 SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x469 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLER PUSH2 0x486 PUSH2 0x480 PUSH2 0x47B PUSH2 0x17E JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x59D JUMPI PUSH2 0x496 PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x4BD PUSH2 0x4B7 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x4D7 JUMPI POP PUSH2 0x4CE PUSH2 0x817 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0x4F1 PUSH2 0x4EB PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x508 JUMPI POP PUSH2 0x502 PUSH2 0x7C1 JUMP JUMPDEST JUMPDEST PUSH2 0x4CF JUMP JUMPDEST DUP1 PUSH2 0x522 PUSH2 0x51C PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x539 JUMPI POP PUSH2 0x533 PUSH2 0x723 JUMP JUMPDEST JUMPDEST PUSH2 0x503 JUMP JUMPDEST DUP1 PUSH2 0x553 PUSH2 0x54D PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x56A JUMPI POP PUSH2 0x564 PUSH2 0x6BF JUMP JUMPDEST JUMPDEST PUSH2 0x534 JUMP JUMPDEST PUSH2 0x583 PUSH2 0x57D PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x598 JUMPI PUSH2 0x593 PUSH2 0x67A JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5B9 PUSH2 0x5B4 PUSH2 0x5BE SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5C8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5EA CALLVALUE PUSH2 0x5E4 PUSH2 0x5DE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x5C1 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5F6 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x611 PUSH2 0x60B PUSH2 0x606 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x62D JUMPI PUSH2 0x622 PUSH2 0x62B SWAP4 PUSH2 0x8B2 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH2 0x98D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x646 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x652 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST PUSH2 0x660 SWAP1 PUSH2 0x48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x678 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x682 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x68B PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6BC PUSH2 0x699 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x6A1 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C7 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x6D0 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6F2 PUSH2 0x701 PUSH2 0x6DE PUSH2 0x17E JUMP JUMPDEST PUSH2 0x6E6 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x71E JUMPI PUSH2 0x71B SWAP2 PUSH1 0x0 ADD PUSH2 0x22A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x72B PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x734 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x770 PUSH2 0x76B PUSH2 0x766 PUSH2 0x75E PUSH2 0x758 PUSH1 0x0 CALLDATASIZE PUSH2 0x750 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x8B2 JUMP JUMPDEST PUSH2 0x778 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x7BC JUMPI PUSH2 0x795 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7B7 JUMPI PUSH2 0x7B4 SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x7C9 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x80C PUSH2 0x803 PUSH2 0x7FC PUSH2 0x7F4 PUSH2 0x7EE PUSH1 0x0 CALLDATASIZE PUSH2 0x7E6 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x77B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3A3 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x814 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x81F PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x828 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x86F PUSH2 0x85F PUSH2 0x85A PUSH2 0x852 PUSH2 0x84C PUSH1 0x0 CALLDATASIZE PUSH2 0x844 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x867 PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x877 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x882 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x88B PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x8B0 SWAP3 SWAP5 SWAP4 PUSH2 0x8A9 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8FD SWAP1 PUSH2 0x8BE PUSH2 0x17E JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x8F5 PUSH2 0x8EC PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x88E JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0xC4D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x908 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x924 SWAP1 PUSH2 0x90F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x930 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x942 DUP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x949 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x95B DUP3 PUSH2 0x939 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x977 JUMPI PUSH2 0x974 SWAP2 PUSH1 0x0 ADD PUSH2 0x94E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x984 PUSH2 0x1C7 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 PUSH2 0x997 DUP4 PUSH2 0xE30 JUMP JUMPDEST DUP3 PUSH2 0x9C2 PUSH32 0x1CF3B03A6CF19FA2BABA4DF148E9DCABEDEA7F8A5C07840E207E5C089BE95D3E SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x9CB PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x9D5 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH2 0x9E1 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x9F4 PUSH2 0x9EE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xA9E JUMPI JUMPDEST POP PUSH2 0xA07 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x20 PUSH2 0xA1D PUSH2 0xA18 PUSH2 0xA33 SWAP5 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xA2B PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xA43 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA99 JUMPI PUSH2 0xA61 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0xA69 JUMPI JUMPDEST POP SWAP1 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0xA8B SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xA92 JUMPI JUMPDEST PUSH2 0xA83 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xA5A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA79 JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x9FD JUMP JUMPDEST PUSH2 0xAAE PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xAB7 PUSH2 0xF85 JUMP JUMPDEST DUP1 PUSH2 0xAD3 PUSH2 0xACD PUSH2 0xAC8 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0xAE4 JUMPI POP PUSH2 0xAE1 PUSH2 0xF99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0xB05 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH2 0xB14 DUP4 PUSH2 0x102F JUMP JUMPDEST PUSH2 0xB1D DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0xB30 PUSH2 0xB2A PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xB54 JUMPI JUMPDEST POP PUSH2 0xB43 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xB4C SWAP2 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xB3F JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xBC0 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xBC9 DUP2 PUSH2 0xB65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xBE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xBB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xBED JUMPI JUMP JUMPDEST PUSH2 0xBF5 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC0B PUSH1 0x4 DUP3 ADD PUSH2 0xBCD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xC20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xFE JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xC42 PUSH2 0xC3D PUSH2 0xC49 SWAP3 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0xC2A JUMP JUMPDEST DUP3 SLOAD PUSH2 0xC0F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC8F SWAP1 PUSH2 0xC77 DUP2 PUSH2 0xC70 PUSH2 0xC6A PUSH2 0xC65 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ ISZERO PUSH2 0xBE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC89 PUSH2 0xC84 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7472616374000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720626561636F6E206973206E6F74206120636F6E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xCEC PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xCF5 DUP2 PUSH2 0xC91 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD0F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xCDF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xD19 JUMPI JUMP JUMPDEST PUSH2 0xD21 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xD37 PUSH1 0x4 DUP3 ADD PUSH2 0xCF9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x73206E6F74206120636F6E747261637400000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A20626561636F6E20696D706C656D656E746174696F6E2069 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xD96 PUSH1 0x30 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xD9F DUP2 PUSH2 0xD3B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xDB9 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xD89 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xDC3 JUMPI JUMP JUMPDEST PUSH2 0xDCB PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xDE1 PUSH1 0x4 DUP3 ADD PUSH2 0xDA3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDFC PUSH2 0xDF7 PUSH2 0xE01 SWAP3 PUSH2 0xDE5 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE2D PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0xDE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE6E SWAP1 PUSH2 0xE45 PUSH2 0xE40 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x20 PUSH2 0xE58 PUSH2 0xE53 DUP4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xE66 PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xE7E PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL DUP1 ISZERO PUSH2 0xEEE JUMPI PUSH2 0xEA1 PUSH2 0xEA6 SWAP2 PUSH2 0xEBE SWAP5 PUSH1 0x0 SWAP2 PUSH2 0xEC0 JUMPI JUMPDEST POP PUSH2 0x107F JUMP JUMPDEST PUSH2 0xDBC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB8 PUSH2 0xEB3 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEE1 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xEE7 JUMPI JUMPDEST PUSH2 0xED9 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xE9B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xECF JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xF4B PUSH1 0x27 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 PUSH2 0xF58 PUSH1 0x20 DUP4 ADD PUSH2 0xEF3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF62 PUSH2 0xF41 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF82 SWAP2 PUSH2 0xF72 PUSH2 0x54 JUMP JUMPDEST POP SWAP1 PUSH2 0xF7C PUSH2 0xF5A JUMP JUMPDEST SWAP2 PUSH2 0x10E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF8D PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xF96 PUSH2 0x1160 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFA1 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xFD5 PUSH1 0x20 PUSH2 0xFBF PUSH2 0xFBA PUSH2 0xFB5 PUSH2 0x1187 JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xFCD PUSH2 0x1C7 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xFE5 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x102A JUMPI PUSH1 0x0 SWAP2 PUSH2 0xFFC JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x101D SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1023 JUMPI JUMPDEST PUSH2 0x1015 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xFF8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x100B JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH2 0x1038 DUP2 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x1062 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x106B PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x1075 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1087 PUSH2 0x107A JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x109C PUSH2 0x1096 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10B2 PUSH2 0x10AD DUP4 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0x10D4 JUMPI PUSH2 0x10C8 RETURNDATASIZE PUSH2 0x10A0 JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0x10DC PUSH2 0x54 JUMP JUMPDEST SWAP1 PUSH2 0x10D2 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0x1112 SWAP5 PUSH2 0x10F3 PUSH2 0x54 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0x1108 PUSH2 0x10B7 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x130B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x112C PUSH2 0x1127 PUSH2 0x1131 SWAP3 PUSH2 0x1115 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x115D PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x1118 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1168 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1184 PUSH1 0x0 PUSH2 0x117E PUSH2 0x1179 PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x118F PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x11AB PUSH1 0x0 PUSH2 0x11A5 PUSH2 0x11A0 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1209 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x1212 DUP2 PUSH2 0x11AE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x122C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x11FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1236 JUMPI JUMP JUMPDEST PUSH2 0x123E PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1254 PUSH1 0x4 DUP3 ADD PUSH2 0x1216 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x1285 SWAP1 PUSH2 0x126D PUSH2 0x1268 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127F PUSH2 0x127A PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x12BC PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x12C5 DUP2 PUSH2 0x1287 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x12DF SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x12AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12E9 JUMPI JUMP JUMPDEST PUSH2 0x12F1 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1307 PUSH1 0x4 DUP3 ADD PUSH2 0x12C9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0x1316 PUSH2 0x54 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0x135C JUMPI POP PUSH2 0x1328 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x133B PUSH2 0x1335 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x1345 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1351 PUSH2 0x1356 SWAP2 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x12E2 JUMP JUMPDEST CODESIZE PUSH2 0x1341 JUMP JUMPDEST DUP3 PUSH2 0x13D5 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x137A JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x1369 JUMP JUMPDEST PUSH2 0x13AA PUSH2 0x13B3 PUSH1 0x20 SWAP4 PUSH2 0x13B8 SWAP4 PUSH2 0x13A1 DUP2 PUSH2 0x1362 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xB5C JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x1366 JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x13D2 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x138B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x13DF DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x13F2 PUSH2 0x13EC PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x1403 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0x1424 SWAP1 PUSH2 0x140F PUSH2 0x1C7 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x13BC JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB XOR SWAP10 0xE6 0x1F CODESIZE STATICCALL 0xA7 DUP12 0xFB 0xAB PUSH26 0xB8DC2FA613357C2FCE2699411F9FEE80B624365564736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "1165:2219:31:-:0;;;;;2853:63:8;1165:2219:31;2629:64:8;:::i;1165:2219:31:-;;:::o;:::-;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::o;:::-;;;;;;:::o;:::-;;;;:::o;2210:701::-;2299:11;;:::i;:::-;:25;;2314:10;2322:1;2314:10;:::i;:::-;2299:25;:::i;:::-;;;:::i;:::-;;2295:561;;2340:16;;:::i;:::-;1165:2219;;;;2388:7;;;2413:66;;2425:54;;;2413:66;:::i;:::-;;;:::i;:::-;;2409:296;;2822:23;;;;;;;;;;;;:::i;:::-;;;;2409:296;2505:21;;:::i;:::-;2608:83;;;;;;1165:2219;;;:::o;:::-;;:::o;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;3616:106:7:-;3656:66;;;:::i;:::-;3616:106;:::o;3656:66::-;;;;:::o;:::-;1165:2219:31;;;;;3656:66:7;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;3784:122::-;3828:7;;:::i;:::-;3881:11;3854:45;;:39;3881:11;;:::i;:::-;3854:39;:::i;:::-;:45;;:::i;:::-;3847:52;:::o;1165:2219:31:-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::i;:::-;;:::o;1365:274::-;1413:12;;:::i;:::-;;;;:::i;:::-;1607:4;1467:104;;1520:51;;1531:12;:8;;:12;1540:1;1531:12;:::i;:::-;;;;;:::i;:::-;1520:51;;:::i;:::-;;;;;:::i;:::-;1467:104;;;;;;:::i;:::-;;;:::i;:::-;;1592:5;1599:6;1607:4;;;:::i;:::-;1623:9;;:::i;:::-;;:::o;3518:1089:34:-;3579:10;:25;;3593:11;;:::i;:::-;3579:25;:::i;:::-;;;:::i;:::-;;3575:1026;;;;3620:16;;:::i;:::-;1165:2219:31;;;;3668:7:34;;;3693:8;:59;;3705:47;;;3693:59;:::i;:::-;;;:::i;:::-;;3689:766;;;;3778:20;;;:::i;:::-;3689:766;4468:75;;;;;;3689:766;3823:8;:66;;3835:54;;;3823:66;:::i;:::-;;;:::i;:::-;;3819:636;;;;3915:27;;;:::i;:::-;3819:636;3689:766;;3819:636;3967:8;:61;;3979:49;;;3967:61;:::i;:::-;;;:::i;:::-;;3963:492;;;;4054:22;;;:::i;:::-;3963:492;3819:636;;3963:492;4101:8;:55;;4113:43;;;4101:55;:::i;:::-;;;:::i;:::-;;4097:358;;;;4182:16;;;:::i;:::-;4097:358;3963:492;;4097:358;4223:64;;4235:52;;;4223:64;:::i;:::-;;;:::i;:::-;;4219:236;;;;4313:25;;:::i;:::-;4097:358;;4219:236;;:::i;3575:1026::-;;:::i;1859:190:17:-;;:::o;1165:2219:31:-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;7359:78:34;7407:23;7415:9;:14;;7428:1;7415:14;:::i;:::-;;;:::i;:::-;;7407:23;:::i;:::-;7359:78::o;1645:352:31:-;;;1738:8;;:::i;:::-;:22;;1750:10;1758:1;1750:10;:::i;:::-;1738:22;:::i;:::-;;;:::i;:::-;;1734:174;;1930:5;1984;1930;;:::i;:::-;1978:4;1984:5;;;:::i;:::-;1645:352::o;1734:174::-;1874:23;2822;;;1874;;;;;;;;:::i;:::-;;;;2322:110:8;2407:17;;:::i;:::-;;:::i;1165:2219:31:-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;5483:198:34:-;5535:12;;:::i;:::-;;;;:::i;:::-;5648:26;;5614:17;;:::i;:::-;5648:26;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;5641:33;:::o;4958:165::-;5001:12;;:::i;:::-;;;;:::i;:::-;5099:17;;5071:11;;:::i;:::-;5099:17;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;5092:24;:::o;1165:2219:31:-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;5792:216:34:-;5841:12;;:::i;:::-;;;;:::i;:::-;5972:8;5895:54;5914:35;;5925:12;:8;;:12;5934:1;5925:12;:::i;:::-;;;;;:::i;:::-;5914:35;;:::i;:::-;;;;;:::i;:::-;5895:54;:::i;:::-;5972:8;:::i;:::-;5992:9;;:::i;:::-;;:::o;1165:2219:31:-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;6622:254:34:-;6676:12;;:::i;:::-;6760:8;6844:4;6700:91;6749:42;;6760:12;:8;;:12;6769:1;6760:12;:::i;:::-;;;;;:::i;:::-;6749:42;;:::i;:::-;;;;;:::i;:::-;6700:91;;;:::i;:::-;6838:4;6844;;;:::i;:::-;6860:9;;:::i;:::-;;:::o;6083:255::-;6130:12;;:::i;:::-;;;;:::i;:::-;6305:5;6184:63;6212:35;;6223:12;:8;;:12;6232:1;6223:12;:::i;:::-;;;;;:::i;:::-;6212:35;;:::i;:::-;;;;;:::i;:::-;6184:63;:::i;:::-;6294:9;;:::i;:::-;6305:5;;;:::i;:::-;6322:9;;:::i;:::-;;:::o;7029:93::-;7078:7;;:::i;:::-;7104:11;;;:::i;:::-;7097:18;:::o;1165:2219:31:-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;:::o;4300:135:7:-;4419:8;4300:135;4377:11;;:::i;:::-;4390:8;4364:35;;;;;:::i;:::-;;;;;;:::i;:::-;;;;4419:8;:::i;:::-;4300:135::o;1165:2219:31:-;;;;:::i;:::-;;:::o;:::-;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;:::i;:::-;;;;;;;;5728:313:7;;5845:9;;;:::i;:::-;5885;5870:25;;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;5909:11;:4;:11;:::i;:::-;:15;;5923:1;5909:15;:::i;:::-;;;:::i;:::-;;:28;;;;;5728:313;5905:130;;;5728:313;;;:::o;5905:130::-;5982:35;:33;:18;:35;5990:9;5982:18;:::i;:::-;:33;:::i;:::-;;:35;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;5953:71;5982:35;;;;;5905:130;6019:4;5953:71;;:::i;:::-;;5905:130;;;;5982:35;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;:::i;5909:28::-;5928:9;;5909:28;;;3079:302:31;3165:7;;:::i;:::-;3209:30;;;:::i;:::-;3253:14;:28;;3271:10;3279:1;3271:10;:::i;:::-;3253:28;:::i;:::-;;;:::i;:::-;;3249:80;;3345:29;;;:::i;:::-;3338:36;:::o;3249:80::-;3297:21;:::o;948:895:8:-;1018:819;948:895;;1018:819;;;;;;;;;;;;;;;;;;;;;;;;2057:265:7;;2176:17;;;:::i;:::-;2208:11;:4;:11;:::i;:::-;:15;;2222:1;2208:15;:::i;:::-;;;:::i;:::-;;:28;;;;;2057:265;2204:112;;;2057:265;;;:::o;2204:112::-;2252:53;2281:17;2252:53;:::i;:::-;;2204:112;;;;2208:28;2227:9;;2208:28;;;1165:2219:31;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;3988:201:7:-;4126:56;3988:201;4043:73;4051:8;:22;;4063:10;4071:1;4063:10;:::i;:::-;4051:22;:::i;:::-;;;:::i;:::-;;;4043:73;:::i;:::-;4126:45;:39;4153:11;;:::i;:::-;4126:39;:::i;:::-;:45;:56;:::i;:::-;3988:201::o;1165:2219:31:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;4678:107:7:-;4719:66;;;:::i;:::-;4678:107;:::o;5054:371::-;5240:35;5054:371;5111:79;5119:29;5138:9;5119:29;:::i;:::-;5111:79;:::i;:::-;5240:35;:33;:18;5248:9;5240:18;:::i;:::-;:33;:::i;:::-;;:35;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;5221:55;5200:150;5240:35;5360:58;5240:35;;;;;5054:371;5221:55;;:::i;:::-;5200:150;:::i;:::-;5360:46;:40;5387:12;;:::i;:::-;5360:40;:::i;:::-;:46;:58;:::i;:::-;5054:371::o;5240:35::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;1165:2219:31:-;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;;;;;;:::i;:::-;:::o;:::-;;;:::i;:::-;;:::o;6674:198:14:-;;6788:77;6674:198;6757:12;;:::i;:::-;6809:6;6817:4;6788:77;;:::i;:::-;;;:::i;:::-;6781:84;:::o;884:140:33:-;951:12;;:::i;:::-;982:35;;;:::i;:::-;975:42;:::o;1121:138:32:-;1188:7;;:::i;:::-;1222:12;1214:38;;:36;:21;1222:12;;:::i;:::-;1214:21;:::i;:::-;:36;:::i;:::-;;:38;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;1121:138;1207:45;;:::o;1214:38::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;1771:152:7:-;1856:17;;;:::i;:::-;1889:27;;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;1771:152::o;1165:2219:31:-;;;:::o;1412:320:14:-;1472:4;;:::i;:::-;1702:7;:19;:23;;1724:1;1702:23;:::i;:::-;;;:::i;:::-;;1695:30;:::o;1165:2219:31:-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;7058:325:14;;;7265:25;7058:325;7307:69;7058:325;7199:12;;:::i;:::-;7265:6;;7285:4;7265:25;;;;;;;;;;;:::i;:::-;7334:6;7342:7;7351:10;7363:12;7307:69;;:::i;:::-;7300:76;:::o;1165:2219:31:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;981:115:7:-;1030:66;;;:::i;:::-;981:115;:::o;1175:140::-;1228:7;;:::i;:::-;1281:20;1254:54;;:48;1281:20;;:::i;:::-;1254:48;:::i;:::-;:54;;:::i;:::-;1247:61;:::o;4848:124::-;4893:7;;:::i;:::-;4946:12;4919:46;;:40;4946:12;;:::i;:::-;4919:40;:::i;:::-;:46;;:::i;:::-;4912:53;:::o;1165:2219:31:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;1406:259:7;1584:74;1406:259;1479:95;1487:37;1506:17;1487:37;:::i;:::-;1479:95;:::i;:::-;1584:54;:48;1611:20;;:::i;:::-;1584:48;:::i;:::-;:54;:74;:::i;:::-;1406:259::o;1165:2219:31:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;7671:628:14;;;;7851:12;;:::i;:::-;7879:7;7875:418;;;;7906:10;:17;:10;:17;:::i;:::-;:22;;7927:1;7906:22;:::i;:::-;;;:::i;:::-;;7902:286;;7875:418;8208:10;8201:17;:::o;7902:286::-;8121:18;8113:60;8132:6;8121:18;:::i;:::-;8113:60;:::i;:::-;7902:286;;;7875:418;8257:10;8269:12;:::i;1165:2219:31:-;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;8821:540:14:-;;8980:17;:10;:17;:::i;:::-;:21;;9000:1;8980:21;:::i;:::-;;;:::i;:::-;;8976:379;;;;9152:142;;;;;;;8976:379;9324:20;9331:12;9324:20;;:::i;:::-;1165:2219:31;;;;;;9324:20:14;;;;;;:::i;:::-;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation, care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors. See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing]. The proxy selectors are: - 0xcf7a1d77: initialize - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy) - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy) - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy) - 0xf851a440: admin (from TransparentUpgradeableProxy) - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":\"TransparentUpgradeableBeaconProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { BeaconProxy, Proxy } from \\\"./openzeppelin/BeaconProxy.sol\\\";\\nimport { ERC1967Proxy, TransparentUpgradeableProxy } from \\\"./openzeppelin/TransparentUpgradeableProxy.sol\\\";\\n\\ninterface ITransparentUpgradeableBeaconProxy {\\n\\n    function initialize(address admin, address beacon, bytes memory data) external;\\n\\n}\\n\\nerror InvalidInitialization();\\n\\n/**\\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * The proxy selectors are:\\n * - 0xcf7a1d77: initialize\\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\\n */\\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\\n\\n    /**\\n     * Decode the initialization data from the msg.data and call the initialize function.\\n     */\\n    function _dispatchInitialize() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\\n        initialize(admin, beacon, data);\\n\\n        return \\\"\\\";\\n    }\\n\\n    function initialize(address admin, address beacon, bytes memory data) internal {\\n        if (_admin() != address(0)) {\\n            // Redundant call. This function can only be called when the admin is not set.\\n            revert InvalidInitialization();\\n        }\\n        _changeAdmin(admin);\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\\n     */\\n    function _fallback() internal override(TransparentUpgradeableProxy, Proxy) {\\n        if (_getAdmin() == address(0)) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\\n                ret = _dispatchInitialize();\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    return(add(ret, 0x20), mload(ret))\\n                }\\n            }\\n            // When the admin is not set, the fallback function is used to initialize the proxy.\\n            revert InvalidInitialization();\\n        }\\n        TransparentUpgradeableProxy._fallback();\\n    }\\n\\n    /**\\n     * Returns the current implementation address.\\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\\n     */\\n    function _implementation() internal view override(ERC1967Proxy, BeaconProxy) returns (address) {\\n        address implementation = ERC1967Proxy._implementation();\\n        if (implementation != address(0)) {\\n            return implementation;\\n        }\\n        return BeaconProxy._implementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf7c7834545a955cedbe5228c3583f72fb332337dd0b4ebcd5fdb0b6504c5a8cb\",\"license\":\"Apache-2.0\"},\"src/proxies/openzeppelin/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2aa58701eaf7336890fae8a17f5769adf764beac64f3c5873199cd56abd66d0d\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/proxies/openzeppelin/BeaconProxy.sol": {
        "BeaconProxy": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "details": "This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}. The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't conflict with the storage layout of the implementation behind the proxy. _Available since v3.4._",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601c57600e6020565b6102cf61002c82396102cf90f35b6026565b60405190565b600080fdfe608060405261000c610130565b6101c6565b600090565b60018060a01b031690565b90565b61003861003361003d92610016565b610021565b610016565b90565b61004990610024565b90565b61005590610040565b90565b61006190610024565b90565b61006d90610058565b90565b60405190565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100a090610076565b810190811067ffffffffffffffff8211176100ba57604052565b610080565b60e01b90565b600080fd5b6100d390610016565b90565b6100df816100ca565b036100e657565b600080fd5b905051906100f8826100d6565b565b9060208282031261011457610111916000016100eb565b90565b6100c5565b60000190565b610127610070565b3d6000823e3d90fd5b610138610011565b5061016c602061015661015161014c61026f565b61004c565b610064565b635c60da1b90610164610070565b9384926100bf565b8252818061017c60048201610119565b03915afa9081156101c157600091610193575b5090565b6101b4915060203d81116101ba575b6101ac8183610096565b8101906100fa565b3861018f565b503d6101a2565b61011f565b60008091368280378136915af43d6000803e6000146101e4573d6000f35b3d6000fd5b90565b90565b60001b90565b61020961020461020e926101e9565b6101ef565b6101ec565b90565b61023a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d506101f5565b90565b60001c90565b60018060a01b031690565b61025a61025f9161023d565b610243565b90565b61026c905461024e565b90565b610277610011565b50610293600061028d610288610211565b610296565b01610262565b90565b9056fea26469706673582212200bd23754fe04dc6388cd032ca6024d3edbf6b7e68c22b0013e8bf70e853734c664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x2C DUP3 CODECOPY PUSH2 0x2CF SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH2 0xC PUSH2 0x130 JUMP JUMPDEST PUSH2 0x1C6 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38 PUSH2 0x33 PUSH2 0x3D SWAP3 PUSH2 0x16 JUMP JUMPDEST PUSH2 0x21 JUMP JUMPDEST PUSH2 0x16 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x49 SWAP1 PUSH2 0x24 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x55 SWAP1 PUSH2 0x40 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x61 SWAP1 PUSH2 0x24 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6D SWAP1 PUSH2 0x58 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0xA0 SWAP1 PUSH2 0x76 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xBA JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x80 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD3 SWAP1 PUSH2 0x16 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDF DUP2 PUSH2 0xCA JUMP JUMPDEST SUB PUSH2 0xE6 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0xF8 DUP3 PUSH2 0xD6 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x114 JUMPI PUSH2 0x111 SWAP2 PUSH1 0x0 ADD PUSH2 0xEB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC5 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x127 PUSH2 0x70 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x138 PUSH2 0x11 JUMP JUMPDEST POP PUSH2 0x16C PUSH1 0x20 PUSH2 0x156 PUSH2 0x151 PUSH2 0x14C PUSH2 0x26F JUMP JUMPDEST PUSH2 0x4C JUMP JUMPDEST PUSH2 0x64 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0x164 PUSH2 0x70 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0xBF JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0x17C PUSH1 0x4 DUP3 ADD PUSH2 0x119 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1C1 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x193 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1B4 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1BA JUMPI JUMPDEST PUSH2 0x1AC DUP2 DUP4 PUSH2 0x96 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xFA JUMP JUMPDEST CODESIZE PUSH2 0x18F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1A2 JUMP JUMPDEST PUSH2 0x11F JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0x1E4 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x209 PUSH2 0x204 PUSH2 0x20E SWAP3 PUSH2 0x1E9 JUMP JUMPDEST PUSH2 0x1EF JUMP JUMPDEST PUSH2 0x1EC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23A PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0x1F5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x25A PUSH2 0x25F SWAP2 PUSH2 0x23D JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26C SWAP1 SLOAD PUSH2 0x24E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x277 PUSH2 0x11 JUMP JUMPDEST POP PUSH2 0x293 PUSH1 0x0 PUSH2 0x28D PUSH2 0x288 PUSH2 0x211 JUMP JUMPDEST PUSH2 0x296 JUMP JUMPDEST ADD PUSH2 0x262 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND 0xD2 CALLDATACOPY SLOAD INVALID DIV 0xDC PUSH4 0x88CD032C 0xA6 MUL 0x4D RETURNDATACOPY 0xDB 0xF6 0xB7 0xE6 DUP13 0x22 0xB0 ADD RETURNDATACOPY DUP12 0xF7 0xE DUP6 CALLDATACOPY CALLVALUE 0xC6 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "806:967:32:-:0;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode_address_fromMemory": {
                  "entryPoint": 235,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_fromMemory": {
                  "entryPoint": 250,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 281,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 112,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 202,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes32": {
                  "entryPoint": 492,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 579,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 489,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 22,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_BEACON_SLOT": {
                  "entryPoint": 529,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_address_to_contract_IBeacon": {
                  "entryPoint": 76,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_IBeacon_to_address": {
                  "entryPoint": 100,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_bytes32": {
                  "entryPoint": 501,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 88,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_IBeacon": {
                  "entryPoint": 64,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 36,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 590,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 150,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun": {
                  "entryPoint": null,
                  "id": 1032,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_": {
                  "entryPoint": null,
                  "id": 1024,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_delegate": {
                  "entryPoint": 454,
                  "id": 997,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_fallback": {
                  "entryPoint": null,
                  "id": 1016,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_getAddressSlot": {
                  "entryPoint": 662,
                  "id": 2278,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getBeacon": {
                  "entryPoint": 623,
                  "id": 911,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_implementation": {
                  "entryPoint": 304,
                  "id": 5995,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 33,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 128,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 610,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 197,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 287,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 118,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 495,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_224": {
                  "entryPoint": 191,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 573,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "validator_revert_address": {
                  "entryPoint": 214,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 17,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "608060405261000c610130565b6101c6565b600090565b60018060a01b031690565b90565b61003861003361003d92610016565b610021565b610016565b90565b61004990610024565b90565b61005590610040565b90565b61006190610024565b90565b61006d90610058565b90565b60405190565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906100a090610076565b810190811067ffffffffffffffff8211176100ba57604052565b610080565b60e01b90565b600080fd5b6100d390610016565b90565b6100df816100ca565b036100e657565b600080fd5b905051906100f8826100d6565b565b9060208282031261011457610111916000016100eb565b90565b6100c5565b60000190565b610127610070565b3d6000823e3d90fd5b610138610011565b5061016c602061015661015161014c61026f565b61004c565b610064565b635c60da1b90610164610070565b9384926100bf565b8252818061017c60048201610119565b03915afa9081156101c157600091610193575b5090565b6101b4915060203d81116101ba575b6101ac8183610096565b8101906100fa565b3861018f565b503d6101a2565b61011f565b60008091368280378136915af43d6000803e6000146101e4573d6000f35b3d6000fd5b90565b90565b60001b90565b61020961020461020e926101e9565b6101ef565b6101ec565b90565b61023a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d506101f5565b90565b60001c90565b60018060a01b031690565b61025a61025f9161023d565b610243565b90565b61026c905461024e565b90565b610277610011565b50610293600061028d610288610211565b610296565b01610262565b90565b9056fea26469706673582212200bd23754fe04dc6388cd032ca6024d3edbf6b7e68c22b0013e8bf70e853734c664736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH2 0xC PUSH2 0x130 JUMP JUMPDEST PUSH2 0x1C6 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38 PUSH2 0x33 PUSH2 0x3D SWAP3 PUSH2 0x16 JUMP JUMPDEST PUSH2 0x21 JUMP JUMPDEST PUSH2 0x16 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x49 SWAP1 PUSH2 0x24 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x55 SWAP1 PUSH2 0x40 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x61 SWAP1 PUSH2 0x24 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6D SWAP1 PUSH2 0x58 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0xA0 SWAP1 PUSH2 0x76 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xBA JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x80 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD3 SWAP1 PUSH2 0x16 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDF DUP2 PUSH2 0xCA JUMP JUMPDEST SUB PUSH2 0xE6 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0xF8 DUP3 PUSH2 0xD6 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x114 JUMPI PUSH2 0x111 SWAP2 PUSH1 0x0 ADD PUSH2 0xEB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC5 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x127 PUSH2 0x70 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x138 PUSH2 0x11 JUMP JUMPDEST POP PUSH2 0x16C PUSH1 0x20 PUSH2 0x156 PUSH2 0x151 PUSH2 0x14C PUSH2 0x26F JUMP JUMPDEST PUSH2 0x4C JUMP JUMPDEST PUSH2 0x64 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0x164 PUSH2 0x70 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0xBF JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0x17C PUSH1 0x4 DUP3 ADD PUSH2 0x119 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1C1 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x193 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1B4 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1BA JUMPI JUMPDEST PUSH2 0x1AC DUP2 DUP4 PUSH2 0x96 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xFA JUMP JUMPDEST CODESIZE PUSH2 0x18F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1A2 JUMP JUMPDEST PUSH2 0x11F JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0x1E4 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x209 PUSH2 0x204 PUSH2 0x20E SWAP3 PUSH2 0x1E9 JUMP JUMPDEST PUSH2 0x1EF JUMP JUMPDEST PUSH2 0x1EC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23A PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0x1F5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x25A PUSH2 0x25F SWAP2 PUSH2 0x23D JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x26C SWAP1 SLOAD PUSH2 0x24E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x277 PUSH2 0x11 JUMP JUMPDEST POP PUSH2 0x293 PUSH1 0x0 PUSH2 0x28D PUSH2 0x288 PUSH2 0x211 JUMP JUMPDEST PUSH2 0x296 JUMP JUMPDEST ADD PUSH2 0x262 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND 0xD2 CALLDATACOPY SLOAD INVALID DIV 0xDC PUSH4 0x88CD032C 0xA6 MUL 0x4D RETURNDATACOPY 0xDB 0xF6 0xB7 0xE6 DUP13 0x22 0xB0 ADD RETURNDATACOPY DUP12 0xF7 0xE DUP6 CALLDATACOPY CALLVALUE 0xC6 PUSH5 0x736F6C6343 STOP ADDMOD SHL STOP CALLER ",
              "sourceMap": "806:967:32:-:0;;;2407:17:8;;:::i;:::-;;:::i;806:967:32:-;;;:::o;:::-;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;1121:138;1188:7;;:::i;:::-;1222:12;1214:38;;:36;:21;1222:12;;:::i;:::-;1214:21;:::i;:::-;:36;:::i;:::-;;:38;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;1121:138;1207:45;;:::o;1214:38::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;948:895:8:-;1018:819;948:895;;1018:819;;;;;;;;;;;;;;;;;;;;;;;;806:967:32;;:::o;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;4678:107:7:-;4719:66;;;:::i;:::-;4678:107;:::o;4719:66::-;;;;:::o;:::-;806:967:32;;;;;4719:66:7;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;4848:124::-;4893:7;;:::i;:::-;4946:12;4919:46;;:40;4946:12;;:::i;:::-;4919:40;:::i;:::-;:46;;:::i;:::-;4912:53;:::o;1859:190:17:-;;:::o"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}. The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't conflict with the storage layout of the implementation behind the proxy. _Available since v3.4._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/openzeppelin/BeaconProxy.sol\":\"BeaconProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2aa58701eaf7336890fae8a17f5769adf764beac64f3c5873199cd56abd66d0d\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/proxies/openzeppelin/ERC1967Proxy.sol": {
        "ERC1967Proxy": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "details": "This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an implementation address that can be changed. This address is stored in storage in the location specified by https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the implementation behind the proxy.",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601c57600e6020565b61011561002c823961011590f35b6026565b60405190565b600080fdfe6080604052600a6013565b6023565b600090565b6019600e565b50602060bd565b90565b60008091368280378136915af43d6000803e6000146040573d6000f35b3d6000fd5b90565b90565b60001b90565b6060605c6064926045565b604b565b6048565b90565b608e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6051565b90565b60001c90565b60018060a01b031690565b60ab60af916091565b6097565b90565b60ba905460a2565b90565b60c3600e565b5060d9600060d460d06067565b60dc565b0160b2565b90565b9056fea2646970667358221220c4774b3f82388b8e099324853fb11a387930ccc2b0039d7d5e38799126adc14264736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x115 PUSH2 0x2C DUP3 CODECOPY PUSH2 0x115 SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0xA PUSH1 0x13 JUMP JUMPDEST PUSH1 0x23 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x19 PUSH1 0xE JUMP JUMPDEST POP PUSH1 0x20 PUSH1 0xBD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH1 0x40 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5C PUSH1 0x64 SWAP3 PUSH1 0x45 JUMP JUMPDEST PUSH1 0x4B JUMP JUMPDEST PUSH1 0x48 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x8E PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x51 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xAB PUSH1 0xAF SWAP2 PUSH1 0x91 JUMP JUMPDEST PUSH1 0x97 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xBA SWAP1 SLOAD PUSH1 0xA2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xC3 PUSH1 0xE JUMP JUMPDEST POP PUSH1 0xD9 PUSH1 0x0 PUSH1 0xD4 PUSH1 0xD0 PUSH1 0x67 JUMP JUMPDEST PUSH1 0xDC JUMP JUMPDEST ADD PUSH1 0xB2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC4 PUSH24 0x4B3F82388B8E099324853FB11A387930CCC2B0039D7D5E38 PUSH26 0x9126ADC14264736F6C634300081B003300000000000000000000 ",
              "sourceMap": "758:269:33:-:0;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "cleanup_bytes32": {
                  "entryPoint": 72,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 151,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 69,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_IMPLEMENTATION_SLOT": {
                  "entryPoint": 103,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_rational_by_to_bytes32": {
                  "entryPoint": 81,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 162,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun": {
                  "entryPoint": null,
                  "id": 1032,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_": {
                  "entryPoint": null,
                  "id": 1024,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_delegate": {
                  "entryPoint": 35,
                  "id": 997,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_fallback": {
                  "entryPoint": null,
                  "id": 1016,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_getAddressSlot": {
                  "entryPoint": 220,
                  "id": 2278,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getImplementation": {
                  "entryPoint": 189,
                  "id": 712,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_implementation": {
                  "entryPoint": 19,
                  "id": 6032,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 178,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 75,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 145,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "zero_value_for_split_address": {
                  "entryPoint": 14,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600a6013565b6023565b600090565b6019600e565b50602060bd565b90565b60008091368280378136915af43d6000803e6000146040573d6000f35b3d6000fd5b90565b90565b60001b90565b6060605c6064926045565b604b565b6048565b90565b608e7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6051565b90565b60001c90565b60018060a01b031690565b60ab60af916091565b6097565b90565b60ba905460a2565b90565b60c3600e565b5060d9600060d460d06067565b60dc565b0160b2565b90565b9056fea2646970667358221220c4774b3f82388b8e099324853fb11a387930ccc2b0039d7d5e38799126adc14264736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0xA PUSH1 0x13 JUMP JUMPDEST PUSH1 0x23 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x19 PUSH1 0xE JUMP JUMPDEST POP PUSH1 0x20 PUSH1 0xBD JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH1 0x40 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x5C PUSH1 0x64 SWAP3 PUSH1 0x45 JUMP JUMPDEST PUSH1 0x4B JUMP JUMPDEST PUSH1 0x48 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x8E PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x51 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0xAB PUSH1 0xAF SWAP2 PUSH1 0x91 JUMP JUMPDEST PUSH1 0x97 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xBA SWAP1 SLOAD PUSH1 0xA2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xC3 PUSH1 0xE JUMP JUMPDEST POP PUSH1 0xD9 PUSH1 0x0 PUSH1 0xD4 PUSH1 0xD0 PUSH1 0x67 JUMP JUMPDEST PUSH1 0xDC JUMP JUMPDEST ADD PUSH1 0xB2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC4 PUSH24 0x4B3F82388B8E099324853FB11A387930CCC2B0039D7D5E38 PUSH26 0x9126ADC14264736F6C634300081B003300000000000000000000 ",
              "sourceMap": "758:269:33:-:0;;;2407:17:8;;:::i;:::-;;:::i;758:269:33:-;;;:::o;884:140::-;951:12;;:::i;:::-;982:35;;;:::i;:::-;975:42;:::o;948:895:8:-;1018:819;948:895;;1018:819;;;;;;;;;;;;;;;;;;;;;;;;758:269:33;;:::o;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;981:115:7:-;1030:66;;;:::i;:::-;981:115;:::o;1030:66::-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;1175:140::-;1228:7;;:::i;:::-;1281:20;1254:54;;:48;1281:20;;:::i;:::-;1254:48;:::i;:::-;:54;;:::i;:::-;1247:61;:::o;1859:190:17:-;;:::o"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an implementation address that can be changed. This address is stored in storage in the location specified by https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the implementation behind the proxy.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/openzeppelin/ERC1967Proxy.sol\":\"ERC1967Proxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/proxies/openzeppelin/TransparentUpgradeableProxy.sol": {
        "ITransparentUpgradeableProxy": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "admin",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "changeAdmin",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "implementation",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "upgradeTo",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "",
                  "type": "bytes"
                }
              ],
              "name": "upgradeToAndCall",
              "outputs": [],
              "stateMutability": "payable",
              "type": "function"
            }
          ],
          "devdoc": {
            "details": "Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy} does not implement this interface directly, and some of its functions are implemented by an internal dispatch mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not include them in the ABI so this interface must be used to interact with it.",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "admin()": "f851a440",
              "changeAdmin(address)": "8f283970",
              "implementation()": "5c60da1b",
              "upgradeTo(address)": "3659cfe6",
              "upgradeToAndCall(address,bytes)": "4f1ef286"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy} does not implement this interface directly, and some of its functions are implemented by an internal dispatch mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not include them in the ABI so this interface must be used to interact with it.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":\"ITransparentUpgradeableProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        },
        "TransparentUpgradeableProxy": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "previousAdmin",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "newAdmin",
                  "type": "address"
                }
              ],
              "name": "AdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "beacon",
                  "type": "address"
                }
              ],
              "name": "BeaconUpgraded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "Upgraded",
              "type": "event"
            },
            {
              "stateMutability": "payable",
              "type": "fallback"
            },
            {
              "stateMutability": "payable",
              "type": "receive"
            }
          ],
          "devdoc": {
            "details": "This contract implements a proxy that is upgradeable by an admin. Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation. This potentially exposes the admin to a proxy selector attack. See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing]. When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors. The proxy selectors are: - 0x3659cfe6: upgradeTo - 0x4f1ef286: upgradeToAndCall - 0x8f283970: changeAdmin - 0xf851a440: admin - 0x5c60da1b: implementation NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to fully implement transparency without decoding reverts caused by selector clashes between the proxy and the implementation. WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler will not check that there are no selector conflicts, due to the note above. A selector clash between any new function and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.",
            "events": {
              "AdminChanged(address,address)": {
                "details": "Emitted when the admin account has changed."
              },
              "BeaconUpgraded(address)": {
                "details": "Emitted when the beacon is changed."
              },
              "Upgraded(address)": {
                "details": "Emitted when the implementation is upgraded."
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_unbounded": {
                  "entryPoint": 32,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234601c57600e6020565b610db061002c8239610db090f35b6026565b60405190565b600080fdfe6080604052361561003757610037565b60018060a01b031690565b6100239061000f565b90565b606090565b63ffffffff60e01b1690565b3361005161004b6100466101f8565b61001a565b9161001a565b1460001461016857610061610026565b5063ffffffff60e01b6000351680610088610082631b2ce7f360e11b61002b565b9161002b565b146000146100a257506100996105f9565b5b602081519101f35b806100bc6100b663278f794360e11b61002b565b9161002b565b146000146100d357506100cd6105a3565b5b61009a565b806100ed6100e76308f2839760e41b61002b565b9161002b565b1460001461010457506100fe610473565b5b6100ce565b8061011e6101186303e1469160e61b61002b565b9161002b565b14600014610135575061012f6102e3565b5b6100ff565b61014e610148635c60da1b60e01b61002b565b9161002b565b146000146101635761015e61029e565b610130565b61021f565b61021f565b600090565b90565b90565b60001b90565b61019261018d61019792610172565b610178565b610175565b90565b6101c37fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610361017e565b90565b60001c90565b60018060a01b031690565b6101e36101e8916101c6565b6101cc565b90565b6101f590546101d7565b90565b61020061016d565b5061021c600061021661021161019a565b61065c565b016101eb565b90565b61022761065f565b610673565b60405190565b61023b9061001a565b9052565b919061025390600060208501940190610232565b565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061027f90610255565b810190811067ffffffffffffffff82111761029957604052565b61025f565b6102a6610026565b506102af6106c1565b6102d16102e06102bd61065f565b6102c561022c565b9283916020830161023f565b60208201810382520382610275565b90565b6102eb610026565b506102f46106c1565b6103166103256103026101f8565b61030a61022c565b9283916020830161023f565b60208201810382520382610275565b90565b90565b90565b90565b61034561034061034a92610328565b61032e565b61032b565b90565b600080fd5b600080fd5b90939293848311610377578411610372576001820201920390565b610352565b61034d565b91565b600080fd5b600080fd5b6103929061000f565b90565b61039e81610389565b036103a557565b600080fd5b905035906103b782610395565b565b906020828203126103d3576103d0916000016103aa565b90565b61037f565b6103ec6103e76103f19261000f565b61032e565b61000f565b90565b6103fd906103d8565b90565b610409906103f4565b90565b9061041f61041861022c565b9283610275565b565b67ffffffffffffffff811161043f5761043b602091610255565b0190565b61025f565b9061045661045183610421565b61040c565b918252565b6104656000610444565b90565b61047061045b565b90565b61047b610026565b506104846106c1565b6104c06104bb6104b66104ae6104a86000366104a06004610331565b908092610357565b9061037c565b8101906103b9565b610400565b610704565b6104c8610468565b90565b600080fd5b600080fd5b67ffffffffffffffff81116104f3576104ef602091610255565b0190565b61025f565b90826000939282370152565b90929192610519610514826104d5565b61040c565b9381855260208501908284011161053557610533926104f8565b565b6104d0565b9080601f830112156105585781602061055593359101610504565b90565b6104cb565b91909160408184031261059e5761057783600083016103aa565b92602082013567ffffffffffffffff811161059957610596920161053a565b90565b610384565b61037f565b6105ab610026565b506105ee6105e56105de6105d66105d06000366105c86004610331565b908092610357565b9061037c565b81019061055d565b9190610400565b90600191610755565b6105f6610468565b90565b610601610026565b5061060a6106c1565b61065161064161063c61063461062e6000366106266004610331565b908092610357565b9061037c565b8101906103b9565b610400565b610649610468565b600091610755565b610659610468565b90565b90565b61066761016d565b506106706107f2565b90565b60008091368280378136915af43d6000803e600014610691573d6000f35b3d6000fd5b90565b6106ad6106a86106b292610696565b61032e565b61032b565b90565b156106bc57565b600080fd5b6106de346106d86106d26000610699565b9161032b565b146106b5565b565b9160206107029294936106fb60408201966000830190610232565b0190610232565b565b61074f906107106101f8565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9161074761073e61022c565b928392836106e0565b0390a161093e565b565b5190565b9161075f83610988565b61076882610751565b61077b6107756000610699565b9161032b565b1190811561079f575b5061078e575b5050565b61079791610a45565b50388061078a565b905038610784565b90565b6107be6107b96107c3926107a7565b610178565b610175565b90565b6107ef7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6107aa565b90565b6107fa61016d565b50610816600061081061080b6107c6565b61065c565b016101eb565b90565b61082d61082861083292610696565b61032e565b61000f565b90565b61083e90610819565b90565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b6108a56026604092610841565b6108ae8161084a565b0190565b6108c89060208101906000818303910152610898565b90565b156108d257565b6108da61022c565b62461bcd60e51b8152806108f0600482016108b2565b0390fd5b9061090560018060a01b0391610178565b9181191691161790565b610918906103f4565b90565b90565b9061093361092e61093a9261090f565b61091b565b82546108f4565b9055565b610980906109688161096161095b6109566000610835565b61001a565b9161001a565b14156108cb565b600061097a61097561019a565b61065c565b0161091e565b565b60000190565b61099181610b0f565b6109bb7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9161090f565b906109c461022c565b806109ce81610982565b0390a2565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610a2b6027610444565b90610a38602083016109d3565b565b610a42610a21565b90565b90610a6291610a52610026565b5090610a5c610a3a565b91610b80565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b610ac0602d604092610841565b610ac981610a65565b0190565b610ae39060208101906000818303910152610ab3565b90565b15610aed57565b610af561022c565b62461bcd60e51b815280610b0b60048201610acd565b0390fd5b610b3c90610b24610b1f82610bb8565b610ae6565b6000610b36610b316107c6565b61065c565b0161091e565b565b90610b50610b4b836104d5565b61040c565b918252565b3d600014610b7257610b663d610b3e565b903d6000602084013e5b565b610b7a610026565b90610b70565b9091600080610bb094610b91610026565b508490602081019051915af491610ba6610b55565b9092909192610c5d565b90565b600090565b610bc0610bb3565b503b610bd5610bcf6000610699565b9161032b565b1190565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610c0e601d602092610841565b610c1781610bd9565b0190565b610c319060208101906000818303910152610c01565b90565b15610c3b57565b610c4361022c565b62461bcd60e51b815280610c5960048201610c1b565b0390fd5b919290610c68610026565b50600014610cae5750610c7a82610751565b610c8d610c876000610699565b9161032b565b14610c97575b5090565b610ca3610ca891610bb8565b610c34565b38610c93565b82610d27565b5190565b60005b838110610ccc575050906000910152565b806020918301518185015201610cbb565b610cfc610d05602093610d0a93610cf381610cb4565b93848093610841565b95869101610cb8565b610255565b0190565b610d249160208201916000818403910152610cdd565b90565b90610d3182610751565b610d44610d3e6000610699565b9161032b565b11600014610d555750805190602001fd5b610d7690610d6161022c565b91829162461bcd60e51b835260048301610d0e565b0390fdfea26469706673582212204e42c1b81ea1dd5dcc8fbcb8bfdf933e9239705676a402a624342386fe3fb73064736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0xDB0 PUSH2 0x2C DUP3 CODECOPY PUSH2 0xDB0 SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x37 JUMPI PUSH2 0x37 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x23 SWAP1 PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST CALLER PUSH2 0x51 PUSH2 0x4B PUSH2 0x46 PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x1A JUMP JUMPDEST SWAP2 PUSH2 0x1A JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x168 JUMPI PUSH2 0x61 PUSH2 0x26 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x88 PUSH2 0x82 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0xA2 JUMPI POP PUSH2 0x99 PUSH2 0x5F9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0xBC PUSH2 0xB6 PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0xD3 JUMPI POP PUSH2 0xCD PUSH2 0x5A3 JUMP JUMPDEST JUMPDEST PUSH2 0x9A JUMP JUMPDEST DUP1 PUSH2 0xED PUSH2 0xE7 PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x104 JUMPI POP PUSH2 0xFE PUSH2 0x473 JUMP JUMPDEST JUMPDEST PUSH2 0xCE JUMP JUMPDEST DUP1 PUSH2 0x11E PUSH2 0x118 PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x135 JUMPI POP PUSH2 0x12F PUSH2 0x2E3 JUMP JUMPDEST JUMPDEST PUSH2 0xFF JUMP JUMPDEST PUSH2 0x14E PUSH2 0x148 PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x163 JUMPI PUSH2 0x15E PUSH2 0x29E JUMP JUMPDEST PUSH2 0x130 JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x192 PUSH2 0x18D PUSH2 0x197 SWAP3 PUSH2 0x172 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST PUSH2 0x175 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1C3 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x1E8 SWAP2 PUSH2 0x1C6 JUMP JUMPDEST PUSH2 0x1CC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F5 SWAP1 SLOAD PUSH2 0x1D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x200 PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x21C PUSH1 0x0 PUSH2 0x216 PUSH2 0x211 PUSH2 0x19A JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x1EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x227 PUSH2 0x65F JUMP JUMPDEST PUSH2 0x673 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x23B SWAP1 PUSH2 0x1A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x253 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x27F SWAP1 PUSH2 0x255 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x299 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST PUSH2 0x2A6 PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x2AF PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x2E0 PUSH2 0x2BD PUSH2 0x65F JUMP JUMPDEST PUSH2 0x2C5 PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x23F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x275 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2EB PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x2F4 PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x325 PUSH2 0x302 PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x30A PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x23F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x275 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x345 PUSH2 0x340 PUSH2 0x34A SWAP3 PUSH2 0x328 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0x32B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x377 JUMPI DUP5 GT PUSH2 0x372 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST PUSH2 0x34D JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x392 SWAP1 PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x39E DUP2 PUSH2 0x389 JUMP JUMPDEST SUB PUSH2 0x3A5 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x3B7 DUP3 PUSH2 0x395 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x3D3 JUMPI PUSH2 0x3D0 SWAP2 PUSH1 0x0 ADD PUSH2 0x3AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x37F JUMP JUMPDEST PUSH2 0x3EC PUSH2 0x3E7 PUSH2 0x3F1 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FD SWAP1 PUSH2 0x3D8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 SWAP1 PUSH2 0x3F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x41F PUSH2 0x418 PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x275 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x43F JUMPI PUSH2 0x43B PUSH1 0x20 SWAP2 PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 PUSH2 0x456 PUSH2 0x451 DUP4 PUSH2 0x421 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x465 PUSH1 0x0 PUSH2 0x444 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x470 PUSH2 0x45B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x47B PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x484 PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x4C0 PUSH2 0x4BB PUSH2 0x4B6 PUSH2 0x4AE PUSH2 0x4A8 PUSH1 0x0 CALLDATASIZE PUSH2 0x4A0 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3B9 JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH2 0x704 JUMP JUMPDEST PUSH2 0x4C8 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4F3 JUMPI PUSH2 0x4EF PUSH1 0x20 SWAP2 PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x519 PUSH2 0x514 DUP3 PUSH2 0x4D5 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x535 JUMPI PUSH2 0x533 SWAP3 PUSH2 0x4F8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4D0 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x558 JUMPI DUP2 PUSH1 0x20 PUSH2 0x555 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x504 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4CB JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x59E JUMPI PUSH2 0x577 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x3AA JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x599 JUMPI PUSH2 0x596 SWAP3 ADD PUSH2 0x53A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x384 JUMP JUMPDEST PUSH2 0x37F JUMP JUMPDEST PUSH2 0x5AB PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x5EE PUSH2 0x5E5 PUSH2 0x5DE PUSH2 0x5D6 PUSH2 0x5D0 PUSH1 0x0 CALLDATASIZE PUSH2 0x5C8 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x55D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x400 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0x755 JUMP JUMPDEST PUSH2 0x5F6 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x601 PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x60A PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x651 PUSH2 0x641 PUSH2 0x63C PUSH2 0x634 PUSH2 0x62E PUSH1 0x0 CALLDATASIZE PUSH2 0x626 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3B9 JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH2 0x649 PUSH2 0x468 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x755 JUMP JUMPDEST PUSH2 0x659 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x667 PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x670 PUSH2 0x7F2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0x691 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6A8 PUSH2 0x6B2 SWAP3 PUSH2 0x696 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0x32B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x6BC JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6DE CALLVALUE PUSH2 0x6D8 PUSH2 0x6D2 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST EQ PUSH2 0x6B5 JUMP JUMPDEST JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x702 SWAP3 SWAP5 SWAP4 PUSH2 0x6FB PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x74F SWAP1 PUSH2 0x710 PUSH2 0x1F8 JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x747 PUSH2 0x73E PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x6E0 JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0x93E JUMP JUMPDEST JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x75F DUP4 PUSH2 0x988 JUMP JUMPDEST PUSH2 0x768 DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0x77B PUSH2 0x775 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0x79F JUMPI JUMPDEST POP PUSH2 0x78E JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x797 SWAP2 PUSH2 0xA45 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0x78A JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x784 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7BE PUSH2 0x7B9 PUSH2 0x7C3 SWAP3 PUSH2 0x7A7 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST PUSH2 0x175 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7EF PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x7AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7FA PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x816 PUSH1 0x0 PUSH2 0x810 PUSH2 0x80B PUSH2 0x7C6 JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x1EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x82D PUSH2 0x828 PUSH2 0x832 SWAP3 PUSH2 0x696 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x83E SWAP1 PUSH2 0x819 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x8A5 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0x8AE DUP2 PUSH2 0x84A JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x8C8 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x898 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x8D2 JUMPI JUMP JUMPDEST PUSH2 0x8DA PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x8F0 PUSH1 0x4 DUP3 ADD PUSH2 0x8B2 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x905 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x178 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x3F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x933 PUSH2 0x92E PUSH2 0x93A SWAP3 PUSH2 0x90F JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST DUP3 SLOAD PUSH2 0x8F4 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x980 SWAP1 PUSH2 0x968 DUP2 PUSH2 0x961 PUSH2 0x95B PUSH2 0x956 PUSH1 0x0 PUSH2 0x835 JUMP JUMPDEST PUSH2 0x1A JUMP JUMPDEST SWAP2 PUSH2 0x1A JUMP JUMPDEST EQ ISZERO PUSH2 0x8CB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x97A PUSH2 0x975 PUSH2 0x19A JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x91E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x991 DUP2 PUSH2 0xB0F JUMP JUMPDEST PUSH2 0x9BB PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x90F JUMP JUMPDEST SWAP1 PUSH2 0x9C4 PUSH2 0x22C JUMP JUMPDEST DUP1 PUSH2 0x9CE DUP2 PUSH2 0x982 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xA2B PUSH1 0x27 PUSH2 0x444 JUMP JUMPDEST SWAP1 PUSH2 0xA38 PUSH1 0x20 DUP4 ADD PUSH2 0x9D3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xA42 PUSH2 0xA21 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xA62 SWAP2 PUSH2 0xA52 PUSH2 0x26 JUMP JUMPDEST POP SWAP1 PUSH2 0xA5C PUSH2 0xA3A JUMP JUMPDEST SWAP2 PUSH2 0xB80 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xAC0 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0xAC9 DUP2 PUSH2 0xA65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xAE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xAB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xAED JUMPI JUMP JUMPDEST PUSH2 0xAF5 PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xB0B PUSH1 0x4 DUP3 ADD PUSH2 0xACD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xB3C SWAP1 PUSH2 0xB24 PUSH2 0xB1F DUP3 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB36 PUSH2 0xB31 PUSH2 0x7C6 JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x91E JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0xB50 PUSH2 0xB4B DUP4 PUSH2 0x4D5 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0xB72 JUMPI PUSH2 0xB66 RETURNDATASIZE PUSH2 0xB3E JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0xB7A PUSH2 0x26 JUMP JUMPDEST SWAP1 PUSH2 0xB70 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0xBB0 SWAP5 PUSH2 0xB91 PUSH2 0x26 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0xBA6 PUSH2 0xB55 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0xC5D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xBC0 PUSH2 0xBB3 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0xBD5 PUSH2 0xBCF PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xC0E PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0xC17 DUP2 PUSH2 0xBD9 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xC31 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xC01 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xC3B JUMPI JUMP JUMPDEST PUSH2 0xC43 PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC59 PUSH1 0x4 DUP3 ADD PUSH2 0xC1B JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0xC68 PUSH2 0x26 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0xCAE JUMPI POP PUSH2 0xC7A DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0xC8D PUSH2 0xC87 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST EQ PUSH2 0xC97 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0xCA3 PUSH2 0xCA8 SWAP2 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0xC34 JUMP JUMPDEST CODESIZE PUSH2 0xC93 JUMP JUMPDEST DUP3 PUSH2 0xD27 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0xCCC JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0xCBB JUMP JUMPDEST PUSH2 0xCFC PUSH2 0xD05 PUSH1 0x20 SWAP4 PUSH2 0xD0A SWAP4 PUSH2 0xCF3 DUP2 PUSH2 0xCB4 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x841 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0xCB8 JUMP JUMPDEST PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD24 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xCDD JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xD31 DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0xD44 PUSH2 0xD3E PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0xD55 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0xD76 SWAP1 PUSH2 0xD61 PUSH2 0x22C JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0xD0E JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E TIMESTAMP 0xC1 0xB8 0x1E LOG1 0xDD TSTORE 0xCC DUP16 0xBC 0xB8 0xBF 0xDF SWAP4 RETURNDATACOPY SWAP3 CODECOPY PUSH17 0x5676A402A624342386FE3FB73064736F6C PUSH4 0x4300081B STOP CALLER ",
              "sourceMap": "2857:4583:34:-:0;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode_address_payable": {
                  "entryPoint": 938,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_address_payablet_bytes": {
                  "entryPoint": 1373,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_available_length_bytes": {
                  "entryPoint": 1284,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_bytes": {
                  "entryPoint": 1338,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_payable": {
                  "entryPoint": 953,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 562,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_address": {
                  "entryPoint": 1760,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 3342,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_memory_ptr": {
                  "entryPoint": 3293,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral": {
                  "entryPoint": 2200,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_972b": {
                  "entryPoint": 2739,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_cc2e": {
                  "entryPoint": 3099,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
                  "entryPoint": 3073,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 2434,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 575,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral": {
                  "entryPoint": 2226,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_972b": {
                  "entryPoint": 2765,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 1036,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_bytes": {
                  "entryPoint": 2878,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_string": {
                  "entryPoint": 1092,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 556,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_bytes": {
                  "entryPoint": 1237,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_allocation_size_string": {
                  "entryPoint": 1057,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_bytes": {
                  "entryPoint": 1873,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_string": {
                  "entryPoint": 3252,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 2113,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_array_index_range_access_bytes_calldata": {
                  "entryPoint": 855,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 2
                },
                "cleanup_address": {
                  "entryPoint": 26,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_address_payable": {
                  "entryPoint": 905,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes32": {
                  "entryPoint": 373,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes4": {
                  "entryPoint": 43,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 460,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 808,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by_1": {
                  "entryPoint": 1686,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by": {
                  "entryPoint": 370,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by_1": {
                  "entryPoint": 1959,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 15,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 811,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constant_ADMIN_SLOT": {
                  "entryPoint": 410,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_IMPLEMENTATION_SLOT": {
                  "entryPoint": 1990,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_address_payable_to_address": {
                  "entryPoint": 1024,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 2319,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_bytes_calldata_slice_to_bytes_calldata": {
                  "entryPoint": 892,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 2101,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_bytes32": {
                  "entryPoint": 1962,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 2073,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 817,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_stringliteral_9fdc_to_string": {
                  "entryPoint": 2618,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_c5d2_to_bytes": {
                  "entryPoint": 1128,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_bytes32": {
                  "entryPoint": 382,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint256": {
                  "entryPoint": 1689,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 1012,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 984,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_calldata_to_memory_with_cleanup": {
                  "entryPoint": 1272,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_literal_to_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398": {
                  "entryPoint": 2593,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_literal_to_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470": {
                  "entryPoint": 1115,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 3256,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 471,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_returndata": {
                  "entryPoint": 2901,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 629,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun": {
                  "entryPoint": null,
                  "id": 1032,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_": {
                  "entryPoint": null,
                  "id": 1024,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun__fallback": {
                  "entryPoint": 543,
                  "id": 1016,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_changeAdmin": {
                  "entryPoint": 1796,
                  "id": 894,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_delegate": {
                  "entryPoint": 1651,
                  "id": 997,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_dispatchAdmin": {
                  "entryPoint": 739,
                  "id": 6199,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchChangeAdmin": {
                  "entryPoint": 1139,
                  "id": 6248,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchImplementation": {
                  "entryPoint": 670,
                  "id": 6219,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchUpgradeTo": {
                  "entryPoint": 1529,
                  "id": 6282,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_dispatchUpgradeToAndCall": {
                  "entryPoint": 1443,
                  "id": 6314,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_fallback": {
                  "entryPoint": 55,
                  "id": 6179,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_functionDelegateCall": {
                  "entryPoint": 2629,
                  "id": 2030,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_functionDelegateCall_2059": {
                  "entryPoint": 2944,
                  "id": 2059,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_getAddressSlot": {
                  "entryPoint": 1628,
                  "id": 2278,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getAdmin": {
                  "entryPoint": 504,
                  "id": 851,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_getImplementation": {
                  "entryPoint": 2034,
                  "id": 712,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_implementation": {
                  "entryPoint": 1631,
                  "id": 6032,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_isContract": {
                  "entryPoint": 3000,
                  "id": 1831,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_requireZeroValue": {
                  "entryPoint": 1729,
                  "id": 6336,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_revert": {
                  "entryPoint": 3367,
                  "id": 2142,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_setAdmin": {
                  "entryPoint": 2366,
                  "id": 877,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setImplementation": {
                  "entryPoint": 2831,
                  "id": 736,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeTo": {
                  "entryPoint": 2440,
                  "id": 751,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeToAndCall": {
                  "entryPoint": 1877,
                  "id": 781,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_verifyCallResultFromTarget": {
                  "entryPoint": 3165,
                  "id": 2098,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 814,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 607,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 2331,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 491,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper": {
                  "entryPoint": 1717,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral": {
                  "entryPoint": 2251,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_972b": {
                  "entryPoint": 2790,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_cc2e": {
                  "entryPoint": 3124,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
                  "entryPoint": 1227,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_46e3e63c93837e9efa638abb3b4e76ced8c11259a873f1381a0abdf6ae6a823c": {
                  "entryPoint": 850,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_7678404c0552a58cf14944d1a786cf4c81aab3563e2735cb332aee47bbb57c4a": {
                  "entryPoint": 845,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
                  "entryPoint": 1232,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
                  "entryPoint": 900,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 895,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 597,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 376,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 454,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "store_literal_in_memory_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5": {
                  "entryPoint": 2122,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65": {
                  "entryPoint": 2661,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398": {
                  "entryPoint": 2515,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
                  "entryPoint": 3033,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 2292,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 2334,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address_payable": {
                  "entryPoint": 917,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 365,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 2995,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bytes": {
                  "entryPoint": 38,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052361561003757610037565b60018060a01b031690565b6100239061000f565b90565b606090565b63ffffffff60e01b1690565b3361005161004b6100466101f8565b61001a565b9161001a565b1460001461016857610061610026565b5063ffffffff60e01b6000351680610088610082631b2ce7f360e11b61002b565b9161002b565b146000146100a257506100996105f9565b5b602081519101f35b806100bc6100b663278f794360e11b61002b565b9161002b565b146000146100d357506100cd6105a3565b5b61009a565b806100ed6100e76308f2839760e41b61002b565b9161002b565b1460001461010457506100fe610473565b5b6100ce565b8061011e6101186303e1469160e61b61002b565b9161002b565b14600014610135575061012f6102e3565b5b6100ff565b61014e610148635c60da1b60e01b61002b565b9161002b565b146000146101635761015e61029e565b610130565b61021f565b61021f565b600090565b90565b90565b60001b90565b61019261018d61019792610172565b610178565b610175565b90565b6101c37fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610361017e565b90565b60001c90565b60018060a01b031690565b6101e36101e8916101c6565b6101cc565b90565b6101f590546101d7565b90565b61020061016d565b5061021c600061021661021161019a565b61065c565b016101eb565b90565b61022761065f565b610673565b60405190565b61023b9061001a565b9052565b919061025390600060208501940190610232565b565b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061027f90610255565b810190811067ffffffffffffffff82111761029957604052565b61025f565b6102a6610026565b506102af6106c1565b6102d16102e06102bd61065f565b6102c561022c565b9283916020830161023f565b60208201810382520382610275565b90565b6102eb610026565b506102f46106c1565b6103166103256103026101f8565b61030a61022c565b9283916020830161023f565b60208201810382520382610275565b90565b90565b90565b90565b61034561034061034a92610328565b61032e565b61032b565b90565b600080fd5b600080fd5b90939293848311610377578411610372576001820201920390565b610352565b61034d565b91565b600080fd5b600080fd5b6103929061000f565b90565b61039e81610389565b036103a557565b600080fd5b905035906103b782610395565b565b906020828203126103d3576103d0916000016103aa565b90565b61037f565b6103ec6103e76103f19261000f565b61032e565b61000f565b90565b6103fd906103d8565b90565b610409906103f4565b90565b9061041f61041861022c565b9283610275565b565b67ffffffffffffffff811161043f5761043b602091610255565b0190565b61025f565b9061045661045183610421565b61040c565b918252565b6104656000610444565b90565b61047061045b565b90565b61047b610026565b506104846106c1565b6104c06104bb6104b66104ae6104a86000366104a06004610331565b908092610357565b9061037c565b8101906103b9565b610400565b610704565b6104c8610468565b90565b600080fd5b600080fd5b67ffffffffffffffff81116104f3576104ef602091610255565b0190565b61025f565b90826000939282370152565b90929192610519610514826104d5565b61040c565b9381855260208501908284011161053557610533926104f8565b565b6104d0565b9080601f830112156105585781602061055593359101610504565b90565b6104cb565b91909160408184031261059e5761057783600083016103aa565b92602082013567ffffffffffffffff811161059957610596920161053a565b90565b610384565b61037f565b6105ab610026565b506105ee6105e56105de6105d66105d06000366105c86004610331565b908092610357565b9061037c565b81019061055d565b9190610400565b90600191610755565b6105f6610468565b90565b610601610026565b5061060a6106c1565b61065161064161063c61063461062e6000366106266004610331565b908092610357565b9061037c565b8101906103b9565b610400565b610649610468565b600091610755565b610659610468565b90565b90565b61066761016d565b506106706107f2565b90565b60008091368280378136915af43d6000803e600014610691573d6000f35b3d6000fd5b90565b6106ad6106a86106b292610696565b61032e565b61032b565b90565b156106bc57565b600080fd5b6106de346106d86106d26000610699565b9161032b565b146106b5565b565b9160206107029294936106fb60408201966000830190610232565b0190610232565b565b61074f906107106101f8565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f9161074761073e61022c565b928392836106e0565b0390a161093e565b565b5190565b9161075f83610988565b61076882610751565b61077b6107756000610699565b9161032b565b1190811561079f575b5061078e575b5050565b61079791610a45565b50388061078a565b905038610784565b90565b6107be6107b96107c3926107a7565b610178565b610175565b90565b6107ef7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6107aa565b90565b6107fa61016d565b50610816600061081061080b6107c6565b61065c565b016101eb565b90565b61082d61082861083292610696565b61032e565b61000f565b90565b61083e90610819565b90565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b6108a56026604092610841565b6108ae8161084a565b0190565b6108c89060208101906000818303910152610898565b90565b156108d257565b6108da61022c565b62461bcd60e51b8152806108f0600482016108b2565b0390fd5b9061090560018060a01b0391610178565b9181191691161790565b610918906103f4565b90565b90565b9061093361092e61093a9261090f565b61091b565b82546108f4565b9055565b610980906109688161096161095b6109566000610835565b61001a565b9161001a565b14156108cb565b600061097a61097561019a565b61065c565b0161091e565b565b60000190565b61099181610b0f565b6109bb7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b9161090f565b906109c461022c565b806109ce81610982565b0390a2565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610a2b6027610444565b90610a38602083016109d3565b565b610a42610a21565b90565b90610a6291610a52610026565b5090610a5c610a3a565b91610b80565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b610ac0602d604092610841565b610ac981610a65565b0190565b610ae39060208101906000818303910152610ab3565b90565b15610aed57565b610af561022c565b62461bcd60e51b815280610b0b60048201610acd565b0390fd5b610b3c90610b24610b1f82610bb8565b610ae6565b6000610b36610b316107c6565b61065c565b0161091e565b565b90610b50610b4b836104d5565b61040c565b918252565b3d600014610b7257610b663d610b3e565b903d6000602084013e5b565b610b7a610026565b90610b70565b9091600080610bb094610b91610026565b508490602081019051915af491610ba6610b55565b9092909192610c5d565b90565b600090565b610bc0610bb3565b503b610bd5610bcf6000610699565b9161032b565b1190565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b610c0e601d602092610841565b610c1781610bd9565b0190565b610c319060208101906000818303910152610c01565b90565b15610c3b57565b610c4361022c565b62461bcd60e51b815280610c5960048201610c1b565b0390fd5b919290610c68610026565b50600014610cae5750610c7a82610751565b610c8d610c876000610699565b9161032b565b14610c97575b5090565b610ca3610ca891610bb8565b610c34565b38610c93565b82610d27565b5190565b60005b838110610ccc575050906000910152565b806020918301518185015201610cbb565b610cfc610d05602093610d0a93610cf381610cb4565b93848093610841565b95869101610cb8565b610255565b0190565b610d249160208201916000818403910152610cdd565b90565b90610d3182610751565b610d44610d3e6000610699565b9161032b565b11600014610d555750805190602001fd5b610d7690610d6161022c565b91829162461bcd60e51b835260048301610d0e565b0390fdfea26469706673582212204e42c1b81ea1dd5dcc8fbcb8bfdf933e9239705676a402a624342386fe3fb73064736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x37 JUMPI PUSH2 0x37 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x23 SWAP1 PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST CALLER PUSH2 0x51 PUSH2 0x4B PUSH2 0x46 PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x1A JUMP JUMPDEST SWAP2 PUSH2 0x1A JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x168 JUMPI PUSH2 0x61 PUSH2 0x26 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x88 PUSH2 0x82 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0xA2 JUMPI POP PUSH2 0x99 PUSH2 0x5F9 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0xBC PUSH2 0xB6 PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0xD3 JUMPI POP PUSH2 0xCD PUSH2 0x5A3 JUMP JUMPDEST JUMPDEST PUSH2 0x9A JUMP JUMPDEST DUP1 PUSH2 0xED PUSH2 0xE7 PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x104 JUMPI POP PUSH2 0xFE PUSH2 0x473 JUMP JUMPDEST JUMPDEST PUSH2 0xCE JUMP JUMPDEST DUP1 PUSH2 0x11E PUSH2 0x118 PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x135 JUMPI POP PUSH2 0x12F PUSH2 0x2E3 JUMP JUMPDEST JUMPDEST PUSH2 0xFF JUMP JUMPDEST PUSH2 0x14E PUSH2 0x148 PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x2B JUMP JUMPDEST SWAP2 PUSH2 0x2B JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x163 JUMPI PUSH2 0x15E PUSH2 0x29E JUMP JUMPDEST PUSH2 0x130 JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x192 PUSH2 0x18D PUSH2 0x197 SWAP3 PUSH2 0x172 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST PUSH2 0x175 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1C3 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x1E8 SWAP2 PUSH2 0x1C6 JUMP JUMPDEST PUSH2 0x1CC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1F5 SWAP1 SLOAD PUSH2 0x1D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x200 PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x21C PUSH1 0x0 PUSH2 0x216 PUSH2 0x211 PUSH2 0x19A JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x1EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x227 PUSH2 0x65F JUMP JUMPDEST PUSH2 0x673 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x23B SWAP1 PUSH2 0x1A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x253 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x27F SWAP1 PUSH2 0x255 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x299 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST PUSH2 0x2A6 PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x2AF PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x2D1 PUSH2 0x2E0 PUSH2 0x2BD PUSH2 0x65F JUMP JUMPDEST PUSH2 0x2C5 PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x23F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x275 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2EB PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x2F4 PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x316 PUSH2 0x325 PUSH2 0x302 PUSH2 0x1F8 JUMP JUMPDEST PUSH2 0x30A PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x23F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x275 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x345 PUSH2 0x340 PUSH2 0x34A SWAP3 PUSH2 0x328 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0x32B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x377 JUMPI DUP5 GT PUSH2 0x372 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x352 JUMP JUMPDEST PUSH2 0x34D JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x392 SWAP1 PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x39E DUP2 PUSH2 0x389 JUMP JUMPDEST SUB PUSH2 0x3A5 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x3B7 DUP3 PUSH2 0x395 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x3D3 JUMPI PUSH2 0x3D0 SWAP2 PUSH1 0x0 ADD PUSH2 0x3AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x37F JUMP JUMPDEST PUSH2 0x3EC PUSH2 0x3E7 PUSH2 0x3F1 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FD SWAP1 PUSH2 0x3D8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 SWAP1 PUSH2 0x3F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x41F PUSH2 0x418 PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x275 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x43F JUMPI PUSH2 0x43B PUSH1 0x20 SWAP2 PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 PUSH2 0x456 PUSH2 0x451 DUP4 PUSH2 0x421 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x465 PUSH1 0x0 PUSH2 0x444 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x470 PUSH2 0x45B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x47B PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x484 PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x4C0 PUSH2 0x4BB PUSH2 0x4B6 PUSH2 0x4AE PUSH2 0x4A8 PUSH1 0x0 CALLDATASIZE PUSH2 0x4A0 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3B9 JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH2 0x704 JUMP JUMPDEST PUSH2 0x4C8 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4F3 JUMPI PUSH2 0x4EF PUSH1 0x20 SWAP2 PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x519 PUSH2 0x514 DUP3 PUSH2 0x4D5 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x535 JUMPI PUSH2 0x533 SWAP3 PUSH2 0x4F8 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x4D0 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x558 JUMPI DUP2 PUSH1 0x20 PUSH2 0x555 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x504 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x4CB JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x59E JUMPI PUSH2 0x577 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x3AA JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x599 JUMPI PUSH2 0x596 SWAP3 ADD PUSH2 0x53A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x384 JUMP JUMPDEST PUSH2 0x37F JUMP JUMPDEST PUSH2 0x5AB PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x5EE PUSH2 0x5E5 PUSH2 0x5DE PUSH2 0x5D6 PUSH2 0x5D0 PUSH1 0x0 CALLDATASIZE PUSH2 0x5C8 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x55D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x400 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0x755 JUMP JUMPDEST PUSH2 0x5F6 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x601 PUSH2 0x26 JUMP JUMPDEST POP PUSH2 0x60A PUSH2 0x6C1 JUMP JUMPDEST PUSH2 0x651 PUSH2 0x641 PUSH2 0x63C PUSH2 0x634 PUSH2 0x62E PUSH1 0x0 CALLDATASIZE PUSH2 0x626 PUSH1 0x4 PUSH2 0x331 JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x357 JUMP JUMPDEST SWAP1 PUSH2 0x37C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3B9 JUMP JUMPDEST PUSH2 0x400 JUMP JUMPDEST PUSH2 0x649 PUSH2 0x468 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0x755 JUMP JUMPDEST PUSH2 0x659 PUSH2 0x468 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x667 PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x670 PUSH2 0x7F2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0x691 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6A8 PUSH2 0x6B2 SWAP3 PUSH2 0x696 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0x32B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x6BC JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6DE CALLVALUE PUSH2 0x6D8 PUSH2 0x6D2 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST EQ PUSH2 0x6B5 JUMP JUMPDEST JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x702 SWAP3 SWAP5 SWAP4 PUSH2 0x6FB PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x74F SWAP1 PUSH2 0x710 PUSH2 0x1F8 JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x747 PUSH2 0x73E PUSH2 0x22C JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x6E0 JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0x93E JUMP JUMPDEST JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x75F DUP4 PUSH2 0x988 JUMP JUMPDEST PUSH2 0x768 DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0x77B PUSH2 0x775 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0x79F JUMPI JUMPDEST POP PUSH2 0x78E JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x797 SWAP2 PUSH2 0xA45 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0x78A JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x784 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7BE PUSH2 0x7B9 PUSH2 0x7C3 SWAP3 PUSH2 0x7A7 JUMP JUMPDEST PUSH2 0x178 JUMP JUMPDEST PUSH2 0x175 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7EF PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x7AA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7FA PUSH2 0x16D JUMP JUMPDEST POP PUSH2 0x816 PUSH1 0x0 PUSH2 0x810 PUSH2 0x80B PUSH2 0x7C6 JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x1EB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x82D PUSH2 0x828 PUSH2 0x832 SWAP3 PUSH2 0x696 JUMP JUMPDEST PUSH2 0x32E JUMP JUMPDEST PUSH2 0xF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x83E SWAP1 PUSH2 0x819 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x8A5 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0x8AE DUP2 PUSH2 0x84A JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x8C8 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x898 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x8D2 JUMPI JUMP JUMPDEST PUSH2 0x8DA PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x8F0 PUSH1 0x4 DUP3 ADD PUSH2 0x8B2 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x905 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x178 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x3F4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x933 PUSH2 0x92E PUSH2 0x93A SWAP3 PUSH2 0x90F JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST DUP3 SLOAD PUSH2 0x8F4 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x980 SWAP1 PUSH2 0x968 DUP2 PUSH2 0x961 PUSH2 0x95B PUSH2 0x956 PUSH1 0x0 PUSH2 0x835 JUMP JUMPDEST PUSH2 0x1A JUMP JUMPDEST SWAP2 PUSH2 0x1A JUMP JUMPDEST EQ ISZERO PUSH2 0x8CB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x97A PUSH2 0x975 PUSH2 0x19A JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x91E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x991 DUP2 PUSH2 0xB0F JUMP JUMPDEST PUSH2 0x9BB PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x90F JUMP JUMPDEST SWAP1 PUSH2 0x9C4 PUSH2 0x22C JUMP JUMPDEST DUP1 PUSH2 0x9CE DUP2 PUSH2 0x982 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xA2B PUSH1 0x27 PUSH2 0x444 JUMP JUMPDEST SWAP1 PUSH2 0xA38 PUSH1 0x20 DUP4 ADD PUSH2 0x9D3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xA42 PUSH2 0xA21 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xA62 SWAP2 PUSH2 0xA52 PUSH2 0x26 JUMP JUMPDEST POP SWAP1 PUSH2 0xA5C PUSH2 0xA3A JUMP JUMPDEST SWAP2 PUSH2 0xB80 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xAC0 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0xAC9 DUP2 PUSH2 0xA65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xAE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xAB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xAED JUMPI JUMP JUMPDEST PUSH2 0xAF5 PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xB0B PUSH1 0x4 DUP3 ADD PUSH2 0xACD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xB3C SWAP1 PUSH2 0xB24 PUSH2 0xB1F DUP3 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0xAE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB36 PUSH2 0xB31 PUSH2 0x7C6 JUMP JUMPDEST PUSH2 0x65C JUMP JUMPDEST ADD PUSH2 0x91E JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0xB50 PUSH2 0xB4B DUP4 PUSH2 0x4D5 JUMP JUMPDEST PUSH2 0x40C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0xB72 JUMPI PUSH2 0xB66 RETURNDATASIZE PUSH2 0xB3E JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0xB7A PUSH2 0x26 JUMP JUMPDEST SWAP1 PUSH2 0xB70 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0xBB0 SWAP5 PUSH2 0xB91 PUSH2 0x26 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0xBA6 PUSH2 0xB55 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0xC5D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xBC0 PUSH2 0xBB3 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0xBD5 PUSH2 0xBCF PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xC0E PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x841 JUMP JUMPDEST PUSH2 0xC17 DUP2 PUSH2 0xBD9 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xC31 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xC01 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xC3B JUMPI JUMP JUMPDEST PUSH2 0xC43 PUSH2 0x22C JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC59 PUSH1 0x4 DUP3 ADD PUSH2 0xC1B JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0xC68 PUSH2 0x26 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0xCAE JUMPI POP PUSH2 0xC7A DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0xC8D PUSH2 0xC87 PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST EQ PUSH2 0xC97 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0xCA3 PUSH2 0xCA8 SWAP2 PUSH2 0xBB8 JUMP JUMPDEST PUSH2 0xC34 JUMP JUMPDEST CODESIZE PUSH2 0xC93 JUMP JUMPDEST DUP3 PUSH2 0xD27 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0xCCC JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0xCBB JUMP JUMPDEST PUSH2 0xCFC PUSH2 0xD05 PUSH1 0x20 SWAP4 PUSH2 0xD0A SWAP4 PUSH2 0xCF3 DUP2 PUSH2 0xCB4 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x841 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0xCB8 JUMP JUMPDEST PUSH2 0x255 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD24 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xCDD JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xD31 DUP3 PUSH2 0x751 JUMP JUMPDEST PUSH2 0xD44 PUSH2 0xD3E PUSH1 0x0 PUSH2 0x699 JUMP JUMPDEST SWAP2 PUSH2 0x32B JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0xD55 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0xD76 SWAP1 PUSH2 0xD61 PUSH2 0x22C JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0xD0E JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E TIMESTAMP 0xC1 0xB8 0x1E LOG1 0xDD TSTORE 0xCC DUP16 0xBC 0xB8 0xBF 0xDF SWAP4 RETURNDATACOPY SWAP3 CODECOPY PUSH17 0x5676A402A624342386FE3FB73064736F6C PUSH4 0x4300081B STOP CALLER ",
              "sourceMap": "2857:4583:34:-:0;;;;;2853:63:8;2857:4583:34;2629:64:8;:::i;2857:4583:34:-;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::o;:::-;;;;;;:::o;3518:1089::-;3579:10;:25;;3593:11;;:::i;:::-;3579:25;:::i;:::-;;;:::i;:::-;;3575:1026;;;;3620:16;;:::i;:::-;2857:4583;;;;3668:7;;;3693:8;:59;;3705:47;;;3693:59;:::i;:::-;;;:::i;:::-;;3689:766;;;;3778:20;;;:::i;:::-;3689:766;4468:75;;;;;;3689:766;3823:8;:66;;3835:54;;;3823:66;:::i;:::-;;;:::i;:::-;;3819:636;;;;3915:27;;;:::i;:::-;3819:636;3689:766;;3819:636;3967:8;:61;;3979:49;;;3967:61;:::i;:::-;;;:::i;:::-;;3963:492;;;;4054:22;;;:::i;:::-;3963:492;3819:636;;3963:492;4101:8;:55;;4113:43;;;4101:55;:::i;:::-;;;:::i;:::-;;4097:358;;;;4182:16;;;:::i;:::-;4097:358;3963:492;;4097:358;4223:64;;4235:52;;;4223:64;:::i;:::-;;;:::i;:::-;;4219:236;;;;4313:25;;:::i;:::-;4097:358;;4219:236;;:::i;3575:1026::-;;:::i;2857:4583::-;;;:::o;:::-;;:::o;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;3616:106:7:-;3656:66;;;:::i;:::-;3616:106;:::o;3656:66::-;;;;:::o;:::-;2857:4583:34;;;;;3656:66:7;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;3784:122::-;3828:7;;:::i;:::-;3881:11;3854:45;;:39;3881:11;;:::i;:::-;3854:39;:::i;:::-;:45;;:::i;:::-;3847:52;:::o;2322:110:8:-;2407:17;;:::i;:::-;;:::i;2857:4583:34:-;;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;5483:198::-;5535:12;;:::i;:::-;;;;:::i;:::-;5648:26;;5614:17;;:::i;:::-;5648:26;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;5641:33;:::o;4958:165::-;5001:12;;:::i;:::-;;;;:::i;:::-;5099:17;;5071:11;;:::i;:::-;5099:17;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;5092:24;:::o;2857:4583::-;;:::o;:::-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::i;:::-;;:::o;5792:216::-;5841:12;;:::i;:::-;;;;:::i;:::-;5972:8;5895:54;5914:35;;5925:12;:8;;:12;5934:1;5925:12;:::i;:::-;;;;;:::i;:::-;5914:35;;:::i;:::-;;;;;:::i;:::-;5895:54;:::i;:::-;5972:8;:::i;:::-;5992:9;;:::i;:::-;;:::o;2857:4583::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;6622:254::-;6676:12;;:::i;:::-;6760:8;6844:4;6700:91;6749:42;;6760:12;:8;;:12;6769:1;6760:12;:::i;:::-;;;;;:::i;:::-;6749:42;;:::i;:::-;;;;;:::i;:::-;6700:91;;;:::i;:::-;6838:4;6844;;;:::i;:::-;6860:9;;:::i;:::-;;:::o;6083:255::-;6130:12;;:::i;:::-;;;;:::i;:::-;6305:5;6184:63;6212:35;;6223:12;:8;;:12;6232:1;6223:12;:::i;:::-;;;;;:::i;:::-;6212:35;;:::i;:::-;;;;;:::i;:::-;6184:63;:::i;:::-;6294:9;;:::i;:::-;6305:5;;;:::i;:::-;6322:9;;:::i;:::-;;:::o;1859:190:17:-;;:::o;884:140:33:-;951:12;;:::i;:::-;982:35;;;:::i;:::-;975:42;:::o;948:895:8:-;1018:819;948:895;;1018:819;;;;;;;;;;;;;;;;;;;;;;;;2857:4583:34;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;7359:78;7407:23;7415:9;:14;;7428:1;7415:14;:::i;:::-;;;:::i;:::-;;7407:23;:::i;:::-;7359:78::o;2857:4583::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;:::o;4300:135:7:-;4419:8;4300:135;4377:11;;:::i;:::-;4390:8;4364:35;;;;;:::i;:::-;;;;;;:::i;:::-;;;;4419:8;:::i;:::-;4300:135::o;2857:4583:34:-;;;:::o;2057:265:7:-;;2176:17;;;:::i;:::-;2208:11;:4;:11;:::i;:::-;:15;;2222:1;2208:15;:::i;:::-;;;:::i;:::-;;:28;;;;;2057:265;2204:112;;;2057:265;;;:::o;2204:112::-;2252:53;2281:17;2252:53;:::i;:::-;;2204:112;;;;2208:28;2227:9;;2208:28;;;2857:4583:34;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;981:115:7:-;1030:66;;;:::i;:::-;981:115;:::o;1175:140::-;1228:7;;:::i;:::-;1281:20;1254:54;;:48;1281:20;;:::i;:::-;1254:48;:::i;:::-;:54;;:::i;:::-;1247:61;:::o;2857:4583:34:-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;3988:201:7:-;4126:56;3988:201;4043:73;4051:8;:22;;4063:10;4071:1;4063:10;:::i;:::-;4051:22;:::i;:::-;;;:::i;:::-;;;4043:73;:::i;:::-;4126:45;:39;4153:11;;:::i;:::-;4126:39;:::i;:::-;:45;:56;:::i;:::-;3988:201::o;2857:4583:34:-;;;;:::o;1771:152:7:-;1856:17;;;:::i;:::-;1889:27;;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;1771:152::o;2857:4583:34:-;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;;;;;;:::i;:::-;:::o;:::-;;;:::i;:::-;;:::o;6674:198:14:-;;6788:77;6674:198;6757:12;;:::i;:::-;6809:6;6817:4;6788:77;;:::i;:::-;;;:::i;:::-;6781:84;:::o;2857:4583:34:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;1406:259:7;1584:74;1406:259;1479:95;1487:37;1506:17;1487:37;:::i;:::-;1479:95;:::i;:::-;1584:54;:48;1611:20;;:::i;:::-;1584:48;:::i;:::-;:54;:74;:::i;:::-;1406:259::o;2857:4583:34:-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;7058:325:14;;;7265:25;7058:325;7307:69;7058:325;7199:12;;:::i;:::-;7265:6;;7285:4;7265:25;;;;;;;;;;;:::i;:::-;7334:6;7342:7;7351:10;7363:12;7307:69;;:::i;:::-;7300:76;:::o;2857:4583:34:-;;;:::o;1412:320:14:-;1472:4;;:::i;:::-;1702:7;:19;:23;;1724:1;1702:23;:::i;:::-;;;:::i;:::-;;1695:30;:::o;2857:4583:34:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;7671:628:14;;;;7851:12;;:::i;:::-;7879:7;7875:418;;;;7906:10;:17;:10;:17;:::i;:::-;:22;;7927:1;7906:22;:::i;:::-;;;:::i;:::-;;7902:286;;7875:418;8208:10;8201:17;:::o;7902:286::-;8121:18;8113:60;8132:6;8121:18;:::i;:::-;8113:60;:::i;:::-;7902:286;;;7875:418;8257:10;8269:12;:::i;2857:4583:34:-;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;8821:540:14:-;;8980:17;:10;:17;:::i;:::-;:21;;9000:1;8980:21;:::i;:::-;;;:::i;:::-;;8976:379;;;;9152:142;;;;;;;8976:379;9324:20;9331:12;9324:20;;:::i;:::-;2857:4583:34;;;;;;9324:20:14;;;;;;:::i;:::-;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract implements a proxy that is upgradeable by an admin. Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation. This potentially exposes the admin to a proxy selector attack. See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing]. When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors. The proxy selectors are: - 0x3659cfe6: upgradeTo - 0x4f1ef286: upgradeToAndCall - 0x8f283970: changeAdmin - 0xf851a440: admin - 0x5c60da1b: implementation NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to fully implement transparency without decoding reverts caused by selector clashes between the proxy and the implementation. WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler will not check that there are no selector conflicts, due to the note above. A selector clash between any new function and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":\"TransparentUpgradeableProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/tokens/ERC20/ERC20BaseToken.sol": {
        "ERC20BaseToken": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidInitialization",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "delegateCall",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "onlyFallback",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "behaviorOnError",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Payload.Call",
                  "name": "call",
                  "type": "tuple"
                }
              ],
              "name": "acceptImplicitRequest",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "burn",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "subtractedValue",
                  "type": "uint256"
                }
              ],
              "name": "decreaseAllowance",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "addedValue",
                  "type": "uint256"
                }
              ],
              "name": "increaseAllowance",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "tokenName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "tokenSymbol",
                  "type": "string"
                },
                {
                  "internalType": "uint8",
                  "name": "tokenDecimals",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "initialize",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "projectId",
                  "type": "bytes32"
                }
              ],
              "name": "setImplicitModeProjectId",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "validator",
                  "type": "address"
                }
              ],
              "name": "setImplicitModeValidator",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "events": {
              "Approval(address,address,uint256)": {
                "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
              },
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              },
              "Transfer(address,address,uint256)": {
                "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
              }
            },
            "kind": "dev",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "params": {
                  "attestation": "The attestation data",
                  "call": "The call to validate",
                  "wallet": "The wallet's address"
                },
                "returns": {
                  "_0": "The hash of the implicit request if valid"
                }
              },
              "allowance(address,address)": {
                "details": "See {IERC20-allowance}."
              },
              "approve(address,uint256)": {
                "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
              },
              "balanceOf(address)": {
                "details": "See {IERC20-balanceOf}."
              },
              "burn(uint256)": {
                "params": {
                  "amount": "Amount of tokens to burn"
                }
              },
              "decreaseAllowance(address,uint256)": {
                "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
              },
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "increaseAllowance(address,uint256)": {
                "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
              },
              "initialize(address,string,string,uint8,address,bytes32)": {
                "details": "This should be called immediately after deployment.",
                "params": {
                  "implicitModeProjectId": "Implicit session project id",
                  "implicitModeValidator": "Implicit session validator address",
                  "owner": "The owner of the contract",
                  "tokenDecimals": "Number of decimals",
                  "tokenName": "Name of the token",
                  "tokenSymbol": "Symbol of the token"
                }
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "setImplicitModeProjectId(bytes32)": {
                "params": {
                  "projectId": "The project id."
                }
              },
              "setImplicitModeValidator(address)": {
                "params": {
                  "validator": "The validator address."
                }
              },
              "supportsInterface(bytes4)": {
                "params": {
                  "interfaceId": "Interface id"
                },
                "returns": {
                  "_0": "True if supported"
                }
              },
              "totalSupply()": {
                "details": "See {IERC20-totalSupply}."
              },
              "transfer(address,uint256)": {
                "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
              },
              "transferFrom(address,address,uint256)": {
                "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": "9d043a66",
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "burn(uint256)": "42966c68",
              "decimals()": "313ce567",
              "decreaseAllowance(address,uint256)": "a457c2d7",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "increaseAllowance(address,uint256)": "39509351",
              "initialize(address,string,string,uint8,address,bytes32)": "9c14f298",
              "name()": "06fdde03",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "setImplicitModeProjectId(bytes32)": "ed4c2ac7",
              "setImplicitModeValidator(address)": "0bb310de",
              "supportsInterface(bytes4)": "01ffc9a7",
              "symbol()": "95d89b41",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delegateCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onlyFallback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"behaviorOnError\",\"type\":\"uint256\"}],\"internalType\":\"struct Payload.Call\",\"name\":\"call\",\"type\":\"tuple\"}],\"name\":\"acceptImplicitRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"setImplicitModeProjectId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"setImplicitModeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"params\":{\"attestation\":\"The attestation data\",\"call\":\"The call to validate\",\"wallet\":\"The wallet's address\"},\"returns\":{\"_0\":\"The hash of the implicit request if valid\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"params\":{\"amount\":\"Amount of tokens to burn\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(address,string,string,uint8,address,bytes32)\":{\"details\":\"This should be called immediately after deployment.\",\"params\":{\"implicitModeProjectId\":\"Implicit session project id\",\"implicitModeValidator\":\"Implicit session validator address\",\"owner\":\"The owner of the contract\",\"tokenDecimals\":\"Number of decimals\",\"tokenName\":\"Name of the token\",\"tokenSymbol\":\"Symbol of the token\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setImplicitModeProjectId(bytes32)\":{\"params\":{\"projectId\":\"The project id.\"}},\"setImplicitModeValidator(address)\":{\"params\":{\"validator\":\"The validator address.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Interface id\"},\"returns\":{\"_0\":\"True if supported\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"notice\":\"Determines if an implicit request is valid\"},\"burn(uint256)\":{\"notice\":\"Allows the owner of the token to burn their tokens.\"},\"decimals()\":{\"notice\":\"Override the ERC20 decimals function.\"},\"initialize(address,string,string,uint8,address,bytes32)\":{\"notice\":\"Initialize contract.\"},\"name()\":{\"notice\":\"Override the ERC20 name function.\"},\"setImplicitModeProjectId(bytes32)\":{\"notice\":\"Updates the settings for implicit mode validation.Only callable by an address with the project admin role.\"},\"setImplicitModeValidator(address)\":{\"notice\":\"Updates the validator for implicit mode validation.Only callable by an address with the project admin role.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check interface support.\"},\"symbol()\":{\"notice\":\"Override the ERC20 symbol function.\"}},\"notice\":\"A standard base implementation of ERC-20 for use in Sequence library contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC20/ERC20BaseToken.sol\":\"ERC20BaseToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IImplicitProjectValidation } from \\\"../registry/IImplicitProjectValidation.sol\\\";\\n\\nimport { ERC165, IERC165 } from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\nimport { ISignalsImplicitMode } from \\\"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\\\";\\nimport { Payload } from \\\"sequence-v3/src/modules/Payload.sol\\\";\\n\\n/// @title SignalsImplicitMode\\n/// @author Michael Standen\\n/// @notice Base contract for implicit mode validation by project\\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\\n\\n  IImplicitProjectValidation internal _validator;\\n  bytes32 internal _projectId;\\n\\n  /// @notice Initialize implicit mode validation\\n  /// @param validator The IImplicitProjectValidation address\\n  /// @param projectId The project id\\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\\n    _validator = IImplicitProjectValidation(validator);\\n    _projectId = projectId;\\n  }\\n\\n  /// @inheritdoc ISignalsImplicitMode\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32) {\\n    _validateImplicitRequest(wallet, attestation, call);\\n    return _validator.validateAttestation(wallet, attestation, _projectId);\\n  }\\n\\n  /// @notice Validates an implicit request\\n  /// @dev Optional hook for additional validation of the implicit requests\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  function _validateImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) internal view virtual { }\\n\\n  /// @inheritdoc IERC165\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd9107be2460f7f7ec4bdfefc3d10c79aa92b9285e1b12a75cb2a8d17b150a2ec\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC20/ERC20BaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { SignalsImplicitModeControlled } from \\\"../common/SignalsImplicitModeControlled.sol\\\";\\n\\nimport { ERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\\\";\\nimport { IERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC20Metadata } from \\\"openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nerror InvalidInitialization();\\n\\n/**\\n * A standard base implementation of ERC-20 for use in Sequence library contracts.\\n */\\nabstract contract ERC20BaseToken is ERC20, SignalsImplicitModeControlled {\\n\\n    string internal _tokenName;\\n    string internal _tokenSymbol;\\n    uint8 private _tokenDecimals;\\n\\n    address private immutable _initializer;\\n    bool private _initialized;\\n\\n    constructor() ERC20(\\\"\\\", \\\"\\\") {\\n        _initializer = msg.sender;\\n    }\\n\\n    /**\\n     * Initialize contract.\\n     * @param owner The owner of the contract\\n     * @param tokenName Name of the token\\n     * @param tokenSymbol Symbol of the token\\n     * @param tokenDecimals Number of decimals\\n     * @param implicitModeValidator Implicit session validator address\\n     * @param implicitModeProjectId Implicit session project id\\n     * @dev This should be called immediately after deployment.\\n     */\\n    function initialize(\\n        address owner,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint8 tokenDecimals,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) public virtual {\\n        if (msg.sender != _initializer || _initialized) {\\n            revert InvalidInitialization();\\n        }\\n\\n        _tokenName = tokenName;\\n        _tokenSymbol = tokenSymbol;\\n        _tokenDecimals = tokenDecimals;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\\n\\n        _initializeImplicitMode(owner, implicitModeValidator, implicitModeProjectId);\\n\\n        _initialized = true;\\n    }\\n\\n    //\\n    // Burn\\n    //\\n\\n    /**\\n     * Allows the owner of the token to burn their tokens.\\n     * @param amount Amount of tokens to burn\\n     */\\n    function burn(\\n        uint256 amount\\n    ) public virtual {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC20).interfaceId || interfaceId == type(IERC20Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    //\\n    // ERC20 Overrides\\n    //\\n\\n    /**\\n     * Override the ERC20 name function.\\n     */\\n    function name() public view override returns (string memory) {\\n        return _tokenName;\\n    }\\n\\n    /**\\n     * Override the ERC20 symbol function.\\n     */\\n    function symbol() public view override returns (string memory) {\\n        return _tokenSymbol;\\n    }\\n\\n    /**\\n     * Override the ERC20 decimals function.\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return _tokenDecimals;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x54b850ac7eeeae98507d167db8195bc0ecf243bb04e5d64ff9e85707c26e5656\",\"license\":\"Apache-2.0\"},\"src/tokens/common/SignalsImplicitModeControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport {\\n    IERC165,\\n    IImplicitProjectValidation,\\n    SignalsImplicitMode\\n} from \\\"signals-implicit-mode/src/helper/SignalsImplicitMode.sol\\\";\\n\\n/**\\n * An abstract contract that allows implicit session access for a given project.\\n */\\nabstract contract SignalsImplicitModeControlled is AccessControlEnumerable, SignalsImplicitMode {\\n\\n    bytes32 internal constant _IMPLICIT_MODE_ADMIN_ROLE = keccak256(\\\"IMPLICIT_MODE_ADMIN_ROLE\\\");\\n\\n    function _initializeImplicitMode(address owner, address validator, bytes32 projectId) internal {\\n        _grantRole(_IMPLICIT_MODE_ADMIN_ROLE, owner);\\n        _initializeSignalsImplicitMode(validator, projectId);\\n    }\\n\\n    /**\\n     * Updates the validator for implicit mode validation.\\n     * @param validator The validator address.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeValidator(\\n        address validator\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _validator = IImplicitProjectValidation(validator);\\n    }\\n\\n    /**\\n     * Updates the settings for implicit mode validation.\\n     * @param projectId The project id.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeProjectId(\\n        bytes32 projectId\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _projectId = projectId;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable, SignalsImplicitMode) returns (bool) {\\n        return\\n            AccessControlEnumerable.supportsInterface(interfaceId) || SignalsImplicitMode.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb1a20575f188af254f90ec7df7f70415610ba5f41f7966ce383b50063220b860\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "notice": "Determines if an implicit request is valid"
              },
              "burn(uint256)": {
                "notice": "Allows the owner of the token to burn their tokens."
              },
              "decimals()": {
                "notice": "Override the ERC20 decimals function."
              },
              "initialize(address,string,string,uint8,address,bytes32)": {
                "notice": "Initialize contract."
              },
              "name()": {
                "notice": "Override the ERC20 name function."
              },
              "setImplicitModeProjectId(bytes32)": {
                "notice": "Updates the settings for implicit mode validation.Only callable by an address with the project admin role."
              },
              "setImplicitModeValidator(address)": {
                "notice": "Updates the validator for implicit mode validation.Only callable by an address with the project admin role."
              },
              "supportsInterface(bytes4)": {
                "notice": "Check interface support."
              },
              "symbol()": {
                "notice": "Override the ERC20 symbol function."
              }
            },
            "notice": "A standard base implementation of ERC-20 for use in Sequence library contracts.",
            "version": 1
          }
        }
      },
      "src/tokens/ERC20/presets/items/ERC20Items.sol": {
        "ERC20Items": {
          "abi": [
            {
              "inputs": [],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "inputs": [],
              "name": "InvalidInitialization",
              "type": "error"
            },
            {
              "inputs": [],
              "name": "InvalidInitialization",
              "type": "error"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "delegateCall",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "onlyFallback",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "behaviorOnError",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Payload.Call",
                  "name": "call",
                  "type": "tuple"
                }
              ],
              "name": "acceptImplicitRequest",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "burn",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "subtractedValue",
                  "type": "uint256"
                }
              ],
              "name": "decreaseAllowance",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "addedValue",
                  "type": "uint256"
                }
              ],
              "name": "increaseAllowance",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "tokenName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "tokenSymbol",
                  "type": "string"
                },
                {
                  "internalType": "uint8",
                  "name": "tokenDecimals",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "initialize",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "projectId",
                  "type": "bytes32"
                }
              ],
              "name": "setImplicitModeProjectId",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "validator",
                  "type": "address"
                }
              ],
              "name": "setImplicitModeValidator",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "tokenName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "tokenSymbol",
                  "type": "string"
                }
              ],
              "name": "setNameAndSymbol",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "events": {
              "Approval(address,address,uint256)": {
                "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
              },
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              },
              "Transfer(address,address,uint256)": {
                "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
              }
            },
            "kind": "dev",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "params": {
                  "attestation": "The attestation data",
                  "call": "The call to validate",
                  "wallet": "The wallet's address"
                },
                "returns": {
                  "_0": "The hash of the implicit request if valid"
                }
              },
              "allowance(address,address)": {
                "details": "See {IERC20-allowance}."
              },
              "approve(address,uint256)": {
                "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
              },
              "balanceOf(address)": {
                "details": "See {IERC20-balanceOf}."
              },
              "burn(uint256)": {
                "params": {
                  "amount": "Amount of tokens to burn"
                }
              },
              "decreaseAllowance(address,uint256)": {
                "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
              },
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "increaseAllowance(address,uint256)": {
                "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
              },
              "initialize(address,string,string,uint8,address,bytes32)": {
                "details": "This should be called immediately after deployment.",
                "params": {
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "owner": "The owner of the contract",
                  "tokenDecimals": "Number of decimals",
                  "tokenName": "Name of the token",
                  "tokenSymbol": "Symbol of the token"
                }
              },
              "mint(address,uint256)": {
                "params": {
                  "amount": "Amount of tokens to mint.",
                  "to": "Address to mint tokens to."
                }
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "setImplicitModeProjectId(bytes32)": {
                "params": {
                  "projectId": "The project id."
                }
              },
              "setImplicitModeValidator(address)": {
                "params": {
                  "validator": "The validator address."
                }
              },
              "setNameAndSymbol(string,string)": {
                "params": {
                  "tokenName": "Name of token.",
                  "tokenSymbol": "Symbol of token."
                }
              },
              "supportsInterface(bytes4)": {
                "params": {
                  "interfaceId": "Interface id"
                },
                "returns": {
                  "_0": "True if supported"
                }
              },
              "totalSupply()": {
                "details": "See {IERC20-totalSupply}."
              },
              "transfer(address,uint256)": {
                "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
              },
              "transferFrom(address,address,uint256)": {
                "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "allocate_memory": {
                  "entryPoint": 188,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_string": {
                  "entryPoint": 242,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 62,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_string": {
                  "entryPoint": 209,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_string_storage": {
                  "entryPoint": 496,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_string": {
                  "entryPoint": 428,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "clean_up_bytearray_end_slots_string_storage": {
                  "entryPoint": 687,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "cleanup_uint256": {
                  "entryPoint": 559,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "clear_storage_range_bytes1": {
                  "entryPoint": 655,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "constructor_AccessControl": {
                  "entryPoint": 356,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "constructor_AccessControlEnumerable": {
                  "entryPoint": 344,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "constructor_ERC165": {
                  "entryPoint": 368,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "constructor_ERC20": {
                  "entryPoint": 1037,
                  "id": 1168,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "constructor_ERC20BaseToken": {
                  "entryPoint": 289,
                  "id": 6377,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "constructor_ERC20Items": {
                  "entryPoint": 73,
                  "id": 6535,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "constructor_IAccessControl": {
                  "entryPoint": 416,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "constructor_IAccessControlEnumerable": {
                  "entryPoint": 404,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "constructor_IERC165": {
                  "entryPoint": 380,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "constructor_IERC20Items": {
                  "entryPoint": 87,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "constructor_IERC20ItemsFunctions": {
                  "entryPoint": 107,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "constructor_IERC20ItemsSignals": {
                  "entryPoint": 97,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "constructor_ISignalsImplicitMode": {
                  "entryPoint": 392,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "constructor_SignalsImplicitMode": {
                  "entryPoint": 332,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "constructor_SignalsImplicitModeControlled": {
                  "entryPoint": 320,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "convert_stringliteral_c5d2_to_string": {
                  "entryPoint": 278,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_uint256_to_uint256": {
                  "entryPoint": 565,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_byte_array_to_storage_from_string_to_string": {
                  "entryPoint": 818,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "copy_literal_to_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470": {
                  "entryPoint": 265,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "divide_by_ceil": {
                  "entryPoint": 507,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_byte_array_length": {
                  "entryPoint": 454,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_used_part_and_set_length_of_short_byte_array": {
                  "entryPoint": 800,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 149,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "identity": {
                  "entryPoint": 562,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mask_bytes_dynamic": {
                  "entryPoint": 778,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "panic_error_0x22": {
                  "entryPoint": 432,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x41": {
                  "entryPoint": 127,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_uint256": {
                  "entryPoint": 593,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 68,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 117,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_dynamic": {
                  "entryPoint": 517,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "shift_right_unsigned_dynamic": {
                  "entryPoint": 774,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "storage_set_to_zero_uint256": {
                  "entryPoint": 635,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_byte_slice_dynamic32": {
                  "entryPoint": 521,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_string_to_string": {
                  "entryPoint": 1025,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_uint256_to_uint256": {
                  "entryPoint": 596,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "zero_value_for_split_uint256": {
                  "entryPoint": 630,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x39 JUMPI PUSH2 0x11 PUSH2 0x49 JUMP JUMPDEST PUSH2 0x19 PUSH2 0x3E JUMP JUMPDEST PUSH2 0x37BA PUSH2 0x426 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 PUSH2 0x2A1C ADD MSTORE PUSH1 0xA0 MLOAD DUP2 PUSH2 0x1754 ADD MSTORE PUSH2 0x37BA SWAP1 RETURN JUMPDEST PUSH2 0x44 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x51 PUSH2 0x57 JUMP JUMPDEST CALLER PUSH1 0xA0 MSTORE JUMP JUMPDEST PUSH2 0x5F PUSH2 0x61 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x69 PUSH2 0x6B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x73 PUSH2 0x121 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x9F SWAP1 PUSH2 0x75 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xB7 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x7F JUMP JUMPDEST SWAP1 PUSH2 0xCF PUSH2 0xC8 PUSH2 0x3E JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x95 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xED JUMPI PUSH2 0xE9 PUSH1 0x20 SWAP2 PUSH2 0x75 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x7F JUMP JUMPDEST SWAP1 PUSH2 0x104 PUSH2 0xFF DUP4 PUSH2 0xD1 JUMP JUMPDEST PUSH2 0xBC JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x113 PUSH1 0x0 PUSH2 0xF2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x11E PUSH2 0x109 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x13A PUSH2 0x12C PUSH2 0x116 JUMP JUMPDEST PUSH2 0x134 PUSH2 0x116 JUMP JUMPDEST SWAP1 PUSH2 0x140 JUMP JUMPDEST CALLER PUSH1 0x80 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x14A SWAP2 PUSH2 0x14C JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x156 SWAP2 PUSH2 0x158 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x162 SWAP2 PUSH2 0x164 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x16E SWAP2 PUSH2 0x170 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x17A SWAP2 PUSH2 0x17C JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x186 SWAP2 PUSH2 0x188 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x192 SWAP2 PUSH2 0x194 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x19E SWAP2 PUSH2 0x1A0 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1AA SWAP2 PUSH2 0x40D JUMP JUMPDEST JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x2 DUP4 DIV SWAP3 AND DUP1 ISZERO PUSH2 0x1E6 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x1E1 JUMPI JUMP JUMPDEST PUSH2 0x1B0 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1D6 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1F PUSH1 0x20 SWAP2 ADD DIV SWAP1 JUMP JUMPDEST SHL SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x8 PUSH2 0x225 SWAP2 MUL SWAP2 PUSH2 0x21F PUSH1 0x0 NOT DUP5 PUSH2 0x205 JUMP JUMPDEST SWAP3 PUSH2 0x205 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x249 PUSH2 0x244 PUSH2 0x24E SWAP3 PUSH2 0x22F JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH2 0x22F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x26A PUSH2 0x265 PUSH2 0x272 SWAP4 PUSH2 0x235 JUMP JUMPDEST PUSH2 0x251 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x209 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x28D SWAP2 PUSH2 0x287 PUSH2 0x276 JUMP JUMPDEST SWAP2 PUSH2 0x254 JUMP JUMPDEST JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT PUSH2 0x29B JUMPI POP POP JUMP JUMPDEST DUP1 PUSH2 0x2A9 PUSH1 0x0 PUSH1 0x1 SWAP4 PUSH2 0x27B JUMP JUMPDEST ADD PUSH2 0x290 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x2BF JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2CB PUSH2 0x2F0 SWAP4 PUSH2 0x1F0 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x2D7 DUP5 PUSH2 0x1FB JUMP JUMPDEST DUP4 ADD SWAP4 LT PUSH2 0x2F8 JUMPI JUMPDEST PUSH2 0x2E9 SWAP1 PUSH2 0x1FB JUMP JUMPDEST ADD SWAP1 PUSH2 0x28F JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x2BA JUMP JUMPDEST SWAP2 POP PUSH2 0x2E9 DUP2 SWAP3 SWAP1 POP PUSH2 0x2E0 JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x31B SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x8 MUL PUSH2 0x306 JUMP JUMPDEST NOT AND SWAP1 JUMP JUMPDEST DUP2 PUSH2 0x32A SWAP2 PUSH2 0x30A JUMP JUMPDEST SWAP1 PUSH1 0x2 MUL OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x33C DUP2 PUSH2 0x1AC JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x3FC JUMPI PUSH2 0x35E DUP3 PUSH2 0x358 DUP6 SLOAD PUSH2 0x1C6 JUMP JUMPDEST DUP6 PUSH2 0x2AF JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x393 JUMPI SWAP2 DUP1 SWAP2 PUSH2 0x382 SWAP4 PUSH1 0x0 SWAP3 PUSH2 0x387 JUMPI JUMPDEST POP POP PUSH2 0x320 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 POP ADD MLOAD CODESIZE DUP1 PUSH2 0x37B JUMP JUMPDEST PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH2 0x3A2 DUP6 PUSH2 0x1F0 JUMP JUMPDEST SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x3E4 JUMPI POP SWAP2 PUSH1 0x2 SWAP4 SWAP2 DUP6 PUSH1 0x1 SWAP7 SWAP5 LT PUSH2 0x3CA JUMPI JUMPDEST POP POP POP MUL ADD SWAP1 SSTORE PUSH2 0x385 JUMP JUMPDEST PUSH2 0x3DA SWAP2 ADD MLOAD PUSH1 0x1F DUP5 AND SWAP1 PUSH2 0x30A JUMP JUMPDEST SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x3BE JUMP JUMPDEST SWAP2 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP8 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP3 ADD PUSH2 0x3A6 JUMP JUMPDEST PUSH2 0x7F JUMP JUMPDEST SWAP1 PUSH2 0x40B SWAP2 PUSH2 0x332 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x41C PUSH2 0x423 SWAP3 PUSH1 0x3 PUSH2 0x401 JUMP JUMPDEST PUSH1 0x4 PUSH2 0x401 JUMP JUMPDEST JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0xDCF JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x1CD JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0xBB310DE EQ PUSH2 0x1B9 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x1AA JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x19B JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x191 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x18C JUMPI DUP1 PUSH4 0x5A446215 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x17D JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x173 JUMPI DUP1 PUSH4 0x9C14F298 EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x9D043A66 EQ PUSH2 0x169 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x164 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x150 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x14B JUMPI PUSH4 0xED4C2AC7 SUB PUSH2 0xE JUMPI PUSH2 0xD9C JUMP JUMPDEST PUSH2 0xD66 JUMP JUMPDEST PUSH2 0xD04 JUMP JUMPDEST PUSH2 0xCCF JUMP JUMPDEST PUSH2 0xC99 JUMP JUMPDEST PUSH2 0xC63 JUMP JUMPDEST PUSH2 0xC2E JUMP JUMPDEST PUSH2 0xBBB JUMP JUMPDEST PUSH2 0xAEC JUMP JUMPDEST PUSH2 0x9FE JUMP JUMPDEST PUSH2 0x9C8 JUMP JUMPDEST PUSH2 0x992 JUMP JUMPDEST PUSH2 0x90C JUMP JUMPDEST PUSH2 0x8D8 JUMP JUMPDEST PUSH2 0x761 JUMP JUMPDEST PUSH2 0x70E JUMP JUMPDEST PUSH2 0x6D8 JUMP JUMPDEST PUSH2 0x6A4 JUMP JUMPDEST PUSH2 0x66F JUMP JUMPDEST PUSH2 0x612 JUMP JUMPDEST PUSH2 0x5AF JUMP JUMPDEST PUSH2 0x510 JUMP JUMPDEST PUSH2 0x4A0 JUMP JUMPDEST PUSH2 0x44A JUMP JUMPDEST PUSH2 0x3EF JUMP JUMPDEST PUSH2 0x32A JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH2 0x1FD DUP2 PUSH2 0x1E8 JUMP JUMPDEST SUB PUSH2 0x204 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x216 DUP3 PUSH2 0x1F4 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x232 JUMPI PUSH2 0x22F SWAP2 PUSH1 0x0 ADD PUSH2 0x209 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x245 SWAP1 PUSH2 0x237 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x25D SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x23C JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x28F JUMPI PUSH2 0x28B PUSH2 0x27A PUSH2 0x275 CALLDATASIZE PUSH1 0x4 PUSH2 0x218 JUMP JUMPDEST PUSH2 0xDD9 JUMP JUMPDEST PUSH2 0x282 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x29F JUMPI JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x2C5 JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x2B4 JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH2 0x2FF PUSH2 0x308 PUSH1 0x20 SWAP4 PUSH2 0x30D SWAP4 PUSH2 0x2F6 DUP2 PUSH2 0x2A4 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x2A8 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x2B1 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x327 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x2E0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x35A JUMPI PUSH2 0x33A CALLDATASIZE PUSH1 0x4 PUSH2 0x294 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x345 PUSH2 0xF52 JUMP JUMPDEST PUSH2 0x34D PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x311 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x373 SWAP1 PUSH2 0x35F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x37F DUP2 PUSH2 0x36A JUMP JUMPDEST SUB PUSH2 0x386 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x398 DUP3 PUSH2 0x376 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A6 DUP2 PUSH2 0x39A JUMP JUMPDEST SUB PUSH2 0x3AD JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x3BF DUP3 PUSH2 0x39D JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x3EA JUMPI DUP1 PUSH2 0x3DE PUSH2 0x3E7 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x38B JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x3B2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0x420 JUMPI PUSH2 0x41C PUSH2 0x40B PUSH2 0x405 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C1 JUMP JUMPDEST SWAP1 PUSH2 0xF68 JUMP JUMPDEST PUSH2 0x413 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x43F JUMPI PUSH2 0x43C SWAP2 PUSH1 0x0 ADD PUSH2 0x38B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x462 PUSH2 0x45D CALLDATASIZE PUSH1 0x4 PUSH2 0x425 JUMP JUMPDEST PUSH2 0x105F JUMP JUMPDEST PUSH2 0x46A PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x474 DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH2 0x486 SWAP1 PUSH2 0x39A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x49E SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x47D JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x4D0 JUMPI PUSH2 0x4B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x294 JUMP JUMPDEST PUSH2 0x4CC PUSH2 0x4BB PUSH2 0x1099 JUMP JUMPDEST PUSH2 0x4C3 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0x50B JUMPI PUSH2 0x508 PUSH2 0x4F1 DUP5 PUSH1 0x0 DUP6 ADD PUSH2 0x38B JUMP JUMPDEST SWAP4 PUSH2 0x4FF DUP2 PUSH1 0x20 DUP7 ADD PUSH2 0x38B JUMP JUMPDEST SWAP4 PUSH1 0x40 ADD PUSH2 0x3B2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0x541 JUMPI PUSH2 0x53D PUSH2 0x52C PUSH2 0x526 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D5 JUMP JUMPDEST SWAP2 PUSH2 0x10AF JUMP JUMPDEST PUSH2 0x534 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x552 DUP2 PUSH2 0x546 JUMP JUMPDEST SUB PUSH2 0x559 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x56B DUP3 PUSH2 0x549 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x587 JUMPI PUSH2 0x584 SWAP2 PUSH1 0x0 ADD PUSH2 0x55E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST PUSH2 0x595 SWAP1 PUSH2 0x546 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5AD SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x58C JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x5DF JUMPI PUSH2 0x5DB PUSH2 0x5CA PUSH2 0x5C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x56D JUMP JUMPDEST PUSH2 0x112B JUMP JUMPDEST PUSH2 0x5D2 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x599 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x60D JUMPI DUP1 PUSH2 0x601 PUSH2 0x60A SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x55E JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x38B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0x641 JUMPI PUSH2 0x62B PUSH2 0x625 CALLDATASIZE PUSH1 0x4 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 PUSH2 0x1176 JUMP JUMPDEST PUSH2 0x633 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x63D DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x655 SWAP1 PUSH2 0x646 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x66D SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x64C JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x69F JUMPI PUSH2 0x67F CALLDATASIZE PUSH1 0x4 PUSH2 0x294 JUMP JUMPDEST PUSH2 0x69B PUSH2 0x68A PUSH2 0x11AE JUMP JUMPDEST PUSH2 0x692 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x659 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0x6D3 JUMPI PUSH2 0x6BD PUSH2 0x6B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 PUSH2 0x126E JUMP JUMPDEST PUSH2 0x6C5 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x6CF DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0x709 JUMPI PUSH2 0x705 PUSH2 0x6F4 PUSH2 0x6EE CALLDATASIZE PUSH1 0x4 PUSH2 0x3C1 JUMP JUMPDEST SWAP1 PUSH2 0x12D8 JUMP JUMPDEST PUSH2 0x6FC PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0x73D JUMPI PUSH2 0x727 PUSH2 0x721 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C1 JUMP JUMPDEST SWAP1 PUSH2 0x1359 JUMP JUMPDEST PUSH2 0x72F PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x739 DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x75C JUMPI PUSH2 0x759 SWAP2 PUSH1 0x0 ADD PUSH2 0x3B2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0x78F JUMPI PUSH2 0x779 PUSH2 0x774 CALLDATASIZE PUSH1 0x4 PUSH2 0x742 JUMP JUMPDEST PUSH2 0x1365 JUMP JUMPDEST PUSH2 0x781 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x78B DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x7BE SWAP1 PUSH2 0x2D6 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x7D8 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x79E JUMP JUMPDEST SWAP1 PUSH2 0x7F0 PUSH2 0x7E9 PUSH2 0x1D3 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x7B4 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x810 JUMPI PUSH2 0x80C PUSH1 0x20 SWAP2 PUSH2 0x2D6 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x79E JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x836 PUSH2 0x831 DUP3 PUSH2 0x7F2 JUMP JUMPDEST PUSH2 0x7DD JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x852 JUMPI PUSH2 0x850 SWAP3 PUSH2 0x815 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x799 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x875 JUMPI DUP2 PUSH1 0x20 PUSH2 0x872 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x821 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x794 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x8D3 JUMPI PUSH1 0x0 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x8CE JUMPI DUP4 PUSH2 0x8A7 SWAP2 DUP4 ADD PUSH2 0x857 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x8C9 JUMPI PUSH2 0x8C6 SWAP3 ADD PUSH2 0x857 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E3 JUMP JUMPDEST PUSH2 0x1E3 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0x907 JUMPI PUSH2 0x8F1 PUSH2 0x8EB CALLDATASIZE PUSH1 0x4 PUSH2 0x87A JUMP JUMPDEST SWAP1 PUSH2 0x15AE JUMP JUMPDEST PUSH2 0x8F9 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x903 DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0x93C JUMPI PUSH2 0x938 PUSH2 0x927 PUSH2 0x922 CALLDATASIZE PUSH1 0x4 PUSH2 0x425 JUMP JUMPDEST PUSH2 0x15EA JUMP JUMPDEST PUSH2 0x92F PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x96A JUMPI DUP1 PUSH2 0x95E PUSH2 0x967 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x55E JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x3B2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST PUSH2 0x978 SWAP1 PUSH2 0x36A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x990 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x96F JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x9C3 JUMPI PUSH2 0x9BF PUSH2 0x9AE PUSH2 0x9A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x941 JUMP JUMPDEST SWAP1 PUSH2 0x1629 JUMP JUMPDEST PUSH2 0x9B6 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x97C JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0x9F9 JUMPI PUSH2 0x9F5 PUSH2 0x9E4 PUSH2 0x9DE CALLDATASIZE PUSH1 0x4 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 PUSH2 0x1690 JUMP JUMPDEST PUSH2 0x9EC PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0xA2E JUMPI PUSH2 0xA0E CALLDATASIZE PUSH1 0x4 PUSH2 0x294 JUMP JUMPDEST PUSH2 0xA2A PUSH2 0xA19 PUSH2 0x16BB JUMP JUMPDEST PUSH2 0xA21 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x311 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH2 0xA3C DUP2 PUSH2 0x646 JUMP JUMPDEST SUB PUSH2 0xA43 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xA55 DUP3 PUSH2 0xA33 JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0xC0 DUP3 DUP5 SUB SLT PUSH2 0xAE7 JUMPI PUSH2 0xA70 DUP4 PUSH1 0x0 DUP5 ADD PUSH2 0x38B JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xAE2 JUMPI DUP2 PUSH2 0xA91 SWAP2 DUP6 ADD PUSH2 0x857 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xADD JUMPI DUP3 PUSH2 0xAB2 SWAP2 DUP4 ADD PUSH2 0x857 JUMP JUMPDEST SWAP3 PUSH2 0xADA PUSH2 0xAC3 DUP5 PUSH1 0x60 DUP6 ADD PUSH2 0xA48 JUMP JUMPDEST SWAP4 PUSH2 0xAD1 DUP2 PUSH1 0x80 DUP7 ADD PUSH2 0x38B JUMP JUMPDEST SWAP4 PUSH1 0xA0 ADD PUSH2 0x55E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E3 JUMP JUMPDEST PUSH2 0x1E3 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0xB21 JUMPI PUSH2 0xB0B PUSH2 0xAFF CALLDATASIZE PUSH1 0x4 PUSH2 0xA57 JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0x1745 JUMP JUMPDEST PUSH2 0xB13 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0xB1D DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0xC0 SWAP2 SUB SLT PUSH2 0xB39 JUMPI SWAP1 JUMP JUMPDEST PUSH2 0xB26 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xE0 SWAP2 SUB SLT PUSH2 0xB4C JUMPI SWAP1 JUMP JUMPDEST PUSH2 0xB26 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0xBB6 JUMPI PUSH2 0xB69 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x38B JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xBB1 JUMPI DUP4 PUSH2 0xB8A SWAP2 DUP4 ADD PUSH2 0xB2B JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xBAC JUMPI PUSH2 0xBA9 SWAP3 ADD PUSH2 0xB3E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E3 JUMP JUMPDEST PUSH2 0x1E3 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0xBEC JUMPI PUSH2 0xBE8 PUSH2 0xBD7 PUSH2 0xBD1 CALLDATASIZE PUSH1 0x4 PUSH2 0xB51 JUMP JUMPDEST SWAP2 PUSH2 0x1B3A JUMP JUMPDEST PUSH2 0xBDF PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x599 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0xC0E PUSH2 0xC09 PUSH2 0xC13 SWAP3 PUSH2 0xBF1 JUMP JUMPDEST PUSH2 0xBF4 JUMP JUMPDEST PUSH2 0x546 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC20 PUSH1 0x0 PUSH2 0xBFA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC2B PUSH2 0xC16 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0xC5E JUMPI PUSH2 0xC3E CALLDATASIZE PUSH1 0x4 PUSH2 0x294 JUMP JUMPDEST PUSH2 0xC5A PUSH2 0xC49 PUSH2 0xC23 JUMP JUMPDEST PUSH2 0xC51 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x599 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0xC94 JUMPI PUSH2 0xC90 PUSH2 0xC7F PUSH2 0xC79 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C1 JUMP JUMPDEST SWAP1 PUSH2 0x1C93 JUMP JUMPDEST PUSH2 0xC87 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0xCCA JUMPI PUSH2 0xCC6 PUSH2 0xCB5 PUSH2 0xCAF CALLDATASIZE PUSH1 0x4 PUSH2 0x3C1 JUMP JUMPDEST SWAP1 PUSH2 0x1CE7 JUMP JUMPDEST PUSH2 0xCBD PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0xCFF JUMPI PUSH2 0xCFB PUSH2 0xCEA PUSH2 0xCE5 CALLDATASIZE PUSH1 0x4 PUSH2 0x56D JUMP JUMPDEST PUSH2 0x1D09 JUMP JUMPDEST PUSH2 0xCF2 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0xD33 JUMPI PUSH2 0xD1D PUSH2 0xD17 CALLDATASIZE PUSH1 0x4 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 PUSH2 0x1D59 JUMP JUMPDEST PUSH2 0xD25 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0xD2F DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0xD61 JUMPI DUP1 PUSH2 0xD55 PUSH2 0xD5E SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x38B JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x38B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0xD97 JUMPI PUSH2 0xD93 PUSH2 0xD82 PUSH2 0xD7C CALLDATASIZE PUSH1 0x4 PUSH2 0xD38 JUMP JUMPDEST SWAP1 PUSH2 0x1D7D JUMP JUMPDEST PUSH2 0xD8A PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0xDCA JUMPI PUSH2 0xDB4 PUSH2 0xDAF CALLDATASIZE PUSH1 0x4 PUSH2 0x56D JUMP JUMPDEST PUSH2 0x1E10 JUMP JUMPDEST PUSH2 0xDBC PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0xDC6 DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xDE1 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH4 0x6A15B43 PUSH1 0xE2 SHL PUSH2 0xDFC PUSH2 0xDF6 DUP4 PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0xE20 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0xE10 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0xE1A SWAP2 POP PUSH2 0x1E1B JUMP JUMPDEST CODESIZE PUSH2 0xE0C JUMP JUMPDEST POP PUSH2 0xE2A DUP2 PUSH2 0x1E1B JUMP JUMPDEST PUSH2 0xE04 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x2 DUP4 DIV SWAP3 AND DUP1 ISZERO PUSH2 0xE6A JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0xE65 JUMPI JUMP JUMPDEST PUSH2 0xE34 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0xE5A JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 SWAP2 DUP1 SLOAD SWAP1 PUSH2 0xEA3 PUSH2 0xE9C DUP4 PUSH2 0xE4A JUMP JUMPDEST DUP1 SWAP5 PUSH2 0xE74 JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0xEFC JUMPI POP PUSH1 0x1 EQ PUSH2 0xEBF JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xECC SWAP2 SWAP3 SWAP4 SWAP5 POP PUSH2 0xE7D JUMP JUMPDEST SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP2 DUP5 LT PUSH2 0xEE4 JUMPI POP POP ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0xEBA JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SWAP6 SWAP4 SWAP6 SLOAD DUP5 DUP7 ADD MSTORE ADD SWAP2 ADD SWAP3 SWAP1 PUSH2 0xED1 JUMP JUMPDEST SWAP3 SWAP5 SWAP6 POP POP POP PUSH1 0xFF NOT AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 MUL ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0xEBA JUMP JUMPDEST SWAP1 PUSH2 0xF21 SWAP2 PUSH2 0xE88 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF44 PUSH2 0xF3D SWAP3 PUSH2 0xF34 PUSH2 0x1D3 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP3 PUSH2 0xF17 JUMP JUMPDEST SUB DUP4 PUSH2 0x7B4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF4F SWAP1 PUSH2 0xF24 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF5A PUSH2 0xE2F JUMP JUMPDEST POP PUSH2 0xF65 PUSH1 0x9 PUSH2 0xF46 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF85 SWAP2 PUSH2 0xF74 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0xF7D PUSH2 0x1E83 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x202C JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH32 0x70649EC320B507FEBAD3E8EF750E5F580B9AE32F9F50D4C7B121332C81971530 SWAP1 JUMP JUMPDEST PUSH2 0xFC7 SWAP1 PUSH2 0xFC2 PUSH2 0xFBD PUSH2 0xF8A JUMP JUMPDEST PUSH2 0x20EA JUMP JUMPDEST PUSH2 0x104A JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFE0 PUSH2 0xFDB PUSH2 0xFE5 SWAP3 PUSH2 0x35F JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x35F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFF1 SWAP1 PUSH2 0xFCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFFD SWAP1 PUSH2 0xFE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1011 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xBF4 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x1024 SWAP1 PUSH2 0xFE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x103F PUSH2 0x103A PUSH2 0x1046 SWAP3 PUSH2 0x101B JUMP JUMPDEST PUSH2 0x1027 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1000 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1056 PUSH2 0x105D SWAP2 PUSH2 0xFF4 JUMP JUMPDEST PUSH1 0x7 PUSH2 0x102A JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1068 SWAP1 PUSH2 0xFAE JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1084 PUSH2 0x1089 SWAP2 PUSH2 0x106F JUMP JUMPDEST PUSH2 0x1075 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1096 SWAP1 SLOAD PUSH2 0x1078 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x10A1 PUSH2 0x106A JUMP JUMPDEST POP PUSH2 0x10AC PUSH1 0x2 PUSH2 0x108C JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x10D9 SWAP3 PUSH2 0x10BC PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x10D1 PUSH2 0x10C8 PUSH2 0x1E83 JUMP JUMPDEST DUP3 SWAP1 DUP5 SWAP2 PUSH2 0x2182 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x23F6 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x10EC SWAP1 PUSH2 0x546 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10F9 SWAP1 PUSH2 0x10E3 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1116 PUSH2 0x111B SWAP2 PUSH2 0x106F JUMP JUMPDEST PUSH2 0x1107 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1128 SWAP1 SLOAD PUSH2 0x110A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1144 PUSH2 0x114A SWAP3 PUSH2 0x113C PUSH2 0x10DE JUMP JUMPDEST POP PUSH1 0x5 PUSH2 0x10EF JUMP JUMPDEST ADD PUSH2 0x111E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1168 SWAP2 PUSH2 0x1163 PUSH2 0x115E DUP3 PUSH2 0x112B JUMP JUMPDEST PUSH2 0x20EA JUMP JUMPDEST PUSH2 0x116A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1174 SWAP2 PUSH2 0x250C JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1180 SWAP2 PUSH2 0x114D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1199 PUSH2 0x119E SWAP2 PUSH2 0x106F JUMP JUMPDEST PUSH2 0x1187 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x11AB SWAP1 SLOAD PUSH2 0x118D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x11B6 PUSH2 0x1182 JUMP JUMPDEST POP PUSH2 0x11C1 PUSH1 0xB PUSH2 0x11A1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 SWAP2 PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x121F PUSH1 0x2F PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x1228 DUP2 PUSH2 0x11C4 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1242 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1212 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x124C JUMPI JUMP JUMPDEST PUSH2 0x1254 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x126A PUSH1 0x4 DUP3 ADD PUSH2 0x122C JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x129B SWAP2 PUSH2 0x1296 DUP3 PUSH2 0x1290 PUSH2 0x128A PUSH2 0x1285 PUSH2 0x1E83 JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ PUSH2 0x1245 JUMP JUMPDEST PUSH2 0x2536 JUMP JUMPDEST JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x12C2 PUSH2 0x12C8 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x39A JUMP JUMPDEST SWAP3 PUSH2 0x39A JUMP JUMPDEST DUP3 ADD DUP1 SWAP3 GT PUSH2 0x12D3 JUMPI JUMP JUMPDEST PUSH2 0x129D JUMP JUMPDEST PUSH2 0x1308 SWAP2 PUSH2 0x12E4 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x1302 PUSH2 0x12F0 PUSH2 0x1E83 JUMP JUMPDEST SWAP2 PUSH2 0x12FD DUP4 SWAP5 DUP1 SWAP5 PUSH2 0x1D7D JUMP JUMPDEST PUSH2 0x12B3 JUMP JUMPDEST SWAP2 PUSH2 0x202C JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x134B SWAP2 PUSH2 0x1346 PUSH2 0x1341 PUSH2 0x130D JUMP JUMPDEST PUSH2 0x20EA JUMP JUMPDEST PUSH2 0x134D JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1357 SWAP2 PUSH2 0x25E4 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1363 SWAP2 PUSH2 0x1331 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x136F SWAP1 CALLER PUSH2 0x27FE JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x138B SWAP2 PUSH2 0x1386 PUSH2 0x1381 PUSH2 0xC16 JUMP JUMPDEST PUSH2 0x20EA JUMP JUMPDEST PUSH2 0x1596 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F PUSH1 0x20 SWAP2 ADD DIV SWAP1 JUMP JUMPDEST SHL SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x8 PUSH2 0x13B7 SWAP2 MUL SWAP2 PUSH2 0x13B1 PUSH1 0x0 NOT DUP5 PUSH2 0x1397 JUMP JUMPDEST SWAP3 PUSH2 0x1397 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x13D5 PUSH2 0x13D0 PUSH2 0x13DA SWAP3 PUSH2 0x39A JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x13F6 PUSH2 0x13F1 PUSH2 0x13FE SWAP4 PUSH2 0x13C1 JUMP JUMPDEST PUSH2 0x13DD JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x139B JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1414 SWAP2 PUSH2 0x140E PUSH2 0x106A JUMP JUMPDEST SWAP2 PUSH2 0x13E0 JUMP JUMPDEST JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT PUSH2 0x1422 JUMPI POP POP JUMP JUMPDEST DUP1 PUSH2 0x1430 PUSH1 0x0 PUSH1 0x1 SWAP4 PUSH2 0x1402 JUMP JUMPDEST ADD PUSH2 0x1417 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x1446 JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1452 PUSH2 0x1477 SWAP4 PUSH2 0xE7D JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x145E DUP5 PUSH2 0x138D JUMP JUMPDEST DUP4 ADD SWAP4 LT PUSH2 0x147F JUMPI JUMPDEST PUSH2 0x1470 SWAP1 PUSH2 0x138D JUMP JUMPDEST ADD SWAP1 PUSH2 0x1416 JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x1441 JUMP JUMPDEST SWAP2 POP PUSH2 0x1470 DUP2 SWAP3 SWAP1 POP PUSH2 0x1467 JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x14A2 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x8 MUL PUSH2 0x148D JUMP JUMPDEST NOT AND SWAP1 JUMP JUMPDEST DUP2 PUSH2 0x14B1 SWAP2 PUSH2 0x1491 JUMP JUMPDEST SWAP1 PUSH1 0x2 MUL OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x14C3 DUP2 PUSH2 0x2A4 JUMP JUMPDEST SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1585 JUMPI PUSH2 0x14E7 DUP3 PUSH2 0x14E1 DUP6 SLOAD PUSH2 0xE4A JUMP JUMPDEST DUP6 PUSH2 0x1436 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x151C JUMPI SWAP2 DUP1 SWAP2 PUSH2 0x150B SWAP4 PUSH1 0x0 SWAP3 PUSH2 0x1510 JUMPI JUMPDEST POP POP PUSH2 0x14A7 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 POP ADD MLOAD CODESIZE DUP1 PUSH2 0x1504 JUMP JUMPDEST PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH2 0x152B DUP6 PUSH2 0xE7D JUMP JUMPDEST SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x156D JUMPI POP SWAP2 PUSH1 0x2 SWAP4 SWAP2 DUP6 PUSH1 0x1 SWAP7 SWAP5 LT PUSH2 0x1553 JUMPI JUMPDEST POP POP POP MUL ADD SWAP1 SSTORE PUSH2 0x150E JUMP JUMPDEST PUSH2 0x1563 SWAP2 ADD MLOAD PUSH1 0x1F DUP5 AND SWAP1 PUSH2 0x1491 JUMP JUMPDEST SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x1547 JUMP JUMPDEST SWAP2 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP8 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP3 ADD PUSH2 0x152F JUMP JUMPDEST PUSH2 0x79E JUMP JUMPDEST SWAP1 PUSH2 0x1594 SWAP2 PUSH2 0x14B9 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x15A5 PUSH2 0x15AC SWAP3 PUSH1 0x9 PUSH2 0x158A JUMP JUMPDEST PUSH1 0xA PUSH2 0x158A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x15B8 SWAP2 PUSH2 0x1371 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x15C3 SWAP1 PUSH2 0xFCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x15CF SWAP1 PUSH2 0x15BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x15DC SWAP1 PUSH2 0x15C6 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x1601 PUSH2 0x1606 SWAP2 PUSH2 0x15F9 PUSH2 0x106A JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x108C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1618 SWAP1 PUSH2 0x10E3 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1649 PUSH2 0x1644 PUSH2 0x164E SWAP4 PUSH2 0x163C PUSH2 0x1609 JUMP JUMPDEST POP PUSH1 0x6 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x1626 JUMP JUMPDEST PUSH2 0x291D JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x165B SWAP1 PUSH2 0x15C6 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x167B PUSH2 0x1680 SWAP2 PUSH2 0x106F JUMP JUMPDEST PUSH2 0x1669 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x168D SWAP1 SLOAD PUSH2 0x166F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16B8 SWAP2 PUSH1 0x0 PUSH2 0x16AD PUSH2 0x16B3 SWAP4 PUSH2 0x16A5 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH1 0x5 PUSH2 0x10EF JUMP JUMPDEST ADD PUSH2 0x1651 JUMP JUMPDEST PUSH2 0x1683 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16C3 PUSH2 0xE2F JUMP JUMPDEST POP PUSH2 0x16CE PUSH1 0xA PUSH2 0xF46 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x10 SHR SWAP1 JUMP JUMPDEST PUSH2 0x16E3 PUSH2 0x16E8 SWAP2 PUSH2 0x16D1 JUMP JUMPDEST PUSH2 0x1669 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16F5 SWAP1 SLOAD PUSH2 0x16D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x10 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x170C PUSH3 0xFF0000 SWAP2 PUSH2 0x16F8 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x171F SWAP1 PUSH2 0x237 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x173A PUSH2 0x1735 PUSH2 0x1741 SWAP3 PUSH2 0x1716 JUMP JUMPDEST PUSH2 0x1722 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x16FE JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP4 SWAP5 SWAP1 SWAP2 SWAP3 SWAP5 CALLER PUSH2 0x177E PUSH2 0x1778 PUSH32 0x0 PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x17D7 JUMPI JUMPDEST PUSH2 0x17BA JUMPI PUSH2 0x17AC SWAP6 PUSH2 0x179F SWAP5 DUP7 SWAP5 SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 PUSH2 0x2A0F JUMP JUMPDEST PUSH2 0x17A7 PUSH2 0x130D JUMP JUMPDEST PUSH2 0x250C JUMP JUMPDEST PUSH2 0x17B8 PUSH1 0x1 PUSH1 0xB PUSH2 0x1725 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x17D3 PUSH1 0x4 DUP3 ADD PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x17E2 PUSH1 0xB PUSH2 0x16EB JUMP JUMPDEST PUSH2 0x1787 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x17FE PUSH2 0x1803 SWAP2 PUSH2 0x106F JUMP JUMPDEST PUSH2 0x17E7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1810 SWAP1 SLOAD PUSH2 0x17F2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x181C SWAP1 PUSH2 0x15BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x1832 DUP3 PUSH2 0x549 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x184E JUMPI PUSH2 0x184B SWAP2 PUSH1 0x0 ADD PUSH2 0x1825 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST POP PUSH2 0x1862 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x38B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186E SWAP1 PUSH2 0x36A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x1881 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x209 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x188D SWAP1 PUSH2 0x1E8 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x18A0 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x55E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x18AC SWAP1 PUSH2 0x546 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x1900 JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x18FB JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x18F6 JUMPI JUMP JUMPDEST PUSH2 0x18B5 JUMP JUMPDEST PUSH2 0x18B0 JUMP JUMPDEST PUSH2 0x18BA JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1928 DUP2 PUSH2 0x1921 DUP2 PUSH2 0x192D SWAP6 PUSH2 0x1905 JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x815 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x1947 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x18BA JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x198D JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1988 JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x1983 JUMPI JUMP JUMPDEST PUSH2 0x18B5 JUMP JUMPDEST PUSH2 0x18B0 JUMP JUMPDEST PUSH2 0x18BA JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x19AC DUP2 PUSH2 0x19A5 DUP2 PUSH2 0x19B1 SWAP6 PUSH2 0xE74 JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x815 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x19CB DUP2 PUSH2 0x19B5 JUMP JUMPDEST SUB PUSH2 0x19D2 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x19E4 DUP3 PUSH2 0x19C2 JUMP JUMPDEST JUMP JUMPDEST POP PUSH2 0x19F5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x19D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1A01 SWAP1 PUSH2 0x19B5 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x1A43 SWAP1 PUSH1 0x20 PUSH2 0x1A3B PUSH2 0x1A31 PUSH1 0x40 DUP5 ADD PUSH2 0x1A23 PUSH1 0x0 DUP9 ADD DUP9 PUSH2 0x194C JUMP JUMPDEST SWAP1 DUP7 DUP4 SUB PUSH1 0x0 DUP9 ADD MSTORE PUSH2 0x1992 JUMP JUMPDEST SWAP5 DUP3 DUP2 ADD SWAP1 PUSH2 0x19E6 JUMP JUMPDEST SWAP2 ADD SWAP1 PUSH2 0x19F8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1AF0 SWAP2 PUSH2 0x1AE2 PUSH2 0x1AD7 PUSH1 0xC0 DUP4 ADD PUSH2 0x1A6E PUSH2 0x1A64 PUSH1 0x0 DUP8 ADD DUP8 PUSH2 0x1853 JUMP JUMPDEST PUSH1 0x0 DUP7 ADD SWAP1 PUSH2 0x1865 JUMP JUMPDEST PUSH2 0x1A88 PUSH2 0x1A7E PUSH1 0x20 DUP8 ADD DUP8 PUSH2 0x1872 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x1884 JUMP JUMPDEST PUSH2 0x1AA2 PUSH2 0x1A98 PUSH1 0x40 DUP8 ADD DUP8 PUSH2 0x1891 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD SWAP1 PUSH2 0x18A3 JUMP JUMPDEST PUSH2 0x1ABC PUSH2 0x1AB2 PUSH1 0x60 DUP8 ADD DUP8 PUSH2 0x1891 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD SWAP1 PUSH2 0x18A3 JUMP JUMPDEST PUSH2 0x1AC9 PUSH1 0x80 DUP7 ADD DUP7 PUSH2 0x18BF JUMP JUMPDEST SWAP1 DUP6 DUP4 SUB PUSH1 0x80 DUP8 ADD MSTORE PUSH2 0x190E JUMP JUMPDEST SWAP3 PUSH1 0xA0 DUP2 ADD SWAP1 PUSH2 0x1931 JUMP JUMPDEST SWAP1 PUSH1 0xA0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x1A05 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP4 SWAP3 SWAP1 PUSH2 0x1B1F PUSH1 0x40 SWAP2 PUSH2 0x1B27 SWAP5 PUSH2 0x1B12 PUSH1 0x60 DUP10 ADD SWAP3 PUSH1 0x0 DUP11 ADD SWAP1 PUSH2 0x96F JUMP JUMPDEST DUP8 DUP3 SUB PUSH1 0x20 DUP10 ADD MSTORE PUSH2 0x1A46 JUMP JUMPDEST SWAP5 ADD SWAP1 PUSH2 0x58C JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1B31 PUSH2 0x1D3 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 POP PUSH1 0x20 SWAP1 PUSH2 0x1B47 PUSH2 0x10DE JUMP JUMPDEST POP PUSH2 0x1B5A PUSH2 0x1B55 PUSH1 0x7 PUSH2 0x1806 JUMP JUMPDEST PUSH2 0x1813 JUMP JUMPDEST PUSH2 0x1B86 PUSH4 0x3808A90B SWAP5 SWAP3 SWAP5 PUSH2 0x1B91 PUSH2 0x1B72 PUSH1 0x8 PUSH2 0x111E JUMP JUMPDEST PUSH2 0x1B7A PUSH2 0x1D3 JUMP JUMPDEST SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP6 PUSH2 0x181F JUMP JUMPDEST DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x1AF3 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1BD6 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1BA8 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1BC9 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1BCF JUMPI JUMPDEST PUSH2 0x1BC1 DUP2 DUP4 PUSH2 0x7B4 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1834 JUMP JUMPDEST CODESIZE PUSH2 0x1BA4 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1BB7 JUMP JUMPDEST PUSH2 0x1B29 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1C36 PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x1C3F DUP2 PUSH2 0x1BDB JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1C59 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1C29 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1C63 JUMPI JUMP JUMPDEST PUSH2 0x1C6B PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1C81 PUSH1 0x4 DUP3 ADD PUSH2 0x1C43 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x1C90 SWAP2 SUB PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1CE2 SWAP2 PUSH2 0x1C9F PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x1CDC PUSH2 0x1CAB PUSH2 0x1E83 JUMP JUMPDEST SWAP2 PUSH2 0x1CB7 DUP4 DUP6 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST SWAP3 PUSH2 0x1CD5 DUP5 PUSH2 0x1CCE PUSH2 0x1CC8 DUP6 PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST LT ISZERO PUSH2 0x1C5C JUMP JUMPDEST SWAP4 SWAP3 PUSH2 0x1C85 JUMP JUMPDEST SWAP2 PUSH2 0x202C JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x1D04 SWAP2 PUSH2 0x1CF3 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x1CFC PUSH2 0x1E83 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x23F6 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x1D28 PUSH2 0x1D23 PUSH2 0x1D2D SWAP3 PUSH2 0x1D1B PUSH2 0x106A JUMP JUMPDEST POP PUSH1 0x6 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x1626 JUMP JUMPDEST PUSH2 0x2ACB JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1D4B SWAP2 PUSH2 0x1D46 PUSH2 0x1D41 DUP3 PUSH2 0x112B JUMP JUMPDEST PUSH2 0x20EA JUMP JUMPDEST PUSH2 0x1D4D JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1D57 SWAP2 PUSH2 0x2536 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1D63 SWAP2 PUSH2 0x1D30 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1D6F SWAP1 PUSH2 0x15C6 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x1DA2 SWAP2 PUSH2 0x1D98 PUSH2 0x1D9D SWAP3 PUSH2 0x1D90 PUSH2 0x106A JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x1D65 JUMP JUMPDEST PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x108C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DBE SWAP1 PUSH2 0x1DB9 PUSH2 0x1DB4 PUSH2 0xF8A JUMP JUMPDEST PUSH2 0x20EA JUMP JUMPDEST PUSH2 0x1E03 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1DCD PUSH1 0x0 NOT SWAP2 PUSH2 0xBF4 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x1DE0 SWAP1 PUSH2 0x106F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1DF8 PUSH2 0x1DF3 PUSH2 0x1DFF SWAP3 PUSH2 0x10E3 JUMP JUMPDEST PUSH2 0x1DD7 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1DC0 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1E0E SWAP1 PUSH1 0x8 PUSH2 0x1DE3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1E19 SWAP1 PUSH2 0x1DA5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1E23 PUSH2 0xDD4 JUMP JUMPDEST POP DUP1 PUSH2 0x1E3E PUSH2 0x1E38 PUSH4 0x36372B07 PUSH1 0xE0 SHL PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x1E62 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x1E52 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1E5C SWAP2 POP PUSH2 0x2AEB JUMP JUMPDEST CODESIZE PUSH2 0x1E4E JUMP JUMPDEST POP DUP1 PUSH2 0x1E7D PUSH2 0x1E77 PUSH4 0xA219A025 PUSH1 0xE0 SHL PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ PUSH2 0x1E46 JUMP JUMPDEST PUSH2 0x1E8B PUSH2 0x1609 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH2 0x1EA4 PUSH2 0x1E9F PUSH2 0x1EA9 SWAP3 PUSH2 0xBF1 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x35F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1EB5 SWAP1 PUSH2 0x1E90 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1F13 PUSH1 0x24 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x1F1C DUP2 PUSH2 0x1EB8 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1F36 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1F06 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1F40 JUMPI JUMP JUMPDEST PUSH2 0x1F48 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1F5E PUSH1 0x4 DUP3 ADD PUSH2 0x1F20 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1FBD PUSH1 0x22 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x1FC6 DUP2 PUSH2 0x1F62 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1FE0 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1FB0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1FEA JUMPI JUMP JUMPDEST PUSH2 0x1FF2 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2008 PUSH1 0x4 DUP3 ADD PUSH2 0x1FCA JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x2021 PUSH2 0x201C PUSH2 0x2028 SWAP3 PUSH2 0x13C1 JUMP JUMPDEST PUSH2 0x13DD JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1DC0 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x2055 DUP2 PUSH2 0x204E PUSH2 0x2048 PUSH2 0x2043 PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO PUSH2 0x1F39 JUMP JUMPDEST PUSH2 0x207B DUP4 PUSH2 0x2074 PUSH2 0x206E PUSH2 0x2069 PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO PUSH2 0x1FE3 JUMP JUMPDEST PUSH2 0x209A DUP3 PUSH2 0x2095 PUSH2 0x208E PUSH1 0x1 DUP6 SWAP1 PUSH2 0x1D65 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x200C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x20E5 PUSH2 0x20D3 PUSH2 0x20CD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x20DC PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x20FC SWAP1 PUSH2 0x20F6 PUSH2 0x1E83 JUMP JUMPDEST SWAP1 PUSH2 0x2C13 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2133 PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x213C DUP2 PUSH2 0x20FE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2156 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2126 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2160 JUMPI JUMP JUMPDEST PUSH2 0x2168 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x217E PUSH1 0x4 DUP3 ADD PUSH2 0x2140 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x218D DUP2 DUP4 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x21A3 PUSH2 0x219D PUSH1 0x0 NOT PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST SUB PUSH2 0x21AF JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x21E1 SWAP4 PUSH2 0x21DB SWAP2 PUSH2 0x21D4 DUP5 PUSH2 0x21CD PUSH2 0x21C7 DUP6 PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST LT ISZERO PUSH2 0x2159 JUMP JUMPDEST SWAP4 SWAP3 PUSH2 0x1C85 JUMP JUMPDEST SWAP2 PUSH2 0x202C JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 PUSH2 0x21A9 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x2245 PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x224E DUP2 PUSH2 0x21EA JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2268 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2238 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2272 JUMPI JUMP JUMPDEST PUSH2 0x227A PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2290 PUSH1 0x4 DUP3 ADD PUSH2 0x2252 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x22EF PUSH1 0x23 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x22F8 DUP2 PUSH2 0x2294 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2312 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x22E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x231C JUMPI JUMP JUMPDEST PUSH2 0x2324 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x233A PUSH1 0x4 DUP3 ADD PUSH2 0x22FC JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x2399 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x23A2 DUP2 PUSH2 0x233E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x23BC SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x238C JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x23C6 JUMPI JUMP JUMPDEST PUSH2 0x23CE PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x23E4 PUSH1 0x4 DUP3 ADD PUSH2 0x23A6 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x23F3 SWAP2 ADD PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x241F DUP2 PUSH2 0x2418 PUSH2 0x2412 PUSH2 0x240D PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO PUSH2 0x226B JUMP JUMPDEST PUSH2 0x2445 DUP4 PUSH2 0x243E PUSH2 0x2438 PUSH2 0x2433 PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO PUSH2 0x2315 JUMP JUMPDEST PUSH2 0x2494 PUSH2 0x2483 PUSH2 0x245F PUSH2 0x245A PUSH1 0x0 DUP6 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x108C JUMP JUMPDEST PUSH2 0x247C DUP2 PUSH2 0x2475 PUSH2 0x246F DUP9 PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST LT ISZERO PUSH2 0x23BF JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST PUSH2 0x248F PUSH1 0x0 DUP5 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x200C JUMP JUMPDEST PUSH2 0x24BC DUP3 PUSH2 0x24B6 PUSH2 0x24A7 PUSH1 0x0 DUP8 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST SWAP2 PUSH2 0x24B1 DUP4 PUSH2 0x108C JUMP JUMPDEST PUSH2 0x23E8 JUMP JUMPDEST SWAP1 PUSH2 0x200C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x2507 PUSH2 0x24F5 PUSH2 0x24EF PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x24FE PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST SWAP1 PUSH2 0x252E PUSH2 0x2529 PUSH2 0x2533 SWAP4 PUSH2 0x2522 DUP2 DUP6 SWAP1 PUSH2 0x2CCC JUMP JUMPDEST PUSH1 0x6 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x1626 JUMP JUMPDEST PUSH2 0x2DB3 JUMP JUMPDEST POP JUMP JUMPDEST SWAP1 PUSH2 0x2558 PUSH2 0x2553 PUSH2 0x255D SWAP4 PUSH2 0x254C DUP2 DUP6 SWAP1 PUSH2 0x2DEE JUMP JUMPDEST PUSH1 0x6 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x1626 JUMP JUMPDEST PUSH2 0x2E88 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2595 PUSH1 0x1F PUSH1 0x20 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x259E DUP2 PUSH2 0x2560 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x25B8 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2588 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x25C2 JUMPI JUMP JUMPDEST PUSH2 0x25CA PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x25E0 PUSH1 0x4 DUP3 ADD PUSH2 0x25A2 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x260B DUP3 PUSH2 0x2604 PUSH2 0x25FE PUSH2 0x25F9 PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO PUSH2 0x25BB JUMP JUMPDEST PUSH2 0x2628 PUSH2 0x2621 DUP3 PUSH2 0x261C PUSH1 0x2 PUSH2 0x108C JUMP JUMPDEST PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x200C JUMP JUMPDEST PUSH2 0x2650 DUP2 PUSH2 0x264A PUSH2 0x263B PUSH1 0x0 DUP7 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST SWAP2 PUSH2 0x2645 DUP4 PUSH2 0x108C JUMP JUMPDEST PUSH2 0x23E8 JUMP JUMPDEST SWAP1 PUSH2 0x200C JUMP JUMPDEST PUSH2 0x265A PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x26A5 PUSH2 0x2693 PUSH2 0x268D PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x269C PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x2705 PUSH1 0x21 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x270E DUP2 PUSH2 0x26AA JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2728 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x26F8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2732 JUMPI JUMP JUMPDEST PUSH2 0x273A PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2750 PUSH1 0x4 DUP3 ADD PUSH2 0x2712 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x6365000000000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x27AF PUSH1 0x22 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x27B8 DUP2 PUSH2 0x2754 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x27D2 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x27A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x27DC JUMPI JUMP JUMPDEST PUSH2 0x27E4 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x27FA PUSH1 0x4 DUP3 ADD PUSH2 0x27BC JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x2824 DUP2 PUSH2 0x281D PUSH2 0x2817 PUSH2 0x2812 PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO PUSH2 0x272B JUMP JUMPDEST PUSH2 0x2873 PUSH2 0x2862 PUSH2 0x283E PUSH2 0x2839 PUSH1 0x0 DUP6 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x108C JUMP JUMPDEST PUSH2 0x285B DUP2 PUSH2 0x2854 PUSH2 0x284E DUP9 PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST LT ISZERO PUSH2 0x27D5 JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST PUSH2 0x286E PUSH1 0x0 DUP5 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x200C JUMP JUMPDEST PUSH2 0x2890 PUSH2 0x2889 DUP4 PUSH2 0x2884 PUSH1 0x2 PUSH2 0x108C JUMP JUMPDEST PUSH2 0x1C85 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x200C JUMP JUMPDEST SWAP1 PUSH2 0x289B PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x28E5 PUSH2 0x28D3 PUSH2 0x28CD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x28DC PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x28F9 PUSH2 0x28FE SWAP2 PUSH2 0x106F JUMP JUMPDEST PUSH2 0x13C1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2915 PUSH2 0x2910 PUSH2 0x291A SWAP3 PUSH2 0x39A JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x35F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2949 PUSH2 0x2944 PUSH2 0x2953 SWAP4 PUSH2 0x293F PUSH1 0x0 PUSH2 0x294E SWAP6 PUSH2 0x2938 PUSH2 0x1609 JUMP JUMPDEST POP ADD PUSH2 0x28EA JUMP JUMPDEST PUSH2 0x2F37 JUMP JUMPDEST PUSH2 0x28ED JUMP JUMPDEST PUSH2 0x2901 JUMP JUMPDEST PUSH2 0x15BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x8 SHR SWAP1 JUMP JUMPDEST PUSH2 0x2968 PUSH2 0x296D SWAP2 PUSH2 0x2956 JUMP JUMPDEST PUSH2 0x1669 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x297A SWAP1 SLOAD PUSH2 0x295C JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2989 PUSH1 0xFF SWAP2 PUSH2 0xBF4 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x29A7 PUSH2 0x29A2 PUSH2 0x29AC SWAP3 PUSH2 0x646 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x646 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x29C7 PUSH2 0x29C2 PUSH2 0x29CE SWAP3 PUSH2 0x2993 JUMP JUMPDEST PUSH2 0x29AF JUMP JUMPDEST DUP3 SLOAD PUSH2 0x297D JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x8 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x29E5 PUSH2 0xFF00 SWAP2 PUSH2 0x29D2 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2A04 PUSH2 0x29FF PUSH2 0x2A0B SWAP3 PUSH2 0x1716 JUMP JUMPDEST PUSH2 0x1722 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x29D8 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP2 SWAP1 SWAP5 SWAP3 CALLER PUSH2 0x2A46 PUSH2 0x2A40 PUSH32 0x0 PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x2ABB JUMPI JUMPDEST PUSH2 0x2A9E JUMPI PUSH2 0x2A6F PUSH2 0x2A76 SWAP3 PUSH2 0x2A68 PUSH2 0x2A90 SWAP9 PUSH1 0x9 PUSH2 0x158A JUMP JUMPDEST PUSH1 0xA PUSH2 0x158A JUMP JUMPDEST PUSH1 0xB PUSH2 0x29B2 JUMP JUMPDEST PUSH2 0x2A88 PUSH2 0x2A81 PUSH2 0xC16 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x250C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x2F59 JUMP JUMPDEST PUSH2 0x2A9C PUSH1 0x1 PUSH1 0xB PUSH2 0x29EF JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x2AB7 PUSH1 0x4 DUP3 ADD PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x2AC6 PUSH1 0xB PUSH2 0x2970 JUMP JUMPDEST PUSH2 0x2A4F JUMP JUMPDEST PUSH2 0x2AE3 PUSH1 0x0 PUSH2 0x2AE8 SWAP3 PUSH2 0x2ADC PUSH2 0x106A JUMP JUMPDEST POP ADD PUSH2 0x28EA JUMP JUMPDEST PUSH2 0x2F76 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2AF3 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x2AFD DUP2 PUSH2 0x2F8E JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x2B09 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2B13 SWAP2 POP PUSH2 0x2FCE JUMP JUMPDEST CODESIZE PUSH2 0x2B05 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2B30 PUSH2 0x2B2B PUSH2 0x2B35 SWAP3 PUSH2 0x2B19 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2B71 PUSH1 0x17 DUP1 SWAP3 PUSH2 0x2B38 JUMP JUMPDEST PUSH2 0x2B7A DUP2 PUSH2 0x2B3D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2BA3 PUSH2 0x2B9A SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x2B91 DUP2 PUSH2 0x2A4 JUMP JUMPDEST SWAP5 DUP6 DUP1 SWAP4 PUSH2 0x2B38 JUMP JUMPDEST SWAP4 DUP5 SWAP2 ADD PUSH2 0x2B1 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2BDB PUSH1 0x11 DUP1 SWAP3 PUSH2 0x2B38 JUMP JUMPDEST PUSH2 0x2BE4 DUP2 PUSH2 0x2BA7 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2C02 PUSH2 0x2C0D SWAP4 SWAP3 PUSH2 0x2BFC PUSH2 0x2C07 SWAP4 PUSH2 0x2B65 JUMP JUMPDEST SWAP1 PUSH2 0x2B7E JUMP JUMPDEST PUSH2 0x2BCF JUMP JUMPDEST SWAP1 PUSH2 0x2B7E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2C28 PUSH2 0x2C22 DUP4 DUP4 SWAP1 PUSH2 0x1690 JUMP JUMPDEST ISZERO PUSH2 0x237 JUMP JUMPDEST PUSH2 0x2C30 JUMPI POP POP JUMP JUMPDEST PUSH2 0x2CA8 SWAP2 PUSH2 0x2C86 PUSH2 0x2C5F PUSH2 0x2C4F PUSH2 0x2C49 PUSH2 0x2C8B SWAP6 PUSH2 0x3056 JUMP JUMPDEST SWAP4 PUSH2 0x28ED JUMP JUMPDEST PUSH2 0x2C59 PUSH1 0x20 PUSH2 0x2B1C JUMP JUMPDEST SWAP1 PUSH2 0x32E3 JUMP JUMPDEST SWAP2 PUSH2 0x2C77 PUSH2 0x2C6B PUSH2 0x1D3 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD PUSH2 0x2BE8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x2C10 JUMP JUMPDEST PUSH2 0x2C93 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x311 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x2CC1 PUSH2 0x2CBC PUSH2 0x2CC8 SWAP3 PUSH2 0x1716 JUMP JUMPDEST PUSH2 0x1722 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x297D JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2CE0 PUSH2 0x2CDA DUP3 DUP5 SWAP1 PUSH2 0x1690 JUMP JUMPDEST ISZERO PUSH2 0x237 JUMP JUMPDEST PUSH2 0x2CE9 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x2D0C PUSH1 0x1 PUSH2 0x2D07 PUSH1 0x0 PUSH2 0x2CFF PUSH1 0x5 DUP7 SWAP1 PUSH2 0x10EF JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x1651 JUMP JUMPDEST PUSH2 0x2CAC JUMP JUMPDEST SWAP1 PUSH2 0x2D15 PUSH2 0x1E83 JUMP JUMPDEST SWAP1 PUSH2 0x2D52 PUSH2 0x2D4C PUSH2 0x2D46 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP6 PUSH2 0x10E3 JUMP JUMPDEST SWAP3 PUSH2 0x15C6 JUMP JUMPDEST SWAP3 PUSH2 0x15C6 JUMP JUMPDEST SWAP3 PUSH2 0x2D5B PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x2D65 DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x2CE5 JUMP JUMPDEST PUSH2 0x2D78 SWAP1 PUSH2 0xFCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2D8F PUSH2 0x2D8A PUSH2 0x2D94 SWAP3 PUSH2 0x35F JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2DAB PUSH2 0x2DA6 PUSH2 0x2DB0 SWAP3 PUSH2 0x39A JUMP JUMPDEST PUSH2 0xBF4 JUMP JUMPDEST PUSH2 0x546 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2DE6 PUSH2 0x2DE0 PUSH2 0x2DDB PUSH2 0x2DD6 PUSH1 0x0 PUSH2 0x2DEB SWAP7 PUSH2 0x2DCE PUSH2 0xDD4 JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x2D6F JUMP JUMPDEST PUSH2 0x2D7B JUMP JUMPDEST PUSH2 0x2D97 JUMP JUMPDEST SWAP2 PUSH2 0x28EA JUMP JUMPDEST PUSH2 0x34D9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2DF9 DUP2 DUP4 SWAP1 PUSH2 0x1690 JUMP JUMPDEST PUSH2 0x2E02 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x2E25 PUSH1 0x0 PUSH2 0x2E20 PUSH1 0x0 PUSH2 0x2E18 PUSH1 0x5 DUP7 SWAP1 PUSH2 0x10EF JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x1651 JUMP JUMPDEST PUSH2 0x2CAC JUMP JUMPDEST SWAP1 PUSH2 0x2E2E PUSH2 0x1E83 JUMP JUMPDEST SWAP1 PUSH2 0x2E6B PUSH2 0x2E65 PUSH2 0x2E5F PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP6 PUSH2 0x10E3 JUMP JUMPDEST SWAP3 PUSH2 0x15C6 JUMP JUMPDEST SWAP3 PUSH2 0x15C6 JUMP JUMPDEST SWAP3 PUSH2 0x2E74 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x2E7E DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x2DFE JUMP JUMPDEST SWAP1 PUSH2 0x2EBB PUSH2 0x2EB5 PUSH2 0x2EB0 PUSH2 0x2EAB PUSH1 0x0 PUSH2 0x2EC0 SWAP7 PUSH2 0x2EA3 PUSH2 0xDD4 JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x2D6F JUMP JUMPDEST PUSH2 0x2D7B JUMP JUMPDEST PUSH2 0x2D97 JUMP JUMPDEST SWAP2 PUSH2 0x28EA JUMP JUMPDEST PUSH2 0x35BE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x2EF1 DUP2 PUSH2 0x2ED9 JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x2F0C JUMPI PUSH2 0x2F03 PUSH1 0x1 SWAP2 PUSH2 0x2EDD JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2EC3 JUMP JUMPDEST PUSH2 0x2F21 SWAP1 PUSH1 0x8 PUSH2 0x2F26 SWAP4 MUL PUSH2 0x148D JUMP JUMPDEST PUSH2 0x1107 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2F34 SWAP2 SLOAD PUSH2 0x2F11 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F56 SWAP2 PUSH1 0x0 PUSH2 0x2F50 SWAP3 PUSH2 0x2F49 PUSH2 0x10DE JUMP JUMPDEST POP ADD PUSH2 0x2EE8 JUMP JUMPDEST SWAP1 PUSH2 0x2F29 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2F6F PUSH2 0x2F74 SWAP4 SWAP3 PUSH2 0x2F6A PUSH2 0xF8A JUMP JUMPDEST PUSH2 0x250C JUMP JUMPDEST PUSH2 0x36C8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F8B SWAP2 PUSH2 0x2F84 PUSH2 0x106A JUMP JUMPDEST POP ADD PUSH2 0x2ED9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F96 PUSH2 0xDD4 JUMP JUMPDEST POP DUP1 PUSH2 0x2FB1 PUSH2 0x2FAB PUSH4 0x5A05180F PUSH1 0xE0 SHL PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x2FBE JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2FC8 SWAP2 POP PUSH2 0x36E8 JUMP JUMPDEST CODESIZE PUSH2 0x2FBA JUMP JUMPDEST PUSH2 0x2FD6 PUSH2 0xDD4 JUMP JUMPDEST POP DUP1 PUSH2 0x2FF1 PUSH2 0x2FEB PUSH4 0x4E821D33 PUSH1 0xE1 SHL PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x2FFE JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3008 SWAP2 POP PUSH2 0x2F8E JUMP JUMPDEST CODESIZE PUSH2 0x2FFA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3025 PUSH2 0x3020 PUSH2 0x302A SWAP3 PUSH2 0x300E JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x646 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3037 PUSH1 0x14 PUSH2 0x3011 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x304E PUSH2 0x3049 PUSH2 0x3053 SWAP3 PUSH2 0x646 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3073 PUSH2 0x306E PUSH2 0x3089 SWAP3 PUSH2 0x3068 PUSH2 0xE2F JUMP JUMPDEST POP PUSH2 0x2D6F JUMP JUMPDEST PUSH2 0x2D7B JUMP JUMPDEST PUSH2 0x3083 PUSH2 0x307E PUSH2 0x302D JUMP JUMPDEST PUSH2 0x303A JUMP JUMPDEST SWAP1 PUSH2 0x32E3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30A3 PUSH2 0x309E PUSH2 0x30A8 SWAP3 PUSH2 0x308C JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30BA PUSH2 0x30C0 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x39A JUMP JUMPDEST SWAP3 PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x30CC DUP4 DUP3 MUL PUSH2 0x39A JUMP JUMPDEST SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x30DB JUMPI JUMP JUMPDEST PUSH2 0x129D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x30FE JUMPI PUSH2 0x30FA PUSH1 0x20 SWAP2 PUSH2 0x2D6 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x79E JUMP JUMPDEST SWAP1 PUSH2 0x3115 PUSH2 0x3110 DUP4 PUSH2 0x30E0 JUMP JUMPDEST PUSH2 0x7DD JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST CALLDATASIZE SWAP1 CALLDATACOPY JUMP JUMPDEST SWAP1 PUSH2 0x3144 PUSH2 0x312C DUP4 PUSH2 0x3103 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP1 PUSH2 0x313A DUP7 SWAP4 PUSH2 0x30E0 JUMP JUMPDEST SWAP3 ADD SWAP2 SUB SWAP1 PUSH2 0x311A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x3 PUSH1 0xFC SHL SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x315C DUP3 PUSH2 0x314E JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x316E JUMPI PUSH1 0x1 PUSH1 0x20 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x2EC3 JUMP JUMPDEST PUSH2 0x3187 PUSH2 0x3182 PUSH2 0x318C SWAP3 PUSH2 0xBF1 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xF PUSH1 0xFB SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x31AE PUSH2 0x31A9 PUSH2 0x31B3 SWAP3 PUSH2 0x3197 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x31BF SWAP1 PUSH2 0x39A JUMP JUMPDEST PUSH1 0x0 DUP2 EQ PUSH2 0x31CE JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH2 0x129D JUMP JUMPDEST PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 JUMP JUMPDEST PUSH2 0x31F2 PUSH2 0x31D3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x320C PUSH2 0x3207 PUSH2 0x3211 SWAP3 PUSH2 0x31F5 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xF8 SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3231 PUSH2 0x322C PUSH2 0x3236 SWAP3 PUSH2 0x321A JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x646 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3258 SWAP1 PUSH2 0x3252 PUSH2 0x324C PUSH2 0x325D SWAP5 PUSH2 0x646 JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST SWAP1 PUSH2 0x148D JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x3294 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x329D DUP2 PUSH2 0x3260 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x32B7 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x3288 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x32C1 JUMPI JUMP JUMPDEST PUSH2 0x32C9 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x32DF PUSH1 0x4 DUP3 ADD PUSH2 0x32A1 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH2 0x32ED PUSH2 0xE2F JUMP JUMPDEST POP PUSH2 0x3387 PUSH2 0x3377 PUSH2 0x3323 PUSH2 0x331E PUSH2 0x330E PUSH1 0x2 PUSH2 0x3309 DUP8 SWAP2 PUSH2 0x308F JUMP JUMPDEST PUSH2 0x30AB JUMP JUMPDEST PUSH2 0x3318 PUSH1 0x2 PUSH2 0x308F JUMP JUMPDEST SWAP1 PUSH2 0x12B3 JUMP JUMPDEST PUSH2 0x311F JUMP JUMPDEST SWAP3 PUSH2 0x332C PUSH2 0x3146 JUMP JUMPDEST PUSH2 0x3345 DUP6 PUSH2 0x333F PUSH1 0x0 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x3173 JUMP JUMPDEST SWAP1 PUSH2 0x3152 JUMP JUMPDEST MSTORE8 PUSH2 0x334E PUSH2 0x318F JUMP JUMPDEST PUSH2 0x3367 DUP6 PUSH2 0x3361 PUSH1 0x1 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x319A JUMP JUMPDEST SWAP1 PUSH2 0x3152 JUMP JUMPDEST MSTORE8 PUSH2 0x3372 PUSH1 0x2 PUSH2 0x308F JUMP JUMPDEST PUSH2 0x30AB JUMP JUMPDEST PUSH2 0x3381 PUSH1 0x1 PUSH2 0x319A JUMP JUMPDEST SWAP1 PUSH2 0x12B3 JUMP JUMPDEST SWAP3 JUMPDEST DUP4 PUSH2 0x339D PUSH2 0x3397 PUSH1 0x1 PUSH2 0x319A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST GT ISZERO PUSH2 0x3404 JUMPI PUSH2 0x33AB PUSH2 0x31EA JUMP JUMPDEST DUP2 PUSH2 0x33B6 PUSH1 0xF PUSH2 0x31F8 JUMP JUMPDEST AND SWAP2 PUSH1 0x10 DUP4 LT ISZERO PUSH2 0x33FF JUMPI PUSH2 0x33D2 PUSH2 0x33F3 SWAP3 PUSH2 0x33F9 SWAP5 BYTE PUSH2 0x3214 JUMP JUMPDEST PUSH2 0x33E2 DUP6 SWAP2 DUP9 SWAP1 PUSH1 0x0 BYTE SWAP3 PUSH2 0x3152 JUMP JUMPDEST MSTORE8 PUSH2 0x33ED PUSH1 0x4 PUSH2 0x321D JUMP JUMPDEST SWAP1 PUSH2 0x3239 JUMP JUMPDEST SWAP4 PUSH2 0x31B6 JUMP JUMPDEST SWAP3 PUSH2 0x3389 JUMP JUMPDEST PUSH2 0x2EC3 JUMP JUMPDEST PUSH2 0x342C SWAP3 SWAP4 POP PUSH2 0x3427 SWAP1 PUSH2 0x3421 PUSH2 0x341B PUSH1 0x0 PUSH2 0x3173 JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST EQ PUSH2 0x32BA JUMP JUMPDEST PUSH2 0x2C10 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x344A DUP2 PUSH2 0x343D JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x3465 JUMPI PUSH2 0x345C PUSH1 0x1 SWAP2 PUSH2 0x3432 JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2EC3 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3480 PUSH2 0x347B PUSH2 0x3488 SWAP4 PUSH2 0x10E3 JUMP JUMPDEST PUSH2 0x1DD7 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x139B JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 DUP2 SLOAD SWAP2 PUSH9 0x10000000000000000 DUP4 LT ISZERO PUSH2 0x34BC JUMPI DUP3 PUSH2 0x34B4 SWAP2 PUSH1 0x1 PUSH2 0x34BA SWAP6 ADD DUP2 SSTORE PUSH2 0x3441 JUMP JUMPDEST SWAP1 PUSH2 0x346A JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x79E JUMP JUMPDEST SWAP1 PUSH2 0x34CB SWAP1 PUSH2 0x10E3 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x34E1 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x34F6 PUSH2 0x34F0 DUP3 DUP5 SWAP1 PUSH2 0x3728 JUMP JUMPDEST ISZERO PUSH2 0x237 JUMP JUMPDEST PUSH1 0x0 EQ PUSH2 0x3539 JUMPI PUSH2 0x352F PUSH2 0x3534 SWAP3 PUSH2 0x351A PUSH2 0x3513 PUSH1 0x0 DUP6 ADD PUSH2 0x342F JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x348C JUMP JUMPDEST PUSH1 0x1 PUSH2 0x3528 PUSH1 0x0 DUP6 ADD PUSH2 0x2ED9 JUMP JUMPDEST SWAP4 ADD PUSH2 0x34C1 JUMP JUMPDEST PUSH2 0x200C JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x354F PUSH2 0x3555 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x39A JUMP JUMPDEST SWAP3 PUSH2 0x39A JUMP JUMPDEST DUP3 SUB SWAP2 DUP3 GT PUSH2 0x3560 JUMPI JUMP JUMPDEST PUSH2 0x129D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x358D SWAP2 PUSH2 0x3587 PUSH2 0x10DE JUMP JUMPDEST SWAP2 PUSH2 0x346A JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3598 DUP2 PUSH2 0x343D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x35B9 JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 PUSH2 0x35B6 PUSH2 0x35B0 DUP4 DUP4 PUSH2 0x3441 JUMP JUMPDEST SWAP1 PUSH2 0x357B JUMP JUMPDEST SSTORE JUMP JUMPDEST PUSH2 0x3565 JUMP JUMPDEST PUSH2 0x35C6 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x35DD PUSH2 0x35D8 PUSH1 0x1 DUP4 ADD DUP5 SWAP1 PUSH2 0x34C1 JUMP JUMPDEST PUSH2 0x108C JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x35F2 PUSH2 0x35EC PUSH1 0x0 PUSH2 0x3173 JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST EQ ISZERO PUSH1 0x0 EQ PUSH2 0x36C0 JUMPI PUSH2 0x3672 SWAP3 PUSH1 0x1 PUSH2 0x366D SWAP3 DUP5 PUSH2 0x361B PUSH1 0x0 SWAP7 PUSH2 0x3615 DUP6 PUSH2 0x319A JUMP JUMPDEST SWAP1 PUSH2 0x3540 JUMP JUMPDEST PUSH2 0x3638 PUSH2 0x3629 DUP9 DUP6 ADD PUSH2 0x2ED9 JUMP JUMPDEST PUSH2 0x3632 DUP7 PUSH2 0x319A JUMP JUMPDEST SWAP1 PUSH2 0x3540 JUMP JUMPDEST DUP1 PUSH2 0x364B PUSH2 0x3645 DUP5 PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST SUB PUSH2 0x3677 JUMPI JUMPDEST POP POP POP PUSH2 0x3667 PUSH2 0x3662 DUP7 DUP4 ADD PUSH2 0x342F JUMP JUMPDEST PUSH2 0x358F JUMP JUMPDEST ADD PUSH2 0x34C1 JUMP JUMPDEST PUSH2 0x1402 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x36B8 SWAP3 PUSH2 0x36AA PUSH2 0x3696 PUSH2 0x3690 PUSH2 0x36B3 SWAP5 DUP13 DUP10 ADD PUSH2 0x2EE8 JUMP JUMPDEST SWAP1 PUSH2 0x2F29 JUMP JUMPDEST SWAP4 PUSH2 0x36A4 DUP6 SWAP2 DUP13 DUP10 ADD PUSH2 0x2EE8 JUMP JUMPDEST SWAP1 PUSH2 0x346A JUMP JUMPDEST SWAP2 DUP6 DUP6 ADD PUSH2 0x34C1 JUMP JUMPDEST PUSH2 0x200C JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x3651 JUMP JUMPDEST POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x36DF PUSH2 0x36D8 PUSH2 0x36E6 SWAP4 PUSH2 0xFF4 JUMP JUMPDEST PUSH1 0x7 PUSH2 0x102A JUMP JUMPDEST PUSH1 0x8 PUSH2 0x1DE3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x36F0 PUSH2 0xDD4 JUMP JUMPDEST POP DUP1 PUSH2 0x370B PUSH2 0x3705 PUSH4 0x7965DB0B PUSH1 0xE0 SHL PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x3718 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3722 SWAP2 POP PUSH2 0x375E JUMP JUMPDEST CODESIZE PUSH2 0x3714 JUMP JUMPDEST PUSH2 0x3746 SWAP2 PUSH1 0x1 PUSH2 0x3741 SWAP3 PUSH2 0x373A PUSH2 0xDD4 JUMP JUMPDEST POP ADD PUSH2 0x34C1 JUMP JUMPDEST PUSH2 0x108C JUMP JUMPDEST PUSH2 0x3759 PUSH2 0x3753 PUSH1 0x0 PUSH2 0x3173 JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST EQ ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x3766 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x3780 PUSH2 0x377A PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE SLOAD 0xAC DUP14 0xDC 0xA7 RETURNDATASIZE CREATE PUSH31 0xFE925C9789862CCBC82A4159F335F2A7D7EBC0D6F5098764736F6C63430008 SHL STOP CALLER ",
              "sourceMap": "284:2433:36:-:0;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;489:56;;;:::i;:::-;528:10;513:25;;489:56::o;638:69:38:-;;;:::i;:::-;:::o;514:122::-;;;:::i;:::-;:::o;65:447::-;;;:::i;:::-;:::o;284:2433:36:-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::i;:::-;;:::o;811:70:35:-;;831:2;;:::i;:::-;835;;:::i;:::-;811:70;;:::i;:::-;864:10;849:25;;811:70::o;411:1473:40:-;;;;;:::i;:::-;:::o;645:1467:28:-;;;;;:::i;:::-;:::o;355:2051:1:-;;;;;:::i;:::-;:::o;1932:6295:0:-;;;;;:::i;:::-;:::o;726:260:19:-;;;;;:::i;:::-;:::o;405:447:20:-;;;;;:::i;:::-;:::o;484::25:-;;;;;:::i;:::-;:::o;261:966:3:-;;;;;:::i;:::-;:::o;209:2710:2:-;;;;;:::i;:::-;:::o;284:2433:36:-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;;;;:::i;:::-;;;:::o;:::-;;;:::o;:::-;;;;;:::i;:::-;;;:::i;:::-;:::o;:::-;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;:::o;1980:113:11:-;;2046:13;2069:17;1980:113;2046:13;;:::i;:::-;2069:17;;:::i;:::-;1980:113::o"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode": {
                  "entryPoint": 660,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_address": {
                  "entryPoint": 907,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_addresst_address": {
                  "entryPoint": 3384,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_addresst_addresst_uint256": {
                  "entryPoint": 1237,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_decode_addresst_stringt_stringt_uint8t_addresst_bytes32": {
                  "entryPoint": 2647,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 6
                },
                "abi_decode_addresst_struct_Attestation_calldatat_struct_Call_calldata": {
                  "entryPoint": 2897,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 3
                },
                "abi_decode_addresst_uint256": {
                  "entryPoint": 961,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_available_length_string": {
                  "entryPoint": 2081,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_bytes32": {
                  "entryPoint": 1389,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_bytes32_fromMemory": {
                  "entryPoint": 6196,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_bytes32t_address": {
                  "entryPoint": 1508,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_bytes32t_uint256": {
                  "entryPoint": 2369,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_bytes4": {
                  "entryPoint": 536,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_string": {
                  "entryPoint": 2135,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_stringt_string": {
                  "entryPoint": 2170,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "abi_decode_struct_Attestation_calldata": {
                  "entryPoint": 2859,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_struct_Call_calldata": {
                  "entryPoint": 2878,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_t_bytes32": {
                  "entryPoint": 1374,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_t_bytes32_fromMemory": {
                  "entryPoint": 6181,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_t_bytes4": {
                  "entryPoint": 521,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address": {
                  "entryPoint": 1061,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_uint256": {
                  "entryPoint": 1858,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint256": {
                  "entryPoint": 946,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint64": {
                  "entryPoint": 6615,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint8": {
                  "entryPoint": 2632,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encodeUpdatedPos_string_storage": {
                  "entryPoint": 3863,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 2415,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_struct_Attestation_calldata_bytes32": {
                  "entryPoint": 6899,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_address_to_address": {
                  "entryPoint": 6245,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bool": {
                  "entryPoint": 585,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_bool_to_bool": {
                  "entryPoint": 572,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes32": {
                  "entryPoint": 6307,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes32_to_bytes32": {
                  "entryPoint": 1420,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes4": {
                  "entryPoint": 6276,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes_calldata": {
                  "entryPoint": 6414,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_packed_stringliteral_da0d_string_stringliteral_f986_string": {
                  "entryPoint": 11240,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 785,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_calldata": {
                  "entryPoint": 6546,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_encode_string_memory_ptr": {
                  "entryPoint": 11134,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_storage": {
                  "entryPoint": 3720,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_string_to_string": {
                  "entryPoint": 736,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral": {
                  "entryPoint": 9100,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_04fc": {
                  "entryPoint": 12936,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_0557": {
                  "entryPoint": 8930,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_149b": {
                  "entryPoint": 10146,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_2488": {
                  "entryPoint": 8138,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029": {
                  "entryPoint": 8112,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_3b66": {
                  "entryPoint": 8486,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_b167": {
                  "entryPoint": 9976,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_baec": {
                  "entryPoint": 8786,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea": {
                  "entryPoint": 8760,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_c953": {
                  "entryPoint": 7968,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208": {
                  "entryPoint": 7942,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_da0d": {
                  "entryPoint": 11109,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f8b4": {
                  "entryPoint": 7235,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8": {
                  "entryPoint": 7209,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f986": {
                  "entryPoint": 11215,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_fb06": {
                  "entryPoint": 4626,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_fc0b": {
                  "entryPoint": 9634,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e": {
                  "entryPoint": 9608,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_struct_Attestation_calldata": {
                  "entryPoint": 6726,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_struct_AuthData_calldata": {
                  "entryPoint": 6661,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 1092,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 2428,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_bytes32": {
                  "entryPoint": 1433,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral": {
                  "entryPoint": 8956,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_04fc": {
                  "entryPoint": 12961,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_149b": {
                  "entryPoint": 10172,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_3b66": {
                  "entryPoint": 8512,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_4107": {
                  "entryPoint": 9126,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_b167": {
                  "entryPoint": 10002,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_fb06": {
                  "entryPoint": 4652,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_uint256": {
                  "entryPoint": 1162,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_uint256_to_uint256": {
                  "entryPoint": 1149,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_uint64": {
                  "entryPoint": 6648,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_uint8": {
                  "entryPoint": 1625,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_uint8_to_uint8": {
                  "entryPoint": 1612,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "allocate_and_zero_memory_array_bytes": {
                  "entryPoint": 12575,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 2013,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_bytes": {
                  "entryPoint": 12547,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 467,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_bytes": {
                  "entryPoint": 12512,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_allocation_size_string": {
                  "entryPoint": 2034,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_array_bytes32_dyn_storage": {
                  "entryPoint": 11997,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_array_bytes32_dyn_storage_ptr": {
                  "entryPoint": 13362,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_string_storage": {
                  "entryPoint": 3709,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_array_bytes32_dyn_storage": {
                  "entryPoint": 11993,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_array_bytes32_dyn_storage_ptr": {
                  "entryPoint": 13373,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_bytes": {
                  "entryPoint": 12622,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_string": {
                  "entryPoint": 676,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_pop_array_bytes32_dyn_storage_ptr": {
                  "entryPoint": 13711,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "array_push_from_bytes32_to_array_bytes32_dyn_storage_ptr": {
                  "entryPoint": 13452,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "array_storeLengthForEncoding_bytes": {
                  "entryPoint": 6405,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 3700,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string_fromStack": {
                  "entryPoint": 680,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string_nonPadded_inplace": {
                  "entryPoint": 11064,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_access_address": {
                  "entryPoint": 6227,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_access_bytes32": {
                  "entryPoint": 6289,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_access_bytes4": {
                  "entryPoint": 6258,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_access_bytes_calldata": {
                  "entryPoint": 6335,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "calldata_access_string_calldata": {
                  "entryPoint": 6476,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "calldata_access_struct_AuthData_calldata": {
                  "entryPoint": 6449,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "calldata_access_uint64": {
                  "entryPoint": 6630,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_add_uint256": {
                  "entryPoint": 4787,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_mul_uint256": {
                  "entryPoint": 12459,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "checked_sub_uint256": {
                  "entryPoint": 13632,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "clean_up_bytearray_end_slots_string_storage": {
                  "entryPoint": 5174,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "cleanup_address": {
                  "entryPoint": 874,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bool": {
                  "entryPoint": 567,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes32": {
                  "entryPoint": 1350,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes4": {
                  "entryPoint": 488,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_bool": {
                  "entryPoint": 5737,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_bytes32": {
                  "entryPoint": 4359,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_contract_IImplicitProjectValidation": {
                  "entryPoint": 6119,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_uint256": {
                  "entryPoint": 4213,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_uint8": {
                  "entryPoint": 4487,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_0_by": {
                  "entryPoint": 3057,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_15_by": {
                  "entryPoint": 12789,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_2_by": {
                  "entryPoint": 12428,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 12826,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by_1": {
                  "entryPoint": 12302,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by": {
                  "entryPoint": 11033,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_t_rational_by_1": {
                  "entryPoint": 12695,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 863,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 922,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint64": {
                  "entryPoint": 6581,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint8": {
                  "entryPoint": 1606,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "clear_storage_range_bytes1": {
                  "entryPoint": 5142,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "constant_ADDRESS_LENGTH": {
                  "entryPoint": 12333,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_DEFAULT_ADMIN_ROLE": {
                  "entryPoint": 3094,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_IMPLICIT_MODE_ADMIN_ROLE": {
                  "entryPoint": 3978,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_MINTER_ROLE": {
                  "entryPoint": 4877,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "constant_SYMBOLS": {
                  "entryPoint": 12778,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 5574,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_contract_IImplicitProjectValidation": {
                  "entryPoint": 4084,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_uint160": {
                  "entryPoint": 11631,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_array_array_bytes32_dyn_storage_to_array_bytes32_dyn_ptr": {
                  "entryPoint": 13359,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_array_bytes_to_string": {
                  "entryPoint": 11280,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_array_string_storage_to_string": {
                  "entryPoint": 3910,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_bool_to_bool": {
                  "entryPoint": 5910,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_bytes32_to_bytes32": {
                  "entryPoint": 4323,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_bytes32_to_uint256": {
                  "entryPoint": 10477,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_IImplicitProjectValidation_to_address": {
                  "entryPoint": 6163,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_IImplicitProjectValidation_to_contract_IImplicitProjectValidation": {
                  "entryPoint": 4123,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_0_by_1_to_uint256": {
                  "entryPoint": 12659,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_1_by_1_to_uint256": {
                  "entryPoint": 12698,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_2_by_1_to_uint256": {
                  "entryPoint": 12431,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 7852,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_bytes32": {
                  "entryPoint": 3066,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 7824,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 12792,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint8": {
                  "entryPoint": 12829,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_stringliteral_0448_to_bytes1": {
                  "entryPoint": 12614,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_cb29_to_bytes16": {
                  "entryPoint": 12755,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_stringliteral_to_bytes1": {
                  "entryPoint": 12687,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_struct_AddressSet_storage_to_struct_AddressSet_ptr": {
                  "entryPoint": 5670,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_struct_Set_storage_to_struct_Set_ptr": {
                  "entryPoint": 10474,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint256": {
                  "entryPoint": 11036,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_t_rational_by_to_t_uint8": {
                  "entryPoint": 12305,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 5562,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_IImplicitProjectValidation": {
                  "entryPoint": 4072,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 4044,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint256": {
                  "entryPoint": 11643,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint256_to_bytes32": {
                  "entryPoint": 11671,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint256_to_uint160": {
                  "entryPoint": 10497,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint256_to_uint256": {
                  "entryPoint": 5057,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint8_to_uint256": {
                  "entryPoint": 12346,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint8_to_uint8": {
                  "entryPoint": 10643,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_array_from_storage_to_memory_string": {
                  "entryPoint": 3876,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_byte_array_to_storage_from_string_to_string": {
                  "entryPoint": 5305,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "copy_calldata_to_memory_with_cleanup": {
                  "entryPoint": 2069,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 689,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "decrement_uint256": {
                  "entryPoint": 12726,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "divide_by_ceil": {
                  "entryPoint": 5005,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "external_fun_DEFAULT_ADMIN_ROLE": {
                  "entryPoint": 3118,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_acceptImplicitRequest": {
                  "entryPoint": 3003,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_allowance": {
                  "entryPoint": 3430,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_approve": {
                  "entryPoint": 1007,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_balanceOf": {
                  "entryPoint": 2316,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_burn": {
                  "entryPoint": 1889,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_decimals": {
                  "entryPoint": 1647,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_decreaseAllowance": {
                  "entryPoint": 3171,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_getRoleAdmin": {
                  "entryPoint": 1455,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_getRoleMember": {
                  "entryPoint": 2450,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_getRoleMemberCount": {
                  "entryPoint": 3279,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_grantRole": {
                  "entryPoint": 1554,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_hasRole": {
                  "entryPoint": 2504,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_increaseAllowance": {
                  "entryPoint": 1752,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_initialize": {
                  "entryPoint": 2796,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_mint": {
                  "entryPoint": 1806,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_name": {
                  "entryPoint": 810,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_renounceRole": {
                  "entryPoint": 1700,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_revokeRole": {
                  "entryPoint": 3332,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setImplicitModeProjectId": {
                  "entryPoint": 3484,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setImplicitModeValidator": {
                  "entryPoint": 1098,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_setNameAndSymbol": {
                  "entryPoint": 2264,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_supportsInterface": {
                  "entryPoint": 607,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_symbol": {
                  "entryPoint": 2558,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_totalSupply": {
                  "entryPoint": 1184,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_transfer": {
                  "entryPoint": 3225,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_transferFrom": {
                  "entryPoint": 1296,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "extract_byte_array_length": {
                  "entryPoint": 3658,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_dynamict_bytes32": {
                  "entryPoint": 12049,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offset_0t_bool": {
                  "entryPoint": 5743,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offset_1t_bool": {
                  "entryPoint": 10588,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_bool": {
                  "entryPoint": 5847,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_bytes32": {
                  "entryPoint": 4362,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_contract_IImplicitProjectValidation": {
                  "entryPoint": 6130,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_uint256": {
                  "entryPoint": 4216,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_uint8": {
                  "entryPoint": 4493,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_used_part_and_set_length_of_short_byte_array": {
                  "entryPoint": 5287,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 1972,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun__approve": {
                  "entryPoint": 8236,
                  "id": 1644,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun__burn": {
                  "entryPoint": 10238,
                  "id": 1599,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun__checkRole": {
                  "entryPoint": 8426,
                  "id": 92,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun__grantRole": {
                  "entryPoint": 11468,
                  "id": 283,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun__mint": {
                  "entryPoint": 9700,
                  "id": 1527,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun__revokeRole": {
                  "entryPoint": 9526,
                  "id": 439,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_acceptImplicitRequest": {
                  "entryPoint": 6970,
                  "id": 5571,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_add": {
                  "entryPoint": 13529,
                  "id": 3645,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_add_3945": {
                  "entryPoint": 11699,
                  "id": 3945,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_allowance": {
                  "entryPoint": 7549,
                  "id": 1265,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_approve": {
                  "entryPoint": 3944,
                  "id": 1290,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_at": {
                  "entryPoint": 12087,
                  "id": 3779,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_at_4041": {
                  "entryPoint": 10525,
                  "id": 4041,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_balanceOf": {
                  "entryPoint": 5610,
                  "id": 1222,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_burn": {
                  "entryPoint": 4965,
                  "id": 6445,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_checkRole": {
                  "entryPoint": 11283,
                  "id": 131,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_contains": {
                  "entryPoint": 14120,
                  "id": 3748,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_decimals": {
                  "entryPoint": 4526,
                  "id": 6504,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_decreaseAllowance": {
                  "entryPoint": 7315,
                  "id": 1393,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_getRoleAdmin": {
                  "entryPoint": 4395,
                  "id": 146,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_getRoleMember": {
                  "entryPoint": 5673,
                  "id": 375,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_getRoleMemberCount": {
                  "entryPoint": 7433,
                  "id": 391,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_grantRole": {
                  "entryPoint": 9484,
                  "id": 415,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_grantRole_166": {
                  "entryPoint": 4470,
                  "id": 166,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_grantRole_inner": {
                  "entryPoint": 4458,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_hasRole": {
                  "entryPoint": 5776,
                  "id": 79,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_increaseAllowance": {
                  "entryPoint": 4824,
                  "id": 1352,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_initialize": {
                  "entryPoint": 10767,
                  "id": 6432,
                  "parameterSlots": 6,
                  "returnSlots": 0
                },
                "fun_initializeImplicitMode": {
                  "entryPoint": 12121,
                  "id": 6911,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_initializeSignalsImplicitMode": {
                  "entryPoint": 14024,
                  "id": 5543,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_initialize_6584": {
                  "entryPoint": 5957,
                  "id": 6584,
                  "parameterSlots": 6,
                  "returnSlots": 0
                },
                "fun_length": {
                  "entryPoint": 12150,
                  "id": 3762,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_length_4014": {
                  "entryPoint": 10955,
                  "id": 4014,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_mint": {
                  "entryPoint": 4953,
                  "id": 6601,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_mint_inner": {
                  "entryPoint": 4941,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_msgSender": {
                  "entryPoint": 7811,
                  "id": 2155,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_name": {
                  "entryPoint": 3922,
                  "id": 6484,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_remove": {
                  "entryPoint": 13758,
                  "id": 3729,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_remove_3972": {
                  "entryPoint": 11912,
                  "id": 3972,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_renounceRole": {
                  "entryPoint": 4718,
                  "id": 209,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_revokeRole": {
                  "entryPoint": 7513,
                  "id": 186,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_revokeRole_314": {
                  "entryPoint": 11758,
                  "id": 314,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_revokeRole_inner": {
                  "entryPoint": 7501,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_setImplicitModeProjectId": {
                  "entryPoint": 7696,
                  "id": 6941,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setImplicitModeProjectId_inner": {
                  "entryPoint": 7683,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setImplicitModeValidator": {
                  "entryPoint": 4191,
                  "id": 6927,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setImplicitModeValidator_inner": {
                  "entryPoint": 4170,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_setNameAndSymbol": {
                  "entryPoint": 5550,
                  "id": 6621,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_setNameAndSymbol_inner": {
                  "entryPoint": 5526,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_spendAllowance": {
                  "entryPoint": 8578,
                  "id": 1687,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_supportsInterface": {
                  "entryPoint": 14056,
                  "id": 60,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_2608": {
                  "entryPoint": 14174,
                  "id": 2608,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_356": {
                  "entryPoint": 12174,
                  "id": 356,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_5606": {
                  "entryPoint": 12238,
                  "id": 5606,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_6474": {
                  "entryPoint": 7707,
                  "id": 6474,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_6648": {
                  "entryPoint": 3545,
                  "id": 6648,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_supportsInterface_6963": {
                  "entryPoint": 10987,
                  "id": 6963,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_symbol": {
                  "entryPoint": 5819,
                  "id": 6494,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_toHexString": {
                  "entryPoint": 13027,
                  "id": 2539,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_toHexString_2559": {
                  "entryPoint": 12374,
                  "id": 2559,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "fun_totalSupply": {
                  "entryPoint": 4249,
                  "id": 1208,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_transfer": {
                  "entryPoint": 9206,
                  "id": 1470,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "fun_transferFrom": {
                  "entryPoint": 4271,
                  "id": 1323,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_transfer_1247": {
                  "entryPoint": 7399,
                  "id": 1247,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "getter_fun_DEFAULT_ADMIN_ROLE": {
                  "entryPoint": 3107,
                  "id": 27,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 4041,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_bool_of_address": {
                  "entryPoint": 5713,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_mapping_address_uint256_of_address": {
                  "entryPoint": 7525,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_address_uint256_of_address": {
                  "entryPoint": 5586,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_bytes32_struct_AddressSet_storage_of_bytes32": {
                  "entryPoint": 5646,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_bytes32_struct_RoleData_storage_of_bytes32": {
                  "entryPoint": 4335,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mapping_index_access_mapping_bytes32_uint256_of_bytes32": {
                  "entryPoint": 13505,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "mask_bytes_dynamic": {
                  "entryPoint": 5265,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "memory_array_index_access_bytes": {
                  "entryPoint": 12626,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "modifier_onlyRole": {
                  "entryPoint": 4429,
                  "id": 38,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_onlyRole_178": {
                  "entryPoint": 7472,
                  "id": 38,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_onlyRole_6593": {
                  "entryPoint": 4913,
                  "id": 38,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_onlyRole_6610": {
                  "entryPoint": 4977,
                  "id": 38,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "modifier_onlyRole_6918": {
                  "entryPoint": 4014,
                  "id": 38,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_onlyRole_6934": {
                  "entryPoint": 7589,
                  "id": 38,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "panic_error_0x11": {
                  "entryPoint": 4765,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x22": {
                  "entryPoint": 3636,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x31": {
                  "entryPoint": 13669,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x32": {
                  "entryPoint": 11971,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "panic_error_0x41": {
                  "entryPoint": 1950,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_bool": {
                  "entryPoint": 5922,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_bytes32": {
                  "entryPoint": 7639,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_contract_IImplicitProjectValidation": {
                  "entryPoint": 4135,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_uint256": {
                  "entryPoint": 5085,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_uint8": {
                  "entryPoint": 10671,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_dynamic_bytes32": {
                  "entryPoint": 12073,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_2_bool": {
                  "entryPoint": 5867,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_bool": {
                  "entryPoint": 10608,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_bytes32": {
                  "entryPoint": 4382,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_contract_IImplicitProjectValidation": {
                  "entryPoint": 6150,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_t_bool": {
                  "entryPoint": 5763,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_uint256": {
                  "entryPoint": 4236,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_uint8": {
                  "entryPoint": 4513,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral": {
                  "entryPoint": 8981,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_04fc": {
                  "entryPoint": 12986,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_149b": {
                  "entryPoint": 10197,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_2488": {
                  "entryPoint": 8163,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_3b66": {
                  "entryPoint": 8537,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_4107": {
                  "entryPoint": 9151,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_b167": {
                  "entryPoint": 10027,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_baec": {
                  "entryPoint": 8811,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_c953": {
                  "entryPoint": 7993,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_f8b4": {
                  "entryPoint": 7260,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_fb06": {
                  "entryPoint": 4677,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_fc0b": {
                  "entryPoint": 9659,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_0803104b3ab68501accf02de57372b8e5e6e1582158b771d3f89279dc6822fe2": {
                  "entryPoint": 6320,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
                  "entryPoint": 1940,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d": {
                  "entryPoint": 2854,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_3894daff73bdbb8963c284e167b207f7abade3c031c50828ea230a16bdbc0f20": {
                  "entryPoint": 6325,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": 3535,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
                  "entryPoint": 1945,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
                  "entryPoint": 483,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 473,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_db64ea6d4a12deece376118739de8d9f517a2db5b58ea2ca332ea908c04c71d4": {
                  "entryPoint": 6330,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 478,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 6953,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 726,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 10706,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_0": {
                  "entryPoint": 3060,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_16": {
                  "entryPoint": 5880,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_224": {
                  "entryPoint": 6175,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_248": {
                  "entryPoint": 12820,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_dynamic": {
                  "entryPoint": 5015,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "shift_right_0_unsigned": {
                  "entryPoint": 4207,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_224_unsigned": {
                  "entryPoint": 461,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_8_unsigned": {
                  "entryPoint": 10582,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_uint256_uint8": {
                  "entryPoint": 12857,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 5841,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned_dynamic": {
                  "entryPoint": 5261,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "storage_array_index_access_bytes32_dyn": {
                  "entryPoint": 12008,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "storage_array_index_access_bytes32_dyn_ptr": {
                  "entryPoint": 13377,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 2
                },
                "storage_set_to_zero_bytes32": {
                  "entryPoint": 13691,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "storage_set_to_zero_uint256": {
                  "entryPoint": 5122,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2": {
                  "entryPoint": 12896,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f": {
                  "entryPoint": 8852,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd": {
                  "entryPoint": 10068,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029": {
                  "entryPoint": 8034,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe": {
                  "entryPoint": 8446,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6": {
                  "entryPoint": 9022,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f": {
                  "entryPoint": 9898,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea": {
                  "entryPoint": 8682,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208": {
                  "entryPoint": 7864,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874": {
                  "entryPoint": 11069,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8": {
                  "entryPoint": 7131,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69": {
                  "entryPoint": 11175,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b": {
                  "entryPoint": 4548,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e": {
                  "entryPoint": 9568,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_20_shift": {
                  "entryPoint": 4096,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_byte_slice_dynamic32": {
                  "entryPoint": 5019,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "update_byte_slice_shift": {
                  "entryPoint": 7616,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_byte_slice_shift_0": {
                  "entryPoint": 10621,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_byte_slice_shift_1": {
                  "entryPoint": 10712,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_byte_slice_shift_2": {
                  "entryPoint": 5886,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_bytes32_to_bytes32": {
                  "entryPoint": 13418,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "update_storage_value_offset_0t_bool_to_bool": {
                  "entryPoint": 11436,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_bool_to_bool": {
                  "entryPoint": 10735,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_bool_to_t_bool": {
                  "entryPoint": 5925,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_bytes32_to_bytes32": {
                  "entryPoint": 7651,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_contract_IImplicitProjectValidation_to_contract_IImplicitProjectValidation": {
                  "entryPoint": 4138,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_string_to_string": {
                  "entryPoint": 5514,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_uint256_to_uint256": {
                  "entryPoint": 8204,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_uint8_to_uint8": {
                  "entryPoint": 10674,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_uint256_to_uint256": {
                  "entryPoint": 5088,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 886,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_bytes32": {
                  "entryPoint": 1353,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_bytes4": {
                  "entryPoint": 500,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_uint256": {
                  "entryPoint": 925,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_uint64": {
                  "entryPoint": 6594,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_uint8": {
                  "entryPoint": 2611,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "wrapping_add_uint256": {
                  "entryPoint": 9192,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "wrapping_sub_uint256": {
                  "entryPoint": 7301,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "zero_memory_chunk_bytes1": {
                  "entryPoint": 12570,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 5641,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bool": {
                  "entryPoint": 3540,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_bytes32": {
                  "entryPoint": 4318,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_string": {
                  "entryPoint": 3631,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_uint256": {
                  "entryPoint": 4202,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "zero_value_for_split_uint8": {
                  "entryPoint": 4482,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {
                "6362": [
                  {
                    "length": 32,
                    "start": 10780
                  }
                ],
                "6524": [
                  {
                    "length": 32,
                    "start": 5972
                  }
                ]
              },
              "linkReferences": {},
              "object": "60806040526004361015610013575b610dcf565b61001e6000356101cd565b806301ffc9a7146101c857806306fdde03146101c3578063095ea7b3146101be5780630bb310de146101b957806318160ddd146101b457806323b872dd146101af578063248a9ca3146101aa5780632f2ff15d146101a5578063313ce567146101a057806336568abe1461019b578063395093511461019657806340c10f191461019157806342966c681461018c5780635a4462151461018757806370a08231146101825780639010d07c1461017d57806391d148541461017857806395d89b41146101735780639c14f2981461016e5780639d043a6614610169578063a217fddf14610164578063a457c2d71461015f578063a9059cbb1461015a578063ca15c87314610155578063d547741f14610150578063dd62ed3e1461014b5763ed4c2ac70361000e57610d9c565b610d66565b610d04565b610ccf565b610c99565b610c63565b610c2e565b610bbb565b610aec565b6109fe565b6109c8565b610992565b61090c565b6108d8565b610761565b61070e565b6106d8565b6106a4565b61066f565b610612565b6105af565b610510565b6104a0565b61044a565b6103ef565b61032a565b61025f565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b63ffffffff60e01b1690565b6101fd816101e8565b0361020457565b600080fd5b90503590610216826101f4565b565b906020828203126102325761022f91600001610209565b90565b6101de565b151590565b61024590610237565b9052565b919061025d9060006020850194019061023c565b565b3461028f5761028b61027a610275366004610218565b610dd9565b6102826101d3565b91829182610249565b0390f35b6101d9565b600091031261029f57565b6101de565b5190565b60209181520190565b60005b8381106102c5575050906000910152565b8060209183015181850152016102b4565b601f801991011690565b6102ff61030860209361030d936102f6816102a4565b938480936102a8565b958691016102b1565b6102d6565b0190565b61032791602082019160008184039101526102e0565b90565b3461035a5761033a366004610294565b610356610345610f52565b61034d6101d3565b91829182610311565b0390f35b6101d9565b60018060a01b031690565b6103739061035f565b90565b61037f8161036a565b0361038657565b600080fd5b9050359061039882610376565b565b90565b6103a68161039a565b036103ad57565b600080fd5b905035906103bf8261039d565b565b91906040838203126103ea57806103de6103e7926000860161038b565b936020016103b2565b90565b6101de565b346104205761041c61040b6104053660046103c1565b90610f68565b6104136101d3565b91829182610249565b0390f35b6101d9565b9060208282031261043f5761043c9160000161038b565b90565b6101de565b60000190565b346104785761046261045d366004610425565b61105f565b61046a6101d3565b8061047481610444565b0390f35b6101d9565b6104869061039a565b9052565b919061049e9060006020850194019061047d565b565b346104d0576104b0366004610294565b6104cc6104bb611099565b6104c36101d3565b9182918261048a565b0390f35b6101d9565b909160608284031261050b576105086104f1846000850161038b565b936104ff816020860161038b565b936040016103b2565b90565b6101de565b346105415761053d61052c6105263660046104d5565b916110af565b6105346101d3565b91829182610249565b0390f35b6101d9565b90565b61055281610546565b0361055957565b600080fd5b9050359061056b82610549565b565b90602082820312610587576105849160000161055e565b90565b6101de565b61059590610546565b9052565b91906105ad9060006020850194019061058c565b565b346105df576105db6105ca6105c536600461056d565b61112b565b6105d26101d3565b91829182610599565b0390f35b6101d9565b919060408382031261060d578061060161060a926000860161055e565b9360200161038b565b90565b6101de565b346106415761062b6106253660046105e4565b90611176565b6106336101d3565b8061063d81610444565b0390f35b6101d9565b60ff1690565b61065590610646565b9052565b919061066d9060006020850194019061064c565b565b3461069f5761067f366004610294565b61069b61068a6111ae565b6106926101d3565b91829182610659565b0390f35b6101d9565b346106d3576106bd6106b73660046105e4565b9061126e565b6106c56101d3565b806106cf81610444565b0390f35b6101d9565b34610709576107056106f46106ee3660046103c1565b906112d8565b6106fc6101d3565b91829182610249565b0390f35b6101d9565b3461073d576107276107213660046103c1565b90611359565b61072f6101d3565b8061073981610444565b0390f35b6101d9565b9060208282031261075c57610759916000016103b2565b90565b6101de565b3461078f57610779610774366004610742565b611365565b6107816101d3565b8061078b81610444565b0390f35b6101d9565b600080fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b906107be906102d6565b810190811067ffffffffffffffff8211176107d857604052565b61079e565b906107f06107e96101d3565b92836107b4565b565b67ffffffffffffffff81116108105761080c6020916102d6565b0190565b61079e565b90826000939282370152565b90929192610836610831826107f2565b6107dd565b938185526020850190828401116108525761085092610815565b565b610799565b9080601f830112156108755781602061087293359101610821565b90565b610794565b9190916040818403126108d357600081013567ffffffffffffffff81116108ce57836108a7918301610857565b92602082013567ffffffffffffffff81116108c9576108c69201610857565b90565b6101e3565b6101e3565b6101de565b34610907576108f16108eb36600461087a565b906115ae565b6108f96101d3565b8061090381610444565b0390f35b6101d9565b3461093c57610938610927610922366004610425565b6115ea565b61092f6101d3565b9182918261048a565b0390f35b6101d9565b919060408382031261096a578061095e610967926000860161055e565b936020016103b2565b90565b6101de565b6109789061036a565b9052565b91906109909060006020850194019061096f565b565b346109c3576109bf6109ae6109a8366004610941565b90611629565b6109b66101d3565b9182918261097c565b0390f35b6101d9565b346109f9576109f56109e46109de3660046105e4565b90611690565b6109ec6101d3565b91829182610249565b0390f35b6101d9565b34610a2e57610a0e366004610294565b610a2a610a196116bb565b610a216101d3565b91829182610311565b0390f35b6101d9565b610a3c81610646565b03610a4357565b600080fd5b90503590610a5582610a33565b565b909160c082840312610ae757610a70836000840161038b565b92602083013567ffffffffffffffff8111610ae25781610a91918501610857565b92604081013567ffffffffffffffff8111610add5782610ab2918301610857565b92610ada610ac38460608501610a48565b93610ad1816080860161038b565b9360a00161055e565b90565b6101e3565b6101e3565b6101de565b34610b2157610b0b610aff366004610a57565b94939093929192611745565b610b136101d3565b80610b1d81610444565b0390f35b6101d9565b600080fd5b908160c0910312610b395790565b610b26565b908160e0910312610b4c5790565b610b26565b91606083830312610bb657610b69826000850161038b565b92602081013567ffffffffffffffff8111610bb15783610b8a918301610b2b565b92604082013567ffffffffffffffff8111610bac57610ba99201610b3e565b90565b6101e3565b6101e3565b6101de565b34610bec57610be8610bd7610bd1366004610b51565b91611b3a565b610bdf6101d3565b91829182610599565b0390f35b6101d9565b90565b60001b90565b610c0e610c09610c1392610bf1565b610bf4565b610546565b90565b610c206000610bfa565b90565b610c2b610c16565b90565b34610c5e57610c3e366004610294565b610c5a610c49610c23565b610c516101d3565b91829182610599565b0390f35b6101d9565b34610c9457610c90610c7f610c793660046103c1565b90611c93565b610c876101d3565b91829182610249565b0390f35b6101d9565b34610cca57610cc6610cb5610caf3660046103c1565b90611ce7565b610cbd6101d3565b91829182610249565b0390f35b6101d9565b34610cff57610cfb610cea610ce536600461056d565b611d09565b610cf26101d3565b9182918261048a565b0390f35b6101d9565b34610d3357610d1d610d173660046105e4565b90611d59565b610d256101d3565b80610d2f81610444565b0390f35b6101d9565b9190604083820312610d615780610d55610d5e926000860161038b565b9360200161038b565b90565b6101de565b34610d9757610d93610d82610d7c366004610d38565b90611d7d565b610d8a6101d3565b9182918261048a565b0390f35b6101d9565b34610dca57610db4610daf36600461056d565b611e10565b610dbc6101d3565b80610dc681610444565b0390f35b6101d9565b600080fd5b600090565b610de1610dd4565b506306a15b4360e21b610dfc610df6836101e8565b916101e8565b148015610e20575b908115610e10575b5090565b610e1a9150611e1b565b38610e0c565b50610e2a81611e1b565b610e04565b606090565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610e6a575b6020831014610e6557565b610e34565b91607f1691610e5a565b60209181520190565b600052602060002090565b9060009291805490610ea3610e9c83610e4a565b8094610e74565b91600181169081600014610efc5750600114610ebf575b505050565b610ecc9192939450610e7d565b916000925b818410610ee45750500190388080610eba565b60018160209295939554848601520191019290610ed1565b92949550505060ff1916825215156020020190388080610eba565b90610f2191610e88565b90565b90610f44610f3d92610f346101d3565b93848092610f17565b03836107b4565b565b610f4f90610f24565b90565b610f5a610e2f565b50610f656009610f46565b90565b610f8591610f74610dd4565b50610f7d611e83565b91909161202c565b600190565b7f70649ec320b507febad3e8ef750e5f580b9ae32f9f50d4c7b121332c8197153090565b610fc790610fc2610fbd610f8a565b6120ea565b61104a565b565b90565b610fe0610fdb610fe59261035f565b610fc9565b61035f565b90565b610ff190610fcc565b90565b610ffd90610fe8565b90565b9061101160018060a01b0391610bf4565b9181191691161790565b61102490610fe8565b90565b90565b9061103f61103a6110469261101b565b611027565b8254611000565b9055565b61105661105d91610ff4565b600761102a565b565b61106890610fae565b565b600090565b60001c90565b90565b6110846110899161106f565b611075565b90565b6110969054611078565b90565b6110a161106a565b506110ac600261108c565b90565b916110d9926110bc610dd4565b506110d16110c8611e83565b82908491612182565b9190916123f6565b600190565b600090565b6110ec90610546565b90565b906110f9906110e3565b600052602052604060002090565b90565b61111661111b9161106f565b611107565b90565b611128905461110a565b90565b600161114461114a9261113c6110de565b5060056110ef565b0161111e565b90565b906111689161116361115e8261112b565b6120ea565b61116a565b565b906111749161250c565b565b906111809161114d565b565b600090565b60ff1690565b61119961119e9161106f565b611187565b90565b6111ab905461118d565b90565b6111b6611182565b506111c1600b6111a1565b90565b60207f20726f6c657320666f722073656c660000000000000000000000000000000000917f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201520152565b61121f602f6040926102a8565b611228816111c4565b0190565b6112429060208101906000818303910152611212565b90565b1561124c57565b6112546101d3565b62461bcd60e51b81528061126a6004820161122c565b0390fd5b9061129b916112968261129061128a611285611e83565b61036a565b9161036a565b14611245565b612536565b565b634e487b7160e01b600052601160045260246000fd5b6112c26112c89193929361039a565b9261039a565b82018092116112d357565b61129d565b611308916112e4610dd4565b506113026112f0611e83565b916112fd83948094611d7d565b6112b3565b9161202c565b600190565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a690565b9061134b9161134661134161130d565b6120ea565b61134d565b565b90611357916125e4565b565b9061136391611331565b565b61136f90336127fe565b565b9061138b91611386611381610c16565b6120ea565b611596565b565b601f602091010490565b1b90565b919060086113b79102916113b160001984611397565b92611397565b9181191691161790565b6113d56113d06113da9261039a565b610fc9565b61039a565b90565b90565b91906113f66113f16113fe936113c1565b6113dd565b90835461139b565b9055565b6114149161140e61106a565b916113e0565b565b5b818110611422575050565b806114306000600193611402565b01611417565b9190601f8111611446575b505050565b61145261147793610e7d565b90602061145e8461138d565b8301931061147f575b6114709061138d565b0190611416565b388080611441565b915061147081929050611467565b1c90565b906114a2906000199060080261148d565b191690565b816114b191611491565b906002021790565b906114c3816102a4565b9067ffffffffffffffff8211611585576114e7826114e18554610e4a565b85611436565b602090601f831160011461151c5791809161150b93600092611510575b50506114a7565b90555b565b90915001513880611504565b601f1983169161152b85610e7d565b9260005b81811061156d57509160029391856001969410611553575b5050500201905561150e565b611563910151601f841690611491565b9055388080611547565b9193602060018192878701518155019501920161152f565b61079e565b90611594916114b9565b565b906115a56115ac92600961158a565b600a61158a565b565b906115b891611371565b565b6115c390610fcc565b90565b6115cf906115ba565b90565b906115dc906115c6565b600052602052604060002090565b611601611606916115f961106a565b5060006115d2565b61108c565b90565b600090565b90611618906110e3565b600052602052604060002090565b90565b9061164961164461164e9361163c611609565b50600661160e565b611626565b61291d565b90565b9061165b906115c6565b600052602052604060002090565b60ff1690565b61167b6116809161106f565b611669565b90565b61168d905461166f565b90565b6116b89160006116ad6116b3936116a5610dd4565b5060056110ef565b01611651565b611683565b90565b6116c3610e2f565b506116ce600a610f46565b90565b60101c90565b6116e36116e8916116d1565b611669565b90565b6116f590546116d7565b90565b60101b90565b9061170c62ff0000916116f8565b9181191691161790565b61171f90610237565b90565b90565b9061173a61173561174192611716565b611722565b82546116fe565b9055565b9394909192943361177e6117787f000000000000000000000000000000000000000000000000000000000000000061036a565b9161036a565b141580156117d7575b6117ba576117ac9561179f9486949091929394612a0f565b6117a761130d565b61250c565b6117b86001600b611725565b565b600063f92ee8a960e01b8152806117d360048201610444565b0390fd5b506117e2600b6116eb565b611787565b60018060a01b031690565b6117fe6118039161106f565b6117e7565b90565b61181090546117f2565b90565b61181c906115ba565b90565b60e01b90565b9050519061183282610549565b565b9060208282031261184e5761184b91600001611825565b90565b6101de565b5061186290602081019061038b565b90565b61186e9061036a565b9052565b50611881906020810190610209565b90565b61188d906101e8565b9052565b506118a090602081019061055e565b90565b6118ac90610546565b9052565b600080fd5b600080fd5b600080fd5b903560016020038236030381121561190057016020813591019167ffffffffffffffff82116118fb5760018202360383136118f657565b6118b5565b6118b0565b6118ba565b60209181520190565b9190611928816119218161192d95611905565b8095610815565b6102d6565b0190565b9035600160400382360303811215611947570190565b6118ba565b903560016020038236030381121561198d57016020813591019167ffffffffffffffff821161198857600182023603831361198357565b6118b5565b6118b0565b6118ba565b91906119ac816119a5816119b195610e74565b8095610815565b6102d6565b0190565b67ffffffffffffffff1690565b6119cb816119b5565b036119d257565b600080fd5b905035906119e4826119c2565b565b506119f59060208101906119d7565b90565b611a01906119b5565b9052565b90611a43906020611a3b611a3160408401611a23600088018861194c565b908683036000880152611992565b94828101906119e6565b9101906119f8565b90565b611af091611ae2611ad760c08301611a6e611a646000870187611853565b6000860190611865565b611a88611a7e6020870187611872565b6020860190611884565b611aa2611a986040870187611891565b60408601906118a3565b611abc611ab26060870187611891565b60608601906118a3565b611ac960808601866118bf565b90858303608087015261190e565b9260a0810190611931565b9060a0818403910152611a05565b90565b939290611b1f604091611b2794611b12606089019260008a019061096f565b8782036020890152611a46565b94019061058c565b565b611b316101d3565b3d6000823e3d90fd5b9150602090611b476110de565b50611b5a611b556007611806565b611813565b611b86633808a90b949294611b91611b72600861111e565b611b7a6101d3565b9788968795869561181f565b855260048501611af3565b03915afa908115611bd657600091611ba8575b5090565b611bc9915060203d8111611bcf575b611bc181836107b4565b810190611834565b38611ba4565b503d611bb7565b611b29565b60207f207a65726f000000000000000000000000000000000000000000000000000000917f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201520152565b611c3660256040926102a8565b611c3f81611bdb565b0190565b611c599060208101906000818303910152611c29565b90565b15611c6357565b611c6b6101d3565b62461bcd60e51b815280611c8160048201611c43565b0390fd5b90611c90910361039a565b90565b611ce291611c9f610dd4565b50611cdc611cab611e83565b91611cb7838590611d7d565b92611cd584611cce611cc88561039a565b9161039a565b1015611c5c565b9392611c85565b9161202c565b600190565b611d0491611cf3610dd4565b50611cfc611e83565b9190916123f6565b600190565b611d28611d23611d2d92611d1b61106a565b50600661160e565b611626565b612acb565b90565b90611d4b91611d46611d418261112b565b6120ea565b611d4d565b565b90611d5791612536565b565b90611d6391611d30565b565b90611d6f906115c6565b600052602052604060002090565b611da291611d98611d9d92611d9061106a565b506001611d65565b6115d2565b61108c565b90565b611dbe90611db9611db4610f8a565b6120ea565b611e03565b565b90611dcd60001991610bf4565b9181191691161790565b611de09061106f565b90565b90611df8611df3611dff926110e3565b611dd7565b8254611dc0565b9055565b611e0e906008611de3565b565b611e1990611da5565b565b611e23610dd4565b5080611e3e611e386336372b0760e01b6101e8565b916101e8565b148015611e62575b908115611e52575b5090565b611e5c9150612aeb565b38611e4e565b5080611e7d611e7763a219a02560e01b6101e8565b916101e8565b14611e46565b611e8b611609565b503390565b611ea4611e9f611ea992610bf1565b610fc9565b61035f565b90565b611eb590611e90565b90565b60207f7265737300000000000000000000000000000000000000000000000000000000917f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201520152565b611f1360246040926102a8565b611f1c81611eb8565b0190565b611f369060208101906000818303910152611f06565b90565b15611f4057565b611f486101d3565b62461bcd60e51b815280611f5e60048201611f20565b0390fd5b60207f7373000000000000000000000000000000000000000000000000000000000000917f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201520152565b611fbd60226040926102a8565b611fc681611f62565b0190565b611fe09060208101906000818303910152611fb0565b90565b15611fea57565b611ff26101d3565b62461bcd60e51b81528061200860048201611fca565b0390fd5b9061202161201c612028926113c1565b6113dd565b8254611dc0565b9055565b9190916120558161204e6120486120436000611eac565b61036a565b9161036a565b1415611f39565b61207b8361207461206e6120696000611eac565b61036a565b9161036a565b1415611fe3565b61209a8261209561208e60018590611d65565b86906115d2565b61200c565b9190916120e56120d36120cd7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925936115c6565b936115c6565b936120dc6101d3565b9182918261048a565b0390a3565b6120fc906120f6611e83565b90612c13565b565b60007f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000910152565b612133601d6020926102a8565b61213c816120fe565b0190565b6121569060208101906000818303910152612126565b90565b1561216057565b6121686101d3565b62461bcd60e51b81528061217e60048201612140565b0390fd5b61218d818390611d7d565b90816121a361219d60001961039a565b9161039a565b036121af575b50505050565b6121e1936121db916121d4846121cd6121c78561039a565b9161039a565b1015612159565b9392611c85565b9161202c565b388080806121a9565b60207f6472657373000000000000000000000000000000000000000000000000000000917f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201520152565b61224560256040926102a8565b61224e816121ea565b0190565b6122689060208101906000818303910152612238565b90565b1561227257565b61227a6101d3565b62461bcd60e51b81528061229060048201612252565b0390fd5b60207f6573730000000000000000000000000000000000000000000000000000000000917f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201520152565b6122ef60236040926102a8565b6122f881612294565b0190565b61231290602081019060008183039101526122e2565b90565b1561231c57565b6123246101d3565b62461bcd60e51b81528061233a600482016122fc565b0390fd5b60207f616c616e63650000000000000000000000000000000000000000000000000000917f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201520152565b61239960266040926102a8565b6123a28161233e565b0190565b6123bc906020810190600081830391015261238c565b90565b156123c657565b6123ce6101d3565b62461bcd60e51b8152806123e4600482016123a6565b0390fd5b906123f3910161039a565b90565b91909161241f8161241861241261240d6000611eac565b61036a565b9161036a565b141561226b565b6124458361243e6124386124336000611eac565b61036a565b9161036a565b1415612315565b61249461248361245f61245a600085906115d2565b61108c565b61247c8161247561246f8861039a565b9161039a565b10156123bf565b8490611c85565b61248f600084906115d2565b61200c565b6124bc826124b66124a7600087906115d2565b916124b18361108c565b6123e8565b9061200c565b9190916125076124f56124ef7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936115c6565b936115c6565b936124fe6101d3565b9182918261048a565b0390a3565b9061252e61252961253393612522818590612ccc565b600661160e565b611626565b612db3565b50565b9061255861255361255d9361254c818590612dee565b600661160e565b611626565b612e88565b50565b60007f45524332303a206d696e7420746f20746865207a65726f206164647265737300910152565b612595601f6020926102a8565b61259e81612560565b0190565b6125b89060208101906000818303910152612588565b90565b156125c257565b6125ca6101d3565b62461bcd60e51b8152806125e0600482016125a2565b0390fd5b9061260b826126046125fe6125f96000611eac565b61036a565b9161036a565b14156125bb565b6126286126218261261c600261108c565b6112b3565b600261200c565b6126508161264a61263b600086906115d2565b916126458361108c565b6123e8565b9061200c565b61265a6000611eac565b9190916126a561269361268d7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936115c6565b936115c6565b9361269c6101d3565b9182918261048a565b0390a3565b60207f7300000000000000000000000000000000000000000000000000000000000000917f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201520152565b61270560216040926102a8565b61270e816126aa565b0190565b61272890602081019060008183039101526126f8565b90565b1561273257565b61273a6101d3565b62461bcd60e51b81528061275060048201612712565b0390fd5b60207f6365000000000000000000000000000000000000000000000000000000000000917f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201520152565b6127af60226040926102a8565b6127b881612754565b0190565b6127d290602081019060008183039101526127a2565b90565b156127dc57565b6127e46101d3565b62461bcd60e51b8152806127fa600482016127bc565b0390fd5b6128248161281d6128176128126000611eac565b61036a565b9161036a565b141561272b565b61287361286261283e612839600085906115d2565b61108c565b61285b8161285461284e8861039a565b9161039a565b10156127d5565b8490611c85565b61286e600084906115d2565b61200c565b61289061288983612884600261108c565b611c85565b600261200c565b9061289b6000611eac565b90916128e56128d36128cd7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936115c6565b936115c6565b936128dc6101d3565b9182918261048a565b0390a3565b90565b6128f96128fe9161106f565b6113c1565b90565b61291561291061291a9261039a565b610fc9565b61035f565b90565b6129496129446129539361293f600061294e95612938611609565b50016128ea565b612f37565b6128ed565b612901565b6115ba565b90565b60081c90565b61296861296d91612956565b611669565b90565b61297a905461295c565b90565b9061298960ff91610bf4565b9181191691161790565b6129a76129a26129ac92610646565b610fc9565b610646565b90565b90565b906129c76129c26129ce92612993565b6129af565b825461297d565b9055565b60081b90565b906129e561ff00916129d2565b9181191691161790565b90612a046129ff612a0b92611716565b611722565b82546129d8565b9055565b9190949233612a46612a407f000000000000000000000000000000000000000000000000000000000000000061036a565b9161036a565b14158015612abb575b612a9e57612a6f612a7692612a68612a9098600961158a565b600a61158a565b600b6129b2565b612a88612a81610c16565b829061250c565b919091612f59565b612a9c6001600b6129ef565b565b600063f92ee8a960e01b815280612ab760048201610444565b0390fd5b50612ac6600b612970565b612a4f565b612ae36000612ae892612adc61106a565b50016128ea565b612f76565b90565b612af3610dd4565b50612afd81612f8e565b908115612b09575b5090565b612b139150612fce565b38612b05565b90565b612b30612b2b612b3592612b19565b610fc9565b61039a565b90565b905090565b60007f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000910152565b612b7160178092612b38565b612b7a81612b3d565b0190565b612ba3612b9a92602092612b91816102a4565b94858093612b38565b938491016102b1565b0190565b60007f206973206d697373696e6720726f6c6520000000000000000000000000000000910152565b612bdb60118092612b38565b612be481612ba7565b0190565b612c02612c0d9392612bfc612c0793612b65565b90612b7e565b612bcf565b90612b7e565b90565b90565b90612c28612c22838390611690565b15610237565b612c30575050565b612ca891612c86612c5f612c4f612c49612c8b95613056565b936128ed565b612c596020612b1c565b906132e3565b91612c77612c6b6101d3565b93849260208401612be8565b602082018103825203826107b4565b612c10565b612c936101d3565b91829162461bcd60e51b835260048301610311565b0390fd5b90612cc1612cbc612cc892611716565b611722565b825461297d565b9055565b612ce0612cda828490611690565b15610237565b612ce9575b5050565b612d0c6001612d076000612cff600586906110ef565b018590611651565b612cac565b90612d15611e83565b90612d52612d4c612d467f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d956110e3565b926115c6565b926115c6565b92612d5b6101d3565b80612d6581610444565b0390a43880612ce5565b612d7890610fcc565b90565b612d8f612d8a612d949261035f565b610fc9565b61039a565b90565b612dab612da6612db09261039a565b610bf4565b610546565b90565b90612de6612de0612ddb612dd66000612deb96612dce610dd4565b500194612d6f565b612d7b565b612d97565b916128ea565b6134d9565b90565b612df9818390611690565b612e02575b5050565b612e256000612e206000612e18600586906110ef565b018590611651565b612cac565b90612e2e611e83565b90612e6b612e65612e5f7ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b956110e3565b926115c6565b926115c6565b92612e746101d3565b80612e7e81610444565b0390a43880612dfe565b90612ebb612eb5612eb0612eab6000612ec096612ea3610dd4565b500194612d6f565b612d7b565b612d97565b916128ea565b6135be565b90565b634e487b7160e01b600052603260045260246000fd5b5490565b600052602060002090565b612ef181612ed9565b821015612f0c57612f03600191612edd565b91020190600090565b612ec3565b612f21906008612f26930261148d565b611107565b90565b90612f349154612f11565b90565b612f56916000612f5092612f496110de565b5001612ee8565b90612f29565b90565b90612f6f612f749392612f6a610f8a565b61250c565b6136c8565b565b6000612f8b91612f8461106a565b5001612ed9565b90565b612f96610dd4565b5080612fb1612fab635a05180f60e01b6101e8565b916101e8565b14908115612fbe575b5090565b612fc891506136e8565b38612fba565b612fd6610dd4565b5080612ff1612feb634e821d3360e11b6101e8565b916101e8565b14908115612ffe575b5090565b6130089150612f8e565b38612ffa565b90565b61302561302061302a9261300e565b610fc9565b610646565b90565b6130376014613011565b90565b61304e61304961305392610646565b610fc9565b61039a565b90565b61307361306e61308992613068610e2f565b50612d6f565b612d7b565b61308361307e61302d565b61303a565b906132e3565b90565b90565b6130a361309e6130a89261308c565b610fc9565b61039a565b90565b6130ba6130c09193929361039a565b9261039a565b916130cc83820261039a565b9281840414901517156130db57565b61129d565b67ffffffffffffffff81116130fe576130fa6020916102d6565b0190565b61079e565b90613115613110836130e0565b6107dd565b918252565b369037565b9061314461312c83613103565b9260208061313a86936130e0565b920191039061311a565b565b600360fc1b90565b5190565b9061315c8261314e565b81101561316e57600160209102010190565b612ec3565b61318761318261318c92610bf1565b610fc9565b61039a565b90565b600f60fb1b90565b90565b6131ae6131a96131b392613197565b610fc9565b61039a565b90565b6131bf9061039a565b600081146131ce576001900390565b61129d565b6f181899199a1a9b1b9c1cb0b131b232b360811b90565b6131f26131d3565b90565b90565b61320c613207613211926131f5565b610fc9565b61039a565b90565b60f81b90565b90565b61323161322c6132369261321a565b610fc9565b610646565b90565b6132589061325261324c61325d94610646565b9161039a565b9061148d565b61039a565b90565b60007f537472696e67733a20686578206c656e67746820696e73756666696369656e74910152565b613294602080926102a8565b61329d81613260565b0190565b6132b79060208101906000818303910152613288565b90565b156132c157565b6132c96101d3565b62461bcd60e51b8152806132df600482016132a1565b0390fd5b91906132ed610e2f565b5061338761337761332361331e61330e6002613309879161308f565b6130ab565b613318600261308f565b906112b3565b61311f565b9261332c613146565b6133458561333f60009360001a93613173565b90613152565b5361334e61318f565b6133678561336160019360001a9361319a565b90613152565b53613372600261308f565b6130ab565b613381600161319a565b906112b3565b925b8361339d613397600161319a565b9161039a565b1115613404576133ab6131ea565b816133b6600f6131f8565b169160108310156133ff576133d26133f3926133f9941a613214565b6133e28591889060001a92613152565b536133ed600461321d565b90613239565b936131b6565b92613389565b612ec3565b61342c9293506134279061342161341b6000613173565b9161039a565b146132ba565b612c10565b90565b90565b600052602060002090565b5490565b61344a8161343d565b8210156134655761345c600191613432565b91020190600090565b612ec3565b919061348061347b613488936110e3565b611dd7565b90835461139b565b9055565b90815491680100000000000000008310156134bc57826134b49160016134ba95018155613441565b9061346a565b565b61079e565b906134cb906110e3565b600052602052604060002090565b6134e1610dd4565b506134f66134f0828490613728565b15610237565b6000146135395761352f6135349261351a6135136000850161342f565b829061348c565b600161352860008501612ed9565b93016134c1565b61200c565b600190565b5050600090565b61354f6135559193929361039a565b9261039a565b820391821161356057565b61129d565b634e487b7160e01b600052603160045260246000fd5b61358d916135876110de565b9161346a565b565b6135988161343d565b80156135b95760019003906135b66135b08383613441565b9061357b565b55565b613565565b6135c6610dd4565b506135dd6135d86001830184906134c1565b61108c565b90816135f26135ec6000613173565b9161039a565b14156000146136c05761367292600161366d928461361b6000966136158561319a565b90613540565b613638613629888501612ed9565b6136328661319a565b90613540565b8061364b6136458461039a565b9161039a565b03613677575b50505061366761366286830161342f565b61358f565b016134c1565b611402565b600190565b6136b8926136aa6136966136906136b3948c8901612ee8565b90612f29565b936136a485918c8901612ee8565b9061346a565b918585016134c1565b61200c565b388080613651565b505050600090565b906136df6136d86136e693610ff4565b600761102a565b6008611de3565b565b6136f0610dd4565b508061370b613705637965db0b60e01b6101e8565b916101e8565b14908115613718575b5090565b613722915061375e565b38613714565b6137469160016137419261373a610dd4565b50016134c1565b61108c565b6137596137536000613173565b9161039a565b141590565b613766610dd4565b5061378061377a6301ffc9a760e01b6101e8565b916101e8565b149056fea2646970667358221220f054ac8ddca73df07efe925c9789862ccbc82a4159f335f2a7d7ebc0d6f5098764736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0xDCF JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x1CD JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0xBB310DE EQ PUSH2 0x1B9 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x1AA JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x19B JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x191 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x18C JUMPI DUP1 PUSH4 0x5A446215 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x17D JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x173 JUMPI DUP1 PUSH4 0x9C14F298 EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x9D043A66 EQ PUSH2 0x169 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x164 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x150 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x14B JUMPI PUSH4 0xED4C2AC7 SUB PUSH2 0xE JUMPI PUSH2 0xD9C JUMP JUMPDEST PUSH2 0xD66 JUMP JUMPDEST PUSH2 0xD04 JUMP JUMPDEST PUSH2 0xCCF JUMP JUMPDEST PUSH2 0xC99 JUMP JUMPDEST PUSH2 0xC63 JUMP JUMPDEST PUSH2 0xC2E JUMP JUMPDEST PUSH2 0xBBB JUMP JUMPDEST PUSH2 0xAEC JUMP JUMPDEST PUSH2 0x9FE JUMP JUMPDEST PUSH2 0x9C8 JUMP JUMPDEST PUSH2 0x992 JUMP JUMPDEST PUSH2 0x90C JUMP JUMPDEST PUSH2 0x8D8 JUMP JUMPDEST PUSH2 0x761 JUMP JUMPDEST PUSH2 0x70E JUMP JUMPDEST PUSH2 0x6D8 JUMP JUMPDEST PUSH2 0x6A4 JUMP JUMPDEST PUSH2 0x66F JUMP JUMPDEST PUSH2 0x612 JUMP JUMPDEST PUSH2 0x5AF JUMP JUMPDEST PUSH2 0x510 JUMP JUMPDEST PUSH2 0x4A0 JUMP JUMPDEST PUSH2 0x44A JUMP JUMPDEST PUSH2 0x3EF JUMP JUMPDEST PUSH2 0x32A JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH2 0x1FD DUP2 PUSH2 0x1E8 JUMP JUMPDEST SUB PUSH2 0x204 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x216 DUP3 PUSH2 0x1F4 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x232 JUMPI PUSH2 0x22F SWAP2 PUSH1 0x0 ADD PUSH2 0x209 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x245 SWAP1 PUSH2 0x237 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x25D SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x23C JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x28F JUMPI PUSH2 0x28B PUSH2 0x27A PUSH2 0x275 CALLDATASIZE PUSH1 0x4 PUSH2 0x218 JUMP JUMPDEST PUSH2 0xDD9 JUMP JUMPDEST PUSH2 0x282 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x29F JUMPI JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x2C5 JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x2B4 JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH2 0x2FF PUSH2 0x308 PUSH1 0x20 SWAP4 PUSH2 0x30D SWAP4 PUSH2 0x2F6 DUP2 PUSH2 0x2A4 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x2A8 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x2B1 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x327 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x2E0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x35A JUMPI PUSH2 0x33A CALLDATASIZE PUSH1 0x4 PUSH2 0x294 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x345 PUSH2 0xF52 JUMP JUMPDEST PUSH2 0x34D PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x311 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x373 SWAP1 PUSH2 0x35F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x37F DUP2 PUSH2 0x36A JUMP JUMPDEST SUB PUSH2 0x386 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x398 DUP3 PUSH2 0x376 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A6 DUP2 PUSH2 0x39A JUMP JUMPDEST SUB PUSH2 0x3AD JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x3BF DUP3 PUSH2 0x39D JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x3EA JUMPI DUP1 PUSH2 0x3DE PUSH2 0x3E7 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x38B JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x3B2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0x420 JUMPI PUSH2 0x41C PUSH2 0x40B PUSH2 0x405 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C1 JUMP JUMPDEST SWAP1 PUSH2 0xF68 JUMP JUMPDEST PUSH2 0x413 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x43F JUMPI PUSH2 0x43C SWAP2 PUSH1 0x0 ADD PUSH2 0x38B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x462 PUSH2 0x45D CALLDATASIZE PUSH1 0x4 PUSH2 0x425 JUMP JUMPDEST PUSH2 0x105F JUMP JUMPDEST PUSH2 0x46A PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x474 DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH2 0x486 SWAP1 PUSH2 0x39A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x49E SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x47D JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x4D0 JUMPI PUSH2 0x4B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x294 JUMP JUMPDEST PUSH2 0x4CC PUSH2 0x4BB PUSH2 0x1099 JUMP JUMPDEST PUSH2 0x4C3 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0x50B JUMPI PUSH2 0x508 PUSH2 0x4F1 DUP5 PUSH1 0x0 DUP6 ADD PUSH2 0x38B JUMP JUMPDEST SWAP4 PUSH2 0x4FF DUP2 PUSH1 0x20 DUP7 ADD PUSH2 0x38B JUMP JUMPDEST SWAP4 PUSH1 0x40 ADD PUSH2 0x3B2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0x541 JUMPI PUSH2 0x53D PUSH2 0x52C PUSH2 0x526 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D5 JUMP JUMPDEST SWAP2 PUSH2 0x10AF JUMP JUMPDEST PUSH2 0x534 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x552 DUP2 PUSH2 0x546 JUMP JUMPDEST SUB PUSH2 0x559 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x56B DUP3 PUSH2 0x549 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x587 JUMPI PUSH2 0x584 SWAP2 PUSH1 0x0 ADD PUSH2 0x55E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST PUSH2 0x595 SWAP1 PUSH2 0x546 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5AD SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x58C JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x5DF JUMPI PUSH2 0x5DB PUSH2 0x5CA PUSH2 0x5C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x56D JUMP JUMPDEST PUSH2 0x112B JUMP JUMPDEST PUSH2 0x5D2 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x599 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x60D JUMPI DUP1 PUSH2 0x601 PUSH2 0x60A SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x55E JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x38B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0x641 JUMPI PUSH2 0x62B PUSH2 0x625 CALLDATASIZE PUSH1 0x4 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 PUSH2 0x1176 JUMP JUMPDEST PUSH2 0x633 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x63D DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x655 SWAP1 PUSH2 0x646 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x66D SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x64C JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x69F JUMPI PUSH2 0x67F CALLDATASIZE PUSH1 0x4 PUSH2 0x294 JUMP JUMPDEST PUSH2 0x69B PUSH2 0x68A PUSH2 0x11AE JUMP JUMPDEST PUSH2 0x692 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x659 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0x6D3 JUMPI PUSH2 0x6BD PUSH2 0x6B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 PUSH2 0x126E JUMP JUMPDEST PUSH2 0x6C5 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x6CF DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0x709 JUMPI PUSH2 0x705 PUSH2 0x6F4 PUSH2 0x6EE CALLDATASIZE PUSH1 0x4 PUSH2 0x3C1 JUMP JUMPDEST SWAP1 PUSH2 0x12D8 JUMP JUMPDEST PUSH2 0x6FC PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0x73D JUMPI PUSH2 0x727 PUSH2 0x721 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C1 JUMP JUMPDEST SWAP1 PUSH2 0x1359 JUMP JUMPDEST PUSH2 0x72F PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x739 DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x75C JUMPI PUSH2 0x759 SWAP2 PUSH1 0x0 ADD PUSH2 0x3B2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0x78F JUMPI PUSH2 0x779 PUSH2 0x774 CALLDATASIZE PUSH1 0x4 PUSH2 0x742 JUMP JUMPDEST PUSH2 0x1365 JUMP JUMPDEST PUSH2 0x781 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x78B DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x7BE SWAP1 PUSH2 0x2D6 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x7D8 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x79E JUMP JUMPDEST SWAP1 PUSH2 0x7F0 PUSH2 0x7E9 PUSH2 0x1D3 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x7B4 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x810 JUMPI PUSH2 0x80C PUSH1 0x20 SWAP2 PUSH2 0x2D6 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x79E JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x836 PUSH2 0x831 DUP3 PUSH2 0x7F2 JUMP JUMPDEST PUSH2 0x7DD JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x852 JUMPI PUSH2 0x850 SWAP3 PUSH2 0x815 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x799 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x875 JUMPI DUP2 PUSH1 0x20 PUSH2 0x872 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x821 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x794 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x8D3 JUMPI PUSH1 0x0 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x8CE JUMPI DUP4 PUSH2 0x8A7 SWAP2 DUP4 ADD PUSH2 0x857 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x8C9 JUMPI PUSH2 0x8C6 SWAP3 ADD PUSH2 0x857 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E3 JUMP JUMPDEST PUSH2 0x1E3 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0x907 JUMPI PUSH2 0x8F1 PUSH2 0x8EB CALLDATASIZE PUSH1 0x4 PUSH2 0x87A JUMP JUMPDEST SWAP1 PUSH2 0x15AE JUMP JUMPDEST PUSH2 0x8F9 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x903 DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0x93C JUMPI PUSH2 0x938 PUSH2 0x927 PUSH2 0x922 CALLDATASIZE PUSH1 0x4 PUSH2 0x425 JUMP JUMPDEST PUSH2 0x15EA JUMP JUMPDEST PUSH2 0x92F PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x96A JUMPI DUP1 PUSH2 0x95E PUSH2 0x967 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x55E JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x3B2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST PUSH2 0x978 SWAP1 PUSH2 0x36A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x990 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x96F JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x9C3 JUMPI PUSH2 0x9BF PUSH2 0x9AE PUSH2 0x9A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x941 JUMP JUMPDEST SWAP1 PUSH2 0x1629 JUMP JUMPDEST PUSH2 0x9B6 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x97C JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0x9F9 JUMPI PUSH2 0x9F5 PUSH2 0x9E4 PUSH2 0x9DE CALLDATASIZE PUSH1 0x4 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 PUSH2 0x1690 JUMP JUMPDEST PUSH2 0x9EC PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0xA2E JUMPI PUSH2 0xA0E CALLDATASIZE PUSH1 0x4 PUSH2 0x294 JUMP JUMPDEST PUSH2 0xA2A PUSH2 0xA19 PUSH2 0x16BB JUMP JUMPDEST PUSH2 0xA21 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x311 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH2 0xA3C DUP2 PUSH2 0x646 JUMP JUMPDEST SUB PUSH2 0xA43 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xA55 DUP3 PUSH2 0xA33 JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0xC0 DUP3 DUP5 SUB SLT PUSH2 0xAE7 JUMPI PUSH2 0xA70 DUP4 PUSH1 0x0 DUP5 ADD PUSH2 0x38B JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xAE2 JUMPI DUP2 PUSH2 0xA91 SWAP2 DUP6 ADD PUSH2 0x857 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xADD JUMPI DUP3 PUSH2 0xAB2 SWAP2 DUP4 ADD PUSH2 0x857 JUMP JUMPDEST SWAP3 PUSH2 0xADA PUSH2 0xAC3 DUP5 PUSH1 0x60 DUP6 ADD PUSH2 0xA48 JUMP JUMPDEST SWAP4 PUSH2 0xAD1 DUP2 PUSH1 0x80 DUP7 ADD PUSH2 0x38B JUMP JUMPDEST SWAP4 PUSH1 0xA0 ADD PUSH2 0x55E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E3 JUMP JUMPDEST PUSH2 0x1E3 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0xB21 JUMPI PUSH2 0xB0B PUSH2 0xAFF CALLDATASIZE PUSH1 0x4 PUSH2 0xA57 JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0x1745 JUMP JUMPDEST PUSH2 0xB13 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0xB1D DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0xC0 SWAP2 SUB SLT PUSH2 0xB39 JUMPI SWAP1 JUMP JUMPDEST PUSH2 0xB26 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xE0 SWAP2 SUB SLT PUSH2 0xB4C JUMPI SWAP1 JUMP JUMPDEST PUSH2 0xB26 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0xBB6 JUMPI PUSH2 0xB69 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x38B JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xBB1 JUMPI DUP4 PUSH2 0xB8A SWAP2 DUP4 ADD PUSH2 0xB2B JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xBAC JUMPI PUSH2 0xBA9 SWAP3 ADD PUSH2 0xB3E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E3 JUMP JUMPDEST PUSH2 0x1E3 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0xBEC JUMPI PUSH2 0xBE8 PUSH2 0xBD7 PUSH2 0xBD1 CALLDATASIZE PUSH1 0x4 PUSH2 0xB51 JUMP JUMPDEST SWAP2 PUSH2 0x1B3A JUMP JUMPDEST PUSH2 0xBDF PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x599 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0xC0E PUSH2 0xC09 PUSH2 0xC13 SWAP3 PUSH2 0xBF1 JUMP JUMPDEST PUSH2 0xBF4 JUMP JUMPDEST PUSH2 0x546 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC20 PUSH1 0x0 PUSH2 0xBFA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC2B PUSH2 0xC16 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0xC5E JUMPI PUSH2 0xC3E CALLDATASIZE PUSH1 0x4 PUSH2 0x294 JUMP JUMPDEST PUSH2 0xC5A PUSH2 0xC49 PUSH2 0xC23 JUMP JUMPDEST PUSH2 0xC51 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x599 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0xC94 JUMPI PUSH2 0xC90 PUSH2 0xC7F PUSH2 0xC79 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C1 JUMP JUMPDEST SWAP1 PUSH2 0x1C93 JUMP JUMPDEST PUSH2 0xC87 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0xCCA JUMPI PUSH2 0xCC6 PUSH2 0xCB5 PUSH2 0xCAF CALLDATASIZE PUSH1 0x4 PUSH2 0x3C1 JUMP JUMPDEST SWAP1 PUSH2 0x1CE7 JUMP JUMPDEST PUSH2 0xCBD PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0xCFF JUMPI PUSH2 0xCFB PUSH2 0xCEA PUSH2 0xCE5 CALLDATASIZE PUSH1 0x4 PUSH2 0x56D JUMP JUMPDEST PUSH2 0x1D09 JUMP JUMPDEST PUSH2 0xCF2 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0xD33 JUMPI PUSH2 0xD1D PUSH2 0xD17 CALLDATASIZE PUSH1 0x4 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 PUSH2 0x1D59 JUMP JUMPDEST PUSH2 0xD25 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0xD2F DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0xD61 JUMPI DUP1 PUSH2 0xD55 PUSH2 0xD5E SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x38B JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x38B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0xD97 JUMPI PUSH2 0xD93 PUSH2 0xD82 PUSH2 0xD7C CALLDATASIZE PUSH1 0x4 PUSH2 0xD38 JUMP JUMPDEST SWAP1 PUSH2 0x1D7D JUMP JUMPDEST PUSH2 0xD8A PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0xDCA JUMPI PUSH2 0xDB4 PUSH2 0xDAF CALLDATASIZE PUSH1 0x4 PUSH2 0x56D JUMP JUMPDEST PUSH2 0x1E10 JUMP JUMPDEST PUSH2 0xDBC PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0xDC6 DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xDE1 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH4 0x6A15B43 PUSH1 0xE2 SHL PUSH2 0xDFC PUSH2 0xDF6 DUP4 PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0xE20 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0xE10 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0xE1A SWAP2 POP PUSH2 0x1E1B JUMP JUMPDEST CODESIZE PUSH2 0xE0C JUMP JUMPDEST POP PUSH2 0xE2A DUP2 PUSH2 0x1E1B JUMP JUMPDEST PUSH2 0xE04 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x2 DUP4 DIV SWAP3 AND DUP1 ISZERO PUSH2 0xE6A JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0xE65 JUMPI JUMP JUMPDEST PUSH2 0xE34 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0xE5A JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 SWAP2 DUP1 SLOAD SWAP1 PUSH2 0xEA3 PUSH2 0xE9C DUP4 PUSH2 0xE4A JUMP JUMPDEST DUP1 SWAP5 PUSH2 0xE74 JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0xEFC JUMPI POP PUSH1 0x1 EQ PUSH2 0xEBF JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xECC SWAP2 SWAP3 SWAP4 SWAP5 POP PUSH2 0xE7D JUMP JUMPDEST SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP2 DUP5 LT PUSH2 0xEE4 JUMPI POP POP ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0xEBA JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SWAP6 SWAP4 SWAP6 SLOAD DUP5 DUP7 ADD MSTORE ADD SWAP2 ADD SWAP3 SWAP1 PUSH2 0xED1 JUMP JUMPDEST SWAP3 SWAP5 SWAP6 POP POP POP PUSH1 0xFF NOT AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 MUL ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0xEBA JUMP JUMPDEST SWAP1 PUSH2 0xF21 SWAP2 PUSH2 0xE88 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF44 PUSH2 0xF3D SWAP3 PUSH2 0xF34 PUSH2 0x1D3 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP3 PUSH2 0xF17 JUMP JUMPDEST SUB DUP4 PUSH2 0x7B4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF4F SWAP1 PUSH2 0xF24 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF5A PUSH2 0xE2F JUMP JUMPDEST POP PUSH2 0xF65 PUSH1 0x9 PUSH2 0xF46 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF85 SWAP2 PUSH2 0xF74 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0xF7D PUSH2 0x1E83 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x202C JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH32 0x70649EC320B507FEBAD3E8EF750E5F580B9AE32F9F50D4C7B121332C81971530 SWAP1 JUMP JUMPDEST PUSH2 0xFC7 SWAP1 PUSH2 0xFC2 PUSH2 0xFBD PUSH2 0xF8A JUMP JUMPDEST PUSH2 0x20EA JUMP JUMPDEST PUSH2 0x104A JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFE0 PUSH2 0xFDB PUSH2 0xFE5 SWAP3 PUSH2 0x35F JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x35F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFF1 SWAP1 PUSH2 0xFCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFFD SWAP1 PUSH2 0xFE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1011 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xBF4 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x1024 SWAP1 PUSH2 0xFE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x103F PUSH2 0x103A PUSH2 0x1046 SWAP3 PUSH2 0x101B JUMP JUMPDEST PUSH2 0x1027 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1000 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1056 PUSH2 0x105D SWAP2 PUSH2 0xFF4 JUMP JUMPDEST PUSH1 0x7 PUSH2 0x102A JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1068 SWAP1 PUSH2 0xFAE JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1084 PUSH2 0x1089 SWAP2 PUSH2 0x106F JUMP JUMPDEST PUSH2 0x1075 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1096 SWAP1 SLOAD PUSH2 0x1078 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x10A1 PUSH2 0x106A JUMP JUMPDEST POP PUSH2 0x10AC PUSH1 0x2 PUSH2 0x108C JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x10D9 SWAP3 PUSH2 0x10BC PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x10D1 PUSH2 0x10C8 PUSH2 0x1E83 JUMP JUMPDEST DUP3 SWAP1 DUP5 SWAP2 PUSH2 0x2182 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x23F6 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x10EC SWAP1 PUSH2 0x546 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10F9 SWAP1 PUSH2 0x10E3 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1116 PUSH2 0x111B SWAP2 PUSH2 0x106F JUMP JUMPDEST PUSH2 0x1107 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1128 SWAP1 SLOAD PUSH2 0x110A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1144 PUSH2 0x114A SWAP3 PUSH2 0x113C PUSH2 0x10DE JUMP JUMPDEST POP PUSH1 0x5 PUSH2 0x10EF JUMP JUMPDEST ADD PUSH2 0x111E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1168 SWAP2 PUSH2 0x1163 PUSH2 0x115E DUP3 PUSH2 0x112B JUMP JUMPDEST PUSH2 0x20EA JUMP JUMPDEST PUSH2 0x116A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1174 SWAP2 PUSH2 0x250C JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1180 SWAP2 PUSH2 0x114D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1199 PUSH2 0x119E SWAP2 PUSH2 0x106F JUMP JUMPDEST PUSH2 0x1187 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x11AB SWAP1 SLOAD PUSH2 0x118D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x11B6 PUSH2 0x1182 JUMP JUMPDEST POP PUSH2 0x11C1 PUSH1 0xB PUSH2 0x11A1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 SWAP2 PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x121F PUSH1 0x2F PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x1228 DUP2 PUSH2 0x11C4 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1242 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1212 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x124C JUMPI JUMP JUMPDEST PUSH2 0x1254 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x126A PUSH1 0x4 DUP3 ADD PUSH2 0x122C JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x129B SWAP2 PUSH2 0x1296 DUP3 PUSH2 0x1290 PUSH2 0x128A PUSH2 0x1285 PUSH2 0x1E83 JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ PUSH2 0x1245 JUMP JUMPDEST PUSH2 0x2536 JUMP JUMPDEST JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x12C2 PUSH2 0x12C8 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x39A JUMP JUMPDEST SWAP3 PUSH2 0x39A JUMP JUMPDEST DUP3 ADD DUP1 SWAP3 GT PUSH2 0x12D3 JUMPI JUMP JUMPDEST PUSH2 0x129D JUMP JUMPDEST PUSH2 0x1308 SWAP2 PUSH2 0x12E4 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x1302 PUSH2 0x12F0 PUSH2 0x1E83 JUMP JUMPDEST SWAP2 PUSH2 0x12FD DUP4 SWAP5 DUP1 SWAP5 PUSH2 0x1D7D JUMP JUMPDEST PUSH2 0x12B3 JUMP JUMPDEST SWAP2 PUSH2 0x202C JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x134B SWAP2 PUSH2 0x1346 PUSH2 0x1341 PUSH2 0x130D JUMP JUMPDEST PUSH2 0x20EA JUMP JUMPDEST PUSH2 0x134D JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1357 SWAP2 PUSH2 0x25E4 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1363 SWAP2 PUSH2 0x1331 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x136F SWAP1 CALLER PUSH2 0x27FE JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x138B SWAP2 PUSH2 0x1386 PUSH2 0x1381 PUSH2 0xC16 JUMP JUMPDEST PUSH2 0x20EA JUMP JUMPDEST PUSH2 0x1596 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F PUSH1 0x20 SWAP2 ADD DIV SWAP1 JUMP JUMPDEST SHL SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x8 PUSH2 0x13B7 SWAP2 MUL SWAP2 PUSH2 0x13B1 PUSH1 0x0 NOT DUP5 PUSH2 0x1397 JUMP JUMPDEST SWAP3 PUSH2 0x1397 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x13D5 PUSH2 0x13D0 PUSH2 0x13DA SWAP3 PUSH2 0x39A JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x13F6 PUSH2 0x13F1 PUSH2 0x13FE SWAP4 PUSH2 0x13C1 JUMP JUMPDEST PUSH2 0x13DD JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x139B JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1414 SWAP2 PUSH2 0x140E PUSH2 0x106A JUMP JUMPDEST SWAP2 PUSH2 0x13E0 JUMP JUMPDEST JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT PUSH2 0x1422 JUMPI POP POP JUMP JUMPDEST DUP1 PUSH2 0x1430 PUSH1 0x0 PUSH1 0x1 SWAP4 PUSH2 0x1402 JUMP JUMPDEST ADD PUSH2 0x1417 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x1446 JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1452 PUSH2 0x1477 SWAP4 PUSH2 0xE7D JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x145E DUP5 PUSH2 0x138D JUMP JUMPDEST DUP4 ADD SWAP4 LT PUSH2 0x147F JUMPI JUMPDEST PUSH2 0x1470 SWAP1 PUSH2 0x138D JUMP JUMPDEST ADD SWAP1 PUSH2 0x1416 JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x1441 JUMP JUMPDEST SWAP2 POP PUSH2 0x1470 DUP2 SWAP3 SWAP1 POP PUSH2 0x1467 JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x14A2 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x8 MUL PUSH2 0x148D JUMP JUMPDEST NOT AND SWAP1 JUMP JUMPDEST DUP2 PUSH2 0x14B1 SWAP2 PUSH2 0x1491 JUMP JUMPDEST SWAP1 PUSH1 0x2 MUL OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x14C3 DUP2 PUSH2 0x2A4 JUMP JUMPDEST SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1585 JUMPI PUSH2 0x14E7 DUP3 PUSH2 0x14E1 DUP6 SLOAD PUSH2 0xE4A JUMP JUMPDEST DUP6 PUSH2 0x1436 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x151C JUMPI SWAP2 DUP1 SWAP2 PUSH2 0x150B SWAP4 PUSH1 0x0 SWAP3 PUSH2 0x1510 JUMPI JUMPDEST POP POP PUSH2 0x14A7 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 POP ADD MLOAD CODESIZE DUP1 PUSH2 0x1504 JUMP JUMPDEST PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH2 0x152B DUP6 PUSH2 0xE7D JUMP JUMPDEST SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x156D JUMPI POP SWAP2 PUSH1 0x2 SWAP4 SWAP2 DUP6 PUSH1 0x1 SWAP7 SWAP5 LT PUSH2 0x1553 JUMPI JUMPDEST POP POP POP MUL ADD SWAP1 SSTORE PUSH2 0x150E JUMP JUMPDEST PUSH2 0x1563 SWAP2 ADD MLOAD PUSH1 0x1F DUP5 AND SWAP1 PUSH2 0x1491 JUMP JUMPDEST SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x1547 JUMP JUMPDEST SWAP2 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP8 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP3 ADD PUSH2 0x152F JUMP JUMPDEST PUSH2 0x79E JUMP JUMPDEST SWAP1 PUSH2 0x1594 SWAP2 PUSH2 0x14B9 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x15A5 PUSH2 0x15AC SWAP3 PUSH1 0x9 PUSH2 0x158A JUMP JUMPDEST PUSH1 0xA PUSH2 0x158A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x15B8 SWAP2 PUSH2 0x1371 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x15C3 SWAP1 PUSH2 0xFCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x15CF SWAP1 PUSH2 0x15BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x15DC SWAP1 PUSH2 0x15C6 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x1601 PUSH2 0x1606 SWAP2 PUSH2 0x15F9 PUSH2 0x106A JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x108C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1618 SWAP1 PUSH2 0x10E3 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1649 PUSH2 0x1644 PUSH2 0x164E SWAP4 PUSH2 0x163C PUSH2 0x1609 JUMP JUMPDEST POP PUSH1 0x6 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x1626 JUMP JUMPDEST PUSH2 0x291D JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x165B SWAP1 PUSH2 0x15C6 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x167B PUSH2 0x1680 SWAP2 PUSH2 0x106F JUMP JUMPDEST PUSH2 0x1669 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x168D SWAP1 SLOAD PUSH2 0x166F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16B8 SWAP2 PUSH1 0x0 PUSH2 0x16AD PUSH2 0x16B3 SWAP4 PUSH2 0x16A5 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH1 0x5 PUSH2 0x10EF JUMP JUMPDEST ADD PUSH2 0x1651 JUMP JUMPDEST PUSH2 0x1683 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16C3 PUSH2 0xE2F JUMP JUMPDEST POP PUSH2 0x16CE PUSH1 0xA PUSH2 0xF46 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x10 SHR SWAP1 JUMP JUMPDEST PUSH2 0x16E3 PUSH2 0x16E8 SWAP2 PUSH2 0x16D1 JUMP JUMPDEST PUSH2 0x1669 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16F5 SWAP1 SLOAD PUSH2 0x16D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x10 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x170C PUSH3 0xFF0000 SWAP2 PUSH2 0x16F8 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x171F SWAP1 PUSH2 0x237 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x173A PUSH2 0x1735 PUSH2 0x1741 SWAP3 PUSH2 0x1716 JUMP JUMPDEST PUSH2 0x1722 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x16FE JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP4 SWAP5 SWAP1 SWAP2 SWAP3 SWAP5 CALLER PUSH2 0x177E PUSH2 0x1778 PUSH32 0x0 PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x17D7 JUMPI JUMPDEST PUSH2 0x17BA JUMPI PUSH2 0x17AC SWAP6 PUSH2 0x179F SWAP5 DUP7 SWAP5 SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 PUSH2 0x2A0F JUMP JUMPDEST PUSH2 0x17A7 PUSH2 0x130D JUMP JUMPDEST PUSH2 0x250C JUMP JUMPDEST PUSH2 0x17B8 PUSH1 0x1 PUSH1 0xB PUSH2 0x1725 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x17D3 PUSH1 0x4 DUP3 ADD PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x17E2 PUSH1 0xB PUSH2 0x16EB JUMP JUMPDEST PUSH2 0x1787 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x17FE PUSH2 0x1803 SWAP2 PUSH2 0x106F JUMP JUMPDEST PUSH2 0x17E7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1810 SWAP1 SLOAD PUSH2 0x17F2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x181C SWAP1 PUSH2 0x15BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x1832 DUP3 PUSH2 0x549 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x184E JUMPI PUSH2 0x184B SWAP2 PUSH1 0x0 ADD PUSH2 0x1825 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST POP PUSH2 0x1862 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x38B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186E SWAP1 PUSH2 0x36A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x1881 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x209 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x188D SWAP1 PUSH2 0x1E8 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x18A0 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x55E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x18AC SWAP1 PUSH2 0x546 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x1900 JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x18FB JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x18F6 JUMPI JUMP JUMPDEST PUSH2 0x18B5 JUMP JUMPDEST PUSH2 0x18B0 JUMP JUMPDEST PUSH2 0x18BA JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1928 DUP2 PUSH2 0x1921 DUP2 PUSH2 0x192D SWAP6 PUSH2 0x1905 JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x815 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x1947 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x18BA JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x198D JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1988 JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x1983 JUMPI JUMP JUMPDEST PUSH2 0x18B5 JUMP JUMPDEST PUSH2 0x18B0 JUMP JUMPDEST PUSH2 0x18BA JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x19AC DUP2 PUSH2 0x19A5 DUP2 PUSH2 0x19B1 SWAP6 PUSH2 0xE74 JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x815 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x19CB DUP2 PUSH2 0x19B5 JUMP JUMPDEST SUB PUSH2 0x19D2 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x19E4 DUP3 PUSH2 0x19C2 JUMP JUMPDEST JUMP JUMPDEST POP PUSH2 0x19F5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x19D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1A01 SWAP1 PUSH2 0x19B5 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x1A43 SWAP1 PUSH1 0x20 PUSH2 0x1A3B PUSH2 0x1A31 PUSH1 0x40 DUP5 ADD PUSH2 0x1A23 PUSH1 0x0 DUP9 ADD DUP9 PUSH2 0x194C JUMP JUMPDEST SWAP1 DUP7 DUP4 SUB PUSH1 0x0 DUP9 ADD MSTORE PUSH2 0x1992 JUMP JUMPDEST SWAP5 DUP3 DUP2 ADD SWAP1 PUSH2 0x19E6 JUMP JUMPDEST SWAP2 ADD SWAP1 PUSH2 0x19F8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1AF0 SWAP2 PUSH2 0x1AE2 PUSH2 0x1AD7 PUSH1 0xC0 DUP4 ADD PUSH2 0x1A6E PUSH2 0x1A64 PUSH1 0x0 DUP8 ADD DUP8 PUSH2 0x1853 JUMP JUMPDEST PUSH1 0x0 DUP7 ADD SWAP1 PUSH2 0x1865 JUMP JUMPDEST PUSH2 0x1A88 PUSH2 0x1A7E PUSH1 0x20 DUP8 ADD DUP8 PUSH2 0x1872 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x1884 JUMP JUMPDEST PUSH2 0x1AA2 PUSH2 0x1A98 PUSH1 0x40 DUP8 ADD DUP8 PUSH2 0x1891 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD SWAP1 PUSH2 0x18A3 JUMP JUMPDEST PUSH2 0x1ABC PUSH2 0x1AB2 PUSH1 0x60 DUP8 ADD DUP8 PUSH2 0x1891 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD SWAP1 PUSH2 0x18A3 JUMP JUMPDEST PUSH2 0x1AC9 PUSH1 0x80 DUP7 ADD DUP7 PUSH2 0x18BF JUMP JUMPDEST SWAP1 DUP6 DUP4 SUB PUSH1 0x80 DUP8 ADD MSTORE PUSH2 0x190E JUMP JUMPDEST SWAP3 PUSH1 0xA0 DUP2 ADD SWAP1 PUSH2 0x1931 JUMP JUMPDEST SWAP1 PUSH1 0xA0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x1A05 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP4 SWAP3 SWAP1 PUSH2 0x1B1F PUSH1 0x40 SWAP2 PUSH2 0x1B27 SWAP5 PUSH2 0x1B12 PUSH1 0x60 DUP10 ADD SWAP3 PUSH1 0x0 DUP11 ADD SWAP1 PUSH2 0x96F JUMP JUMPDEST DUP8 DUP3 SUB PUSH1 0x20 DUP10 ADD MSTORE PUSH2 0x1A46 JUMP JUMPDEST SWAP5 ADD SWAP1 PUSH2 0x58C JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1B31 PUSH2 0x1D3 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 POP PUSH1 0x20 SWAP1 PUSH2 0x1B47 PUSH2 0x10DE JUMP JUMPDEST POP PUSH2 0x1B5A PUSH2 0x1B55 PUSH1 0x7 PUSH2 0x1806 JUMP JUMPDEST PUSH2 0x1813 JUMP JUMPDEST PUSH2 0x1B86 PUSH4 0x3808A90B SWAP5 SWAP3 SWAP5 PUSH2 0x1B91 PUSH2 0x1B72 PUSH1 0x8 PUSH2 0x111E JUMP JUMPDEST PUSH2 0x1B7A PUSH2 0x1D3 JUMP JUMPDEST SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP6 PUSH2 0x181F JUMP JUMPDEST DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x1AF3 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1BD6 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1BA8 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1BC9 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1BCF JUMPI JUMPDEST PUSH2 0x1BC1 DUP2 DUP4 PUSH2 0x7B4 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1834 JUMP JUMPDEST CODESIZE PUSH2 0x1BA4 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1BB7 JUMP JUMPDEST PUSH2 0x1B29 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1C36 PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x1C3F DUP2 PUSH2 0x1BDB JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1C59 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1C29 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1C63 JUMPI JUMP JUMPDEST PUSH2 0x1C6B PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1C81 PUSH1 0x4 DUP3 ADD PUSH2 0x1C43 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x1C90 SWAP2 SUB PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1CE2 SWAP2 PUSH2 0x1C9F PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x1CDC PUSH2 0x1CAB PUSH2 0x1E83 JUMP JUMPDEST SWAP2 PUSH2 0x1CB7 DUP4 DUP6 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST SWAP3 PUSH2 0x1CD5 DUP5 PUSH2 0x1CCE PUSH2 0x1CC8 DUP6 PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST LT ISZERO PUSH2 0x1C5C JUMP JUMPDEST SWAP4 SWAP3 PUSH2 0x1C85 JUMP JUMPDEST SWAP2 PUSH2 0x202C JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x1D04 SWAP2 PUSH2 0x1CF3 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x1CFC PUSH2 0x1E83 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x23F6 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x1D28 PUSH2 0x1D23 PUSH2 0x1D2D SWAP3 PUSH2 0x1D1B PUSH2 0x106A JUMP JUMPDEST POP PUSH1 0x6 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x1626 JUMP JUMPDEST PUSH2 0x2ACB JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1D4B SWAP2 PUSH2 0x1D46 PUSH2 0x1D41 DUP3 PUSH2 0x112B JUMP JUMPDEST PUSH2 0x20EA JUMP JUMPDEST PUSH2 0x1D4D JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1D57 SWAP2 PUSH2 0x2536 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1D63 SWAP2 PUSH2 0x1D30 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1D6F SWAP1 PUSH2 0x15C6 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x1DA2 SWAP2 PUSH2 0x1D98 PUSH2 0x1D9D SWAP3 PUSH2 0x1D90 PUSH2 0x106A JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x1D65 JUMP JUMPDEST PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x108C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DBE SWAP1 PUSH2 0x1DB9 PUSH2 0x1DB4 PUSH2 0xF8A JUMP JUMPDEST PUSH2 0x20EA JUMP JUMPDEST PUSH2 0x1E03 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1DCD PUSH1 0x0 NOT SWAP2 PUSH2 0xBF4 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x1DE0 SWAP1 PUSH2 0x106F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1DF8 PUSH2 0x1DF3 PUSH2 0x1DFF SWAP3 PUSH2 0x10E3 JUMP JUMPDEST PUSH2 0x1DD7 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1DC0 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1E0E SWAP1 PUSH1 0x8 PUSH2 0x1DE3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1E19 SWAP1 PUSH2 0x1DA5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1E23 PUSH2 0xDD4 JUMP JUMPDEST POP DUP1 PUSH2 0x1E3E PUSH2 0x1E38 PUSH4 0x36372B07 PUSH1 0xE0 SHL PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x1E62 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x1E52 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1E5C SWAP2 POP PUSH2 0x2AEB JUMP JUMPDEST CODESIZE PUSH2 0x1E4E JUMP JUMPDEST POP DUP1 PUSH2 0x1E7D PUSH2 0x1E77 PUSH4 0xA219A025 PUSH1 0xE0 SHL PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ PUSH2 0x1E46 JUMP JUMPDEST PUSH2 0x1E8B PUSH2 0x1609 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH2 0x1EA4 PUSH2 0x1E9F PUSH2 0x1EA9 SWAP3 PUSH2 0xBF1 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x35F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1EB5 SWAP1 PUSH2 0x1E90 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1F13 PUSH1 0x24 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x1F1C DUP2 PUSH2 0x1EB8 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1F36 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1F06 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1F40 JUMPI JUMP JUMPDEST PUSH2 0x1F48 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1F5E PUSH1 0x4 DUP3 ADD PUSH2 0x1F20 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1FBD PUSH1 0x22 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x1FC6 DUP2 PUSH2 0x1F62 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1FE0 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1FB0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1FEA JUMPI JUMP JUMPDEST PUSH2 0x1FF2 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2008 PUSH1 0x4 DUP3 ADD PUSH2 0x1FCA JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x2021 PUSH2 0x201C PUSH2 0x2028 SWAP3 PUSH2 0x13C1 JUMP JUMPDEST PUSH2 0x13DD JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1DC0 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x2055 DUP2 PUSH2 0x204E PUSH2 0x2048 PUSH2 0x2043 PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO PUSH2 0x1F39 JUMP JUMPDEST PUSH2 0x207B DUP4 PUSH2 0x2074 PUSH2 0x206E PUSH2 0x2069 PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO PUSH2 0x1FE3 JUMP JUMPDEST PUSH2 0x209A DUP3 PUSH2 0x2095 PUSH2 0x208E PUSH1 0x1 DUP6 SWAP1 PUSH2 0x1D65 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x200C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x20E5 PUSH2 0x20D3 PUSH2 0x20CD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x20DC PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x20FC SWAP1 PUSH2 0x20F6 PUSH2 0x1E83 JUMP JUMPDEST SWAP1 PUSH2 0x2C13 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2133 PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x213C DUP2 PUSH2 0x20FE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2156 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2126 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2160 JUMPI JUMP JUMPDEST PUSH2 0x2168 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x217E PUSH1 0x4 DUP3 ADD PUSH2 0x2140 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x218D DUP2 DUP4 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x21A3 PUSH2 0x219D PUSH1 0x0 NOT PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST SUB PUSH2 0x21AF JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x21E1 SWAP4 PUSH2 0x21DB SWAP2 PUSH2 0x21D4 DUP5 PUSH2 0x21CD PUSH2 0x21C7 DUP6 PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST LT ISZERO PUSH2 0x2159 JUMP JUMPDEST SWAP4 SWAP3 PUSH2 0x1C85 JUMP JUMPDEST SWAP2 PUSH2 0x202C JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 PUSH2 0x21A9 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x2245 PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x224E DUP2 PUSH2 0x21EA JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2268 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2238 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2272 JUMPI JUMP JUMPDEST PUSH2 0x227A PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2290 PUSH1 0x4 DUP3 ADD PUSH2 0x2252 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x22EF PUSH1 0x23 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x22F8 DUP2 PUSH2 0x2294 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2312 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x22E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x231C JUMPI JUMP JUMPDEST PUSH2 0x2324 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x233A PUSH1 0x4 DUP3 ADD PUSH2 0x22FC JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x2399 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x23A2 DUP2 PUSH2 0x233E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x23BC SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x238C JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x23C6 JUMPI JUMP JUMPDEST PUSH2 0x23CE PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x23E4 PUSH1 0x4 DUP3 ADD PUSH2 0x23A6 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x23F3 SWAP2 ADD PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x241F DUP2 PUSH2 0x2418 PUSH2 0x2412 PUSH2 0x240D PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO PUSH2 0x226B JUMP JUMPDEST PUSH2 0x2445 DUP4 PUSH2 0x243E PUSH2 0x2438 PUSH2 0x2433 PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO PUSH2 0x2315 JUMP JUMPDEST PUSH2 0x2494 PUSH2 0x2483 PUSH2 0x245F PUSH2 0x245A PUSH1 0x0 DUP6 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x108C JUMP JUMPDEST PUSH2 0x247C DUP2 PUSH2 0x2475 PUSH2 0x246F DUP9 PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST LT ISZERO PUSH2 0x23BF JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST PUSH2 0x248F PUSH1 0x0 DUP5 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x200C JUMP JUMPDEST PUSH2 0x24BC DUP3 PUSH2 0x24B6 PUSH2 0x24A7 PUSH1 0x0 DUP8 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST SWAP2 PUSH2 0x24B1 DUP4 PUSH2 0x108C JUMP JUMPDEST PUSH2 0x23E8 JUMP JUMPDEST SWAP1 PUSH2 0x200C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x2507 PUSH2 0x24F5 PUSH2 0x24EF PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x24FE PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST SWAP1 PUSH2 0x252E PUSH2 0x2529 PUSH2 0x2533 SWAP4 PUSH2 0x2522 DUP2 DUP6 SWAP1 PUSH2 0x2CCC JUMP JUMPDEST PUSH1 0x6 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x1626 JUMP JUMPDEST PUSH2 0x2DB3 JUMP JUMPDEST POP JUMP JUMPDEST SWAP1 PUSH2 0x2558 PUSH2 0x2553 PUSH2 0x255D SWAP4 PUSH2 0x254C DUP2 DUP6 SWAP1 PUSH2 0x2DEE JUMP JUMPDEST PUSH1 0x6 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x1626 JUMP JUMPDEST PUSH2 0x2E88 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2595 PUSH1 0x1F PUSH1 0x20 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x259E DUP2 PUSH2 0x2560 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x25B8 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2588 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x25C2 JUMPI JUMP JUMPDEST PUSH2 0x25CA PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x25E0 PUSH1 0x4 DUP3 ADD PUSH2 0x25A2 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x260B DUP3 PUSH2 0x2604 PUSH2 0x25FE PUSH2 0x25F9 PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO PUSH2 0x25BB JUMP JUMPDEST PUSH2 0x2628 PUSH2 0x2621 DUP3 PUSH2 0x261C PUSH1 0x2 PUSH2 0x108C JUMP JUMPDEST PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x200C JUMP JUMPDEST PUSH2 0x2650 DUP2 PUSH2 0x264A PUSH2 0x263B PUSH1 0x0 DUP7 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST SWAP2 PUSH2 0x2645 DUP4 PUSH2 0x108C JUMP JUMPDEST PUSH2 0x23E8 JUMP JUMPDEST SWAP1 PUSH2 0x200C JUMP JUMPDEST PUSH2 0x265A PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x26A5 PUSH2 0x2693 PUSH2 0x268D PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x269C PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x2705 PUSH1 0x21 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x270E DUP2 PUSH2 0x26AA JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2728 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x26F8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2732 JUMPI JUMP JUMPDEST PUSH2 0x273A PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2750 PUSH1 0x4 DUP3 ADD PUSH2 0x2712 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x6365000000000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x27AF PUSH1 0x22 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x27B8 DUP2 PUSH2 0x2754 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x27D2 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x27A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x27DC JUMPI JUMP JUMPDEST PUSH2 0x27E4 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x27FA PUSH1 0x4 DUP3 ADD PUSH2 0x27BC JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x2824 DUP2 PUSH2 0x281D PUSH2 0x2817 PUSH2 0x2812 PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO PUSH2 0x272B JUMP JUMPDEST PUSH2 0x2873 PUSH2 0x2862 PUSH2 0x283E PUSH2 0x2839 PUSH1 0x0 DUP6 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x108C JUMP JUMPDEST PUSH2 0x285B DUP2 PUSH2 0x2854 PUSH2 0x284E DUP9 PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST LT ISZERO PUSH2 0x27D5 JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST PUSH2 0x286E PUSH1 0x0 DUP5 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x200C JUMP JUMPDEST PUSH2 0x2890 PUSH2 0x2889 DUP4 PUSH2 0x2884 PUSH1 0x2 PUSH2 0x108C JUMP JUMPDEST PUSH2 0x1C85 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x200C JUMP JUMPDEST SWAP1 PUSH2 0x289B PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x28E5 PUSH2 0x28D3 PUSH2 0x28CD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x28DC PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x28F9 PUSH2 0x28FE SWAP2 PUSH2 0x106F JUMP JUMPDEST PUSH2 0x13C1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2915 PUSH2 0x2910 PUSH2 0x291A SWAP3 PUSH2 0x39A JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x35F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2949 PUSH2 0x2944 PUSH2 0x2953 SWAP4 PUSH2 0x293F PUSH1 0x0 PUSH2 0x294E SWAP6 PUSH2 0x2938 PUSH2 0x1609 JUMP JUMPDEST POP ADD PUSH2 0x28EA JUMP JUMPDEST PUSH2 0x2F37 JUMP JUMPDEST PUSH2 0x28ED JUMP JUMPDEST PUSH2 0x2901 JUMP JUMPDEST PUSH2 0x15BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x8 SHR SWAP1 JUMP JUMPDEST PUSH2 0x2968 PUSH2 0x296D SWAP2 PUSH2 0x2956 JUMP JUMPDEST PUSH2 0x1669 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x297A SWAP1 SLOAD PUSH2 0x295C JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2989 PUSH1 0xFF SWAP2 PUSH2 0xBF4 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x29A7 PUSH2 0x29A2 PUSH2 0x29AC SWAP3 PUSH2 0x646 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x646 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x29C7 PUSH2 0x29C2 PUSH2 0x29CE SWAP3 PUSH2 0x2993 JUMP JUMPDEST PUSH2 0x29AF JUMP JUMPDEST DUP3 SLOAD PUSH2 0x297D JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x8 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x29E5 PUSH2 0xFF00 SWAP2 PUSH2 0x29D2 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2A04 PUSH2 0x29FF PUSH2 0x2A0B SWAP3 PUSH2 0x1716 JUMP JUMPDEST PUSH2 0x1722 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x29D8 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP2 SWAP1 SWAP5 SWAP3 CALLER PUSH2 0x2A46 PUSH2 0x2A40 PUSH32 0x0 PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x2ABB JUMPI JUMPDEST PUSH2 0x2A9E JUMPI PUSH2 0x2A6F PUSH2 0x2A76 SWAP3 PUSH2 0x2A68 PUSH2 0x2A90 SWAP9 PUSH1 0x9 PUSH2 0x158A JUMP JUMPDEST PUSH1 0xA PUSH2 0x158A JUMP JUMPDEST PUSH1 0xB PUSH2 0x29B2 JUMP JUMPDEST PUSH2 0x2A88 PUSH2 0x2A81 PUSH2 0xC16 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x250C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x2F59 JUMP JUMPDEST PUSH2 0x2A9C PUSH1 0x1 PUSH1 0xB PUSH2 0x29EF JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x2AB7 PUSH1 0x4 DUP3 ADD PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x2AC6 PUSH1 0xB PUSH2 0x2970 JUMP JUMPDEST PUSH2 0x2A4F JUMP JUMPDEST PUSH2 0x2AE3 PUSH1 0x0 PUSH2 0x2AE8 SWAP3 PUSH2 0x2ADC PUSH2 0x106A JUMP JUMPDEST POP ADD PUSH2 0x28EA JUMP JUMPDEST PUSH2 0x2F76 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2AF3 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x2AFD DUP2 PUSH2 0x2F8E JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x2B09 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2B13 SWAP2 POP PUSH2 0x2FCE JUMP JUMPDEST CODESIZE PUSH2 0x2B05 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2B30 PUSH2 0x2B2B PUSH2 0x2B35 SWAP3 PUSH2 0x2B19 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2B71 PUSH1 0x17 DUP1 SWAP3 PUSH2 0x2B38 JUMP JUMPDEST PUSH2 0x2B7A DUP2 PUSH2 0x2B3D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2BA3 PUSH2 0x2B9A SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x2B91 DUP2 PUSH2 0x2A4 JUMP JUMPDEST SWAP5 DUP6 DUP1 SWAP4 PUSH2 0x2B38 JUMP JUMPDEST SWAP4 DUP5 SWAP2 ADD PUSH2 0x2B1 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2BDB PUSH1 0x11 DUP1 SWAP3 PUSH2 0x2B38 JUMP JUMPDEST PUSH2 0x2BE4 DUP2 PUSH2 0x2BA7 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2C02 PUSH2 0x2C0D SWAP4 SWAP3 PUSH2 0x2BFC PUSH2 0x2C07 SWAP4 PUSH2 0x2B65 JUMP JUMPDEST SWAP1 PUSH2 0x2B7E JUMP JUMPDEST PUSH2 0x2BCF JUMP JUMPDEST SWAP1 PUSH2 0x2B7E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2C28 PUSH2 0x2C22 DUP4 DUP4 SWAP1 PUSH2 0x1690 JUMP JUMPDEST ISZERO PUSH2 0x237 JUMP JUMPDEST PUSH2 0x2C30 JUMPI POP POP JUMP JUMPDEST PUSH2 0x2CA8 SWAP2 PUSH2 0x2C86 PUSH2 0x2C5F PUSH2 0x2C4F PUSH2 0x2C49 PUSH2 0x2C8B SWAP6 PUSH2 0x3056 JUMP JUMPDEST SWAP4 PUSH2 0x28ED JUMP JUMPDEST PUSH2 0x2C59 PUSH1 0x20 PUSH2 0x2B1C JUMP JUMPDEST SWAP1 PUSH2 0x32E3 JUMP JUMPDEST SWAP2 PUSH2 0x2C77 PUSH2 0x2C6B PUSH2 0x1D3 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD PUSH2 0x2BE8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x2C10 JUMP JUMPDEST PUSH2 0x2C93 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x311 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x2CC1 PUSH2 0x2CBC PUSH2 0x2CC8 SWAP3 PUSH2 0x1716 JUMP JUMPDEST PUSH2 0x1722 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x297D JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2CE0 PUSH2 0x2CDA DUP3 DUP5 SWAP1 PUSH2 0x1690 JUMP JUMPDEST ISZERO PUSH2 0x237 JUMP JUMPDEST PUSH2 0x2CE9 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x2D0C PUSH1 0x1 PUSH2 0x2D07 PUSH1 0x0 PUSH2 0x2CFF PUSH1 0x5 DUP7 SWAP1 PUSH2 0x10EF JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x1651 JUMP JUMPDEST PUSH2 0x2CAC JUMP JUMPDEST SWAP1 PUSH2 0x2D15 PUSH2 0x1E83 JUMP JUMPDEST SWAP1 PUSH2 0x2D52 PUSH2 0x2D4C PUSH2 0x2D46 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP6 PUSH2 0x10E3 JUMP JUMPDEST SWAP3 PUSH2 0x15C6 JUMP JUMPDEST SWAP3 PUSH2 0x15C6 JUMP JUMPDEST SWAP3 PUSH2 0x2D5B PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x2D65 DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x2CE5 JUMP JUMPDEST PUSH2 0x2D78 SWAP1 PUSH2 0xFCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2D8F PUSH2 0x2D8A PUSH2 0x2D94 SWAP3 PUSH2 0x35F JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2DAB PUSH2 0x2DA6 PUSH2 0x2DB0 SWAP3 PUSH2 0x39A JUMP JUMPDEST PUSH2 0xBF4 JUMP JUMPDEST PUSH2 0x546 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2DE6 PUSH2 0x2DE0 PUSH2 0x2DDB PUSH2 0x2DD6 PUSH1 0x0 PUSH2 0x2DEB SWAP7 PUSH2 0x2DCE PUSH2 0xDD4 JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x2D6F JUMP JUMPDEST PUSH2 0x2D7B JUMP JUMPDEST PUSH2 0x2D97 JUMP JUMPDEST SWAP2 PUSH2 0x28EA JUMP JUMPDEST PUSH2 0x34D9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2DF9 DUP2 DUP4 SWAP1 PUSH2 0x1690 JUMP JUMPDEST PUSH2 0x2E02 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x2E25 PUSH1 0x0 PUSH2 0x2E20 PUSH1 0x0 PUSH2 0x2E18 PUSH1 0x5 DUP7 SWAP1 PUSH2 0x10EF JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x1651 JUMP JUMPDEST PUSH2 0x2CAC JUMP JUMPDEST SWAP1 PUSH2 0x2E2E PUSH2 0x1E83 JUMP JUMPDEST SWAP1 PUSH2 0x2E6B PUSH2 0x2E65 PUSH2 0x2E5F PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP6 PUSH2 0x10E3 JUMP JUMPDEST SWAP3 PUSH2 0x15C6 JUMP JUMPDEST SWAP3 PUSH2 0x15C6 JUMP JUMPDEST SWAP3 PUSH2 0x2E74 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x2E7E DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x2DFE JUMP JUMPDEST SWAP1 PUSH2 0x2EBB PUSH2 0x2EB5 PUSH2 0x2EB0 PUSH2 0x2EAB PUSH1 0x0 PUSH2 0x2EC0 SWAP7 PUSH2 0x2EA3 PUSH2 0xDD4 JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x2D6F JUMP JUMPDEST PUSH2 0x2D7B JUMP JUMPDEST PUSH2 0x2D97 JUMP JUMPDEST SWAP2 PUSH2 0x28EA JUMP JUMPDEST PUSH2 0x35BE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x2EF1 DUP2 PUSH2 0x2ED9 JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x2F0C JUMPI PUSH2 0x2F03 PUSH1 0x1 SWAP2 PUSH2 0x2EDD JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2EC3 JUMP JUMPDEST PUSH2 0x2F21 SWAP1 PUSH1 0x8 PUSH2 0x2F26 SWAP4 MUL PUSH2 0x148D JUMP JUMPDEST PUSH2 0x1107 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2F34 SWAP2 SLOAD PUSH2 0x2F11 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F56 SWAP2 PUSH1 0x0 PUSH2 0x2F50 SWAP3 PUSH2 0x2F49 PUSH2 0x10DE JUMP JUMPDEST POP ADD PUSH2 0x2EE8 JUMP JUMPDEST SWAP1 PUSH2 0x2F29 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2F6F PUSH2 0x2F74 SWAP4 SWAP3 PUSH2 0x2F6A PUSH2 0xF8A JUMP JUMPDEST PUSH2 0x250C JUMP JUMPDEST PUSH2 0x36C8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F8B SWAP2 PUSH2 0x2F84 PUSH2 0x106A JUMP JUMPDEST POP ADD PUSH2 0x2ED9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F96 PUSH2 0xDD4 JUMP JUMPDEST POP DUP1 PUSH2 0x2FB1 PUSH2 0x2FAB PUSH4 0x5A05180F PUSH1 0xE0 SHL PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x2FBE JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2FC8 SWAP2 POP PUSH2 0x36E8 JUMP JUMPDEST CODESIZE PUSH2 0x2FBA JUMP JUMPDEST PUSH2 0x2FD6 PUSH2 0xDD4 JUMP JUMPDEST POP DUP1 PUSH2 0x2FF1 PUSH2 0x2FEB PUSH4 0x4E821D33 PUSH1 0xE1 SHL PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x2FFE JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3008 SWAP2 POP PUSH2 0x2F8E JUMP JUMPDEST CODESIZE PUSH2 0x2FFA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3025 PUSH2 0x3020 PUSH2 0x302A SWAP3 PUSH2 0x300E JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x646 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3037 PUSH1 0x14 PUSH2 0x3011 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x304E PUSH2 0x3049 PUSH2 0x3053 SWAP3 PUSH2 0x646 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3073 PUSH2 0x306E PUSH2 0x3089 SWAP3 PUSH2 0x3068 PUSH2 0xE2F JUMP JUMPDEST POP PUSH2 0x2D6F JUMP JUMPDEST PUSH2 0x2D7B JUMP JUMPDEST PUSH2 0x3083 PUSH2 0x307E PUSH2 0x302D JUMP JUMPDEST PUSH2 0x303A JUMP JUMPDEST SWAP1 PUSH2 0x32E3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30A3 PUSH2 0x309E PUSH2 0x30A8 SWAP3 PUSH2 0x308C JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30BA PUSH2 0x30C0 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x39A JUMP JUMPDEST SWAP3 PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x30CC DUP4 DUP3 MUL PUSH2 0x39A JUMP JUMPDEST SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x30DB JUMPI JUMP JUMPDEST PUSH2 0x129D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x30FE JUMPI PUSH2 0x30FA PUSH1 0x20 SWAP2 PUSH2 0x2D6 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x79E JUMP JUMPDEST SWAP1 PUSH2 0x3115 PUSH2 0x3110 DUP4 PUSH2 0x30E0 JUMP JUMPDEST PUSH2 0x7DD JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST CALLDATASIZE SWAP1 CALLDATACOPY JUMP JUMPDEST SWAP1 PUSH2 0x3144 PUSH2 0x312C DUP4 PUSH2 0x3103 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP1 PUSH2 0x313A DUP7 SWAP4 PUSH2 0x30E0 JUMP JUMPDEST SWAP3 ADD SWAP2 SUB SWAP1 PUSH2 0x311A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x3 PUSH1 0xFC SHL SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x315C DUP3 PUSH2 0x314E JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x316E JUMPI PUSH1 0x1 PUSH1 0x20 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x2EC3 JUMP JUMPDEST PUSH2 0x3187 PUSH2 0x3182 PUSH2 0x318C SWAP3 PUSH2 0xBF1 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xF PUSH1 0xFB SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x31AE PUSH2 0x31A9 PUSH2 0x31B3 SWAP3 PUSH2 0x3197 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x31BF SWAP1 PUSH2 0x39A JUMP JUMPDEST PUSH1 0x0 DUP2 EQ PUSH2 0x31CE JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH2 0x129D JUMP JUMPDEST PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 JUMP JUMPDEST PUSH2 0x31F2 PUSH2 0x31D3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x320C PUSH2 0x3207 PUSH2 0x3211 SWAP3 PUSH2 0x31F5 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xF8 SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3231 PUSH2 0x322C PUSH2 0x3236 SWAP3 PUSH2 0x321A JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x646 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3258 SWAP1 PUSH2 0x3252 PUSH2 0x324C PUSH2 0x325D SWAP5 PUSH2 0x646 JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST SWAP1 PUSH2 0x148D JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x3294 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x329D DUP2 PUSH2 0x3260 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x32B7 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x3288 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x32C1 JUMPI JUMP JUMPDEST PUSH2 0x32C9 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x32DF PUSH1 0x4 DUP3 ADD PUSH2 0x32A1 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH2 0x32ED PUSH2 0xE2F JUMP JUMPDEST POP PUSH2 0x3387 PUSH2 0x3377 PUSH2 0x3323 PUSH2 0x331E PUSH2 0x330E PUSH1 0x2 PUSH2 0x3309 DUP8 SWAP2 PUSH2 0x308F JUMP JUMPDEST PUSH2 0x30AB JUMP JUMPDEST PUSH2 0x3318 PUSH1 0x2 PUSH2 0x308F JUMP JUMPDEST SWAP1 PUSH2 0x12B3 JUMP JUMPDEST PUSH2 0x311F JUMP JUMPDEST SWAP3 PUSH2 0x332C PUSH2 0x3146 JUMP JUMPDEST PUSH2 0x3345 DUP6 PUSH2 0x333F PUSH1 0x0 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x3173 JUMP JUMPDEST SWAP1 PUSH2 0x3152 JUMP JUMPDEST MSTORE8 PUSH2 0x334E PUSH2 0x318F JUMP JUMPDEST PUSH2 0x3367 DUP6 PUSH2 0x3361 PUSH1 0x1 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x319A JUMP JUMPDEST SWAP1 PUSH2 0x3152 JUMP JUMPDEST MSTORE8 PUSH2 0x3372 PUSH1 0x2 PUSH2 0x308F JUMP JUMPDEST PUSH2 0x30AB JUMP JUMPDEST PUSH2 0x3381 PUSH1 0x1 PUSH2 0x319A JUMP JUMPDEST SWAP1 PUSH2 0x12B3 JUMP JUMPDEST SWAP3 JUMPDEST DUP4 PUSH2 0x339D PUSH2 0x3397 PUSH1 0x1 PUSH2 0x319A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST GT ISZERO PUSH2 0x3404 JUMPI PUSH2 0x33AB PUSH2 0x31EA JUMP JUMPDEST DUP2 PUSH2 0x33B6 PUSH1 0xF PUSH2 0x31F8 JUMP JUMPDEST AND SWAP2 PUSH1 0x10 DUP4 LT ISZERO PUSH2 0x33FF JUMPI PUSH2 0x33D2 PUSH2 0x33F3 SWAP3 PUSH2 0x33F9 SWAP5 BYTE PUSH2 0x3214 JUMP JUMPDEST PUSH2 0x33E2 DUP6 SWAP2 DUP9 SWAP1 PUSH1 0x0 BYTE SWAP3 PUSH2 0x3152 JUMP JUMPDEST MSTORE8 PUSH2 0x33ED PUSH1 0x4 PUSH2 0x321D JUMP JUMPDEST SWAP1 PUSH2 0x3239 JUMP JUMPDEST SWAP4 PUSH2 0x31B6 JUMP JUMPDEST SWAP3 PUSH2 0x3389 JUMP JUMPDEST PUSH2 0x2EC3 JUMP JUMPDEST PUSH2 0x342C SWAP3 SWAP4 POP PUSH2 0x3427 SWAP1 PUSH2 0x3421 PUSH2 0x341B PUSH1 0x0 PUSH2 0x3173 JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST EQ PUSH2 0x32BA JUMP JUMPDEST PUSH2 0x2C10 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x344A DUP2 PUSH2 0x343D JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x3465 JUMPI PUSH2 0x345C PUSH1 0x1 SWAP2 PUSH2 0x3432 JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2EC3 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3480 PUSH2 0x347B PUSH2 0x3488 SWAP4 PUSH2 0x10E3 JUMP JUMPDEST PUSH2 0x1DD7 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x139B JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 DUP2 SLOAD SWAP2 PUSH9 0x10000000000000000 DUP4 LT ISZERO PUSH2 0x34BC JUMPI DUP3 PUSH2 0x34B4 SWAP2 PUSH1 0x1 PUSH2 0x34BA SWAP6 ADD DUP2 SSTORE PUSH2 0x3441 JUMP JUMPDEST SWAP1 PUSH2 0x346A JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x79E JUMP JUMPDEST SWAP1 PUSH2 0x34CB SWAP1 PUSH2 0x10E3 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x34E1 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x34F6 PUSH2 0x34F0 DUP3 DUP5 SWAP1 PUSH2 0x3728 JUMP JUMPDEST ISZERO PUSH2 0x237 JUMP JUMPDEST PUSH1 0x0 EQ PUSH2 0x3539 JUMPI PUSH2 0x352F PUSH2 0x3534 SWAP3 PUSH2 0x351A PUSH2 0x3513 PUSH1 0x0 DUP6 ADD PUSH2 0x342F JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x348C JUMP JUMPDEST PUSH1 0x1 PUSH2 0x3528 PUSH1 0x0 DUP6 ADD PUSH2 0x2ED9 JUMP JUMPDEST SWAP4 ADD PUSH2 0x34C1 JUMP JUMPDEST PUSH2 0x200C JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x354F PUSH2 0x3555 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x39A JUMP JUMPDEST SWAP3 PUSH2 0x39A JUMP JUMPDEST DUP3 SUB SWAP2 DUP3 GT PUSH2 0x3560 JUMPI JUMP JUMPDEST PUSH2 0x129D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x358D SWAP2 PUSH2 0x3587 PUSH2 0x10DE JUMP JUMPDEST SWAP2 PUSH2 0x346A JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3598 DUP2 PUSH2 0x343D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x35B9 JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 PUSH2 0x35B6 PUSH2 0x35B0 DUP4 DUP4 PUSH2 0x3441 JUMP JUMPDEST SWAP1 PUSH2 0x357B JUMP JUMPDEST SSTORE JUMP JUMPDEST PUSH2 0x3565 JUMP JUMPDEST PUSH2 0x35C6 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x35DD PUSH2 0x35D8 PUSH1 0x1 DUP4 ADD DUP5 SWAP1 PUSH2 0x34C1 JUMP JUMPDEST PUSH2 0x108C JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x35F2 PUSH2 0x35EC PUSH1 0x0 PUSH2 0x3173 JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST EQ ISZERO PUSH1 0x0 EQ PUSH2 0x36C0 JUMPI PUSH2 0x3672 SWAP3 PUSH1 0x1 PUSH2 0x366D SWAP3 DUP5 PUSH2 0x361B PUSH1 0x0 SWAP7 PUSH2 0x3615 DUP6 PUSH2 0x319A JUMP JUMPDEST SWAP1 PUSH2 0x3540 JUMP JUMPDEST PUSH2 0x3638 PUSH2 0x3629 DUP9 DUP6 ADD PUSH2 0x2ED9 JUMP JUMPDEST PUSH2 0x3632 DUP7 PUSH2 0x319A JUMP JUMPDEST SWAP1 PUSH2 0x3540 JUMP JUMPDEST DUP1 PUSH2 0x364B PUSH2 0x3645 DUP5 PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST SUB PUSH2 0x3677 JUMPI JUMPDEST POP POP POP PUSH2 0x3667 PUSH2 0x3662 DUP7 DUP4 ADD PUSH2 0x342F JUMP JUMPDEST PUSH2 0x358F JUMP JUMPDEST ADD PUSH2 0x34C1 JUMP JUMPDEST PUSH2 0x1402 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x36B8 SWAP3 PUSH2 0x36AA PUSH2 0x3696 PUSH2 0x3690 PUSH2 0x36B3 SWAP5 DUP13 DUP10 ADD PUSH2 0x2EE8 JUMP JUMPDEST SWAP1 PUSH2 0x2F29 JUMP JUMPDEST SWAP4 PUSH2 0x36A4 DUP6 SWAP2 DUP13 DUP10 ADD PUSH2 0x2EE8 JUMP JUMPDEST SWAP1 PUSH2 0x346A JUMP JUMPDEST SWAP2 DUP6 DUP6 ADD PUSH2 0x34C1 JUMP JUMPDEST PUSH2 0x200C JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x3651 JUMP JUMPDEST POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x36DF PUSH2 0x36D8 PUSH2 0x36E6 SWAP4 PUSH2 0xFF4 JUMP JUMPDEST PUSH1 0x7 PUSH2 0x102A JUMP JUMPDEST PUSH1 0x8 PUSH2 0x1DE3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x36F0 PUSH2 0xDD4 JUMP JUMPDEST POP DUP1 PUSH2 0x370B PUSH2 0x3705 PUSH4 0x7965DB0B PUSH1 0xE0 SHL PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x3718 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3722 SWAP2 POP PUSH2 0x375E JUMP JUMPDEST CODESIZE PUSH2 0x3714 JUMP JUMPDEST PUSH2 0x3746 SWAP2 PUSH1 0x1 PUSH2 0x3741 SWAP3 PUSH2 0x373A PUSH2 0xDD4 JUMP JUMPDEST POP ADD PUSH2 0x34C1 JUMP JUMPDEST PUSH2 0x108C JUMP JUMPDEST PUSH2 0x3759 PUSH2 0x3753 PUSH1 0x0 PUSH2 0x3173 JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST EQ ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x3766 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x3780 PUSH2 0x377A PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE SLOAD 0xAC DUP14 0xDC 0xA7 RETURNDATASIZE CREATE PUSH31 0xFE925C9789862CCBC82A4159F335F2A7D7EBC0D6F5098764736F6C63430008 SHL STOP CALLER ",
              "sourceMap": "284:2433:36:-:0;;;;;;;;;-1:-1:-1;284:2433:36;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2153:49:0:-;2198:4;;;:::i;:::-;2153:49;:::o;:::-;;;:::i;:::-;;:::o;284:2433:36:-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;2431:283::-;2530:4;;:::i;:::-;2553:38;;;;:53;;2595:11;2553:53;:::i;:::-;;;:::i;:::-;;:102;;;;2431:283;2553:154;;;;;2431:283;2546:161;;:::o;2553:154::-;2671:36;2695:11;;2671:36;:::i;:::-;2553:154;;;:102;2643:11;2610:45;2643:11;2610:45;:::i;:::-;2553:102;;284:2433;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;:::i;:::-;;:::o;2724:95:35:-;2770:13;;:::i;:::-;2802:10;2795:17;2802:10;2795:17;:::i;:::-;;:::o;4444:197:11:-;4606:6;4444:197;4527:4;;:::i;:::-;4559:12;;;:::i;:::-;4597:7;4606:6;;;:::i;:::-;4630:4;4623:11;:::o;514:91:40:-;568:37;514:91;:::o;2589:76:0:-;2657:1;2589:76;2642:4;1115:25:40;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;284:2433:36:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;1030:179:40:-;1165:37;1152:50;1030:179;1165:37;:::i;:::-;1152:50;;:::i;:::-;1030:179::o;:::-;;;;:::i;:::-;:::o;284:2433:36:-;;;:::o;:::-;;;;:::o;:::-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;3255:106:11:-;3316:7;;:::i;:::-;3342:12;;;;:::i;:::-;3335:19;:::o;5203:256::-;;5424:6;5203:256;5300:4;;:::i;:::-;5334:12;5387:6;5334:12;;:::i;:::-;5372:4;5378:7;5387:6;;;:::i;:::-;5420:2;5424:6;;;:::i;:::-;5448:4;5441:11;:::o;284:2433:36:-;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;4504:129:0:-;4604:22;:12;:22;4504:129;4578:7;;:::i;:::-;4604:6;;:12;:::i;:::-;:22;;:::i;:::-;4597:29;:::o;2589:76::-;;2657:1;2589:76;2642:4;5012:18;5025:4;5012:18;:::i;:::-;2642:4;:::i;:::-;2657:1;:::i;:::-;2589:76::o;4929:145::-;;5059:7;4929:145;5059:7;:::i;:::-;4929:145::o;:::-;;;;;:::i;:::-;:::o;284:2433:36:-;;;:::o;:::-;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;3050:95:35:-;3100:5;;:::i;:::-;3124:14;;;;:::i;:::-;3117:21;:::o;284:2433:36:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;6038:214:0;;6237:7;6038:214;6125:83;6133:7;:23;;6144:12;;:::i;:::-;6133:23;:::i;:::-;;;:::i;:::-;;6125:83;:::i;:::-;6237:7;:::i;:::-;6038:214::o;284:2433:36:-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;:::o;:::-;;:::i;5854:234:11:-;6021:38;5854:234;5942:4;;:::i;:::-;5974:12;6021:38;5974:12;;:::i;:::-;6005:5;6021:25;6005:5;6012:7;;6031:5;6021:25;:::i;:::-;:38;:::i;:::-;;;:::i;:::-;6077:4;6070:11;:::o;342:64:36:-;382:24;342:64;:::o;2589:76:0:-;;2657:1;2589:76;2642:4;1848:11:36;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;1788:107:36:-;;1881:6;1788:107;1881:6;:::i;:::-;1788:107::o;:::-;;;;;:::i;:::-;:::o;2097:101:35:-;2184:6;2097:101;2172:10;2184:6;:::i;:::-;2097:101::o;2589:76:0:-;;2657:1;2589:76;2642:4;2182:18:36;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;284:2433:36:-;;;;;;;:::o;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;;:::i;:::-;;;:::i;:::-;:::o;:::-;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;:::o;2064:213::-;;2212:22;2244:26;2064:213;2212:22;;:::i;:::-;2244:26;;:::i;:::-;2064:213::o;:::-;;;;;:::i;:::-;:::o;284:2433::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;:::o;3419:125:11:-;3519:18;;3419:125;3493:7;;:::i;:::-;3519:9;;:18;:::i;:::-;;:::i;:::-;3512:25;:::o;284:2433:36:-;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;1431:151:1:-;;1547:21;:18;:28;1431:151;1521:7;;:::i;:::-;1547:12;;:18;:::i;:::-;:21;:::i;:::-;:28;:::i;:::-;1540:35;:::o;284:2433:36:-;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;3021:145:0:-;3130:29;3021:145;3130:20;:12;:29;3021:145;3107:4;;:::i;:::-;3130:6;;:12;:::i;:::-;:20;:29;:::i;:::-;;:::i;:::-;3123:36;:::o;2884:99:35:-;2932:13;;:::i;:::-;2964:12;2957:19;2964:12;2957:19;:::i;:::-;;:::o;284:2433:36:-;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;977:588::-;;;;;;;1239:10;:26;;1253:12;1239:26;:::i;:::-;;;:::i;:::-;;;:42;;;;977:588;1235:103;;1522:5;1387;1456:21;1387:5;;1394:9;1405:11;1418:13;1433:21;1456;;;:::i;:::-;1509:11;;:::i;:::-;1522:5;:::i;:::-;1539:19;1554:4;1539:19;;:::i;:::-;977:588::o;1235:103::-;1304:23;;;;;;;;;;;;:::i;:::-;;;;1239:42;1269:12;;;;:::i;:::-;1239:42;;284:2433;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;:::i;:::-;:::o;:::-;;;:::i;:::-;;;;;;;;1171:295:28;;;1398:63;1171:295;1319:7;;:::i;:::-;1398:10;:30;:10;;;:::i;:::-;:30;:::i;:::-;:63;:30;1429:6;1437:11;1450:10;1398:63;1450:10;;;:::i;:::-;1398:63;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;1171:295;1391:70;;:::o;1398:63::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;284:2433:36:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;:::o;6575:427:11:-;6928:34;6575:427;6668:4;;:::i;:::-;6700:12;6928:34;6700:12;;:::i;:::-;6759:5;6749:25;6759:5;6766:7;6749:25;;:::i;:::-;6792:16;6784:85;6792:16;:35;;6812:15;6792:35;:::i;:::-;;;:::i;:::-;;;6784:85;:::i;:::-;6919:7;6928:16;:34;:::i;:::-;;;:::i;:::-;6991:4;6984:11;:::o;3740:189::-;3894:6;3740:189;3819:4;;:::i;:::-;3851:12;;;:::i;:::-;3890:2;3894:6;;;:::i;:::-;3918:4;3911:11;:::o;1750:140:1:-;1856:25;:18;:27;1750:140;1830:7;;:::i;:::-;1856:12;;:18;:::i;:::-;:25;:::i;:::-;:27;:::i;:::-;1849:34;:::o;2589:76:0:-;;2657:1;2589:76;2642:4;5438:18;5451:4;5438:18;:::i;:::-;2642:4;:::i;:::-;2657:1;:::i;:::-;2589:76::o;5354:147::-;;5486:7;5354:147;5486:7;:::i;:::-;5354:147::o;:::-;;;;;:::i;:::-;:::o;284:2433:36:-;;;;;:::i;:::-;;;;;;;;;:::o;3987:149:11:-;4102:27;3987:149;4102:18;:27;3987:149;4076:7;;:::i;:::-;4102:11;;:18;:::i;:::-;:27;:::i;:::-;;:::i;:::-;4095:34;:::o;2589:76:0:-;2657:1;2589:76;2642:4;1486:25:40;;:::i;:::-;2642:4:0;:::i;:::-;2657:1;:::i;:::-;2589:76::o;284:2433:36:-;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;1401:151:40:-;1523:22;1401:151;1523:22;;:::i;:::-;1401:151::o;:::-;;;;:::i;:::-;:::o;2352:271:35:-;2451:4;;:::i;:::-;2474:11;;:39;;2489:24;;;2474:39;:::i;:::-;;;:::i;:::-;;:90;;;;2352:271;2474:142;;;;;2352:271;2467:149;;:::o;2474:142::-;2580:36;2604:11;;2580:36;:::i;:::-;2474:142;;;:90;2517:11;;:47;;2532:32;;;2517:47;:::i;:::-;;;:::i;:::-;;2474:90;;640:96:15;693:7;;:::i;:::-;719:10;;712:17;:::o;284:2433:36:-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;10457:340:11:-;;;;10550:68;10558:5;:19;;10567:10;10575:1;10567:10;:::i;:::-;10558:19;:::i;:::-;;;:::i;:::-;;;10550:68;:::i;:::-;10628;10636:7;:21;;10647:10;10655:1;10647:10;:::i;:::-;10636:21;:::i;:::-;;;:::i;:::-;;;10628:68;:::i;:::-;10707:36;10737:6;10707:27;:18;:11;10719:5;10707:18;;:::i;:::-;10726:7;10707:27;;:::i;:::-;:36;:::i;:::-;10774:7;10783:6;10758:32;;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;;:::i;:::-;;;;10457:340::o;3460:103:0:-;3543:12;3460:103;3543:12;;:::i;:::-;;;:::i;:::-;3460:103::o;284:2433:36:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;11078:411:11;11205:25;11215:5;11222:7;11205:25;;:::i;:::-;11244:16;;:37;;284:2433:36;;11244:37:11;:::i;:::-;;;:::i;:::-;;11240:243;;11078:411;;;;;:::o;11240:243::-;11432:25;11305:16;11432:25;11305:16;11297:68;11305:16;:26;;11325:6;11305:26;:::i;:::-;;;:::i;:::-;;;11297:68;:::i;:::-;11423:7;11432:16;:25;:::i;:::-;;;:::i;:::-;11240:243;;;;;;284:2433:36;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;:::o;7456:788:11:-;;;;7544:68;7552:4;:18;;7560:10;7568:1;7560:10;:::i;:::-;7552:18;:::i;:::-;;;:::i;:::-;;;7544:68;:::i;:::-;7622:64;7630:2;:16;;7636:10;7644:1;7636:10;:::i;:::-;7630:16;:::i;:::-;;;:::i;:::-;;;7622:64;:::i;:::-;7899:38;7917:20;7768:15;;:9;7778:4;7768:15;;:::i;:::-;;:::i;:::-;7793:72;7801:11;:21;;7816:6;7801:21;:::i;:::-;;;:::i;:::-;;;7793:72;:::i;:::-;7931:6;7917:20;;:::i;:::-;7899:15;:9;7909:4;7899:15;;:::i;:::-;:38;:::i;:::-;8114:23;8131:6;8114:23;:13;:9;8124:2;8114:13;;:::i;:::-;:23;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;8178:2;8182:6;8163:26;;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;;:::i;:::-;;;;7456:788::o;1978:166:1:-;;2106:22;:18;:31;1978:166;2088:7;2082:4;2088:7;;;:::i;:::-;2106:12;:18;:::i;:::-;:22;:::i;:::-;:31;:::i;:::-;;1978:166::o;2233:171::-;;2363:25;:18;:34;2233:171;2345:7;2339:4;2345:7;;;:::i;:::-;2363:12;:18;:::i;:::-;:25;:::i;:::-;:34;:::i;:::-;;2233:171::o;284:2433:36:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;8520:535:11;;8595:65;8603:7;:21;;8614:10;8622:1;8614:10;:::i;:::-;8603:21;:::i;:::-;;;:::i;:::-;;;8595:65;:::i;:::-;8731:22;;8747:6;8731:22;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;8899:28;8921:6;8899:28;:18;:9;8909:7;8899:18;;:::i;:::-;:28;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;8961:10;8969:1;8961:10;:::i;:::-;8973:7;8982:6;8952:37;;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;;:::i;:::-;;;;8520:535::o;284:2433:36:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;9375:659:11;9450:67;9458:7;:21;;9469:10;9477:1;9469:10;:::i;:::-;9458:21;:::i;:::-;;;:::i;:::-;;;9450:67;:::i;:::-;9746:44;9767:23;9613:18;;:9;9623:7;9613:18;;:::i;:::-;;:::i;:::-;9641:71;9649:14;:24;;9667:6;9649:24;:::i;:::-;;;:::i;:::-;;;9641:71;:::i;:::-;9784:6;9767:23;;:::i;:::-;9746:18;:9;9756:7;9746:18;;:::i;:::-;:44;:::i;:::-;9883:22;;9899:6;9883:22;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;9957:1;9949:10;9957:1;9949:10;:::i;:::-;9961:6;9931:37;;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;;:::i;:::-;;;;9375:659::o;284:2433:36:-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;9563:156:23:-;9679:31;9687:22;9663:49;9563:156;9687:22;9691:10;9671:40;9563:156;9637:7;;:::i;:::-;9691:3;:10;9687:22;:::i;:::-;;:::i;:::-;9679:31;:::i;:::-;9671:40;:::i;:::-;9663:49;:::i;:::-;9656:56;:::o;284:2433:36:-;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;1311:632:35:-;;;;;1564:10;:26;;1578:12;1564:26;:::i;:::-;;;:::i;:::-;;;:42;;;;1311:632;1560:103;;1705:26;1741:30;1686:9;1673:22;1884:21;1686:9;1673:22;;:::i;:::-;1705:26;;:::i;:::-;1741:30;;:::i;:::-;1813:5;1793:18;;:::i;:::-;1813:5;;;:::i;:::-;1861:21;1884;;;:::i;:::-;1917:19;1932:4;1917:19;;:::i;:::-;1311:632::o;1560:103::-;1629:23;1304::36;;;1629::35;;;;;;;;:::i;:::-;;;;1564:42;1594:12;;;;:::i;:::-;1564:42;;9106:115:23;9195:19;9203:10;9195:19;9106:115;9169:7;;:::i;:::-;9203:3;:10;9195:19;:::i;:::-;;:::i;:::-;9188:26;:::o;1586:295:40:-;1731:4;;:::i;:::-;1808:11;1766:54;1808:11;1766:54;:::i;:::-;:108;;;;;1586:295;1747:127;;:::o;1766:108::-;1824:50;1862:11;;1824:50;:::i;:::-;1766:108;;;284:2433:36;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::o;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;:::o;:::-;;:::o;3844:479:0:-;;3931:23;3932:22;3940:4;3946:7;3932:22;;:::i;:::-;3931:23;;:::i;:::-;3927:390;;3844:479;;:::o;3927:390::-;3970:336;4135:7;4022:252;4214:38;4234:13;4115:28;3994:298;4135:7;4115:28;:::i;:::-;4242:4;4234:13;:::i;:::-;4214:38;4249:2;4214:38;:::i;:::-;;;:::i;:::-;4022:252;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;3994:298;:::i;:::-;3970:336;;:::i;:::-;284:2433:36;;;;;;3970:336:0;;;;;;:::i;:::-;;;;284:2433:36;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;7587:233:0:-;7669:23;7670:22;7678:4;7684:7;7670:22;;:::i;:::-;7669:23;;:::i;:::-;7665:149;;7587:233;;;:::o;7665:149::-;7708:36;7740:4;7708:29;:20;:12;:6;7715:4;7708:12;;:::i;:::-;:20;7729:7;7708:29;;:::i;:::-;:36;:::i;:::-;7781:7;7790:12;;:::i;:::-;7763:40;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;7665:149;;;;284:2433:36;;;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;8305:150:23:-;;8398:50;8415:32;8423:23;8431:14;8403:10;8398:50;8305:150;8375:4;;:::i;:::-;8403:3;:10;8439:5;8431:14;:::i;:::-;8423:23;:::i;:::-;8415:32;:::i;:::-;8398:50;;:::i;:::-;;:::i;:::-;8391:57;:::o;7991:234:0:-;8074:22;8082:4;8088:7;8074:22;;:::i;:::-;8070:149;;7991:234;;;:::o;8070:149::-;8112:37;8144:5;8112:29;:20;:12;:6;8119:4;8112:12;;:::i;:::-;:20;8133:7;8112:29;;:::i;:::-;:37;:::i;:::-;8186:7;8195:12;;:::i;:::-;8168:40;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;8070:149;;;;8623:156:23;;8719:53;8739:32;8747:23;8755:14;8727:10;8719:53;8623:156;8696:4;;:::i;:::-;8727:3;:10;8763:5;8755:14;:::i;:::-;8747:23;:::i;:::-;8739:32;:::i;:::-;8719:53;;:::i;:::-;;:::i;:::-;8712:60;:::o;284:2433:36:-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::o;4912:118:23:-;5005:18;4912:118;5005:11;:18;4912:118;4979:7;;:::i;:::-;5005:3;:11;:18;:::i;:::-;;;:::i;:::-;4998:25;:::o;612:218:40:-;;755:5;813:9;612:218;;728:25;;:::i;:::-;755:5;:::i;:::-;813:9;:::i;:::-;612:218::o;4463:107:23:-;4545:11;:18;4463:107;4519:7;;:::i;:::-;4545:3;:11;:18;:::i;:::-;4538:25;:::o;634:212:1:-;719:4;;:::i;:::-;742:11;;:57;;757:42;;;742:57;:::i;:::-;;;:::i;:::-;;:97;;;;;634:212;735:104;;:::o;742:97::-;803:36;827:11;;803:36;:::i;:::-;742:97;;;1899:210:28;1992:4;;:::i;:::-;2011:11;;:53;;2026:38;;;2011:53;:::i;:::-;;;:::i;:::-;;:93;;;;;1899:210;2004:100;;:::o;2011:93::-;2068:36;2092:11;;2068:36;:::i;:::-;2011:93;;;284:2433:36;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;302:43:18:-;343:2;;;:::i;:::-;302:43;:::o;343:2::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2407:149::-;2509:22;2517:13;2497:52;2407:149;2465:13;;:::i;:::-;2525:4;2517:13;:::i;:::-;2509:22;:::i;:::-;2497:52;2533:15;;:::i;:::-;2497:52;:::i;:::-;;;:::i;:::-;2490:59;:::o;284:2433:36:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;:::o;:::-;;;;;:::o;:::-;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::o;242:54:18:-;278:18;;:::i;:::-;242:54;:::o;278:18::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;284:2433:36;;;278:18:18;;;;;;;;:::i;:::-;;;;1818:437;;;1893:13;;:::i;:::-;1950:1;2042:14;:10;1940:25;1950:14;:10;:1;:10;1954:6;1950:10;;:::i;:::-;;:::i;:::-;:14;1963:1;1950:14;:::i;:::-;;;:::i;:::-;1940:25;:::i;:::-;1975:15;;;:::i;:::-;;:6;:15;1982:1;1975:15;;;;;:::i;:::-;;;:::i;:::-;;2000;;:::i;:::-;;:6;:15;2007:1;2000:15;;;;;:::i;:::-;;;:::i;:::-;;2042:10;:1;:10;:::i;:::-;;:::i;:::-;:14;2055:1;2042:14;:::i;:::-;;;:::i;:::-;2025:128;2065:3;2058:1;:5;;2062:1;2058:5;:::i;:::-;;;:::i;:::-;;;;;2096:8;;:::i;:::-;2105:5;:11;2113:3;2105:11;:::i;:::-;;2096:21;;;;;;;;2131:11;2096:21;2065:3;2096:21;;;:::i;:::-;2084:33;:6;2091:1;;2084:33;;;;;:::i;:::-;;2131:11;2141:1;2131:11;:::i;:::-;;;:::i;:::-;2065:3;;:::i;:::-;2030:26;;;2096:21;;:::i;2058:5::-;2234:14;2058:5;;;2162:55;2058:5;2170:10;;2179:1;2170:10;:::i;:::-;;;:::i;:::-;;2162:55;:::i;:::-;2234:14;:::i;:::-;2227:21;:::o;284:2433:36:-;;:::o;:::-;;;;;;;:::o;:::-;;;:::o;:::-;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;:::o;2214:404:23:-;2277:4;;:::i;:::-;2308:3;2297:22;2298:21;2308:3;2313:5;2298:21;;:::i;:::-;2297:22;;:::i;:::-;2293:319;;;;2493:19;:40;2335:3;:23;:16;:11;:3;:11;:16;:::i;:::-;2352:5;2335:23;;:::i;:::-;2493:12;2515:18;:11;:3;:11;:18;:::i;:::-;2493:3;:12;:19;:::i;:::-;:40;:::i;:::-;2554:4;2547:11;:::o;2293:319::-;2596:5;;;2589:12;:::o;284:2433:36:-;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;:::o;:::-;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;:::o;:::-;;:::i;2786:1388:23:-;2852:4;;:::i;:::-;2989:3;:19;;:12;:3;:12;3002:5;2989:19;;:::i;:::-;;:::i;:::-;3023:10;;:15;;3037:1;3023:15;:::i;:::-;;;:::i;:::-;;;3019:1149;;;;4062:26;3416:10;4069:12;:19;3416:10;;:14;4062:26;3416:10;:14;3429:1;3416:14;:::i;:::-;;;:::i;:::-;3464:22;:18;:3;;:11;:18;:::i;:::-;:22;3485:1;3464:22;:::i;:::-;;;:::i;:::-;3505:9;:26;;3518:13;3505:26;:::i;:::-;;;:::i;:::-;;3501:398;;3019:1149;3977:3;;;:15;;:3;;:11;:15;:::i;:::-;;:::i;:::-;4069:12;:19;:::i;:::-;4062:26;:::i;:::-;4110:4;4103:11;:::o;3501:398::-;3805:36;3571:3;3693:38;3571:22;;3805:23;3571:3;;;:11;:22;:::i;:::-;;;:::i;:::-;3722:9;3693:26;3722:9;3693:3;;;:11;:26;:::i;:::-;:38;;:::i;:::-;3805:3;;;:12;:23;:::i;:::-;:36;:::i;:::-;3501:398;;;;;3019:1149;4152:5;;;;4145:12;:::o;952:176:28:-;;1045:50;1058:37;1101:22;952:176;1058:37;:::i;:::-;1045:50;;:::i;:::-;1101:22;;:::i;:::-;952:176::o;2732:202:0:-;2817:4;;:::i;:::-;2840:11;;:47;;2855:32;;;2840:47;:::i;:::-;;;:::i;:::-;;:87;;;;;2732:202;2833:94;;:::o;2840:87::-;2891:36;2915:11;;2891:36;:::i;:::-;2840:87;;;4255:127:23;4351:19;4255:127;4351:12;:19;4255:127;4328:4;;:::i;:::-;4351:3;:12;:19;:::i;:::-;;:::i;:::-;:24;;4374:1;4351:24;:::i;:::-;;;:::i;:::-;;;4344:31;:::o;829:155:19:-;914:4;;:::i;:::-;937:11;:40;;952:25;;;937:40;:::i;:::-;;;:::i;:::-;;930:47;:::o"
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": "9d043a66",
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "burn(uint256)": "42966c68",
              "decimals()": "313ce567",
              "decreaseAllowance(address,uint256)": "a457c2d7",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "increaseAllowance(address,uint256)": "39509351",
              "initialize(address,string,string,uint8,address,bytes32)": "9c14f298",
              "mint(address,uint256)": "40c10f19",
              "name()": "06fdde03",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "setImplicitModeProjectId(bytes32)": "ed4c2ac7",
              "setImplicitModeValidator(address)": "0bb310de",
              "setNameAndSymbol(string,string)": "5a446215",
              "supportsInterface(bytes4)": "01ffc9a7",
              "symbol()": "95d89b41",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delegateCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onlyFallback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"behaviorOnError\",\"type\":\"uint256\"}],\"internalType\":\"struct Payload.Call\",\"name\":\"call\",\"type\":\"tuple\"}],\"name\":\"acceptImplicitRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"setImplicitModeProjectId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"setImplicitModeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"setNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"params\":{\"attestation\":\"The attestation data\",\"call\":\"The call to validate\",\"wallet\":\"The wallet's address\"},\"returns\":{\"_0\":\"The hash of the implicit request if valid\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"params\":{\"amount\":\"Amount of tokens to burn\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(address,string,string,uint8,address,bytes32)\":{\"details\":\"This should be called immediately after deployment.\",\"params\":{\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"owner\":\"The owner of the contract\",\"tokenDecimals\":\"Number of decimals\",\"tokenName\":\"Name of the token\",\"tokenSymbol\":\"Symbol of the token\"}},\"mint(address,uint256)\":{\"params\":{\"amount\":\"Amount of tokens to mint.\",\"to\":\"Address to mint tokens to.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setImplicitModeProjectId(bytes32)\":{\"params\":{\"projectId\":\"The project id.\"}},\"setImplicitModeValidator(address)\":{\"params\":{\"validator\":\"The validator address.\"}},\"setNameAndSymbol(string,string)\":{\"params\":{\"tokenName\":\"Name of token.\",\"tokenSymbol\":\"Symbol of token.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"Interface id\"},\"returns\":{\"_0\":\"True if supported\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"notice\":\"Invalid initialization error.\"}]},\"kind\":\"user\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"notice\":\"Determines if an implicit request is valid\"},\"burn(uint256)\":{\"notice\":\"Allows the owner of the token to burn their tokens.\"},\"decimals()\":{\"notice\":\"Override the ERC20 decimals function.\"},\"initialize(address,string,string,uint8,address,bytes32)\":{\"notice\":\"Initialize contract.\"},\"mint(address,uint256)\":{\"notice\":\"Mint tokens.This function can only be called by a items.\"},\"name()\":{\"notice\":\"Override the ERC20 name function.\"},\"setImplicitModeProjectId(bytes32)\":{\"notice\":\"Updates the settings for implicit mode validation.Only callable by an address with the project admin role.\"},\"setImplicitModeValidator(address)\":{\"notice\":\"Updates the validator for implicit mode validation.Only callable by an address with the project admin role.\"},\"setNameAndSymbol(string,string)\":{\"notice\":\"Set name and symbol of token.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check interface support.\"},\"symbol()\":{\"notice\":\"Override the ERC20 symbol function.\"}},\"notice\":\"A ready made implementation of ERC-20 capable of minting when role provided.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC20/presets/items/ERC20Items.sol\":\"ERC20Items\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IImplicitProjectValidation } from \\\"../registry/IImplicitProjectValidation.sol\\\";\\n\\nimport { ERC165, IERC165 } from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\nimport { ISignalsImplicitMode } from \\\"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\\\";\\nimport { Payload } from \\\"sequence-v3/src/modules/Payload.sol\\\";\\n\\n/// @title SignalsImplicitMode\\n/// @author Michael Standen\\n/// @notice Base contract for implicit mode validation by project\\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\\n\\n  IImplicitProjectValidation internal _validator;\\n  bytes32 internal _projectId;\\n\\n  /// @notice Initialize implicit mode validation\\n  /// @param validator The IImplicitProjectValidation address\\n  /// @param projectId The project id\\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\\n    _validator = IImplicitProjectValidation(validator);\\n    _projectId = projectId;\\n  }\\n\\n  /// @inheritdoc ISignalsImplicitMode\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32) {\\n    _validateImplicitRequest(wallet, attestation, call);\\n    return _validator.validateAttestation(wallet, attestation, _projectId);\\n  }\\n\\n  /// @notice Validates an implicit request\\n  /// @dev Optional hook for additional validation of the implicit requests\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  function _validateImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) internal view virtual { }\\n\\n  /// @inheritdoc IERC165\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd9107be2460f7f7ec4bdfefc3d10c79aa92b9285e1b12a75cb2a8d17b150a2ec\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC20/ERC20BaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { SignalsImplicitModeControlled } from \\\"../common/SignalsImplicitModeControlled.sol\\\";\\n\\nimport { ERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\\\";\\nimport { IERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC20Metadata } from \\\"openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nerror InvalidInitialization();\\n\\n/**\\n * A standard base implementation of ERC-20 for use in Sequence library contracts.\\n */\\nabstract contract ERC20BaseToken is ERC20, SignalsImplicitModeControlled {\\n\\n    string internal _tokenName;\\n    string internal _tokenSymbol;\\n    uint8 private _tokenDecimals;\\n\\n    address private immutable _initializer;\\n    bool private _initialized;\\n\\n    constructor() ERC20(\\\"\\\", \\\"\\\") {\\n        _initializer = msg.sender;\\n    }\\n\\n    /**\\n     * Initialize contract.\\n     * @param owner The owner of the contract\\n     * @param tokenName Name of the token\\n     * @param tokenSymbol Symbol of the token\\n     * @param tokenDecimals Number of decimals\\n     * @param implicitModeValidator Implicit session validator address\\n     * @param implicitModeProjectId Implicit session project id\\n     * @dev This should be called immediately after deployment.\\n     */\\n    function initialize(\\n        address owner,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint8 tokenDecimals,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) public virtual {\\n        if (msg.sender != _initializer || _initialized) {\\n            revert InvalidInitialization();\\n        }\\n\\n        _tokenName = tokenName;\\n        _tokenSymbol = tokenSymbol;\\n        _tokenDecimals = tokenDecimals;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\\n\\n        _initializeImplicitMode(owner, implicitModeValidator, implicitModeProjectId);\\n\\n        _initialized = true;\\n    }\\n\\n    //\\n    // Burn\\n    //\\n\\n    /**\\n     * Allows the owner of the token to burn their tokens.\\n     * @param amount Amount of tokens to burn\\n     */\\n    function burn(\\n        uint256 amount\\n    ) public virtual {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC20).interfaceId || interfaceId == type(IERC20Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    //\\n    // ERC20 Overrides\\n    //\\n\\n    /**\\n     * Override the ERC20 name function.\\n     */\\n    function name() public view override returns (string memory) {\\n        return _tokenName;\\n    }\\n\\n    /**\\n     * Override the ERC20 symbol function.\\n     */\\n    function symbol() public view override returns (string memory) {\\n        return _tokenSymbol;\\n    }\\n\\n    /**\\n     * Override the ERC20 decimals function.\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return _tokenDecimals;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x54b850ac7eeeae98507d167db8195bc0ecf243bb04e5d64ff9e85707c26e5656\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC20/presets/items/ERC20Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { ERC20BaseToken } from \\\"../../ERC20BaseToken.sol\\\";\\nimport { IERC20Items, IERC20ItemsFunctions } from \\\"./IERC20Items.sol\\\";\\n\\n/**\\n * A ready made implementation of ERC-20 capable of minting when role provided.\\n */\\ncontract ERC20Items is ERC20BaseToken, IERC20Items {\\n\\n    bytes32 internal constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    address private immutable _initializer;\\n    bool private _initialized;\\n\\n    constructor() {\\n        _initializer = msg.sender;\\n    }\\n\\n    /**\\n     * Initialize contract.\\n     * @param owner The owner of the contract\\n     * @param tokenName Name of the token\\n     * @param tokenSymbol Symbol of the token\\n     * @param tokenDecimals Number of decimals\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @dev This should be called immediately after deployment.\\n     */\\n    function initialize(\\n        address owner,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint8 tokenDecimals,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) public virtual override {\\n        if (msg.sender != _initializer || _initialized) {\\n            revert InvalidInitialization();\\n        }\\n\\n        ERC20BaseToken.initialize(\\n            owner, tokenName, tokenSymbol, tokenDecimals, implicitModeValidator, implicitModeProjectId\\n        );\\n\\n        _grantRole(MINTER_ROLE, owner);\\n\\n        _initialized = true;\\n    }\\n\\n    //\\n    // Minting\\n    //\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param amount Amount of tokens to mint.\\n     * @notice This function can only be called by a items.\\n     */\\n    function mint(address to, uint256 amount) external onlyRole(MINTER_ROLE) {\\n        _mint(to, amount);\\n    }\\n\\n    //\\n    // Admin\\n    //\\n\\n    /**\\n     * Set name and symbol of token.\\n     * @param tokenName Name of token.\\n     * @param tokenSymbol Symbol of token.\\n     */\\n    function setNameAndSymbol(\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _tokenName = tokenName;\\n        _tokenSymbol = tokenSymbol;\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return type(IERC20ItemsFunctions).interfaceId == interfaceId || ERC20BaseToken.supportsInterface(interfaceId)\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1f41ee30ef18bf3309068c4d57bd7c76684b1b68ba55536278f9ee4d25ac5a4d\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC20/presets/items/IERC20Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC20ItemsFunctions {\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param amount Amount of tokens to mint.\\n     */\\n    function mint(address to, uint256 amount) external;\\n\\n    /**\\n     * Set name and symbol of token.\\n     * @param tokenName Name of token.\\n     * @param tokenSymbol Symbol of token.\\n     */\\n    function setNameAndSymbol(string memory tokenName, string memory tokenSymbol) external;\\n\\n}\\n\\ninterface IERC20ItemsSignals {\\n\\n    /**\\n     * Invalid initialization error.\\n     */\\n    error InvalidInitialization();\\n\\n}\\n\\ninterface IERC20Items is IERC20ItemsFunctions, IERC20ItemsSignals { }\\n\",\"keccak256\":\"0xfa6b8383ebde0ec4135a6b37ea408762628f3f0d534fcd4b013d9cd831bb8b85\",\"license\":\"Apache-2.0\"},\"src/tokens/common/SignalsImplicitModeControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport {\\n    IERC165,\\n    IImplicitProjectValidation,\\n    SignalsImplicitMode\\n} from \\\"signals-implicit-mode/src/helper/SignalsImplicitMode.sol\\\";\\n\\n/**\\n * An abstract contract that allows implicit session access for a given project.\\n */\\nabstract contract SignalsImplicitModeControlled is AccessControlEnumerable, SignalsImplicitMode {\\n\\n    bytes32 internal constant _IMPLICIT_MODE_ADMIN_ROLE = keccak256(\\\"IMPLICIT_MODE_ADMIN_ROLE\\\");\\n\\n    function _initializeImplicitMode(address owner, address validator, bytes32 projectId) internal {\\n        _grantRole(_IMPLICIT_MODE_ADMIN_ROLE, owner);\\n        _initializeSignalsImplicitMode(validator, projectId);\\n    }\\n\\n    /**\\n     * Updates the validator for implicit mode validation.\\n     * @param validator The validator address.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeValidator(\\n        address validator\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _validator = IImplicitProjectValidation(validator);\\n    }\\n\\n    /**\\n     * Updates the settings for implicit mode validation.\\n     * @param projectId The project id.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeProjectId(\\n        bytes32 projectId\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _projectId = projectId;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable, SignalsImplicitMode) returns (bool) {\\n        return\\n            AccessControlEnumerable.supportsInterface(interfaceId) || SignalsImplicitMode.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb1a20575f188af254f90ec7df7f70415610ba5f41f7966ce383b50063220b860\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidInitialization()": [
                {
                  "notice": "Invalid initialization error."
                }
              ]
            },
            "kind": "user",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "notice": "Determines if an implicit request is valid"
              },
              "burn(uint256)": {
                "notice": "Allows the owner of the token to burn their tokens."
              },
              "decimals()": {
                "notice": "Override the ERC20 decimals function."
              },
              "initialize(address,string,string,uint8,address,bytes32)": {
                "notice": "Initialize contract."
              },
              "mint(address,uint256)": {
                "notice": "Mint tokens.This function can only be called by a items."
              },
              "name()": {
                "notice": "Override the ERC20 name function."
              },
              "setImplicitModeProjectId(bytes32)": {
                "notice": "Updates the settings for implicit mode validation.Only callable by an address with the project admin role."
              },
              "setImplicitModeValidator(address)": {
                "notice": "Updates the validator for implicit mode validation.Only callable by an address with the project admin role."
              },
              "setNameAndSymbol(string,string)": {
                "notice": "Set name and symbol of token."
              },
              "supportsInterface(bytes4)": {
                "notice": "Check interface support."
              },
              "symbol()": {
                "notice": "Override the ERC20 symbol function."
              }
            },
            "notice": "A ready made implementation of ERC-20 capable of minting when role provided.",
            "version": 1
          }
        }
      },
      "src/tokens/ERC20/presets/items/ERC20ItemsFactory.sol": {
        "ERC20ItemsFactory": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "factoryOwner",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "name": "ERC20ItemsDeployed",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "beacon",
              "outputs": [
                {
                  "internalType": "contract UpgradeableBeacon",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "uint8",
                  "name": "decimals",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "deploy",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "uint8",
                  "name": "decimals",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "determineAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "implementation",
                  "type": "address"
                }
              ],
              "name": "upgradeBeacon",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "events": {
              "ERC20ItemsDeployed(address)": {
                "params": {
                  "proxyAddr": "The address of the deployed proxy."
                }
              }
            },
            "kind": "dev",
            "methods": {
              "constructor": {
                "params": {
                  "factoryOwner": "The owner of the ERC-20 Items Factory"
                }
              },
              "deploy(address,address,string,string,uint8,address,bytes32)": {
                "params": {
                  "decimals": "The decimals of the ERC-20 Items proxy",
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "name": "The name of the ERC-20 Items proxy",
                  "proxyOwner": "The owner of the ERC-20 Items proxy",
                  "symbol": "The symbol of the ERC-20 Items proxy",
                  "tokenOwner": "The owner of the ERC-20 Items implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-20 Items Proxy"
                }
              },
              "determineAddress(address,address,string,string,uint8,address,bytes32)": {
                "params": {
                  "decimals": "The decimals of the ERC-20 Items proxy",
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "name": "The name of the ERC-20 Items proxy",
                  "proxyOwner": "The owner of the ERC-20 Items proxy",
                  "symbol": "The symbol of the ERC-20 Items proxy",
                  "tokenOwner": "The owner of the ERC-20 Items implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-20 Items Proxy"
                }
              },
              "owner()": {
                "details": "Returns the address of the current owner."
              },
              "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
              },
              "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
              },
              "upgradeBeacon(address)": {
                "params": {
                  "implementation": "The new beacon implementation."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {
                "abi_decode_address_fromMemory": {
                  "entryPoint": 204,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address_fromMemory": {
                  "entryPoint": 219,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 486,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_tuple": {
                  "entryPoint": 283,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 499,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "allocate_memory": {
                  "entryPoint": 134,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 52,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 171,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 730,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 160,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "constructor_ERC20ItemsFactory": {
                  "entryPoint": 361,
                  "id": 6688,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "constructor_Ownable": {
                  "entryPoint": 468,
                  "id": 562,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "constructor_SequenceProxyFactory": {
                  "entryPoint": 458,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "convert_address_to_address": {
                  "entryPoint": 774,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_ERC20Items_to_address": {
                  "entryPoint": 349,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_UpgradeableBeacon_to_contract_UpgradeableBeacon": {
                  "entryPoint": 566,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 337,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_UpgradeableBeacon": {
                  "entryPoint": 554,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 309,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_arguments_for_constructor_object_ERC20ItemsFactory": {
                  "entryPoint": 250,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 741,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 95,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_initialize": {
                  "entryPoint": 613,
                  "id": 5669,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun_msgSender": {
                  "entryPoint": 711,
                  "id": 2155,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_transferOwnership": {
                  "entryPoint": 821,
                  "id": 650,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "identity": {
                  "entryPoint": 306,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "panic_error_0x41": {
                  "entryPoint": 73,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 786,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "prepare_store_contract_UpgradeableBeacon": {
                  "entryPoint": 578,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 761,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 58,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 155,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 289,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 63,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 521,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 724,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "update_byte_slice_shift": {
                  "entryPoint": 527,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 789,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "update_storage_value_offsett_contract_UpgradeableBeacon_to_contract_UpgradeableBeacon": {
                  "entryPoint": 581,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 183,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 706,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x2F JUMPI PUSH2 0x19 PUSH2 0x14 PUSH2 0xFA JUMP JUMPDEST PUSH2 0x169 JUMP JUMPDEST PUSH2 0x21 PUSH2 0x34 JUMP JUMPDEST PUSH2 0x26A2 PUSH2 0x397 DUP3 CODECOPY PUSH2 0x26A2 SWAP1 RETURN JUMPDEST PUSH2 0x3A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x69 SWAP1 PUSH2 0x3F JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x81 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x49 JUMP JUMPDEST SWAP1 PUSH2 0x99 PUSH2 0x92 PUSH2 0x34 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x5F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xB4 SWAP1 PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC0 DUP2 PUSH2 0xAB JUMP JUMPDEST SUB PUSH2 0xC7 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0xD9 DUP3 PUSH2 0xB7 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xF5 JUMPI PUSH2 0xF2 SWAP2 PUSH1 0x0 ADD PUSH2 0xCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9B JUMP JUMPDEST PUSH2 0x118 PUSH2 0x70BB DUP1 CODESIZE SUB DUP1 PUSH2 0x10D DUP2 PUSH2 0x86 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD SWAP1 PUSH2 0xDB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x129 PUSH2 0x34 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x149 PUSH2 0x144 PUSH2 0x14E SWAP3 PUSH2 0xA0 JUMP JUMPDEST PUSH2 0x132 JUMP JUMPDEST PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x15A SWAP1 PUSH2 0x135 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x166 SWAP1 PUSH2 0x151 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x171 PUSH2 0x1CA JUMP JUMPDEST PUSH2 0x179 PUSH2 0x34 JUMP JUMPDEST PUSH2 0x3BE0 DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x1C5 JUMPI PUSH2 0x1A1 DUP3 SWAP2 PUSH2 0x3BE0 PUSH2 0x2A39 DUP5 CODECOPY PUSH2 0x11B JUMP JUMPDEST SUB SWAP1 PUSH1 0x0 CREATE SWAP1 DUP2 ISZERO PUSH2 0x1C0 JUMPI PUSH2 0x1B9 PUSH2 0x1BE SWAP3 PUSH2 0x15D JUMP JUMPDEST PUSH2 0x265 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x121 JUMP JUMPDEST PUSH2 0x49 JUMP JUMPDEST PUSH2 0x1D2 PUSH2 0x1D4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1E4 PUSH2 0x1DF PUSH2 0x2C7 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1EF SWAP1 PUSH2 0xAB JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x207 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x1E6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x220 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x209 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x233 SWAP1 PUSH2 0x135 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23F SWAP1 PUSH2 0x22A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x25A PUSH2 0x255 PUSH2 0x261 SWAP3 PUSH2 0x236 JUMP JUMPDEST PUSH2 0x242 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x20F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x26D PUSH2 0x34 JUMP JUMPDEST SWAP1 PUSH2 0xAA2 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x2BD JUMPI DUP3 SWAP2 PUSH2 0x297 SWAP2 PUSH2 0xAA2 PUSH2 0x6619 DUP6 CODECOPY PUSH2 0x1F3 JUMP JUMPDEST SUB SWAP1 PUSH1 0x0 CREATE SWAP1 DUP2 ISZERO PUSH2 0x2B8 JUMPI PUSH2 0x2B1 PUSH2 0x2B6 SWAP3 PUSH1 0x1 PUSH2 0x245 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x121 JUMP JUMPDEST PUSH2 0x49 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x2C2 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2F1 PUSH2 0x2F6 SWAP2 PUSH2 0x2D4 JUMP JUMPDEST PUSH2 0x2DA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x303 SWAP1 SLOAD PUSH2 0x2E5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30F SWAP1 PUSH2 0x151 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x32A PUSH2 0x325 PUSH2 0x331 SWAP3 PUSH2 0x306 JUMP JUMPDEST PUSH2 0x312 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x20F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x33F PUSH1 0x0 PUSH2 0x2F9 JUMP JUMPDEST PUSH2 0x34A DUP3 PUSH1 0x0 PUSH2 0x315 JUMP JUMPDEST SWAP1 PUSH2 0x37E PUSH2 0x378 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x306 JUMP JUMPDEST SWAP2 PUSH2 0x306 JUMP JUMPDEST SWAP2 PUSH2 0x387 PUSH2 0x34 JUMP JUMPDEST DUP1 PUSH2 0x391 DUP2 PUSH2 0x11B JUMP JUMPDEST SUB SWAP1 LOG3 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x537 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x8D JUMP JUMPDEST DUP1 PUSH4 0x1BCE4583 EQ PUSH2 0x88 JUMPI DUP1 PUSH4 0x59659E90 EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x7E JUMPI DUP1 PUSH4 0x8CFD4E5E EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x74 JUMPI DUP1 PUSH4 0xF13B273D EQ PUSH2 0x6F JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x504 JUMP JUMPDEST PUSH2 0x4C8 JUMP JUMPDEST PUSH2 0x493 JUMP JUMPDEST PUSH2 0x457 JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH2 0x1EA JUMP JUMPDEST PUSH2 0x108 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xBC SWAP1 PUSH2 0xA8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC8 DUP2 PUSH2 0xB3 JUMP JUMPDEST SUB PUSH2 0xCF JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xE1 DUP3 PUSH2 0xBF JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xFD JUMPI PUSH2 0xFA SWAP2 PUSH1 0x0 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x136 JUMPI PUSH2 0x120 PUSH2 0x11B CALLDATASIZE PUSH1 0x4 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x635 JUMP JUMPDEST PUSH2 0x128 PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x132 DUP2 PUSH2 0x102 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x146 JUMPI JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x16A SWAP1 PUSH1 0x8 PUSH2 0x16F SWAP4 MUL PUSH2 0x14B JUMP JUMPDEST PUSH2 0x14F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x17D SWAP2 SLOAD PUSH2 0x15A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x18D PUSH1 0x1 PUSH1 0x0 SWAP1 PUSH2 0x172 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1A7 PUSH2 0x1A2 PUSH2 0x1AC SWAP3 PUSH2 0xA8 JUMP JUMPDEST PUSH2 0x190 JUMP JUMPDEST PUSH2 0xA8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B8 SWAP1 PUSH2 0x193 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1C4 SWAP1 PUSH2 0x1AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D0 SWAP1 PUSH2 0x1BB JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1E8 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x1C7 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x21A JUMPI PUSH2 0x1FA CALLDATASIZE PUSH1 0x4 PUSH2 0x13B JUMP JUMPDEST PUSH2 0x216 PUSH2 0x205 PUSH2 0x180 JUMP JUMPDEST PUSH2 0x20D PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x1D4 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x24D JUMPI PUSH2 0x22F CALLDATASIZE PUSH1 0x4 PUSH2 0x13B JUMP JUMPDEST PUSH2 0x237 PUSH2 0x691 JUMP JUMPDEST PUSH2 0x23F PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x249 DUP2 PUSH2 0x102 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x286 SWAP1 PUSH2 0x25C JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x2A0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x266 JUMP JUMPDEST SWAP1 PUSH2 0x2B8 PUSH2 0x2B1 PUSH2 0x93 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x27C JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2D8 JUMPI PUSH2 0x2D4 PUSH1 0x20 SWAP2 PUSH2 0x25C JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x266 JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2FE PUSH2 0x2F9 DUP3 PUSH2 0x2BA JUMP JUMPDEST PUSH2 0x2A5 JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x31A JUMPI PUSH2 0x318 SWAP3 PUSH2 0x2DD JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x257 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x33D JUMPI DUP2 PUSH1 0x20 PUSH2 0x33A SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x252 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x351 DUP2 PUSH2 0x342 JUMP JUMPDEST SUB PUSH2 0x358 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x36A DUP3 PUSH2 0x348 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x378 DUP2 PUSH2 0x36C JUMP JUMPDEST SUB PUSH2 0x37F JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x391 DUP3 PUSH2 0x36F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xE0 DUP2 DUP4 SUB SLT PUSH2 0x42F JUMPI PUSH2 0x3AA DUP3 PUSH1 0x0 DUP4 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP3 PUSH2 0x3B8 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x42A JUMPI DUP2 PUSH2 0x3D9 SWAP2 DUP6 ADD PUSH2 0x31F JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x425 JUMPI DUP3 PUSH2 0x3FA SWAP2 DUP4 ADD PUSH2 0x31F JUMP JUMPDEST SWAP3 PUSH2 0x422 PUSH2 0x40B DUP5 PUSH1 0x80 DUP6 ADD PUSH2 0x35D JUMP JUMPDEST SWAP4 PUSH2 0x419 DUP2 PUSH1 0xA0 DUP7 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP4 PUSH1 0xC0 ADD PUSH2 0x384 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA3 JUMP JUMPDEST PUSH2 0xA3 JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH2 0x43D SWAP1 PUSH2 0xB3 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x455 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x434 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x48E JUMPI PUSH2 0x48A PUSH2 0x479 PUSH2 0x46D CALLDATASIZE PUSH1 0x4 PUSH2 0x393 JUMP JUMPDEST SWAP6 SWAP5 SWAP1 SWAP5 SWAP4 SWAP2 SWAP4 PUSH2 0x7BB JUMP JUMPDEST PUSH2 0x481 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x441 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x4C3 JUMPI PUSH2 0x4A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x4AE PUSH2 0x84D JUMP JUMPDEST PUSH2 0x4B6 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x441 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x4FF JUMPI PUSH2 0x4FB PUSH2 0x4EA PUSH2 0x4DE CALLDATASIZE PUSH1 0x4 PUSH2 0x393 JUMP JUMPDEST SWAP6 SWAP5 SWAP1 SWAP5 SWAP4 SWAP2 SWAP4 PUSH2 0x887 JUMP JUMPDEST PUSH2 0x4F2 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x441 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x532 JUMPI PUSH2 0x51C PUSH2 0x517 CALLDATASIZE PUSH1 0x4 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xAB2 JUMP JUMPDEST PUSH2 0x524 PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x52E DUP2 PUSH2 0x102 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x54D SWAP1 PUSH2 0x548 PUSH2 0xB40 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH2 0x561 PUSH2 0x566 SWAP2 PUSH2 0x54F JUMP JUMPDEST PUSH2 0x14F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x573 SWAP1 SLOAD PUSH2 0x555 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x58C JUMPI JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH2 0x599 PUSH2 0x93 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x5B4 PUSH2 0x5AF PUSH1 0x1 PUSH2 0x569 JUMP JUMPDEST PUSH2 0x1BB JUMP JUMPDEST SWAP1 PUSH4 0x3659CFE6 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0x630 JUMPI PUSH2 0x5EC SWAP3 PUSH2 0x5E1 PUSH1 0x0 DUP1 SWAP5 PUSH2 0x5D5 PUSH2 0x93 JUMP JUMPDEST SWAP7 DUP8 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH2 0x57B JUMP JUMPDEST DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x441 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x62B JUMPI PUSH2 0x5FE JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0x61E SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0x624 JUMPI JUMPDEST PUSH2 0x616 DUP2 DUP4 PUSH2 0x27C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x581 JUMP JUMPDEST CODESIZE PUSH2 0x5FB JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x60C JUMP JUMPDEST PUSH2 0x591 JUMP JUMPDEST PUSH2 0x576 JUMP JUMPDEST PUSH2 0x63E SWAP1 PUSH2 0x53C JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x648 PUSH2 0xB40 JUMP JUMPDEST PUSH2 0x650 PUSH2 0x67D JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x669 PUSH2 0x664 PUSH2 0x66E SWAP3 PUSH2 0x652 JUMP JUMPDEST PUSH2 0x190 JUMP JUMPDEST PUSH2 0xA8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x67A SWAP1 PUSH2 0x655 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x68F PUSH2 0x68A PUSH1 0x0 PUSH2 0x671 JUMP JUMPDEST PUSH2 0xBBC JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x699 PUSH2 0x640 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x6C1 JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x6B0 JUMP JUMPDEST PUSH2 0x6F1 PUSH2 0x6FA PUSH1 0x20 SWAP4 PUSH2 0x6FF SWAP4 PUSH2 0x6E8 DUP2 PUSH2 0x6A0 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x6A4 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x6AD JUMP JUMPDEST PUSH2 0x25C JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x70C SWAP1 PUSH2 0x342 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x719 SWAP1 PUSH2 0x36C JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP5 PUSH2 0x76F PUSH2 0x764 PUSH1 0xA0 SWAP6 PUSH2 0x756 PUSH2 0x779 SWAP6 PUSH2 0x780 SWAP11 SWAP13 SWAP12 SWAP10 SWAP13 PUSH2 0x749 PUSH1 0xC0 DUP11 ADD SWAP3 PUSH1 0x0 DUP12 ADD SWAP1 PUSH2 0x434 JUMP JUMPDEST DUP9 DUP3 SUB PUSH1 0x20 DUP11 ADD MSTORE PUSH2 0x6D2 JUMP JUMPDEST SWAP1 DUP7 DUP3 SUB PUSH1 0x40 DUP9 ADD MSTORE PUSH2 0x6D2 JUMP JUMPDEST SWAP9 PUSH1 0x60 DUP6 ADD SWAP1 PUSH2 0x703 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0x434 JUMP JUMPDEST ADD SWAP1 PUSH2 0x710 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x79E PUSH2 0x799 DUP4 PUSH2 0x2BA JUMP JUMPDEST PUSH2 0x2A5 JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x7AD PUSH1 0x0 PUSH2 0x78C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7B8 PUSH2 0x7A3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP5 SWAP4 PUSH2 0x81E SWAP7 PUSH2 0x7FC SWAP5 SWAP6 PUSH2 0x7ED SWAP4 PUSH2 0x7D2 PUSH2 0x69B JUMP JUMPDEST POP SWAP5 SWAP7 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x7E1 PUSH2 0x93 JUMP JUMPDEST SWAP8 DUP9 SWAP7 PUSH1 0x20 DUP9 ADD PUSH2 0x71D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x27C JUMP JUMPDEST PUSH2 0x80E PUSH2 0x808 DUP3 PUSH2 0x788 JUMP JUMPDEST SWAP2 PUSH2 0x782 JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0x818 PUSH2 0x7B0 JUMP JUMPDEST SWAP2 PUSH2 0xCCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x838 PUSH2 0x83D SWAP2 PUSH2 0x54F JUMP JUMPDEST PUSH2 0x821 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x84A SWAP1 SLOAD PUSH2 0x82C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x855 PUSH2 0x69B JUMP JUMPDEST POP PUSH2 0x860 PUSH1 0x0 PUSH2 0x840 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x86C SWAP1 PUSH2 0x193 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x878 SWAP1 PUSH2 0x863 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x884 SWAP1 PUSH2 0x1AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8EE SWAP1 SWAP7 SWAP2 SWAP3 SWAP4 SWAP6 SWAP7 PUSH2 0x899 PUSH2 0x69B JUMP JUMPDEST POP DUP4 PUSH2 0x8CC DUP7 SWAP2 PUSH2 0x8BD DUP11 DUP11 DUP14 SWAP1 DUP10 SWAP3 PUSH2 0x8B1 PUSH2 0x93 JUMP JUMPDEST SWAP8 DUP9 SWAP7 PUSH1 0x20 DUP9 ADD PUSH2 0x71D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x27C JUMP JUMPDEST PUSH2 0x8DE PUSH2 0x8D8 DUP3 PUSH2 0x788 JUMP JUMPDEST SWAP2 PUSH2 0x782 JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0x8E8 PUSH2 0x7B0 JUMP JUMPDEST SWAP2 PUSH2 0xE2C JUMP JUMPDEST SWAP6 PUSH2 0x900 PUSH2 0x8FB DUP9 PUSH2 0x86F JUMP JUMPDEST PUSH2 0x87B JUMP JUMPDEST SWAP3 PUSH4 0x9C14F298 SWAP1 SWAP5 SWAP7 SWAP6 SWAP2 SWAP3 SWAP6 DUP5 EXTCODESIZE ISZERO PUSH2 0x9BF JUMPI PUSH1 0x0 SWAP7 PUSH2 0x935 SWAP5 DUP9 SWAP5 PUSH2 0x940 SWAP4 PUSH2 0x929 PUSH2 0x93 JUMP JUMPDEST SWAP12 DUP13 SWAP11 DUP12 SWAP10 DUP11 SWAP9 PUSH2 0x57B JUMP JUMPDEST DUP9 MSTORE PUSH1 0x4 DUP9 ADD PUSH2 0x71D JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x9BA JUMPI PUSH2 0x98D JUMPI JUMPDEST POP DUP1 PUSH2 0x987 PUSH32 0x2F7AEBCAA1B6E607137FC80962355832B79ED6710CC89ACB7987434D1E4D1B24 SWAP2 PUSH2 0x97E PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x441 JUMP JUMPDEST SUB SWAP1 LOG1 SWAP1 JUMP JUMPDEST PUSH2 0x9AD SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0x9B3 JUMPI JUMPDEST PUSH2 0x9A5 DUP2 DUP4 PUSH2 0x27C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x581 JUMP JUMPDEST CODESIZE PUSH2 0x94F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x99B JUMP JUMPDEST PUSH2 0x591 JUMP JUMPDEST PUSH2 0x576 JUMP JUMPDEST PUSH2 0x9D5 SWAP1 PUSH2 0x9D0 PUSH2 0xB40 JUMP JUMPDEST PUSH2 0xA81 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xA32 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x6A4 JUMP JUMPDEST PUSH2 0xA3B DUP2 PUSH2 0x9D7 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xA55 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xA25 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xA5F JUMPI JUMP JUMPDEST PUSH2 0xA67 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xA7D PUSH1 0x4 DUP3 ADD PUSH2 0xA3F JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xAB0 SWAP1 PUSH2 0xAAB DUP2 PUSH2 0xAA4 PUSH2 0xA9E PUSH2 0xA99 PUSH1 0x0 PUSH2 0x671 JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST SWAP2 PUSH2 0xB3 JUMP JUMPDEST EQ ISZERO PUSH2 0xA58 JUMP JUMPDEST PUSH2 0xBBC JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xABB SWAP1 PUSH2 0x9C4 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xAF1 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x6A4 JUMP JUMPDEST PUSH2 0xAFA DUP2 PUSH2 0xABD JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xB14 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xAE5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xB1E JUMPI JUMP JUMPDEST PUSH2 0xB26 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xB3C PUSH1 0x4 DUP3 ADD PUSH2 0xAFE JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xB6A PUSH2 0xB4B PUSH2 0x84D JUMP JUMPDEST PUSH2 0xB64 PUSH2 0xB5E PUSH2 0xB59 PUSH2 0xF6B JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST SWAP2 PUSH2 0xB3 JUMP JUMPDEST EQ PUSH2 0xB17 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xB83 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xB6C JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0xB96 SWAP1 PUSH2 0x1AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xBB1 PUSH2 0xBAC PUSH2 0xBB8 SWAP3 PUSH2 0xB8D JUMP JUMPDEST PUSH2 0xB99 JUMP JUMPDEST DUP3 SLOAD PUSH2 0xB72 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xBC6 PUSH1 0x0 PUSH2 0x840 JUMP JUMPDEST PUSH2 0xBD1 DUP3 PUSH1 0x0 PUSH2 0xB9C JUMP JUMPDEST SWAP1 PUSH2 0xC05 PUSH2 0xBFF PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0xB8D JUMP JUMPDEST SWAP2 PUSH2 0xB8D JUMP JUMPDEST SWAP2 PUSH2 0xC0E PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0xC18 DUP2 PUSH2 0x102 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC2C PUSH2 0xC31 SWAP2 PUSH2 0x36C JUMP JUMPDEST PUSH2 0xC1D JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x60 SHL SWAP1 JUMP JUMPDEST PUSH2 0xC44 SWAP1 PUSH2 0xC35 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC50 SWAP1 PUSH2 0xC3B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC5F PUSH2 0xC64 SWAP2 PUSH2 0xB3 JUMP JUMPDEST PUSH2 0xC47 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC92 PUSH2 0xC89 SWAP3 PUSH1 0x20 SWAP3 PUSH2 0xC80 DUP2 PUSH2 0x788 JUMP JUMPDEST SWAP5 DUP6 DUP1 SWAP4 PUSH2 0xC68 JUMP JUMPDEST SWAP4 DUP5 SWAP2 ADD PUSH2 0x6AD JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x14 DUP1 SWAP4 PUSH2 0xCBA PUSH1 0x20 DUP5 PUSH2 0xCB2 PUSH2 0xCC2 SWAP7 PUSH2 0xCC9 SWAP12 SWAP11 SWAP9 PUSH2 0xC20 JUMP JUMPDEST ADD DUP1 SWAP3 PUSH2 0xC53 JUMP JUMPDEST ADD DUP1 SWAP3 PUSH2 0xC53 JUMP JUMPDEST ADD SWAP1 PUSH2 0xC6D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xD5F SWAP3 SWAP2 PUSH2 0xD09 PUSH2 0xD18 SWAP3 PUSH2 0xCE0 PUSH2 0x69B JUMP JUMPDEST POP SWAP2 SWAP4 PUSH2 0xCF5 PUSH2 0xCF0 PUSH1 0x1 PUSH2 0x569 JUMP JUMPDEST PUSH2 0x1BB JUMP JUMPDEST PUSH2 0xCFD PUSH2 0x93 JUMP JUMPDEST SWAP6 DUP7 SWAP5 PUSH1 0x20 DUP7 ADD PUSH2 0xC96 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x27C JUMP JUMPDEST PUSH2 0xD2A PUSH2 0xD24 DUP3 PUSH2 0x788 JUMP JUMPDEST SWAP2 PUSH2 0x782 JUMP JUMPDEST KECCAK256 PUSH2 0x148A PUSH2 0xD3A PUSH1 0x20 DUP3 ADD PUSH2 0x2A5 JUMP JUMPDEST SWAP1 DUP1 DUP3 MSTORE PUSH2 0x11E3 PUSH1 0x20 DUP4 ADD CODECOPY PUSH2 0xD58 PUSH2 0xD52 DUP3 PUSH2 0x788 JUMP JUMPDEST SWAP2 PUSH2 0x782 JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0xF84 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xD79 PUSH2 0xD74 PUSH2 0xD7E SWAP3 PUSH2 0x652 JUMP JUMPDEST PUSH2 0x190 JUMP JUMPDEST PUSH2 0xD62 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xD8A SWAP1 PUSH2 0x193 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xD96 SWAP1 PUSH2 0xD81 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDA2 SWAP1 PUSH2 0x193 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDAE SWAP1 PUSH2 0xD99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDBA SWAP1 PUSH2 0x1AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH2 0xDE5 PUSH2 0xDEE PUSH1 0x20 SWAP4 PUSH2 0xDF3 SWAP4 PUSH2 0xDDC DUP2 PUSH2 0x788 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xDBD JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x6AD JUMP JUMPDEST PUSH2 0x25C JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xE1C PUSH2 0xE29 SWAP5 SWAP3 SWAP4 PUSH2 0xE12 PUSH1 0x60 DUP5 ADD SWAP6 PUSH1 0x0 DUP6 ADD SWAP1 PUSH2 0x434 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x434 JUMP JUMPDEST PUSH1 0x40 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xDC6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xEBC SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH2 0xE3C PUSH2 0x69B JUMP JUMPDEST POP PUSH2 0xE7C DUP6 SWAP2 PUSH2 0xE6D PUSH2 0xE57 PUSH2 0xE52 PUSH1 0x1 PUSH2 0x569 JUMP JUMPDEST PUSH2 0x1BB JUMP JUMPDEST DUP7 SWAP1 PUSH2 0xE61 PUSH2 0x93 JUMP JUMPDEST SWAP6 DUP7 SWAP5 PUSH1 0x20 DUP7 ADD PUSH2 0xC96 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x27C JUMP JUMPDEST PUSH2 0xE8E PUSH2 0xE88 DUP3 PUSH2 0x788 JUMP JUMPDEST SWAP2 PUSH2 0x782 JUMP JUMPDEST KECCAK256 PUSH2 0x148A PUSH2 0xE9E PUSH1 0x20 DUP3 ADD PUSH2 0x2A5 JUMP JUMPDEST SWAP1 DUP1 DUP3 MSTORE PUSH2 0x11E3 PUSH1 0x20 DUP4 ADD CODECOPY PUSH2 0xEB7 PUSH1 0x0 SWAP3 SWAP2 SWAP3 PUSH2 0xD65 JUMP JUMPDEST PUSH2 0x1130 JUMP JUMPDEST SWAP3 PUSH2 0xED6 PUSH2 0xED1 PUSH2 0xECC DUP7 PUSH2 0xD8D JUMP JUMPDEST PUSH2 0xDA5 JUMP JUMPDEST PUSH2 0xDB1 JUMP JUMPDEST PUSH4 0xCF7A1D77 SWAP2 SWAP1 PUSH2 0xEEF PUSH2 0xEEA PUSH1 0x1 PUSH2 0x569 JUMP JUMPDEST PUSH2 0x1BB JUMP JUMPDEST SWAP4 SWAP3 DUP2 EXTCODESIZE ISZERO PUSH2 0xF66 JUMPI PUSH1 0x0 PUSH2 0xF17 SWAP2 PUSH2 0xF22 DUP3 SWAP7 PUSH2 0xF0B PUSH2 0x93 JUMP JUMPDEST SWAP9 DUP10 SWAP8 DUP9 SWAP7 DUP8 SWAP6 PUSH2 0x57B JUMP JUMPDEST DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0xDF7 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xF61 JUMPI PUSH2 0xF34 JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0xF54 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0xF5A JUMPI JUMPDEST PUSH2 0xF4C DUP2 DUP4 PUSH2 0x27C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x581 JUMP JUMPDEST CODESIZE PUSH2 0xF31 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xF42 JUMP JUMPDEST PUSH2 0x591 JUMP JUMPDEST PUSH2 0x576 JUMP JUMPDEST PUSH2 0xF73 PUSH2 0x69B JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH2 0xF81 SWAP1 PUSH2 0x1AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xFA2 SWAP2 PUSH2 0xF91 PUSH2 0x69B JUMP JUMPDEST POP SWAP1 PUSH2 0xF9C ADDRESS PUSH2 0xF78 JUMP JUMPDEST SWAP2 PUSH2 0x11B9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A20696E73756666696369656E742062616C616E6365000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xFDA PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x6A4 JUMP JUMPDEST PUSH2 0xFE3 DUP2 PUSH2 0xFA5 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFD SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xFCD JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1007 JUMPI JUMP JUMPDEST PUSH2 0x100F PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1025 PUSH1 0x4 DUP3 ADD PUSH2 0xFE7 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A2062797465636F6465206C656E677468206973207A65726F SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x105D PUSH1 0x20 DUP1 SWAP3 PUSH2 0x6A4 JUMP JUMPDEST PUSH2 0x1066 DUP2 PUSH2 0x1029 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1080 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1051 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x108A JUMPI JUMP JUMPDEST PUSH2 0x1092 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x10A8 PUSH1 0x4 DUP3 ADD PUSH2 0x106A JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A204661696C6564206F6E206465706C6F7900000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x10E1 PUSH1 0x19 PUSH1 0x20 SWAP3 PUSH2 0x6A4 JUMP JUMPDEST PUSH2 0x10EA DUP2 PUSH2 0x10AC JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1104 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x10D4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x110E JUMPI JUMP JUMPDEST PUSH2 0x1116 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x112C PUSH1 0x4 DUP3 ADD PUSH2 0x10EE JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x113B PUSH2 0x69B JUMP JUMPDEST POP PUSH2 0x1162 PUSH2 0x1148 ADDRESS PUSH2 0xF78 JUMP JUMPDEST BALANCE PUSH2 0x115B PUSH2 0x1155 DUP5 PUSH2 0xD62 JUMP JUMPDEST SWAP2 PUSH2 0xD62 JUMP JUMPDEST LT ISZERO PUSH2 0x1000 JUMP JUMPDEST PUSH2 0x1188 PUSH2 0x116E DUP4 PUSH2 0x788 JUMP JUMPDEST PUSH2 0x1181 PUSH2 0x117B PUSH1 0x0 PUSH2 0xD65 JUMP JUMPDEST SWAP2 PUSH2 0xD62 JUMP JUMPDEST EQ ISZERO PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD SWAP3 ADD SWAP1 CREATE2 SWAP1 PUSH2 0x11B7 DUP3 PUSH2 0x11B0 PUSH2 0x11AA PUSH2 0x11A5 PUSH1 0x0 PUSH2 0x671 JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST SWAP2 PUSH2 0xB3 JUMP JUMPDEST EQ ISZERO PUSH2 0x1107 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x55 SWAP3 PUSH1 0xB SWAP3 PUSH2 0x11C8 PUSH2 0x69B JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP3 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP4 ADD MSTORE DUP2 MSTORE ADD PUSH1 0xFF DUP2 MSTORE8 KECCAK256 SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x145E PUSH2 0x2C DUP3 CODECOPY PUSH2 0x145E SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x6B JUMPI PUSH2 0x6B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x34 PUSH2 0x2F PUSH2 0x39 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x45 SWAP1 PUSH2 0x20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x51 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x73 PUSH2 0x17E JUMP JUMPDEST PUSH2 0x8E PUSH2 0x88 PUSH2 0x83 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x46C JUMPI PUSH2 0x9B PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND PUSH2 0xC1 PUSH2 0xBB PUSH4 0xCF7A1D77 PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH2 0xE3 JUMPI PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0xDF PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xEB PUSH2 0x401 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x113 PUSH2 0x11D SWAP3 PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x149 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x104 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x16E SWAP2 PUSH2 0x14C JUMP JUMPDEST PUSH2 0x152 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17B SWAP1 SLOAD PUSH2 0x15D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1A2 PUSH1 0x0 PUSH2 0x19C PUSH2 0x197 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1BF PUSH2 0x1BA PUSH2 0x1C4 SWAP3 PUSH2 0x1A5 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x1F7 JUMPI DUP5 GT PUSH2 0x1F2 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1CD JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x212 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x21E DUP2 PUSH2 0x209 JUMP JUMPDEST SUB PUSH2 0x225 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x237 DUP3 PUSH2 0x215 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x26D SWAP1 PUSH2 0x243 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x287 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x29F PUSH2 0x298 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x263 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2BF JUMPI PUSH2 0x2BB PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2E5 PUSH2 0x2E0 DUP3 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x301 JUMPI PUSH2 0x2FF SWAP3 PUSH2 0x2C4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x23E JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x324 JUMPI DUP2 PUSH1 0x20 PUSH2 0x321 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2D0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x239 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x376 JUMPI PUSH2 0x341 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH2 0x34F DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x371 JUMPI PUSH2 0x36E SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x38F PUSH2 0x38A PUSH2 0x394 SWAP3 PUSH2 0x12 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A0 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3AC SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3CD JUMPI PUSH2 0x3C9 PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x3E4 PUSH2 0x3DF DUP4 PUSH2 0x3AF JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x0 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FE PUSH2 0x3E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x412 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x461 PUSH2 0x457 PUSH2 0x451 PUSH2 0x447 PUSH2 0x43F PUSH2 0x439 PUSH1 0x0 CALLDATASIZE PUSH2 0x431 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x329 JUMP JUMPDEST SWAP4 SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x469 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLER PUSH2 0x486 PUSH2 0x480 PUSH2 0x47B PUSH2 0x17E JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x59D JUMPI PUSH2 0x496 PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x4BD PUSH2 0x4B7 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x4D7 JUMPI POP PUSH2 0x4CE PUSH2 0x817 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0x4F1 PUSH2 0x4EB PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x508 JUMPI POP PUSH2 0x502 PUSH2 0x7C1 JUMP JUMPDEST JUMPDEST PUSH2 0x4CF JUMP JUMPDEST DUP1 PUSH2 0x522 PUSH2 0x51C PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x539 JUMPI POP PUSH2 0x533 PUSH2 0x723 JUMP JUMPDEST JUMPDEST PUSH2 0x503 JUMP JUMPDEST DUP1 PUSH2 0x553 PUSH2 0x54D PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x56A JUMPI POP PUSH2 0x564 PUSH2 0x6BF JUMP JUMPDEST JUMPDEST PUSH2 0x534 JUMP JUMPDEST PUSH2 0x583 PUSH2 0x57D PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x598 JUMPI PUSH2 0x593 PUSH2 0x67A JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5B9 PUSH2 0x5B4 PUSH2 0x5BE SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5C8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5EA CALLVALUE PUSH2 0x5E4 PUSH2 0x5DE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x5C1 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5F6 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x611 PUSH2 0x60B PUSH2 0x606 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x62D JUMPI PUSH2 0x622 PUSH2 0x62B SWAP4 PUSH2 0x8B2 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH2 0x98D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x646 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x652 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST PUSH2 0x660 SWAP1 PUSH2 0x48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x678 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x682 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x68B PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6BC PUSH2 0x699 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x6A1 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C7 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x6D0 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6F2 PUSH2 0x701 PUSH2 0x6DE PUSH2 0x17E JUMP JUMPDEST PUSH2 0x6E6 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x71E JUMPI PUSH2 0x71B SWAP2 PUSH1 0x0 ADD PUSH2 0x22A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x72B PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x734 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x770 PUSH2 0x76B PUSH2 0x766 PUSH2 0x75E PUSH2 0x758 PUSH1 0x0 CALLDATASIZE PUSH2 0x750 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x8B2 JUMP JUMPDEST PUSH2 0x778 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x7BC JUMPI PUSH2 0x795 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7B7 JUMPI PUSH2 0x7B4 SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x7C9 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x80C PUSH2 0x803 PUSH2 0x7FC PUSH2 0x7F4 PUSH2 0x7EE PUSH1 0x0 CALLDATASIZE PUSH2 0x7E6 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x77B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3A3 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x814 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x81F PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x828 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x86F PUSH2 0x85F PUSH2 0x85A PUSH2 0x852 PUSH2 0x84C PUSH1 0x0 CALLDATASIZE PUSH2 0x844 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x867 PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x877 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x882 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x88B PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x8B0 SWAP3 SWAP5 SWAP4 PUSH2 0x8A9 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8FD SWAP1 PUSH2 0x8BE PUSH2 0x17E JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x8F5 PUSH2 0x8EC PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x88E JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0xC4D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x908 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x924 SWAP1 PUSH2 0x90F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x930 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x942 DUP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x949 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x95B DUP3 PUSH2 0x939 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x977 JUMPI PUSH2 0x974 SWAP2 PUSH1 0x0 ADD PUSH2 0x94E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x984 PUSH2 0x1C7 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 PUSH2 0x997 DUP4 PUSH2 0xE30 JUMP JUMPDEST DUP3 PUSH2 0x9C2 PUSH32 0x1CF3B03A6CF19FA2BABA4DF148E9DCABEDEA7F8A5C07840E207E5C089BE95D3E SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x9CB PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x9D5 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH2 0x9E1 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x9F4 PUSH2 0x9EE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xA9E JUMPI JUMPDEST POP PUSH2 0xA07 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x20 PUSH2 0xA1D PUSH2 0xA18 PUSH2 0xA33 SWAP5 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xA2B PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xA43 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA99 JUMPI PUSH2 0xA61 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0xA69 JUMPI JUMPDEST POP SWAP1 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0xA8B SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xA92 JUMPI JUMPDEST PUSH2 0xA83 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xA5A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA79 JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x9FD JUMP JUMPDEST PUSH2 0xAAE PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xAB7 PUSH2 0xF85 JUMP JUMPDEST DUP1 PUSH2 0xAD3 PUSH2 0xACD PUSH2 0xAC8 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0xAE4 JUMPI POP PUSH2 0xAE1 PUSH2 0xF99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0xB05 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH2 0xB14 DUP4 PUSH2 0x102F JUMP JUMPDEST PUSH2 0xB1D DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0xB30 PUSH2 0xB2A PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xB54 JUMPI JUMPDEST POP PUSH2 0xB43 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xB4C SWAP2 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xB3F JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xBC0 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xBC9 DUP2 PUSH2 0xB65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xBE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xBB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xBED JUMPI JUMP JUMPDEST PUSH2 0xBF5 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC0B PUSH1 0x4 DUP3 ADD PUSH2 0xBCD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xC20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xFE JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xC42 PUSH2 0xC3D PUSH2 0xC49 SWAP3 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0xC2A JUMP JUMPDEST DUP3 SLOAD PUSH2 0xC0F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC8F SWAP1 PUSH2 0xC77 DUP2 PUSH2 0xC70 PUSH2 0xC6A PUSH2 0xC65 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ ISZERO PUSH2 0xBE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC89 PUSH2 0xC84 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7472616374000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720626561636F6E206973206E6F74206120636F6E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xCEC PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xCF5 DUP2 PUSH2 0xC91 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD0F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xCDF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xD19 JUMPI JUMP JUMPDEST PUSH2 0xD21 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xD37 PUSH1 0x4 DUP3 ADD PUSH2 0xCF9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x73206E6F74206120636F6E747261637400000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A20626561636F6E20696D706C656D656E746174696F6E2069 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xD96 PUSH1 0x30 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xD9F DUP2 PUSH2 0xD3B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xDB9 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xD89 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xDC3 JUMPI JUMP JUMPDEST PUSH2 0xDCB PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xDE1 PUSH1 0x4 DUP3 ADD PUSH2 0xDA3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDFC PUSH2 0xDF7 PUSH2 0xE01 SWAP3 PUSH2 0xDE5 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE2D PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0xDE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE6E SWAP1 PUSH2 0xE45 PUSH2 0xE40 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x20 PUSH2 0xE58 PUSH2 0xE53 DUP4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xE66 PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xE7E PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL DUP1 ISZERO PUSH2 0xEEE JUMPI PUSH2 0xEA1 PUSH2 0xEA6 SWAP2 PUSH2 0xEBE SWAP5 PUSH1 0x0 SWAP2 PUSH2 0xEC0 JUMPI JUMPDEST POP PUSH2 0x107F JUMP JUMPDEST PUSH2 0xDBC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB8 PUSH2 0xEB3 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEE1 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xEE7 JUMPI JUMPDEST PUSH2 0xED9 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xE9B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xECF JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xF4B PUSH1 0x27 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 PUSH2 0xF58 PUSH1 0x20 DUP4 ADD PUSH2 0xEF3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF62 PUSH2 0xF41 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF82 SWAP2 PUSH2 0xF72 PUSH2 0x54 JUMP JUMPDEST POP SWAP1 PUSH2 0xF7C PUSH2 0xF5A JUMP JUMPDEST SWAP2 PUSH2 0x10E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF8D PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xF96 PUSH2 0x1160 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFA1 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xFD5 PUSH1 0x20 PUSH2 0xFBF PUSH2 0xFBA PUSH2 0xFB5 PUSH2 0x1187 JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xFCD PUSH2 0x1C7 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xFE5 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x102A JUMPI PUSH1 0x0 SWAP2 PUSH2 0xFFC JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x101D SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1023 JUMPI JUMPDEST PUSH2 0x1015 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xFF8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x100B JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH2 0x1038 DUP2 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x1062 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x106B PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x1075 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1087 PUSH2 0x107A JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x109C PUSH2 0x1096 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10B2 PUSH2 0x10AD DUP4 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0x10D4 JUMPI PUSH2 0x10C8 RETURNDATASIZE PUSH2 0x10A0 JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0x10DC PUSH2 0x54 JUMP JUMPDEST SWAP1 PUSH2 0x10D2 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0x1112 SWAP5 PUSH2 0x10F3 PUSH2 0x54 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0x1108 PUSH2 0x10B7 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x130B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x112C PUSH2 0x1127 PUSH2 0x1131 SWAP3 PUSH2 0x1115 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x115D PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x1118 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1168 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1184 PUSH1 0x0 PUSH2 0x117E PUSH2 0x1179 PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x118F PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x11AB PUSH1 0x0 PUSH2 0x11A5 PUSH2 0x11A0 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1209 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x1212 DUP2 PUSH2 0x11AE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x122C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x11FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1236 JUMPI JUMP JUMPDEST PUSH2 0x123E PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1254 PUSH1 0x4 DUP3 ADD PUSH2 0x1216 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x1285 SWAP1 PUSH2 0x126D PUSH2 0x1268 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127F PUSH2 0x127A PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x12BC PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x12C5 DUP2 PUSH2 0x1287 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x12DF SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x12AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12E9 JUMPI JUMP JUMPDEST PUSH2 0x12F1 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1307 PUSH1 0x4 DUP3 ADD PUSH2 0x12C9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0x1316 PUSH2 0x54 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0x135C JUMPI POP PUSH2 0x1328 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x133B PUSH2 0x1335 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x1345 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1351 PUSH2 0x1356 SWAP2 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x12E2 JUMP JUMPDEST CODESIZE PUSH2 0x1341 JUMP JUMPDEST DUP3 PUSH2 0x13D5 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x137A JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x1369 JUMP JUMPDEST PUSH2 0x13AA PUSH2 0x13B3 PUSH1 0x20 SWAP4 PUSH2 0x13B8 SWAP4 PUSH2 0x13A1 DUP2 PUSH2 0x1362 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xB5C JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x1366 JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x13D2 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x138B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x13DF DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x13F2 PUSH2 0x13EC PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x1403 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0x1424 SWAP1 PUSH2 0x140F PUSH2 0x1C7 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x13BC JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB XOR SWAP10 0xE6 0x1F CODESIZE STATICCALL 0xA7 DUP12 0xFB 0xAB PUSH26 0xB8DC2FA613357C2FCE2699411F9FEE80B624365564736F6C6343 STOP ADDMOD SHL STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD PUSH5 0x6062CB4172 SWAP3 0xF6 0xD2 DUP10 DUP15 GAS 0xDA 0xF 0xE1 0x4E PUSH25 0xD8B561E44329E18B3E3630EDC17D64736F6C634300081B0033 PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x39 JUMPI PUSH2 0x11 PUSH2 0x49 JUMP JUMPDEST PUSH2 0x19 PUSH2 0x3E JUMP JUMPDEST PUSH2 0x37BA PUSH2 0x426 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 PUSH2 0x2A1C ADD MSTORE PUSH1 0xA0 MLOAD DUP2 PUSH2 0x1754 ADD MSTORE PUSH2 0x37BA SWAP1 RETURN JUMPDEST PUSH2 0x44 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x51 PUSH2 0x57 JUMP JUMPDEST CALLER PUSH1 0xA0 MSTORE JUMP JUMPDEST PUSH2 0x5F PUSH2 0x61 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x69 PUSH2 0x6B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x73 PUSH2 0x121 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x9F SWAP1 PUSH2 0x75 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xB7 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x7F JUMP JUMPDEST SWAP1 PUSH2 0xCF PUSH2 0xC8 PUSH2 0x3E JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x95 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xED JUMPI PUSH2 0xE9 PUSH1 0x20 SWAP2 PUSH2 0x75 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x7F JUMP JUMPDEST SWAP1 PUSH2 0x104 PUSH2 0xFF DUP4 PUSH2 0xD1 JUMP JUMPDEST PUSH2 0xBC JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x113 PUSH1 0x0 PUSH2 0xF2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x11E PUSH2 0x109 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x13A PUSH2 0x12C PUSH2 0x116 JUMP JUMPDEST PUSH2 0x134 PUSH2 0x116 JUMP JUMPDEST SWAP1 PUSH2 0x140 JUMP JUMPDEST CALLER PUSH1 0x80 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x14A SWAP2 PUSH2 0x14C JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x156 SWAP2 PUSH2 0x158 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x162 SWAP2 PUSH2 0x164 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x16E SWAP2 PUSH2 0x170 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x17A SWAP2 PUSH2 0x17C JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x186 SWAP2 PUSH2 0x188 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x192 SWAP2 PUSH2 0x194 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x19E SWAP2 PUSH2 0x1A0 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1AA SWAP2 PUSH2 0x40D JUMP JUMPDEST JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x2 DUP4 DIV SWAP3 AND DUP1 ISZERO PUSH2 0x1E6 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x1E1 JUMPI JUMP JUMPDEST PUSH2 0x1B0 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1D6 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1F PUSH1 0x20 SWAP2 ADD DIV SWAP1 JUMP JUMPDEST SHL SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x8 PUSH2 0x225 SWAP2 MUL SWAP2 PUSH2 0x21F PUSH1 0x0 NOT DUP5 PUSH2 0x205 JUMP JUMPDEST SWAP3 PUSH2 0x205 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x249 PUSH2 0x244 PUSH2 0x24E SWAP3 PUSH2 0x22F JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH2 0x22F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x26A PUSH2 0x265 PUSH2 0x272 SWAP4 PUSH2 0x235 JUMP JUMPDEST PUSH2 0x251 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x209 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x28D SWAP2 PUSH2 0x287 PUSH2 0x276 JUMP JUMPDEST SWAP2 PUSH2 0x254 JUMP JUMPDEST JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT PUSH2 0x29B JUMPI POP POP JUMP JUMPDEST DUP1 PUSH2 0x2A9 PUSH1 0x0 PUSH1 0x1 SWAP4 PUSH2 0x27B JUMP JUMPDEST ADD PUSH2 0x290 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x2BF JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x2CB PUSH2 0x2F0 SWAP4 PUSH2 0x1F0 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x2D7 DUP5 PUSH2 0x1FB JUMP JUMPDEST DUP4 ADD SWAP4 LT PUSH2 0x2F8 JUMPI JUMPDEST PUSH2 0x2E9 SWAP1 PUSH2 0x1FB JUMP JUMPDEST ADD SWAP1 PUSH2 0x28F JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x2BA JUMP JUMPDEST SWAP2 POP PUSH2 0x2E9 DUP2 SWAP3 SWAP1 POP PUSH2 0x2E0 JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x31B SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x8 MUL PUSH2 0x306 JUMP JUMPDEST NOT AND SWAP1 JUMP JUMPDEST DUP2 PUSH2 0x32A SWAP2 PUSH2 0x30A JUMP JUMPDEST SWAP1 PUSH1 0x2 MUL OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x33C DUP2 PUSH2 0x1AC JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x3FC JUMPI PUSH2 0x35E DUP3 PUSH2 0x358 DUP6 SLOAD PUSH2 0x1C6 JUMP JUMPDEST DUP6 PUSH2 0x2AF JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x393 JUMPI SWAP2 DUP1 SWAP2 PUSH2 0x382 SWAP4 PUSH1 0x0 SWAP3 PUSH2 0x387 JUMPI JUMPDEST POP POP PUSH2 0x320 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 POP ADD MLOAD CODESIZE DUP1 PUSH2 0x37B JUMP JUMPDEST PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH2 0x3A2 DUP6 PUSH2 0x1F0 JUMP JUMPDEST SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x3E4 JUMPI POP SWAP2 PUSH1 0x2 SWAP4 SWAP2 DUP6 PUSH1 0x1 SWAP7 SWAP5 LT PUSH2 0x3CA JUMPI JUMPDEST POP POP POP MUL ADD SWAP1 SSTORE PUSH2 0x385 JUMP JUMPDEST PUSH2 0x3DA SWAP2 ADD MLOAD PUSH1 0x1F DUP5 AND SWAP1 PUSH2 0x30A JUMP JUMPDEST SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x3BE JUMP JUMPDEST SWAP2 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP8 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP3 ADD PUSH2 0x3A6 JUMP JUMPDEST PUSH2 0x7F JUMP JUMPDEST SWAP1 PUSH2 0x40B SWAP2 PUSH2 0x332 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x41C PUSH2 0x423 SWAP3 PUSH1 0x3 PUSH2 0x401 JUMP JUMPDEST PUSH1 0x4 PUSH2 0x401 JUMP JUMPDEST JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0xDCF JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x1CD JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1C3 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0xBB310DE EQ PUSH2 0x1B9 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x1AA JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1A0 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x19B JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x191 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x18C JUMPI DUP1 PUSH4 0x5A446215 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x182 JUMPI DUP1 PUSH4 0x9010D07C EQ PUSH2 0x17D JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x173 JUMPI DUP1 PUSH4 0x9C14F298 EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x9D043A66 EQ PUSH2 0x169 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x164 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0xCA15C873 EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x150 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x14B JUMPI PUSH4 0xED4C2AC7 SUB PUSH2 0xE JUMPI PUSH2 0xD9C JUMP JUMPDEST PUSH2 0xD66 JUMP JUMPDEST PUSH2 0xD04 JUMP JUMPDEST PUSH2 0xCCF JUMP JUMPDEST PUSH2 0xC99 JUMP JUMPDEST PUSH2 0xC63 JUMP JUMPDEST PUSH2 0xC2E JUMP JUMPDEST PUSH2 0xBBB JUMP JUMPDEST PUSH2 0xAEC JUMP JUMPDEST PUSH2 0x9FE JUMP JUMPDEST PUSH2 0x9C8 JUMP JUMPDEST PUSH2 0x992 JUMP JUMPDEST PUSH2 0x90C JUMP JUMPDEST PUSH2 0x8D8 JUMP JUMPDEST PUSH2 0x761 JUMP JUMPDEST PUSH2 0x70E JUMP JUMPDEST PUSH2 0x6D8 JUMP JUMPDEST PUSH2 0x6A4 JUMP JUMPDEST PUSH2 0x66F JUMP JUMPDEST PUSH2 0x612 JUMP JUMPDEST PUSH2 0x5AF JUMP JUMPDEST PUSH2 0x510 JUMP JUMPDEST PUSH2 0x4A0 JUMP JUMPDEST PUSH2 0x44A JUMP JUMPDEST PUSH2 0x3EF JUMP JUMPDEST PUSH2 0x32A JUMP JUMPDEST PUSH2 0x25F JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH2 0x1FD DUP2 PUSH2 0x1E8 JUMP JUMPDEST SUB PUSH2 0x204 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x216 DUP3 PUSH2 0x1F4 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x232 JUMPI PUSH2 0x22F SWAP2 PUSH1 0x0 ADD PUSH2 0x209 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x245 SWAP1 PUSH2 0x237 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x25D SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x23C JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x28F JUMPI PUSH2 0x28B PUSH2 0x27A PUSH2 0x275 CALLDATASIZE PUSH1 0x4 PUSH2 0x218 JUMP JUMPDEST PUSH2 0xDD9 JUMP JUMPDEST PUSH2 0x282 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x29F JUMPI JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x2C5 JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x2B4 JUMP JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH2 0x2FF PUSH2 0x308 PUSH1 0x20 SWAP4 PUSH2 0x30D SWAP4 PUSH2 0x2F6 DUP2 PUSH2 0x2A4 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x2A8 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x2B1 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x327 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x2E0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x35A JUMPI PUSH2 0x33A CALLDATASIZE PUSH1 0x4 PUSH2 0x294 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x345 PUSH2 0xF52 JUMP JUMPDEST PUSH2 0x34D PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x311 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x373 SWAP1 PUSH2 0x35F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x37F DUP2 PUSH2 0x36A JUMP JUMPDEST SUB PUSH2 0x386 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x398 DUP3 PUSH2 0x376 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A6 DUP2 PUSH2 0x39A JUMP JUMPDEST SUB PUSH2 0x3AD JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x3BF DUP3 PUSH2 0x39D JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x3EA JUMPI DUP1 PUSH2 0x3DE PUSH2 0x3E7 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x38B JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x3B2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0x420 JUMPI PUSH2 0x41C PUSH2 0x40B PUSH2 0x405 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C1 JUMP JUMPDEST SWAP1 PUSH2 0xF68 JUMP JUMPDEST PUSH2 0x413 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x43F JUMPI PUSH2 0x43C SWAP2 PUSH1 0x0 ADD PUSH2 0x38B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x478 JUMPI PUSH2 0x462 PUSH2 0x45D CALLDATASIZE PUSH1 0x4 PUSH2 0x425 JUMP JUMPDEST PUSH2 0x105F JUMP JUMPDEST PUSH2 0x46A PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x474 DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH2 0x486 SWAP1 PUSH2 0x39A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x49E SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x47D JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x4D0 JUMPI PUSH2 0x4B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x294 JUMP JUMPDEST PUSH2 0x4CC PUSH2 0x4BB PUSH2 0x1099 JUMP JUMPDEST PUSH2 0x4C3 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x60 DUP3 DUP5 SUB SLT PUSH2 0x50B JUMPI PUSH2 0x508 PUSH2 0x4F1 DUP5 PUSH1 0x0 DUP6 ADD PUSH2 0x38B JUMP JUMPDEST SWAP4 PUSH2 0x4FF DUP2 PUSH1 0x20 DUP7 ADD PUSH2 0x38B JUMP JUMPDEST SWAP4 PUSH1 0x40 ADD PUSH2 0x3B2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0x541 JUMPI PUSH2 0x53D PUSH2 0x52C PUSH2 0x526 CALLDATASIZE PUSH1 0x4 PUSH2 0x4D5 JUMP JUMPDEST SWAP2 PUSH2 0x10AF JUMP JUMPDEST PUSH2 0x534 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x552 DUP2 PUSH2 0x546 JUMP JUMPDEST SUB PUSH2 0x559 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x56B DUP3 PUSH2 0x549 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x587 JUMPI PUSH2 0x584 SWAP2 PUSH1 0x0 ADD PUSH2 0x55E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST PUSH2 0x595 SWAP1 PUSH2 0x546 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5AD SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x58C JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x5DF JUMPI PUSH2 0x5DB PUSH2 0x5CA PUSH2 0x5C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x56D JUMP JUMPDEST PUSH2 0x112B JUMP JUMPDEST PUSH2 0x5D2 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x599 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x60D JUMPI DUP1 PUSH2 0x601 PUSH2 0x60A SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x55E JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x38B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0x641 JUMPI PUSH2 0x62B PUSH2 0x625 CALLDATASIZE PUSH1 0x4 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 PUSH2 0x1176 JUMP JUMPDEST PUSH2 0x633 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x63D DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x655 SWAP1 PUSH2 0x646 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x66D SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x64C JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x69F JUMPI PUSH2 0x67F CALLDATASIZE PUSH1 0x4 PUSH2 0x294 JUMP JUMPDEST PUSH2 0x69B PUSH2 0x68A PUSH2 0x11AE JUMP JUMPDEST PUSH2 0x692 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x659 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0x6D3 JUMPI PUSH2 0x6BD PUSH2 0x6B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 PUSH2 0x126E JUMP JUMPDEST PUSH2 0x6C5 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x6CF DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0x709 JUMPI PUSH2 0x705 PUSH2 0x6F4 PUSH2 0x6EE CALLDATASIZE PUSH1 0x4 PUSH2 0x3C1 JUMP JUMPDEST SWAP1 PUSH2 0x12D8 JUMP JUMPDEST PUSH2 0x6FC PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0x73D JUMPI PUSH2 0x727 PUSH2 0x721 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C1 JUMP JUMPDEST SWAP1 PUSH2 0x1359 JUMP JUMPDEST PUSH2 0x72F PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x739 DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x75C JUMPI PUSH2 0x759 SWAP2 PUSH1 0x0 ADD PUSH2 0x3B2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0x78F JUMPI PUSH2 0x779 PUSH2 0x774 CALLDATASIZE PUSH1 0x4 PUSH2 0x742 JUMP JUMPDEST PUSH2 0x1365 JUMP JUMPDEST PUSH2 0x781 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x78B DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x7BE SWAP1 PUSH2 0x2D6 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x7D8 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x79E JUMP JUMPDEST SWAP1 PUSH2 0x7F0 PUSH2 0x7E9 PUSH2 0x1D3 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x7B4 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x810 JUMPI PUSH2 0x80C PUSH1 0x20 SWAP2 PUSH2 0x2D6 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x79E JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x836 PUSH2 0x831 DUP3 PUSH2 0x7F2 JUMP JUMPDEST PUSH2 0x7DD JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x852 JUMPI PUSH2 0x850 SWAP3 PUSH2 0x815 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x799 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x875 JUMPI DUP2 PUSH1 0x20 PUSH2 0x872 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x821 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x794 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x8D3 JUMPI PUSH1 0x0 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x8CE JUMPI DUP4 PUSH2 0x8A7 SWAP2 DUP4 ADD PUSH2 0x857 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x8C9 JUMPI PUSH2 0x8C6 SWAP3 ADD PUSH2 0x857 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E3 JUMP JUMPDEST PUSH2 0x1E3 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0x907 JUMPI PUSH2 0x8F1 PUSH2 0x8EB CALLDATASIZE PUSH1 0x4 PUSH2 0x87A JUMP JUMPDEST SWAP1 PUSH2 0x15AE JUMP JUMPDEST PUSH2 0x8F9 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x903 DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0x93C JUMPI PUSH2 0x938 PUSH2 0x927 PUSH2 0x922 CALLDATASIZE PUSH1 0x4 PUSH2 0x425 JUMP JUMPDEST PUSH2 0x15EA JUMP JUMPDEST PUSH2 0x92F PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0x96A JUMPI DUP1 PUSH2 0x95E PUSH2 0x967 SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x55E JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x3B2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST PUSH2 0x978 SWAP1 PUSH2 0x36A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x990 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x96F JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x9C3 JUMPI PUSH2 0x9BF PUSH2 0x9AE PUSH2 0x9A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x941 JUMP JUMPDEST SWAP1 PUSH2 0x1629 JUMP JUMPDEST PUSH2 0x9B6 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x97C JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0x9F9 JUMPI PUSH2 0x9F5 PUSH2 0x9E4 PUSH2 0x9DE CALLDATASIZE PUSH1 0x4 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 PUSH2 0x1690 JUMP JUMPDEST PUSH2 0x9EC PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0xA2E JUMPI PUSH2 0xA0E CALLDATASIZE PUSH1 0x4 PUSH2 0x294 JUMP JUMPDEST PUSH2 0xA2A PUSH2 0xA19 PUSH2 0x16BB JUMP JUMPDEST PUSH2 0xA21 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x311 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH2 0xA3C DUP2 PUSH2 0x646 JUMP JUMPDEST SUB PUSH2 0xA43 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xA55 DUP3 PUSH2 0xA33 JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0xC0 DUP3 DUP5 SUB SLT PUSH2 0xAE7 JUMPI PUSH2 0xA70 DUP4 PUSH1 0x0 DUP5 ADD PUSH2 0x38B JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xAE2 JUMPI DUP2 PUSH2 0xA91 SWAP2 DUP6 ADD PUSH2 0x857 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xADD JUMPI DUP3 PUSH2 0xAB2 SWAP2 DUP4 ADD PUSH2 0x857 JUMP JUMPDEST SWAP3 PUSH2 0xADA PUSH2 0xAC3 DUP5 PUSH1 0x60 DUP6 ADD PUSH2 0xA48 JUMP JUMPDEST SWAP4 PUSH2 0xAD1 DUP2 PUSH1 0x80 DUP7 ADD PUSH2 0x38B JUMP JUMPDEST SWAP4 PUSH1 0xA0 ADD PUSH2 0x55E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E3 JUMP JUMPDEST PUSH2 0x1E3 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0xB21 JUMPI PUSH2 0xB0B PUSH2 0xAFF CALLDATASIZE PUSH1 0x4 PUSH2 0xA57 JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP4 SWAP3 SWAP2 SWAP3 PUSH2 0x1745 JUMP JUMPDEST PUSH2 0xB13 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0xB1D DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0xC0 SWAP2 SUB SLT PUSH2 0xB39 JUMPI SWAP1 JUMP JUMPDEST PUSH2 0xB26 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0xE0 SWAP2 SUB SLT PUSH2 0xB4C JUMPI SWAP1 JUMP JUMPDEST PUSH2 0xB26 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0xBB6 JUMPI PUSH2 0xB69 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x38B JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xBB1 JUMPI DUP4 PUSH2 0xB8A SWAP2 DUP4 ADD PUSH2 0xB2B JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xBAC JUMPI PUSH2 0xBA9 SWAP3 ADD PUSH2 0xB3E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1E3 JUMP JUMPDEST PUSH2 0x1E3 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0xBEC JUMPI PUSH2 0xBE8 PUSH2 0xBD7 PUSH2 0xBD1 CALLDATASIZE PUSH1 0x4 PUSH2 0xB51 JUMP JUMPDEST SWAP2 PUSH2 0x1B3A JUMP JUMPDEST PUSH2 0xBDF PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x599 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0xC0E PUSH2 0xC09 PUSH2 0xC13 SWAP3 PUSH2 0xBF1 JUMP JUMPDEST PUSH2 0xBF4 JUMP JUMPDEST PUSH2 0x546 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC20 PUSH1 0x0 PUSH2 0xBFA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC2B PUSH2 0xC16 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0xC5E JUMPI PUSH2 0xC3E CALLDATASIZE PUSH1 0x4 PUSH2 0x294 JUMP JUMPDEST PUSH2 0xC5A PUSH2 0xC49 PUSH2 0xC23 JUMP JUMPDEST PUSH2 0xC51 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x599 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0xC94 JUMPI PUSH2 0xC90 PUSH2 0xC7F PUSH2 0xC79 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C1 JUMP JUMPDEST SWAP1 PUSH2 0x1C93 JUMP JUMPDEST PUSH2 0xC87 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0xCCA JUMPI PUSH2 0xCC6 PUSH2 0xCB5 PUSH2 0xCAF CALLDATASIZE PUSH1 0x4 PUSH2 0x3C1 JUMP JUMPDEST SWAP1 PUSH2 0x1CE7 JUMP JUMPDEST PUSH2 0xCBD PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x249 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0xCFF JUMPI PUSH2 0xCFB PUSH2 0xCEA PUSH2 0xCE5 CALLDATASIZE PUSH1 0x4 PUSH2 0x56D JUMP JUMPDEST PUSH2 0x1D09 JUMP JUMPDEST PUSH2 0xCF2 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0xD33 JUMPI PUSH2 0xD1D PUSH2 0xD17 CALLDATASIZE PUSH1 0x4 PUSH2 0x5E4 JUMP JUMPDEST SWAP1 PUSH2 0x1D59 JUMP JUMPDEST PUSH2 0xD25 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0xD2F DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 DUP4 DUP3 SUB SLT PUSH2 0xD61 JUMPI DUP1 PUSH2 0xD55 PUSH2 0xD5E SWAP3 PUSH1 0x0 DUP7 ADD PUSH2 0x38B JUMP JUMPDEST SWAP4 PUSH1 0x20 ADD PUSH2 0x38B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST CALLVALUE PUSH2 0xD97 JUMPI PUSH2 0xD93 PUSH2 0xD82 PUSH2 0xD7C CALLDATASIZE PUSH1 0x4 PUSH2 0xD38 JUMP JUMPDEST SWAP1 PUSH2 0x1D7D JUMP JUMPDEST PUSH2 0xD8A PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST CALLVALUE PUSH2 0xDCA JUMPI PUSH2 0xDB4 PUSH2 0xDAF CALLDATASIZE PUSH1 0x4 PUSH2 0x56D JUMP JUMPDEST PUSH2 0x1E10 JUMP JUMPDEST PUSH2 0xDBC PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0xDC6 DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D9 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0xDE1 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH4 0x6A15B43 PUSH1 0xE2 SHL PUSH2 0xDFC PUSH2 0xDF6 DUP4 PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0xE20 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0xE10 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0xE1A SWAP2 POP PUSH2 0x1E1B JUMP JUMPDEST CODESIZE PUSH2 0xE0C JUMP JUMPDEST POP PUSH2 0xE2A DUP2 PUSH2 0x1E1B JUMP JUMPDEST PUSH2 0xE04 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x2 DUP4 DIV SWAP3 AND DUP1 ISZERO PUSH2 0xE6A JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0xE65 JUMPI JUMP JUMPDEST PUSH2 0xE34 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0xE5A JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 SWAP2 DUP1 SLOAD SWAP1 PUSH2 0xEA3 PUSH2 0xE9C DUP4 PUSH2 0xE4A JUMP JUMPDEST DUP1 SWAP5 PUSH2 0xE74 JUMP JUMPDEST SWAP2 PUSH1 0x1 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0xEFC JUMPI POP PUSH1 0x1 EQ PUSH2 0xEBF JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0xECC SWAP2 SWAP3 SWAP4 SWAP5 POP PUSH2 0xE7D JUMP JUMPDEST SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP2 DUP5 LT PUSH2 0xEE4 JUMPI POP POP ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0xEBA JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SWAP6 SWAP4 SWAP6 SLOAD DUP5 DUP7 ADD MSTORE ADD SWAP2 ADD SWAP3 SWAP1 PUSH2 0xED1 JUMP JUMPDEST SWAP3 SWAP5 SWAP6 POP POP POP PUSH1 0xFF NOT AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 MUL ADD SWAP1 CODESIZE DUP1 DUP1 PUSH2 0xEBA JUMP JUMPDEST SWAP1 PUSH2 0xF21 SWAP2 PUSH2 0xE88 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF44 PUSH2 0xF3D SWAP3 PUSH2 0xF34 PUSH2 0x1D3 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP3 PUSH2 0xF17 JUMP JUMPDEST SUB DUP4 PUSH2 0x7B4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF4F SWAP1 PUSH2 0xF24 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF5A PUSH2 0xE2F JUMP JUMPDEST POP PUSH2 0xF65 PUSH1 0x9 PUSH2 0xF46 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF85 SWAP2 PUSH2 0xF74 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0xF7D PUSH2 0x1E83 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x202C JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH32 0x70649EC320B507FEBAD3E8EF750E5F580B9AE32F9F50D4C7B121332C81971530 SWAP1 JUMP JUMPDEST PUSH2 0xFC7 SWAP1 PUSH2 0xFC2 PUSH2 0xFBD PUSH2 0xF8A JUMP JUMPDEST PUSH2 0x20EA JUMP JUMPDEST PUSH2 0x104A JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFE0 PUSH2 0xFDB PUSH2 0xFE5 SWAP3 PUSH2 0x35F JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x35F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFF1 SWAP1 PUSH2 0xFCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFFD SWAP1 PUSH2 0xFE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1011 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xBF4 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x1024 SWAP1 PUSH2 0xFE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x103F PUSH2 0x103A PUSH2 0x1046 SWAP3 PUSH2 0x101B JUMP JUMPDEST PUSH2 0x1027 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1000 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1056 PUSH2 0x105D SWAP2 PUSH2 0xFF4 JUMP JUMPDEST PUSH1 0x7 PUSH2 0x102A JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1068 SWAP1 PUSH2 0xFAE JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1084 PUSH2 0x1089 SWAP2 PUSH2 0x106F JUMP JUMPDEST PUSH2 0x1075 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1096 SWAP1 SLOAD PUSH2 0x1078 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x10A1 PUSH2 0x106A JUMP JUMPDEST POP PUSH2 0x10AC PUSH1 0x2 PUSH2 0x108C JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x10D9 SWAP3 PUSH2 0x10BC PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x10D1 PUSH2 0x10C8 PUSH2 0x1E83 JUMP JUMPDEST DUP3 SWAP1 DUP5 SWAP2 PUSH2 0x2182 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x23F6 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x10EC SWAP1 PUSH2 0x546 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10F9 SWAP1 PUSH2 0x10E3 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1116 PUSH2 0x111B SWAP2 PUSH2 0x106F JUMP JUMPDEST PUSH2 0x1107 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1128 SWAP1 SLOAD PUSH2 0x110A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x1144 PUSH2 0x114A SWAP3 PUSH2 0x113C PUSH2 0x10DE JUMP JUMPDEST POP PUSH1 0x5 PUSH2 0x10EF JUMP JUMPDEST ADD PUSH2 0x111E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1168 SWAP2 PUSH2 0x1163 PUSH2 0x115E DUP3 PUSH2 0x112B JUMP JUMPDEST PUSH2 0x20EA JUMP JUMPDEST PUSH2 0x116A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1174 SWAP2 PUSH2 0x250C JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1180 SWAP2 PUSH2 0x114D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1199 PUSH2 0x119E SWAP2 PUSH2 0x106F JUMP JUMPDEST PUSH2 0x1187 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x11AB SWAP1 SLOAD PUSH2 0x118D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x11B6 PUSH2 0x1182 JUMP JUMPDEST POP PUSH2 0x11C1 PUSH1 0xB PUSH2 0x11A1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x20726F6C657320666F722073656C660000000000000000000000000000000000 SWAP2 PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x121F PUSH1 0x2F PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x1228 DUP2 PUSH2 0x11C4 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1242 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1212 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x124C JUMPI JUMP JUMPDEST PUSH2 0x1254 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x126A PUSH1 0x4 DUP3 ADD PUSH2 0x122C JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x129B SWAP2 PUSH2 0x1296 DUP3 PUSH2 0x1290 PUSH2 0x128A PUSH2 0x1285 PUSH2 0x1E83 JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ PUSH2 0x1245 JUMP JUMPDEST PUSH2 0x2536 JUMP JUMPDEST JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x12C2 PUSH2 0x12C8 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x39A JUMP JUMPDEST SWAP3 PUSH2 0x39A JUMP JUMPDEST DUP3 ADD DUP1 SWAP3 GT PUSH2 0x12D3 JUMPI JUMP JUMPDEST PUSH2 0x129D JUMP JUMPDEST PUSH2 0x1308 SWAP2 PUSH2 0x12E4 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x1302 PUSH2 0x12F0 PUSH2 0x1E83 JUMP JUMPDEST SWAP2 PUSH2 0x12FD DUP4 SWAP5 DUP1 SWAP5 PUSH2 0x1D7D JUMP JUMPDEST PUSH2 0x12B3 JUMP JUMPDEST SWAP2 PUSH2 0x202C JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH32 0x9F2DF0FED2C77648DE5860A4CC508CD0818C85B8B8A1AB4CEEEF8D981C8956A6 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x134B SWAP2 PUSH2 0x1346 PUSH2 0x1341 PUSH2 0x130D JUMP JUMPDEST PUSH2 0x20EA JUMP JUMPDEST PUSH2 0x134D JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1357 SWAP2 PUSH2 0x25E4 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1363 SWAP2 PUSH2 0x1331 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x136F SWAP1 CALLER PUSH2 0x27FE JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x138B SWAP2 PUSH2 0x1386 PUSH2 0x1381 PUSH2 0xC16 JUMP JUMPDEST PUSH2 0x20EA JUMP JUMPDEST PUSH2 0x1596 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1F PUSH1 0x20 SWAP2 ADD DIV SWAP1 JUMP JUMPDEST SHL SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x8 PUSH2 0x13B7 SWAP2 MUL SWAP2 PUSH2 0x13B1 PUSH1 0x0 NOT DUP5 PUSH2 0x1397 JUMP JUMPDEST SWAP3 PUSH2 0x1397 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x13D5 PUSH2 0x13D0 PUSH2 0x13DA SWAP3 PUSH2 0x39A JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x13F6 PUSH2 0x13F1 PUSH2 0x13FE SWAP4 PUSH2 0x13C1 JUMP JUMPDEST PUSH2 0x13DD JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x139B JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1414 SWAP2 PUSH2 0x140E PUSH2 0x106A JUMP JUMPDEST SWAP2 PUSH2 0x13E0 JUMP JUMPDEST JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT PUSH2 0x1422 JUMPI POP POP JUMP JUMPDEST DUP1 PUSH2 0x1430 PUSH1 0x0 PUSH1 0x1 SWAP4 PUSH2 0x1402 JUMP JUMPDEST ADD PUSH2 0x1417 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x1446 JUMPI JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x1452 PUSH2 0x1477 SWAP4 PUSH2 0xE7D JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x145E DUP5 PUSH2 0x138D JUMP JUMPDEST DUP4 ADD SWAP4 LT PUSH2 0x147F JUMPI JUMPDEST PUSH2 0x1470 SWAP1 PUSH2 0x138D JUMP JUMPDEST ADD SWAP1 PUSH2 0x1416 JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x1441 JUMP JUMPDEST SWAP2 POP PUSH2 0x1470 DUP2 SWAP3 SWAP1 POP PUSH2 0x1467 JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x14A2 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x8 MUL PUSH2 0x148D JUMP JUMPDEST NOT AND SWAP1 JUMP JUMPDEST DUP2 PUSH2 0x14B1 SWAP2 PUSH2 0x1491 JUMP JUMPDEST SWAP1 PUSH1 0x2 MUL OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x14C3 DUP2 PUSH2 0x2A4 JUMP JUMPDEST SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1585 JUMPI PUSH2 0x14E7 DUP3 PUSH2 0x14E1 DUP6 SLOAD PUSH2 0xE4A JUMP JUMPDEST DUP6 PUSH2 0x1436 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x151C JUMPI SWAP2 DUP1 SWAP2 PUSH2 0x150B SWAP4 PUSH1 0x0 SWAP3 PUSH2 0x1510 JUMPI JUMPDEST POP POP PUSH2 0x14A7 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST JUMP JUMPDEST SWAP1 SWAP2 POP ADD MLOAD CODESIZE DUP1 PUSH2 0x1504 JUMP JUMPDEST PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH2 0x152B DUP6 PUSH2 0xE7D JUMP JUMPDEST SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x156D JUMPI POP SWAP2 PUSH1 0x2 SWAP4 SWAP2 DUP6 PUSH1 0x1 SWAP7 SWAP5 LT PUSH2 0x1553 JUMPI JUMPDEST POP POP POP MUL ADD SWAP1 SSTORE PUSH2 0x150E JUMP JUMPDEST PUSH2 0x1563 SWAP2 ADD MLOAD PUSH1 0x1F DUP5 AND SWAP1 PUSH2 0x1491 JUMP JUMPDEST SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x1547 JUMP JUMPDEST SWAP2 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP8 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP3 ADD PUSH2 0x152F JUMP JUMPDEST PUSH2 0x79E JUMP JUMPDEST SWAP1 PUSH2 0x1594 SWAP2 PUSH2 0x14B9 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x15A5 PUSH2 0x15AC SWAP3 PUSH1 0x9 PUSH2 0x158A JUMP JUMPDEST PUSH1 0xA PUSH2 0x158A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x15B8 SWAP2 PUSH2 0x1371 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x15C3 SWAP1 PUSH2 0xFCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x15CF SWAP1 PUSH2 0x15BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x15DC SWAP1 PUSH2 0x15C6 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x1601 PUSH2 0x1606 SWAP2 PUSH2 0x15F9 PUSH2 0x106A JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x108C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1618 SWAP1 PUSH2 0x10E3 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1649 PUSH2 0x1644 PUSH2 0x164E SWAP4 PUSH2 0x163C PUSH2 0x1609 JUMP JUMPDEST POP PUSH1 0x6 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x1626 JUMP JUMPDEST PUSH2 0x291D JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x165B SWAP1 PUSH2 0x15C6 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x167B PUSH2 0x1680 SWAP2 PUSH2 0x106F JUMP JUMPDEST PUSH2 0x1669 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x168D SWAP1 SLOAD PUSH2 0x166F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16B8 SWAP2 PUSH1 0x0 PUSH2 0x16AD PUSH2 0x16B3 SWAP4 PUSH2 0x16A5 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH1 0x5 PUSH2 0x10EF JUMP JUMPDEST ADD PUSH2 0x1651 JUMP JUMPDEST PUSH2 0x1683 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16C3 PUSH2 0xE2F JUMP JUMPDEST POP PUSH2 0x16CE PUSH1 0xA PUSH2 0xF46 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x10 SHR SWAP1 JUMP JUMPDEST PUSH2 0x16E3 PUSH2 0x16E8 SWAP2 PUSH2 0x16D1 JUMP JUMPDEST PUSH2 0x1669 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x16F5 SWAP1 SLOAD PUSH2 0x16D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x10 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x170C PUSH3 0xFF0000 SWAP2 PUSH2 0x16F8 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x171F SWAP1 PUSH2 0x237 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x173A PUSH2 0x1735 PUSH2 0x1741 SWAP3 PUSH2 0x1716 JUMP JUMPDEST PUSH2 0x1722 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x16FE JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP4 SWAP5 SWAP1 SWAP2 SWAP3 SWAP5 CALLER PUSH2 0x177E PUSH2 0x1778 PUSH32 0x0 PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x17D7 JUMPI JUMPDEST PUSH2 0x17BA JUMPI PUSH2 0x17AC SWAP6 PUSH2 0x179F SWAP5 DUP7 SWAP5 SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 PUSH2 0x2A0F JUMP JUMPDEST PUSH2 0x17A7 PUSH2 0x130D JUMP JUMPDEST PUSH2 0x250C JUMP JUMPDEST PUSH2 0x17B8 PUSH1 0x1 PUSH1 0xB PUSH2 0x1725 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x17D3 PUSH1 0x4 DUP3 ADD PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x17E2 PUSH1 0xB PUSH2 0x16EB JUMP JUMPDEST PUSH2 0x1787 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x17FE PUSH2 0x1803 SWAP2 PUSH2 0x106F JUMP JUMPDEST PUSH2 0x17E7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1810 SWAP1 SLOAD PUSH2 0x17F2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x181C SWAP1 PUSH2 0x15BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x1832 DUP3 PUSH2 0x549 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x184E JUMPI PUSH2 0x184B SWAP2 PUSH1 0x0 ADD PUSH2 0x1825 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DE JUMP JUMPDEST POP PUSH2 0x1862 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x38B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186E SWAP1 PUSH2 0x36A JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x1881 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x209 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x188D SWAP1 PUSH2 0x1E8 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST POP PUSH2 0x18A0 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x55E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x18AC SWAP1 PUSH2 0x546 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x1900 JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x18FB JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x18F6 JUMPI JUMP JUMPDEST PUSH2 0x18B5 JUMP JUMPDEST PUSH2 0x18B0 JUMP JUMPDEST PUSH2 0x18BA JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1928 DUP2 PUSH2 0x1921 DUP2 PUSH2 0x192D SWAP6 PUSH2 0x1905 JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x815 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x40 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x1947 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x18BA JUMP JUMPDEST SWAP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x20 SUB DUP3 CALLDATASIZE SUB SUB DUP2 SLT ISZERO PUSH2 0x198D JUMPI ADD PUSH1 0x20 DUP2 CALLDATALOAD SWAP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x1988 JUMPI PUSH1 0x1 DUP3 MUL CALLDATASIZE SUB DUP4 SGT PUSH2 0x1983 JUMPI JUMP JUMPDEST PUSH2 0x18B5 JUMP JUMPDEST PUSH2 0x18B0 JUMP JUMPDEST PUSH2 0x18BA JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x19AC DUP2 PUSH2 0x19A5 DUP2 PUSH2 0x19B1 SWAP6 PUSH2 0xE74 JUMP JUMPDEST DUP1 SWAP6 PUSH2 0x815 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x19CB DUP2 PUSH2 0x19B5 JUMP JUMPDEST SUB PUSH2 0x19D2 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x19E4 DUP3 PUSH2 0x19C2 JUMP JUMPDEST JUMP JUMPDEST POP PUSH2 0x19F5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x19D7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1A01 SWAP1 PUSH2 0x19B5 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 PUSH2 0x1A43 SWAP1 PUSH1 0x20 PUSH2 0x1A3B PUSH2 0x1A31 PUSH1 0x40 DUP5 ADD PUSH2 0x1A23 PUSH1 0x0 DUP9 ADD DUP9 PUSH2 0x194C JUMP JUMPDEST SWAP1 DUP7 DUP4 SUB PUSH1 0x0 DUP9 ADD MSTORE PUSH2 0x1992 JUMP JUMPDEST SWAP5 DUP3 DUP2 ADD SWAP1 PUSH2 0x19E6 JUMP JUMPDEST SWAP2 ADD SWAP1 PUSH2 0x19F8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1AF0 SWAP2 PUSH2 0x1AE2 PUSH2 0x1AD7 PUSH1 0xC0 DUP4 ADD PUSH2 0x1A6E PUSH2 0x1A64 PUSH1 0x0 DUP8 ADD DUP8 PUSH2 0x1853 JUMP JUMPDEST PUSH1 0x0 DUP7 ADD SWAP1 PUSH2 0x1865 JUMP JUMPDEST PUSH2 0x1A88 PUSH2 0x1A7E PUSH1 0x20 DUP8 ADD DUP8 PUSH2 0x1872 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD SWAP1 PUSH2 0x1884 JUMP JUMPDEST PUSH2 0x1AA2 PUSH2 0x1A98 PUSH1 0x40 DUP8 ADD DUP8 PUSH2 0x1891 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD SWAP1 PUSH2 0x18A3 JUMP JUMPDEST PUSH2 0x1ABC PUSH2 0x1AB2 PUSH1 0x60 DUP8 ADD DUP8 PUSH2 0x1891 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD SWAP1 PUSH2 0x18A3 JUMP JUMPDEST PUSH2 0x1AC9 PUSH1 0x80 DUP7 ADD DUP7 PUSH2 0x18BF JUMP JUMPDEST SWAP1 DUP6 DUP4 SUB PUSH1 0x80 DUP8 ADD MSTORE PUSH2 0x190E JUMP JUMPDEST SWAP3 PUSH1 0xA0 DUP2 ADD SWAP1 PUSH2 0x1931 JUMP JUMPDEST SWAP1 PUSH1 0xA0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x1A05 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP4 SWAP3 SWAP1 PUSH2 0x1B1F PUSH1 0x40 SWAP2 PUSH2 0x1B27 SWAP5 PUSH2 0x1B12 PUSH1 0x60 DUP10 ADD SWAP3 PUSH1 0x0 DUP11 ADD SWAP1 PUSH2 0x96F JUMP JUMPDEST DUP8 DUP3 SUB PUSH1 0x20 DUP10 ADD MSTORE PUSH2 0x1A46 JUMP JUMPDEST SWAP5 ADD SWAP1 PUSH2 0x58C JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1B31 PUSH2 0x1D3 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 POP PUSH1 0x20 SWAP1 PUSH2 0x1B47 PUSH2 0x10DE JUMP JUMPDEST POP PUSH2 0x1B5A PUSH2 0x1B55 PUSH1 0x7 PUSH2 0x1806 JUMP JUMPDEST PUSH2 0x1813 JUMP JUMPDEST PUSH2 0x1B86 PUSH4 0x3808A90B SWAP5 SWAP3 SWAP5 PUSH2 0x1B91 PUSH2 0x1B72 PUSH1 0x8 PUSH2 0x111E JUMP JUMPDEST PUSH2 0x1B7A PUSH2 0x1D3 JUMP JUMPDEST SWAP8 DUP9 SWAP7 DUP8 SWAP6 DUP7 SWAP6 PUSH2 0x181F JUMP JUMPDEST DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0x1AF3 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1BD6 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1BA8 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1BC9 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1BCF JUMPI JUMPDEST PUSH2 0x1BC1 DUP2 DUP4 PUSH2 0x7B4 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x1834 JUMP JUMPDEST CODESIZE PUSH2 0x1BA4 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1BB7 JUMP JUMPDEST PUSH2 0x1B29 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1C36 PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x1C3F DUP2 PUSH2 0x1BDB JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1C59 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1C29 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1C63 JUMPI JUMP JUMPDEST PUSH2 0x1C6B PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1C81 PUSH1 0x4 DUP3 ADD PUSH2 0x1C43 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x1C90 SWAP2 SUB PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1CE2 SWAP2 PUSH2 0x1C9F PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x1CDC PUSH2 0x1CAB PUSH2 0x1E83 JUMP JUMPDEST SWAP2 PUSH2 0x1CB7 DUP4 DUP6 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST SWAP3 PUSH2 0x1CD5 DUP5 PUSH2 0x1CCE PUSH2 0x1CC8 DUP6 PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST LT ISZERO PUSH2 0x1C5C JUMP JUMPDEST SWAP4 SWAP3 PUSH2 0x1C85 JUMP JUMPDEST SWAP2 PUSH2 0x202C JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x1D04 SWAP2 PUSH2 0x1CF3 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x1CFC PUSH2 0x1E83 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x23F6 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x1D28 PUSH2 0x1D23 PUSH2 0x1D2D SWAP3 PUSH2 0x1D1B PUSH2 0x106A JUMP JUMPDEST POP PUSH1 0x6 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x1626 JUMP JUMPDEST PUSH2 0x2ACB JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1D4B SWAP2 PUSH2 0x1D46 PUSH2 0x1D41 DUP3 PUSH2 0x112B JUMP JUMPDEST PUSH2 0x20EA JUMP JUMPDEST PUSH2 0x1D4D JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1D57 SWAP2 PUSH2 0x2536 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1D63 SWAP2 PUSH2 0x1D30 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1D6F SWAP1 PUSH2 0x15C6 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x1DA2 SWAP2 PUSH2 0x1D98 PUSH2 0x1D9D SWAP3 PUSH2 0x1D90 PUSH2 0x106A JUMP JUMPDEST POP PUSH1 0x1 PUSH2 0x1D65 JUMP JUMPDEST PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x108C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1DBE SWAP1 PUSH2 0x1DB9 PUSH2 0x1DB4 PUSH2 0xF8A JUMP JUMPDEST PUSH2 0x20EA JUMP JUMPDEST PUSH2 0x1E03 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH2 0x1DCD PUSH1 0x0 NOT SWAP2 PUSH2 0xBF4 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x1DE0 SWAP1 PUSH2 0x106F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1DF8 PUSH2 0x1DF3 PUSH2 0x1DFF SWAP3 PUSH2 0x10E3 JUMP JUMPDEST PUSH2 0x1DD7 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1DC0 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1E0E SWAP1 PUSH1 0x8 PUSH2 0x1DE3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1E19 SWAP1 PUSH2 0x1DA5 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1E23 PUSH2 0xDD4 JUMP JUMPDEST POP DUP1 PUSH2 0x1E3E PUSH2 0x1E38 PUSH4 0x36372B07 PUSH1 0xE0 SHL PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ DUP1 ISZERO PUSH2 0x1E62 JUMPI JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x1E52 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1E5C SWAP2 POP PUSH2 0x2AEB JUMP JUMPDEST CODESIZE PUSH2 0x1E4E JUMP JUMPDEST POP DUP1 PUSH2 0x1E7D PUSH2 0x1E77 PUSH4 0xA219A025 PUSH1 0xE0 SHL PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ PUSH2 0x1E46 JUMP JUMPDEST PUSH2 0x1E8B PUSH2 0x1609 JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH2 0x1EA4 PUSH2 0x1E9F PUSH2 0x1EA9 SWAP3 PUSH2 0xBF1 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x35F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1EB5 SWAP1 PUSH2 0x1E90 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1F13 PUSH1 0x24 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x1F1C DUP2 PUSH2 0x1EB8 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1F36 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1F06 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1F40 JUMPI JUMP JUMPDEST PUSH2 0x1F48 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1F5E PUSH1 0x4 DUP3 ADD PUSH2 0x1F20 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1FBD PUSH1 0x22 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x1FC6 DUP2 PUSH2 0x1F62 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1FE0 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1FB0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1FEA JUMPI JUMP JUMPDEST PUSH2 0x1FF2 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2008 PUSH1 0x4 DUP3 ADD PUSH2 0x1FCA JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x2021 PUSH2 0x201C PUSH2 0x2028 SWAP3 PUSH2 0x13C1 JUMP JUMPDEST PUSH2 0x13DD JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1DC0 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x2055 DUP2 PUSH2 0x204E PUSH2 0x2048 PUSH2 0x2043 PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO PUSH2 0x1F39 JUMP JUMPDEST PUSH2 0x207B DUP4 PUSH2 0x2074 PUSH2 0x206E PUSH2 0x2069 PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO PUSH2 0x1FE3 JUMP JUMPDEST PUSH2 0x209A DUP3 PUSH2 0x2095 PUSH2 0x208E PUSH1 0x1 DUP6 SWAP1 PUSH2 0x1D65 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x200C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x20E5 PUSH2 0x20D3 PUSH2 0x20CD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x20DC PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x20FC SWAP1 PUSH2 0x20F6 PUSH2 0x1E83 JUMP JUMPDEST SWAP1 PUSH2 0x2C13 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2133 PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x213C DUP2 PUSH2 0x20FE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2156 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2126 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2160 JUMPI JUMP JUMPDEST PUSH2 0x2168 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x217E PUSH1 0x4 DUP3 ADD PUSH2 0x2140 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x218D DUP2 DUP4 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x21A3 PUSH2 0x219D PUSH1 0x0 NOT PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST SUB PUSH2 0x21AF JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x21E1 SWAP4 PUSH2 0x21DB SWAP2 PUSH2 0x21D4 DUP5 PUSH2 0x21CD PUSH2 0x21C7 DUP6 PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST LT ISZERO PUSH2 0x2159 JUMP JUMPDEST SWAP4 SWAP3 PUSH2 0x1C85 JUMP JUMPDEST SWAP2 PUSH2 0x202C JUMP JUMPDEST CODESIZE DUP1 DUP1 DUP1 PUSH2 0x21A9 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x2245 PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x224E DUP2 PUSH2 0x21EA JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2268 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2238 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2272 JUMPI JUMP JUMPDEST PUSH2 0x227A PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2290 PUSH1 0x4 DUP3 ADD PUSH2 0x2252 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x22EF PUSH1 0x23 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x22F8 DUP2 PUSH2 0x2294 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2312 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x22E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x231C JUMPI JUMP JUMPDEST PUSH2 0x2324 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x233A PUSH1 0x4 DUP3 ADD PUSH2 0x22FC JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x2399 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x23A2 DUP2 PUSH2 0x233E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x23BC SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x238C JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x23C6 JUMPI JUMP JUMPDEST PUSH2 0x23CE PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x23E4 PUSH1 0x4 DUP3 ADD PUSH2 0x23A6 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x23F3 SWAP2 ADD PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x241F DUP2 PUSH2 0x2418 PUSH2 0x2412 PUSH2 0x240D PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO PUSH2 0x226B JUMP JUMPDEST PUSH2 0x2445 DUP4 PUSH2 0x243E PUSH2 0x2438 PUSH2 0x2433 PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO PUSH2 0x2315 JUMP JUMPDEST PUSH2 0x2494 PUSH2 0x2483 PUSH2 0x245F PUSH2 0x245A PUSH1 0x0 DUP6 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x108C JUMP JUMPDEST PUSH2 0x247C DUP2 PUSH2 0x2475 PUSH2 0x246F DUP9 PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST LT ISZERO PUSH2 0x23BF JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST PUSH2 0x248F PUSH1 0x0 DUP5 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x200C JUMP JUMPDEST PUSH2 0x24BC DUP3 PUSH2 0x24B6 PUSH2 0x24A7 PUSH1 0x0 DUP8 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST SWAP2 PUSH2 0x24B1 DUP4 PUSH2 0x108C JUMP JUMPDEST PUSH2 0x23E8 JUMP JUMPDEST SWAP1 PUSH2 0x200C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x2507 PUSH2 0x24F5 PUSH2 0x24EF PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x24FE PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST SWAP1 PUSH2 0x252E PUSH2 0x2529 PUSH2 0x2533 SWAP4 PUSH2 0x2522 DUP2 DUP6 SWAP1 PUSH2 0x2CCC JUMP JUMPDEST PUSH1 0x6 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x1626 JUMP JUMPDEST PUSH2 0x2DB3 JUMP JUMPDEST POP JUMP JUMPDEST SWAP1 PUSH2 0x2558 PUSH2 0x2553 PUSH2 0x255D SWAP4 PUSH2 0x254C DUP2 DUP6 SWAP1 PUSH2 0x2DEE JUMP JUMPDEST PUSH1 0x6 PUSH2 0x160E JUMP JUMPDEST PUSH2 0x1626 JUMP JUMPDEST PUSH2 0x2E88 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2595 PUSH1 0x1F PUSH1 0x20 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x259E DUP2 PUSH2 0x2560 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x25B8 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x2588 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x25C2 JUMPI JUMP JUMPDEST PUSH2 0x25CA PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x25E0 PUSH1 0x4 DUP3 ADD PUSH2 0x25A2 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x260B DUP3 PUSH2 0x2604 PUSH2 0x25FE PUSH2 0x25F9 PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO PUSH2 0x25BB JUMP JUMPDEST PUSH2 0x2628 PUSH2 0x2621 DUP3 PUSH2 0x261C PUSH1 0x2 PUSH2 0x108C JUMP JUMPDEST PUSH2 0x12B3 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x200C JUMP JUMPDEST PUSH2 0x2650 DUP2 PUSH2 0x264A PUSH2 0x263B PUSH1 0x0 DUP7 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST SWAP2 PUSH2 0x2645 DUP4 PUSH2 0x108C JUMP JUMPDEST PUSH2 0x23E8 JUMP JUMPDEST SWAP1 PUSH2 0x200C JUMP JUMPDEST PUSH2 0x265A PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x26A5 PUSH2 0x2693 PUSH2 0x268D PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x269C PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x2705 PUSH1 0x21 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x270E DUP2 PUSH2 0x26AA JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2728 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x26F8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x2732 JUMPI JUMP JUMPDEST PUSH2 0x273A PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x2750 PUSH1 0x4 DUP3 ADD PUSH2 0x2712 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x6365000000000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x27AF PUSH1 0x22 PUSH1 0x40 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x27B8 DUP2 PUSH2 0x2754 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x27D2 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x27A2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x27DC JUMPI JUMP JUMPDEST PUSH2 0x27E4 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x27FA PUSH1 0x4 DUP3 ADD PUSH2 0x27BC JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x2824 DUP2 PUSH2 0x281D PUSH2 0x2817 PUSH2 0x2812 PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO PUSH2 0x272B JUMP JUMPDEST PUSH2 0x2873 PUSH2 0x2862 PUSH2 0x283E PUSH2 0x2839 PUSH1 0x0 DUP6 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x108C JUMP JUMPDEST PUSH2 0x285B DUP2 PUSH2 0x2854 PUSH2 0x284E DUP9 PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST LT ISZERO PUSH2 0x27D5 JUMP JUMPDEST DUP5 SWAP1 PUSH2 0x1C85 JUMP JUMPDEST PUSH2 0x286E PUSH1 0x0 DUP5 SWAP1 PUSH2 0x15D2 JUMP JUMPDEST PUSH2 0x200C JUMP JUMPDEST PUSH2 0x2890 PUSH2 0x2889 DUP4 PUSH2 0x2884 PUSH1 0x2 PUSH2 0x108C JUMP JUMPDEST PUSH2 0x1C85 JUMP JUMPDEST PUSH1 0x2 PUSH2 0x200C JUMP JUMPDEST SWAP1 PUSH2 0x289B PUSH1 0x0 PUSH2 0x1EAC JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x28E5 PUSH2 0x28D3 PUSH2 0x28CD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x15C6 JUMP JUMPDEST SWAP4 PUSH2 0x28DC PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x48A JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x28F9 PUSH2 0x28FE SWAP2 PUSH2 0x106F JUMP JUMPDEST PUSH2 0x13C1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2915 PUSH2 0x2910 PUSH2 0x291A SWAP3 PUSH2 0x39A JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x35F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2949 PUSH2 0x2944 PUSH2 0x2953 SWAP4 PUSH2 0x293F PUSH1 0x0 PUSH2 0x294E SWAP6 PUSH2 0x2938 PUSH2 0x1609 JUMP JUMPDEST POP ADD PUSH2 0x28EA JUMP JUMPDEST PUSH2 0x2F37 JUMP JUMPDEST PUSH2 0x28ED JUMP JUMPDEST PUSH2 0x2901 JUMP JUMPDEST PUSH2 0x15BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x8 SHR SWAP1 JUMP JUMPDEST PUSH2 0x2968 PUSH2 0x296D SWAP2 PUSH2 0x2956 JUMP JUMPDEST PUSH2 0x1669 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x297A SWAP1 SLOAD PUSH2 0x295C JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2989 PUSH1 0xFF SWAP2 PUSH2 0xBF4 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0x29A7 PUSH2 0x29A2 PUSH2 0x29AC SWAP3 PUSH2 0x646 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x646 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x29C7 PUSH2 0x29C2 PUSH2 0x29CE SWAP3 PUSH2 0x2993 JUMP JUMPDEST PUSH2 0x29AF JUMP JUMPDEST DUP3 SLOAD PUSH2 0x297D JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x8 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x29E5 PUSH2 0xFF00 SWAP2 PUSH2 0x29D2 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2A04 PUSH2 0x29FF PUSH2 0x2A0B SWAP3 PUSH2 0x1716 JUMP JUMPDEST PUSH2 0x1722 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x29D8 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP2 SWAP1 SWAP5 SWAP3 CALLER PUSH2 0x2A46 PUSH2 0x2A40 PUSH32 0x0 PUSH2 0x36A JUMP JUMPDEST SWAP2 PUSH2 0x36A JUMP JUMPDEST EQ ISZERO DUP1 ISZERO PUSH2 0x2ABB JUMPI JUMPDEST PUSH2 0x2A9E JUMPI PUSH2 0x2A6F PUSH2 0x2A76 SWAP3 PUSH2 0x2A68 PUSH2 0x2A90 SWAP9 PUSH1 0x9 PUSH2 0x158A JUMP JUMPDEST PUSH1 0xA PUSH2 0x158A JUMP JUMPDEST PUSH1 0xB PUSH2 0x29B2 JUMP JUMPDEST PUSH2 0x2A88 PUSH2 0x2A81 PUSH2 0xC16 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x250C JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x2F59 JUMP JUMPDEST PUSH2 0x2A9C PUSH1 0x1 PUSH1 0xB PUSH2 0x29EF JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x2AB7 PUSH1 0x4 DUP3 ADD PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x2AC6 PUSH1 0xB PUSH2 0x2970 JUMP JUMPDEST PUSH2 0x2A4F JUMP JUMPDEST PUSH2 0x2AE3 PUSH1 0x0 PUSH2 0x2AE8 SWAP3 PUSH2 0x2ADC PUSH2 0x106A JUMP JUMPDEST POP ADD PUSH2 0x28EA JUMP JUMPDEST PUSH2 0x2F76 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2AF3 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x2AFD DUP2 PUSH2 0x2F8E JUMP JUMPDEST SWAP1 DUP2 ISZERO PUSH2 0x2B09 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2B13 SWAP2 POP PUSH2 0x2FCE JUMP JUMPDEST CODESIZE PUSH2 0x2B05 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2B30 PUSH2 0x2B2B PUSH2 0x2B35 SWAP3 PUSH2 0x2B19 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2B71 PUSH1 0x17 DUP1 SWAP3 PUSH2 0x2B38 JUMP JUMPDEST PUSH2 0x2B7A DUP2 PUSH2 0x2B3D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2BA3 PUSH2 0x2B9A SWAP3 PUSH1 0x20 SWAP3 PUSH2 0x2B91 DUP2 PUSH2 0x2A4 JUMP JUMPDEST SWAP5 DUP6 DUP1 SWAP4 PUSH2 0x2B38 JUMP JUMPDEST SWAP4 DUP5 SWAP2 ADD PUSH2 0x2B1 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x206973206D697373696E6720726F6C6520000000000000000000000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x2BDB PUSH1 0x11 DUP1 SWAP3 PUSH2 0x2B38 JUMP JUMPDEST PUSH2 0x2BE4 DUP2 PUSH2 0x2BA7 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x2C02 PUSH2 0x2C0D SWAP4 SWAP3 PUSH2 0x2BFC PUSH2 0x2C07 SWAP4 PUSH2 0x2B65 JUMP JUMPDEST SWAP1 PUSH2 0x2B7E JUMP JUMPDEST PUSH2 0x2BCF JUMP JUMPDEST SWAP1 PUSH2 0x2B7E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2C28 PUSH2 0x2C22 DUP4 DUP4 SWAP1 PUSH2 0x1690 JUMP JUMPDEST ISZERO PUSH2 0x237 JUMP JUMPDEST PUSH2 0x2C30 JUMPI POP POP JUMP JUMPDEST PUSH2 0x2CA8 SWAP2 PUSH2 0x2C86 PUSH2 0x2C5F PUSH2 0x2C4F PUSH2 0x2C49 PUSH2 0x2C8B SWAP6 PUSH2 0x3056 JUMP JUMPDEST SWAP4 PUSH2 0x28ED JUMP JUMPDEST PUSH2 0x2C59 PUSH1 0x20 PUSH2 0x2B1C JUMP JUMPDEST SWAP1 PUSH2 0x32E3 JUMP JUMPDEST SWAP2 PUSH2 0x2C77 PUSH2 0x2C6B PUSH2 0x1D3 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD PUSH2 0x2BE8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x2C10 JUMP JUMPDEST PUSH2 0x2C93 PUSH2 0x1D3 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x311 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0x2CC1 PUSH2 0x2CBC PUSH2 0x2CC8 SWAP3 PUSH2 0x1716 JUMP JUMPDEST PUSH2 0x1722 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x297D JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2CE0 PUSH2 0x2CDA DUP3 DUP5 SWAP1 PUSH2 0x1690 JUMP JUMPDEST ISZERO PUSH2 0x237 JUMP JUMPDEST PUSH2 0x2CE9 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x2D0C PUSH1 0x1 PUSH2 0x2D07 PUSH1 0x0 PUSH2 0x2CFF PUSH1 0x5 DUP7 SWAP1 PUSH2 0x10EF JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x1651 JUMP JUMPDEST PUSH2 0x2CAC JUMP JUMPDEST SWAP1 PUSH2 0x2D15 PUSH2 0x1E83 JUMP JUMPDEST SWAP1 PUSH2 0x2D52 PUSH2 0x2D4C PUSH2 0x2D46 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP6 PUSH2 0x10E3 JUMP JUMPDEST SWAP3 PUSH2 0x15C6 JUMP JUMPDEST SWAP3 PUSH2 0x15C6 JUMP JUMPDEST SWAP3 PUSH2 0x2D5B PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x2D65 DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x2CE5 JUMP JUMPDEST PUSH2 0x2D78 SWAP1 PUSH2 0xFCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2D8F PUSH2 0x2D8A PUSH2 0x2D94 SWAP3 PUSH2 0x35F JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2DAB PUSH2 0x2DA6 PUSH2 0x2DB0 SWAP3 PUSH2 0x39A JUMP JUMPDEST PUSH2 0xBF4 JUMP JUMPDEST PUSH2 0x546 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2DE6 PUSH2 0x2DE0 PUSH2 0x2DDB PUSH2 0x2DD6 PUSH1 0x0 PUSH2 0x2DEB SWAP7 PUSH2 0x2DCE PUSH2 0xDD4 JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x2D6F JUMP JUMPDEST PUSH2 0x2D7B JUMP JUMPDEST PUSH2 0x2D97 JUMP JUMPDEST SWAP2 PUSH2 0x28EA JUMP JUMPDEST PUSH2 0x34D9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2DF9 DUP2 DUP4 SWAP1 PUSH2 0x1690 JUMP JUMPDEST PUSH2 0x2E02 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x2E25 PUSH1 0x0 PUSH2 0x2E20 PUSH1 0x0 PUSH2 0x2E18 PUSH1 0x5 DUP7 SWAP1 PUSH2 0x10EF JUMP JUMPDEST ADD DUP6 SWAP1 PUSH2 0x1651 JUMP JUMPDEST PUSH2 0x2CAC JUMP JUMPDEST SWAP1 PUSH2 0x2E2E PUSH2 0x1E83 JUMP JUMPDEST SWAP1 PUSH2 0x2E6B PUSH2 0x2E65 PUSH2 0x2E5F PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP6 PUSH2 0x10E3 JUMP JUMPDEST SWAP3 PUSH2 0x15C6 JUMP JUMPDEST SWAP3 PUSH2 0x15C6 JUMP JUMPDEST SWAP3 PUSH2 0x2E74 PUSH2 0x1D3 JUMP JUMPDEST DUP1 PUSH2 0x2E7E DUP2 PUSH2 0x444 JUMP JUMPDEST SUB SWAP1 LOG4 CODESIZE DUP1 PUSH2 0x2DFE JUMP JUMPDEST SWAP1 PUSH2 0x2EBB PUSH2 0x2EB5 PUSH2 0x2EB0 PUSH2 0x2EAB PUSH1 0x0 PUSH2 0x2EC0 SWAP7 PUSH2 0x2EA3 PUSH2 0xDD4 JUMP JUMPDEST POP ADD SWAP5 PUSH2 0x2D6F JUMP JUMPDEST PUSH2 0x2D7B JUMP JUMPDEST PUSH2 0x2D97 JUMP JUMPDEST SWAP2 PUSH2 0x28EA JUMP JUMPDEST PUSH2 0x35BE JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x2EF1 DUP2 PUSH2 0x2ED9 JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x2F0C JUMPI PUSH2 0x2F03 PUSH1 0x1 SWAP2 PUSH2 0x2EDD JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2EC3 JUMP JUMPDEST PUSH2 0x2F21 SWAP1 PUSH1 0x8 PUSH2 0x2F26 SWAP4 MUL PUSH2 0x148D JUMP JUMPDEST PUSH2 0x1107 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2F34 SWAP2 SLOAD PUSH2 0x2F11 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F56 SWAP2 PUSH1 0x0 PUSH2 0x2F50 SWAP3 PUSH2 0x2F49 PUSH2 0x10DE JUMP JUMPDEST POP ADD PUSH2 0x2EE8 JUMP JUMPDEST SWAP1 PUSH2 0x2F29 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x2F6F PUSH2 0x2F74 SWAP4 SWAP3 PUSH2 0x2F6A PUSH2 0xF8A JUMP JUMPDEST PUSH2 0x250C JUMP JUMPDEST PUSH2 0x36C8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F8B SWAP2 PUSH2 0x2F84 PUSH2 0x106A JUMP JUMPDEST POP ADD PUSH2 0x2ED9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F96 PUSH2 0xDD4 JUMP JUMPDEST POP DUP1 PUSH2 0x2FB1 PUSH2 0x2FAB PUSH4 0x5A05180F PUSH1 0xE0 SHL PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x2FBE JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2FC8 SWAP2 POP PUSH2 0x36E8 JUMP JUMPDEST CODESIZE PUSH2 0x2FBA JUMP JUMPDEST PUSH2 0x2FD6 PUSH2 0xDD4 JUMP JUMPDEST POP DUP1 PUSH2 0x2FF1 PUSH2 0x2FEB PUSH4 0x4E821D33 PUSH1 0xE1 SHL PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x2FFE JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3008 SWAP2 POP PUSH2 0x2F8E JUMP JUMPDEST CODESIZE PUSH2 0x2FFA JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3025 PUSH2 0x3020 PUSH2 0x302A SWAP3 PUSH2 0x300E JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x646 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3037 PUSH1 0x14 PUSH2 0x3011 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x304E PUSH2 0x3049 PUSH2 0x3053 SWAP3 PUSH2 0x646 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3073 PUSH2 0x306E PUSH2 0x3089 SWAP3 PUSH2 0x3068 PUSH2 0xE2F JUMP JUMPDEST POP PUSH2 0x2D6F JUMP JUMPDEST PUSH2 0x2D7B JUMP JUMPDEST PUSH2 0x3083 PUSH2 0x307E PUSH2 0x302D JUMP JUMPDEST PUSH2 0x303A JUMP JUMPDEST SWAP1 PUSH2 0x32E3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30A3 PUSH2 0x309E PUSH2 0x30A8 SWAP3 PUSH2 0x308C JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x30BA PUSH2 0x30C0 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x39A JUMP JUMPDEST SWAP3 PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x30CC DUP4 DUP3 MUL PUSH2 0x39A JUMP JUMPDEST SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x30DB JUMPI JUMP JUMPDEST PUSH2 0x129D JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x30FE JUMPI PUSH2 0x30FA PUSH1 0x20 SWAP2 PUSH2 0x2D6 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x79E JUMP JUMPDEST SWAP1 PUSH2 0x3115 PUSH2 0x3110 DUP4 PUSH2 0x30E0 JUMP JUMPDEST PUSH2 0x7DD JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST CALLDATASIZE SWAP1 CALLDATACOPY JUMP JUMPDEST SWAP1 PUSH2 0x3144 PUSH2 0x312C DUP4 PUSH2 0x3103 JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP1 PUSH2 0x313A DUP7 SWAP4 PUSH2 0x30E0 JUMP JUMPDEST SWAP3 ADD SWAP2 SUB SWAP1 PUSH2 0x311A JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x3 PUSH1 0xFC SHL SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x315C DUP3 PUSH2 0x314E JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x316E JUMPI PUSH1 0x1 PUSH1 0x20 SWAP2 MUL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x2EC3 JUMP JUMPDEST PUSH2 0x3187 PUSH2 0x3182 PUSH2 0x318C SWAP3 PUSH2 0xBF1 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xF PUSH1 0xFB SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x31AE PUSH2 0x31A9 PUSH2 0x31B3 SWAP3 PUSH2 0x3197 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x31BF SWAP1 PUSH2 0x39A JUMP JUMPDEST PUSH1 0x0 DUP2 EQ PUSH2 0x31CE JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH2 0x129D JUMP JUMPDEST PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 JUMP JUMPDEST PUSH2 0x31F2 PUSH2 0x31D3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x320C PUSH2 0x3207 PUSH2 0x3211 SWAP3 PUSH2 0x31F5 JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xF8 SHL SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3231 PUSH2 0x322C PUSH2 0x3236 SWAP3 PUSH2 0x321A JUMP JUMPDEST PUSH2 0xFC9 JUMP JUMPDEST PUSH2 0x646 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3258 SWAP1 PUSH2 0x3252 PUSH2 0x324C PUSH2 0x325D SWAP5 PUSH2 0x646 JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST SWAP1 PUSH2 0x148D JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x3294 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x2A8 JUMP JUMPDEST PUSH2 0x329D DUP2 PUSH2 0x3260 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x32B7 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x3288 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x32C1 JUMPI JUMP JUMPDEST PUSH2 0x32C9 PUSH2 0x1D3 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x32DF PUSH1 0x4 DUP3 ADD PUSH2 0x32A1 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH2 0x32ED PUSH2 0xE2F JUMP JUMPDEST POP PUSH2 0x3387 PUSH2 0x3377 PUSH2 0x3323 PUSH2 0x331E PUSH2 0x330E PUSH1 0x2 PUSH2 0x3309 DUP8 SWAP2 PUSH2 0x308F JUMP JUMPDEST PUSH2 0x30AB JUMP JUMPDEST PUSH2 0x3318 PUSH1 0x2 PUSH2 0x308F JUMP JUMPDEST SWAP1 PUSH2 0x12B3 JUMP JUMPDEST PUSH2 0x311F JUMP JUMPDEST SWAP3 PUSH2 0x332C PUSH2 0x3146 JUMP JUMPDEST PUSH2 0x3345 DUP6 PUSH2 0x333F PUSH1 0x0 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x3173 JUMP JUMPDEST SWAP1 PUSH2 0x3152 JUMP JUMPDEST MSTORE8 PUSH2 0x334E PUSH2 0x318F JUMP JUMPDEST PUSH2 0x3367 DUP6 PUSH2 0x3361 PUSH1 0x1 SWAP4 PUSH1 0x0 BYTE SWAP4 PUSH2 0x319A JUMP JUMPDEST SWAP1 PUSH2 0x3152 JUMP JUMPDEST MSTORE8 PUSH2 0x3372 PUSH1 0x2 PUSH2 0x308F JUMP JUMPDEST PUSH2 0x30AB JUMP JUMPDEST PUSH2 0x3381 PUSH1 0x1 PUSH2 0x319A JUMP JUMPDEST SWAP1 PUSH2 0x12B3 JUMP JUMPDEST SWAP3 JUMPDEST DUP4 PUSH2 0x339D PUSH2 0x3397 PUSH1 0x1 PUSH2 0x319A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST GT ISZERO PUSH2 0x3404 JUMPI PUSH2 0x33AB PUSH2 0x31EA JUMP JUMPDEST DUP2 PUSH2 0x33B6 PUSH1 0xF PUSH2 0x31F8 JUMP JUMPDEST AND SWAP2 PUSH1 0x10 DUP4 LT ISZERO PUSH2 0x33FF JUMPI PUSH2 0x33D2 PUSH2 0x33F3 SWAP3 PUSH2 0x33F9 SWAP5 BYTE PUSH2 0x3214 JUMP JUMPDEST PUSH2 0x33E2 DUP6 SWAP2 DUP9 SWAP1 PUSH1 0x0 BYTE SWAP3 PUSH2 0x3152 JUMP JUMPDEST MSTORE8 PUSH2 0x33ED PUSH1 0x4 PUSH2 0x321D JUMP JUMPDEST SWAP1 PUSH2 0x3239 JUMP JUMPDEST SWAP4 PUSH2 0x31B6 JUMP JUMPDEST SWAP3 PUSH2 0x3389 JUMP JUMPDEST PUSH2 0x2EC3 JUMP JUMPDEST PUSH2 0x342C SWAP3 SWAP4 POP PUSH2 0x3427 SWAP1 PUSH2 0x3421 PUSH2 0x341B PUSH1 0x0 PUSH2 0x3173 JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST EQ PUSH2 0x32BA JUMP JUMPDEST PUSH2 0x2C10 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x344A DUP2 PUSH2 0x343D JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x3465 JUMPI PUSH2 0x345C PUSH1 0x1 SWAP2 PUSH2 0x3432 JUMP JUMPDEST SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2EC3 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3480 PUSH2 0x347B PUSH2 0x3488 SWAP4 PUSH2 0x10E3 JUMP JUMPDEST PUSH2 0x1DD7 JUMP JUMPDEST SWAP1 DUP4 SLOAD PUSH2 0x139B JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST SWAP1 DUP2 SLOAD SWAP2 PUSH9 0x10000000000000000 DUP4 LT ISZERO PUSH2 0x34BC JUMPI DUP3 PUSH2 0x34B4 SWAP2 PUSH1 0x1 PUSH2 0x34BA SWAP6 ADD DUP2 SSTORE PUSH2 0x3441 JUMP JUMPDEST SWAP1 PUSH2 0x346A JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x79E JUMP JUMPDEST SWAP1 PUSH2 0x34CB SWAP1 PUSH2 0x10E3 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x34E1 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x34F6 PUSH2 0x34F0 DUP3 DUP5 SWAP1 PUSH2 0x3728 JUMP JUMPDEST ISZERO PUSH2 0x237 JUMP JUMPDEST PUSH1 0x0 EQ PUSH2 0x3539 JUMPI PUSH2 0x352F PUSH2 0x3534 SWAP3 PUSH2 0x351A PUSH2 0x3513 PUSH1 0x0 DUP6 ADD PUSH2 0x342F JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x348C JUMP JUMPDEST PUSH1 0x1 PUSH2 0x3528 PUSH1 0x0 DUP6 ADD PUSH2 0x2ED9 JUMP JUMPDEST SWAP4 ADD PUSH2 0x34C1 JUMP JUMPDEST PUSH2 0x200C JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x354F PUSH2 0x3555 SWAP2 SWAP4 SWAP3 SWAP4 PUSH2 0x39A JUMP JUMPDEST SWAP3 PUSH2 0x39A JUMP JUMPDEST DUP3 SUB SWAP2 DUP3 GT PUSH2 0x3560 JUMPI JUMP JUMPDEST PUSH2 0x129D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x358D SWAP2 PUSH2 0x3587 PUSH2 0x10DE JUMP JUMPDEST SWAP2 PUSH2 0x346A JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3598 DUP2 PUSH2 0x343D JUMP JUMPDEST DUP1 ISZERO PUSH2 0x35B9 JUMPI PUSH1 0x1 SWAP1 SUB SWAP1 PUSH2 0x35B6 PUSH2 0x35B0 DUP4 DUP4 PUSH2 0x3441 JUMP JUMPDEST SWAP1 PUSH2 0x357B JUMP JUMPDEST SSTORE JUMP JUMPDEST PUSH2 0x3565 JUMP JUMPDEST PUSH2 0x35C6 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x35DD PUSH2 0x35D8 PUSH1 0x1 DUP4 ADD DUP5 SWAP1 PUSH2 0x34C1 JUMP JUMPDEST PUSH2 0x108C JUMP JUMPDEST SWAP1 DUP2 PUSH2 0x35F2 PUSH2 0x35EC PUSH1 0x0 PUSH2 0x3173 JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST EQ ISZERO PUSH1 0x0 EQ PUSH2 0x36C0 JUMPI PUSH2 0x3672 SWAP3 PUSH1 0x1 PUSH2 0x366D SWAP3 DUP5 PUSH2 0x361B PUSH1 0x0 SWAP7 PUSH2 0x3615 DUP6 PUSH2 0x319A JUMP JUMPDEST SWAP1 PUSH2 0x3540 JUMP JUMPDEST PUSH2 0x3638 PUSH2 0x3629 DUP9 DUP6 ADD PUSH2 0x2ED9 JUMP JUMPDEST PUSH2 0x3632 DUP7 PUSH2 0x319A JUMP JUMPDEST SWAP1 PUSH2 0x3540 JUMP JUMPDEST DUP1 PUSH2 0x364B PUSH2 0x3645 DUP5 PUSH2 0x39A JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST SUB PUSH2 0x3677 JUMPI JUMPDEST POP POP POP PUSH2 0x3667 PUSH2 0x3662 DUP7 DUP4 ADD PUSH2 0x342F JUMP JUMPDEST PUSH2 0x358F JUMP JUMPDEST ADD PUSH2 0x34C1 JUMP JUMPDEST PUSH2 0x1402 JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x36B8 SWAP3 PUSH2 0x36AA PUSH2 0x3696 PUSH2 0x3690 PUSH2 0x36B3 SWAP5 DUP13 DUP10 ADD PUSH2 0x2EE8 JUMP JUMPDEST SWAP1 PUSH2 0x2F29 JUMP JUMPDEST SWAP4 PUSH2 0x36A4 DUP6 SWAP2 DUP13 DUP10 ADD PUSH2 0x2EE8 JUMP JUMPDEST SWAP1 PUSH2 0x346A JUMP JUMPDEST SWAP2 DUP6 DUP6 ADD PUSH2 0x34C1 JUMP JUMPDEST PUSH2 0x200C JUMP JUMPDEST CODESIZE DUP1 DUP1 PUSH2 0x3651 JUMP JUMPDEST POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x36DF PUSH2 0x36D8 PUSH2 0x36E6 SWAP4 PUSH2 0xFF4 JUMP JUMPDEST PUSH1 0x7 PUSH2 0x102A JUMP JUMPDEST PUSH1 0x8 PUSH2 0x1DE3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x36F0 PUSH2 0xDD4 JUMP JUMPDEST POP DUP1 PUSH2 0x370B PUSH2 0x3705 PUSH4 0x7965DB0B PUSH1 0xE0 SHL PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ SWAP1 DUP2 ISZERO PUSH2 0x3718 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x3722 SWAP2 POP PUSH2 0x375E JUMP JUMPDEST CODESIZE PUSH2 0x3714 JUMP JUMPDEST PUSH2 0x3746 SWAP2 PUSH1 0x1 PUSH2 0x3741 SWAP3 PUSH2 0x373A PUSH2 0xDD4 JUMP JUMPDEST POP ADD PUSH2 0x34C1 JUMP JUMPDEST PUSH2 0x108C JUMP JUMPDEST PUSH2 0x3759 PUSH2 0x3753 PUSH1 0x0 PUSH2 0x3173 JUMP JUMPDEST SWAP2 PUSH2 0x39A JUMP JUMPDEST EQ ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x3766 PUSH2 0xDD4 JUMP JUMPDEST POP PUSH2 0x3780 PUSH2 0x377A PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH2 0x1E8 JUMP JUMPDEST SWAP2 PUSH2 0x1E8 JUMP JUMPDEST EQ SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE SLOAD 0xAC DUP14 0xDC 0xA7 RETURNDATASIZE CREATE PUSH31 0xFE925C9789862CCBC82A4159F335F2A7D7EBC0D6F5098764736F6C63430008 SHL STOP CALLER PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x2F JUMPI PUSH2 0x19 PUSH2 0x14 PUSH2 0xFA JUMP JUMPDEST PUSH2 0x11B JUMP JUMPDEST PUSH2 0x21 PUSH2 0x34 JUMP JUMPDEST PUSH2 0x722 PUSH2 0x380 DUP3 CODECOPY PUSH2 0x722 SWAP1 RETURN JUMPDEST PUSH2 0x3A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x69 SWAP1 PUSH2 0x3F JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x81 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x49 JUMP JUMPDEST SWAP1 PUSH2 0x99 PUSH2 0x92 PUSH2 0x34 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x5F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xB4 SWAP1 PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC0 DUP2 PUSH2 0xAB JUMP JUMPDEST SUB PUSH2 0xC7 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0xD9 DUP3 PUSH2 0xB7 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xF5 JUMPI PUSH2 0xF2 SWAP2 PUSH1 0x0 ADD PUSH2 0xCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9B JUMP JUMPDEST PUSH2 0x118 PUSH2 0xAA2 DUP1 CODESIZE SUB DUP1 PUSH2 0x10D DUP2 PUSH2 0x86 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD SWAP1 PUSH2 0xDB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x12C SWAP1 PUSH2 0x127 PUSH2 0x12E JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x13E PUSH2 0x139 PUSH2 0x291 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6E206973206E6F74206120636F6E747261637400000000000000000000000000 SWAP2 PUSH32 0x5570677261646561626C65426561636F6E3A20696D706C656D656E746174696F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1A4 PUSH1 0x33 PUSH1 0x40 SWAP3 PUSH2 0x140 JUMP JUMPDEST PUSH2 0x1AD DUP2 PUSH2 0x149 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1C7 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x197 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1D1 JUMPI JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x34 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1EF PUSH1 0x4 DUP3 ADD PUSH2 0x1B1 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x20A PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x1F3 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x22B PUSH2 0x226 PUSH2 0x230 SWAP3 PUSH2 0xA0 JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH2 0xA0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x23C SWAP1 PUSH2 0x217 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x248 SWAP1 PUSH2 0x233 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x263 PUSH2 0x25E PUSH2 0x26A SWAP3 PUSH2 0x23F JUMP JUMPDEST PUSH2 0x24B JUMP JUMPDEST DUP3 SLOAD PUSH2 0x1F9 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x28A SWAP1 PUSH2 0x283 PUSH2 0x27E DUP3 PUSH2 0x35E JUMP JUMPDEST PUSH2 0x1CA JUMP JUMPDEST PUSH1 0x1 PUSH2 0x24E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x299 PUSH2 0x28C JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2BB PUSH2 0x2C0 SWAP2 PUSH2 0x29E JUMP JUMPDEST PUSH2 0x2A4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2CD SWAP1 SLOAD PUSH2 0x2AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH1 0x0 PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x2EB DUP3 PUSH1 0x0 PUSH2 0x24E JUMP JUMPDEST SWAP1 PUSH2 0x31F PUSH2 0x319 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x23F JUMP JUMPDEST SWAP2 PUSH2 0x23F JUMP JUMPDEST SWAP2 PUSH2 0x328 PUSH2 0x34 JUMP JUMPDEST DUP1 PUSH2 0x332 DUP2 PUSH2 0x2D0 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x351 PUSH2 0x35B SWAP3 PUSH2 0x33F JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH2 0x33C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x366 PUSH2 0x337 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x37B PUSH2 0x375 PUSH1 0x0 PUSH2 0x342 JUMP JUMPDEST SWAP2 PUSH2 0x33C JUMP JUMPDEST GT SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x219 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x6D JUMP JUMPDEST DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x68 JUMPI DUP1 PUSH4 0x5C60DA1B EQ PUSH2 0x63 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x5E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x59 JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x1E6 JUMP JUMPDEST PUSH2 0x1B1 JUMP JUMPDEST PUSH2 0x17E JUMP JUMPDEST PUSH2 0x149 JUMP JUMPDEST PUSH2 0xE3 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x97 SWAP1 PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA3 DUP2 PUSH2 0x8E JUMP JUMPDEST SUB PUSH2 0xAA JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xBC DUP3 PUSH2 0x9A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xD8 JUMPI PUSH2 0xD5 SWAP2 PUSH1 0x0 ADD PUSH2 0xAF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x111 JUMPI PUSH2 0xFB PUSH2 0xF6 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x2B3 JUMP JUMPDEST PUSH2 0x103 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x10D DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x121 JUMPI JUMP JUMPDEST PUSH2 0x7E JUMP JUMPDEST PUSH2 0x12F SWAP1 PUSH2 0x8E JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x147 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x126 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x179 JUMPI PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x175 PUSH2 0x164 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x16C PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1AC JUMPI PUSH2 0x18E CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x35C JUMP JUMPDEST PUSH2 0x19E PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x1A8 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x1E1 JUMPI PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x116 JUMP JUMPDEST PUSH2 0x1DD PUSH2 0x1CC PUSH2 0x366 JUMP JUMPDEST PUSH2 0x1D4 PUSH2 0x73 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x133 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH2 0x1FE PUSH2 0x1F9 CALLDATASIZE PUSH1 0x4 PUSH2 0xBE JUMP JUMPDEST PUSH2 0x473 JUMP JUMPDEST PUSH2 0x206 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x210 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x22F SWAP1 PUSH2 0x22A PUSH2 0x501 JUMP JUMPDEST PUSH2 0x268 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x248 PUSH2 0x243 PUSH2 0x24D SWAP3 PUSH2 0x83 JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x259 SWAP1 PUSH2 0x234 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x265 SWAP1 PUSH2 0x250 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x271 DUP2 PUSH2 0x61B JUMP JUMPDEST PUSH2 0x29B PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP1 PUSH2 0x2A4 PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x2AE DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH2 0x2BC SWAP1 PUSH2 0x21E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x2E5 SWAP2 PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x2C9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2F2 SWAP1 SLOAD PUSH2 0x2D4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x2FD PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x308 PUSH1 0x1 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x313 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x31B PUSH2 0x348 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x334 PUSH2 0x32F PUSH2 0x339 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x83 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x345 SWAP1 PUSH2 0x320 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x35A PUSH2 0x355 PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x364 PUSH2 0x30B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x36E PUSH2 0x2BE JUMP JUMPDEST POP PUSH2 0x379 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x38D SWAP1 PUSH2 0x388 PUSH2 0x501 JUMP JUMPDEST PUSH2 0x442 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x3FC DUP2 PUSH2 0x398 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x416 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x3E6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x420 JUMPI JUMP JUMPDEST PUSH2 0x428 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x43E PUSH1 0x4 DUP3 ADD PUSH2 0x400 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x471 SWAP1 PUSH2 0x46C DUP2 PUSH2 0x465 PUSH2 0x45F PUSH2 0x45A PUSH1 0x0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ ISZERO PUSH2 0x419 JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x47C SWAP1 PUSH2 0x37C JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x4B2 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x4BB DUP2 PUSH2 0x47E JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x4D5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x4A6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x4DF JUMPI JUMP JUMPDEST PUSH2 0x4E7 PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x4FD PUSH1 0x4 DUP3 ADD PUSH2 0x4BF JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x52B PUSH2 0x50C PUSH2 0x366 JUMP JUMPDEST PUSH2 0x525 PUSH2 0x51F PUSH2 0x51A PUSH2 0x69A JUMP JUMPDEST PUSH2 0x8E JUMP JUMPDEST SWAP2 PUSH2 0x8E JUMP JUMPDEST EQ PUSH2 0x4D8 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6E206973206E6F74206120636F6E747261637400000000000000000000000000 SWAP2 PUSH32 0x5570677261646561626C65426561636F6E3A20696D706C656D656E746174696F PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x588 PUSH1 0x33 PUSH1 0x40 SWAP3 PUSH2 0x38F JUMP JUMPDEST PUSH2 0x591 DUP2 PUSH2 0x52D JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x5AB SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x57B JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5B5 JUMPI JUMP JUMPDEST PUSH2 0x5BD PUSH2 0x73 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x5D3 PUSH1 0x4 DUP3 ADD PUSH2 0x595 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x5EE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x5D7 JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x610 PUSH2 0x60B PUSH2 0x617 SWAP3 PUSH2 0x25C JUMP JUMPDEST PUSH2 0x5F8 JUMP JUMPDEST DUP3 SLOAD PUSH2 0x5DD JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x637 SWAP1 PUSH2 0x630 PUSH2 0x62B DUP3 PUSH2 0x6CB JUMP JUMPDEST PUSH2 0x5AE JUMP JUMPDEST PUSH1 0x1 PUSH2 0x5FB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x643 PUSH1 0x0 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0x64E DUP3 PUSH1 0x0 PUSH2 0x5FB JUMP JUMPDEST SWAP1 PUSH2 0x682 PUSH2 0x67C PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x25C JUMP JUMPDEST SWAP2 PUSH2 0x68B PUSH2 0x73 JUMP JUMPDEST DUP1 PUSH2 0x695 DUP2 PUSH2 0xDD JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST PUSH2 0x6A2 PUSH2 0x2BE JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C3 PUSH2 0x6BE PUSH2 0x6C8 SWAP3 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x231 JUMP JUMPDEST PUSH2 0x6AC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6D3 PUSH2 0x6A7 JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x6E8 PUSH2 0x6E2 PUSH1 0x0 PUSH2 0x6AF JUMP JUMPDEST SWAP2 PUSH2 0x6AC JUMP JUMPDEST GT SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH 0xBF SWAP5 0xB3 0xAA XOR 0x2E PUSH18 0x20F7EE578F52EECCE106FBE2A323E7E4F151 SAR SWAP16 0x27 PUSH23 0x8EAD64736F6C634300081B003300000000000000000000 ",
              "sourceMap": "335:1670:37:-:0;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;534:170::-;;;:::i;:::-;610:16;;:::i;:::-;;;;;;;335:1670;;;;;610:16;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;669:13;684:12;592:34;669:13;:::i;:::-;684:12;:::i;:::-;534:170::o;610:16::-;;:::i;:::-;;:::i;689:2159:30:-;;;:::i;:::-;:::o;912:63:4:-;955:12;;;:::i;:::-;;:::i;:::-;912:63::o;335:1670:37:-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;961:189:30:-;1056:37;;:::i;:::-;;;;;;;;335:1670:37;;;;;1056:37:30;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;1047:46;1130:12;1047:46;;;:::i;:::-;1130:12;:::i;:::-;961:189::o;1056:37::-;;:::i;:::-;;:::i;335:1670:37:-;;;:::o;640:96:15:-;693:7;;:::i;:::-;719:10;;712:17;:::o;335:1670:37:-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;2426:187:4:-;2518:6;;;:::i;:::-;2534:17;2543:8;2534:17;;:::i;:::-;2597:8;2566:40;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;2426:187::o"
            },
            "deployedBytecode": {
              "functionDebugData": {
                "abi_decode": {
                  "entryPoint": 315,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_address": {
                  "entryPoint": 212,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_addresst_addresst_stringt_stringt_uint8t_addresst_bytes32": {
                  "entryPoint": 915,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 7
                },
                "abi_decode_available_length_string": {
                  "entryPoint": 745,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "abi_decode_bytes32": {
                  "entryPoint": 900,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_fromMemory": {
                  "entryPoint": 1409,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_decode_string": {
                  "entryPoint": 799,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_tuple_address": {
                  "entryPoint": 227,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_decode_uint8": {
                  "entryPoint": 861,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_address": {
                  "entryPoint": 1076,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_address_address_bytes": {
                  "entryPoint": 3575,
                  "id": null,
                  "parameterSlots": 4,
                  "returnSlots": 1
                },
                "abi_encode_address_string_string_uint8_address_bytes32": {
                  "entryPoint": 1821,
                  "id": null,
                  "parameterSlots": 7,
                  "returnSlots": 1
                },
                "abi_encode_address_to_address_nonPadded_inplace": {
                  "entryPoint": 3155,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes": {
                  "entryPoint": 3181,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_bytes32": {
                  "entryPoint": 3104,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes32_to_bytes32": {
                  "entryPoint": 1808,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_bytes_memory_ptr": {
                  "entryPoint": 3526,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_contract_UpgradeableBeacon": {
                  "entryPoint": 468,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_contract_UpgradeableBeacon_to_address": {
                  "entryPoint": 455,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "abi_encode_packed_bytes32_address_address_bytes": {
                  "entryPoint": 3222,
                  "id": null,
                  "parameterSlots": 5,
                  "returnSlots": 1
                },
                "abi_encode_string": {
                  "entryPoint": 1746,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral": {
                  "entryPoint": 2814,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_1247": {
                  "entryPoint": 4177,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_245f": {
                  "entryPoint": 2597,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_8714": {
                  "entryPoint": 4308,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_9924": {
                  "entryPoint": 2789,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f94f": {
                  "entryPoint": 4071,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_stringliteral_f94f9c62541b73155a9def26a7988ac5579c2c6b698df8f608ced5572b7d72ca": {
                  "entryPoint": 4045,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple": {
                  "entryPoint": 258,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_address": {
                  "entryPoint": 1089,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral": {
                  "entryPoint": 4334,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_1247": {
                  "entryPoint": 4202,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_tuple_stringliteral_245f": {
                  "entryPoint": 2623,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "abi_encode_uint8": {
                  "entryPoint": 1795,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "allocate_memory": {
                  "entryPoint": 677,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_memory_array_string": {
                  "entryPoint": 1932,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "allocate_unbounded": {
                  "entryPoint": 147,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "array_allocation_size_string": {
                  "entryPoint": 698,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_dataslot_bytes": {
                  "entryPoint": 1922,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_bytes": {
                  "entryPoint": 1928,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_length_string": {
                  "entryPoint": 1696,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_bytes": {
                  "entryPoint": 3517,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_bytes_nonPadded_inplace": {
                  "entryPoint": 3176,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "array_storeLengthForEncoding_string": {
                  "entryPoint": 1700,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "cleanup_address": {
                  "entryPoint": 179,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_bytes32": {
                  "entryPoint": 876,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_address": {
                  "entryPoint": 2081,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_from_storage_contract_UpgradeableBeacon": {
                  "entryPoint": 335,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_rational_by": {
                  "entryPoint": 1618,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint160": {
                  "entryPoint": 168,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint256": {
                  "entryPoint": 3426,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "cleanup_uint8": {
                  "entryPoint": 834,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_payable_to_contract_ITransparentUpgradeableBeaconProxy": {
                  "entryPoint": 3493,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address": {
                  "entryPoint": 2957,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_address_payable": {
                  "entryPoint": 3469,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_address_to_contract_ERC20Items": {
                  "entryPoint": 2159,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_Create2_to_address": {
                  "entryPoint": 3960,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_ERC20Items_to_address": {
                  "entryPoint": 2171,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_ITransparentUpgradeableBeaconProxy_to_address": {
                  "entryPoint": 3505,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_contract_UpgradeableBeacon_to_address": {
                  "entryPoint": 443,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_address": {
                  "entryPoint": 1649,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint160": {
                  "entryPoint": 1621,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_rational_by_to_uint256": {
                  "entryPoint": 3429,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_stringliteral_c5d2_to_bytes": {
                  "entryPoint": 1968,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "convert_uint160_to_address": {
                  "entryPoint": 431,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_address_payable": {
                  "entryPoint": 3457,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_ERC20Items": {
                  "entryPoint": 2147,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_contract_ITransparentUpgradeableBeaconProxy": {
                  "entryPoint": 3481,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "convert_uint160_to_uint160": {
                  "entryPoint": 403,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "copy_calldata_to_memory_with_cleanup": {
                  "entryPoint": 733,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "copy_literal_to_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470": {
                  "entryPoint": 1955,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "copy_memory_to_memory_with_cleanup": {
                  "entryPoint": 1709,
                  "id": null,
                  "parameterSlots": 3,
                  "returnSlots": 0
                },
                "external_fun_beacon": {
                  "entryPoint": 490,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_deploy": {
                  "entryPoint": 1224,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_determineAddress": {
                  "entryPoint": 1111,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_owner": {
                  "entryPoint": 1171,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_renounceOwnership": {
                  "entryPoint": 543,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_transferOwnership": {
                  "entryPoint": 1284,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "external_fun_upgradeBeacon": {
                  "entryPoint": 264,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "extract_from_storage_value_dynamict_contract_UpgradeableBeacon": {
                  "entryPoint": 346,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_address": {
                  "entryPoint": 2092,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "extract_from_storage_value_offsett_contract_UpgradeableBeacon": {
                  "entryPoint": 1365,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "finalize_allocation": {
                  "entryPoint": 636,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "fun__transferOwnership": {
                  "entryPoint": 3004,
                  "id": 650,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_checkOwner": {
                  "entryPoint": 2880,
                  "id": 593,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_computeAddress": {
                  "entryPoint": 3972,
                  "id": 2231,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "fun_computeAddress_2245": {
                  "entryPoint": 4537,
                  "id": 2245,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_computeProxyAddress": {
                  "entryPoint": 3276,
                  "id": 5771,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_createProxy": {
                  "entryPoint": 3628,
                  "id": 5728,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_deploy": {
                  "entryPoint": 2183,
                  "id": 6749,
                  "parameterSlots": 7,
                  "returnSlots": 1
                },
                "fun_deploy_2211": {
                  "entryPoint": 4400,
                  "id": 2211,
                  "parameterSlots": 3,
                  "returnSlots": 1
                },
                "fun_determineAddress": {
                  "entryPoint": 1979,
                  "id": 6790,
                  "parameterSlots": 7,
                  "returnSlots": 1
                },
                "fun_msgSender": {
                  "entryPoint": 3947,
                  "id": 2155,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_owner": {
                  "entryPoint": 2125,
                  "id": 579,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "fun_renounceOwnership": {
                  "entryPoint": 1681,
                  "id": 607,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_renounceOwnership_inner": {
                  "entryPoint": 1661,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "fun_transferOwnership": {
                  "entryPoint": 2738,
                  "id": 630,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_transferOwnership_inner": {
                  "entryPoint": 2689,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeBeacon": {
                  "entryPoint": 1589,
                  "id": 5786,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "fun_upgradeBeacon_inner": {
                  "entryPoint": 1442,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "getter_fun_beacon": {
                  "entryPoint": 384,
                  "id": 5646,
                  "parameterSlots": 0,
                  "returnSlots": 1
                },
                "identity": {
                  "entryPoint": 400,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "leftAlign_address": {
                  "entryPoint": 3143,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "leftAlign_bytes32": {
                  "entryPoint": 3101,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "leftAlign_uint160": {
                  "entryPoint": 3131,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "modifier_onlyOwner": {
                  "entryPoint": 1340,
                  "id": 570,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "modifier_onlyOwner_597": {
                  "entryPoint": 1600,
                  "id": 570,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "modifier_onlyOwner_613": {
                  "entryPoint": 2500,
                  "id": 570,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "panic_error_0x41": {
                  "entryPoint": 614,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "prepare_store_address": {
                  "entryPoint": 2969,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_dynamic_contract_UpgradeableBeacon": {
                  "entryPoint": 370,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_address": {
                  "entryPoint": 2112,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "read_from_storage_split_offset_contract_UpgradeableBeacon": {
                  "entryPoint": 1385,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "require_helper_stringliteral": {
                  "entryPoint": 4227,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_245f": {
                  "entryPoint": 2648,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_8714": {
                  "entryPoint": 4359,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_9924": {
                  "entryPoint": 2839,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "require_helper_stringliteral_f94f": {
                  "entryPoint": 4096,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20": {
                  "entryPoint": 1398,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
                  "entryPoint": 594,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74": {
                  "entryPoint": 1335,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
                  "entryPoint": 599,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
                  "entryPoint": 163,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb": {
                  "entryPoint": 153,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
                  "entryPoint": 158,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "revert_forward": {
                  "entryPoint": 1425,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 0
                },
                "round_up_to_mul_of": {
                  "entryPoint": 604,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left": {
                  "entryPoint": 2924,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_224": {
                  "entryPoint": 1403,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_left_96": {
                  "entryPoint": 3125,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_0_unsigned": {
                  "entryPoint": 1359,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned": {
                  "entryPoint": 141,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 1
                },
                "shift_right_unsigned_dynamic": {
                  "entryPoint": 331,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "store_literal_in_memory_124767115c09b0dd37c31c42ddb030d84459c933a30879cc32c4c922ae5928f0": {
                  "entryPoint": 4137,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe": {
                  "entryPoint": 2519,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_87142438d464a3cd804331cca8480b31569380ef25d1f39b80404975699f0676": {
                  "entryPoint": 4268,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe": {
                  "entryPoint": 2749,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "store_literal_in_memory_f94f9c62541b73155a9def26a7988ac5579c2c6b698df8f608ced5572b7d72ca": {
                  "entryPoint": 4005,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "update_byte_slice_shift": {
                  "entryPoint": 2930,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 1
                },
                "update_storage_value_offsett_address_to_address": {
                  "entryPoint": 2972,
                  "id": null,
                  "parameterSlots": 2,
                  "returnSlots": 0
                },
                "validator_revert_address": {
                  "entryPoint": 191,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_bytes32": {
                  "entryPoint": 879,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "validator_revert_uint8": {
                  "entryPoint": 840,
                  "id": null,
                  "parameterSlots": 1,
                  "returnSlots": 0
                },
                "zero_value_for_split_address": {
                  "entryPoint": 1691,
                  "id": null,
                  "parameterSlots": 0,
                  "returnSlots": 1
                }
              },
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "60806040526004361015610013575b610537565b61001e60003561008d565b80631bce45831461008857806359659e9014610083578063715018a61461007e5780638cfd4e5e146100795780638da5cb5b14610074578063f13b273d1461006f5763f2fde38b0361000e57610504565b6104c8565b610493565b610457565b61021f565b6101ea565b610108565b60e01c90565b60405190565b600080fd5b600080fd5b600080fd5b60018060a01b031690565b6100bc906100a8565b90565b6100c8816100b3565b036100cf57565b600080fd5b905035906100e1826100bf565b565b906020828203126100fd576100fa916000016100d4565b90565b61009e565b60000190565b346101365761012061011b3660046100e3565b610635565b610128610093565b8061013281610102565b0390f35b610099565b600091031261014657565b61009e565b1c90565b60018060a01b031690565b61016a90600861016f930261014b565b61014f565b90565b9061017d915461015a565b90565b61018d6001600090610172565b90565b90565b6101a76101a26101ac926100a8565b610190565b6100a8565b90565b6101b890610193565b90565b6101c4906101af565b90565b6101d0906101bb565b9052565b91906101e8906000602085019401906101c7565b565b3461021a576101fa36600461013b565b610216610205610180565b61020d610093565b918291826101d4565b0390f35b610099565b3461024d5761022f36600461013b565b610237610691565b61023f610093565b8061024981610102565b0390f35b610099565b600080fd5b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b906102869061025c565b810190811067ffffffffffffffff8211176102a057604052565b610266565b906102b86102b1610093565b928361027c565b565b67ffffffffffffffff81116102d8576102d460209161025c565b0190565b610266565b90826000939282370152565b909291926102fe6102f9826102ba565b6102a5565b9381855260208501908284011161031a57610318926102dd565b565b610257565b9080601f8301121561033d5781602061033a933591016102e9565b90565b610252565b60ff1690565b61035181610342565b0361035857565b600080fd5b9050359061036a82610348565b565b90565b6103788161036c565b0361037f57565b600080fd5b905035906103918261036f565b565b60e08183031261042f576103aa82600083016100d4565b926103b883602084016100d4565b92604083013567ffffffffffffffff811161042a57816103d991850161031f565b92606081013567ffffffffffffffff811161042557826103fa91830161031f565b9261042261040b846080850161035d565b936104198160a086016100d4565b9360c001610384565b90565b6100a3565b6100a3565b61009e565b61043d906100b3565b9052565b919061045590600060208501940190610434565b565b3461048e5761048a61047961046d366004610393565b959490949391936107bb565b610481610093565b91829182610441565b0390f35b610099565b346104c3576104a336600461013b565b6104bf6104ae61084d565b6104b6610093565b91829182610441565b0390f35b610099565b346104ff576104fb6104ea6104de366004610393565b95949094939193610887565b6104f2610093565b91829182610441565b0390f35b610099565b346105325761051c6105173660046100e3565b610ab2565b610524610093565b8061052e81610102565b0390f35b610099565b600080fd5b61054d90610548610b40565b6105a2565b565b60001c90565b6105616105669161054f565b61014f565b90565b6105739054610555565b90565b600080fd5b60e01b90565b600091031261058c57565b61009e565b610599610093565b3d6000823e3d90fd5b6105b46105af6001610569565b6101bb565b90633659cfe690823b15610630576105ec926105e1600080946105d5610093565b9687958694859361057b565b835260048301610441565b03925af1801561062b576105fe575b50565b61061e9060003d8111610624575b610616818361027c565b810190610581565b386105fb565b503d61060c565b610591565b610576565b61063e9061053c565b565b610648610b40565b61065061067d565b565b90565b61066961066461066e92610652565b610190565b6100a8565b90565b61067a90610655565b90565b61068f61068a6000610671565b610bbc565b565b610699610640565b565b600090565b5190565b60209181520190565b60005b8381106106c1575050906000910152565b8060209183015181850152016106b0565b6106f16106fa6020936106ff936106e8816106a0565b938480936106a4565b958691016106ad565b61025c565b0190565b61070c90610342565b9052565b6107199061036c565b9052565b919461076f61076460a095610756610779956107809a9c9b999c61074960c08a019260008b0190610434565b88820360208a01526106d2565b9086820360408801526106d2565b986060850190610703565b6080830190610434565b0190610710565b565b60200190565b5190565b9061079e610799836102ba565b6102a5565b918252565b6107ad600061078c565b90565b6107b86107a3565b90565b949361081e966107fc94956107ed936107d261069b565b509496929091926107e1610093565b9788966020880161071d565b6020820181038252038261027c565b61080e61080882610788565b91610782565b20906108186107b0565b91610ccc565b90565b60018060a01b031690565b61083861083d9161054f565b610821565b90565b61084a905461082c565b90565b61085561069b565b506108606000610840565b90565b61086c90610193565b90565b61087890610863565b90565b610884906101af565b90565b6108ee9096919293959661089961069b565b50836108cc86916108bd8a8a8d9089926108b1610093565b9788966020880161071d565b6020820181038252038261027c565b6108de6108d882610788565b91610782565b20906108e86107b0565b91610e2c565b956109006108fb8861086f565b61087b565b92639c14f29890949695919295843b156109bf5760009661093594889461094093610929610093565b9b8c9a8b998a9861057b565b88526004880161071d565b03925af180156109ba5761098d575b50806109877f2f7aebcaa1b6e607137fc80962355832b79ed6710cc89acb7987434d1e4d1b249161097e610093565b91829182610441565b0390a190565b6109ad9060003d81116109b3575b6109a5818361027c565b810190610581565b3861094f565b503d61099b565b610591565b610576565b6109d5906109d0610b40565b610a81565b565b60207f6464726573730000000000000000000000000000000000000000000000000000917f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201520152565b610a3260266040926106a4565b610a3b816109d7565b0190565b610a559060208101906000818303910152610a25565b90565b15610a5f57565b610a67610093565b62461bcd60e51b815280610a7d60048201610a3f565b0390fd5b610ab090610aab81610aa4610a9e610a996000610671565b6100b3565b916100b3565b1415610a58565b610bbc565b565b610abb906109c4565b565b60007f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910152565b610af1602080926106a4565b610afa81610abd565b0190565b610b149060208101906000818303910152610ae5565b90565b15610b1e57565b610b26610093565b62461bcd60e51b815280610b3c60048201610afe565b0390fd5b610b6a610b4b61084d565b610b64610b5e610b59610f6b565b6100b3565b916100b3565b14610b17565b565b60001b90565b90610b8360018060a01b0391610b6c565b9181191691161790565b610b96906101af565b90565b90565b90610bb1610bac610bb892610b8d565b610b99565b8254610b72565b9055565b610bc66000610840565b610bd1826000610b9c565b90610c05610bff7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e093610b8d565b91610b8d565b91610c0e610093565b80610c1881610102565b0390a3565b90565b610c2c610c319161036c565b610c1d565b9052565b60601b90565b610c4490610c35565b90565b610c5090610c3b565b90565b610c5f610c64916100b3565b610c47565b9052565b905090565b610c92610c8992602092610c8081610788565b94858093610c68565b938491016106ad565b0190565b60148093610cba602084610cb2610cc296610cc99b9a98610c20565b018092610c53565b018092610c53565b0190610c6d565b90565b610d5f9291610d09610d1892610ce061069b565b509193610cf5610cf06001610569565b6101bb565b610cfd610093565b95869460208601610c96565b6020820181038252038261027c565b610d2a610d2482610788565b91610782565b2061148a610d3a602082016102a5565b908082526111e36020830139610d58610d5282610788565b91610782565b2090610f84565b90565b90565b610d79610d74610d7e92610652565b610190565b610d62565b90565b610d8a90610193565b90565b610d9690610d81565b90565b610da290610193565b90565b610dae90610d99565b90565b610dba906101af565b90565b60209181520190565b610de5610dee602093610df393610ddc81610788565b93848093610dbd565b958691016106ad565b61025c565b0190565b610e1c610e29949293610e1260608401956000850190610434565b6020830190610434565b6040818403910152610dc6565b90565b610ebc9093929193610e3c61069b565b50610e7c8591610e6d610e57610e526001610569565b6101bb565b8690610e61610093565b95869460208601610c96565b6020820181038252038261027c565b610e8e610e8882610788565b91610782565b2061148a610e9e602082016102a5565b908082526111e36020830139610eb76000929192610d65565b611130565b92610ed6610ed1610ecc86610d8d565b610da5565b610db1565b63cf7a1d779190610eef610eea6001610569565b6101bb565b9392813b15610f66576000610f1791610f228296610f0b610093565b9889978896879561057b565b855260048501610df7565b03925af18015610f6157610f34575b50565b610f549060003d8111610f5a575b610f4c818361027c565b810190610581565b38610f31565b503d610f42565b610591565b610576565b610f7361069b565b503390565b610f81906101af565b90565b90610fa291610f9161069b565b5090610f9c30610f78565b916111b9565b90565b60007f437265617465323a20696e73756666696369656e742062616c616e6365000000910152565b610fda601d6020926106a4565b610fe381610fa5565b0190565b610ffd9060208101906000818303910152610fcd565b90565b1561100757565b61100f610093565b62461bcd60e51b81528061102560048201610fe7565b0390fd5b60007f437265617465323a2062797465636f6465206c656e677468206973207a65726f910152565b61105d602080926106a4565b61106681611029565b0190565b6110809060208101906000818303910152611051565b90565b1561108a57565b611092610093565b62461bcd60e51b8152806110a86004820161106a565b0390fd5b60007f437265617465323a204661696c6564206f6e206465706c6f7900000000000000910152565b6110e160196020926106a4565b6110ea816110ac565b0190565b61110490602081019060008183039101526110d4565b90565b1561110e57565b611116610093565b62461bcd60e51b81528061112c600482016110ee565b0390fd5b91909161113b61069b565b5061116261114830610f78565b3161115b61115584610d62565b91610d62565b1015611000565b61118861116e83610788565b61118161117b6000610d65565b91610d62565b1415611083565b60208251920190f5906111b7826111b06111aa6111a56000610671565b6100b3565b916100b3565b1415611107565b565b90605592600b926111c861069b565b50604051926040840152602083015281520160ff8153209056fe608060405234601c57600e6020565b61145e61002c823961145e90f35b6026565b60405190565b600080fdfe6080604052361561006b5761006b565b90565b60018060a01b031690565b90565b61003461002f6100399261000f565b61001d565b610012565b90565b61004590610020565b90565b61005190610012565b90565b606090565b63ffffffff60e01b1690565b60000190565b61007361017e565b61008e610088610083600061003c565b610048565b91610048565b0361046c5761009b610054565b5063ffffffff60e01b600035166100c16100bb63cf7a1d7760e01b610059565b91610059565b146100e357600063f92ee8a960e01b8152806100df60048201610065565b0390fd5b6100eb610401565b602081519101f35b600090565b90565b90565b60001b90565b61011861011361011d926100f8565b6100fe565b6100fb565b90565b6101497fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103610104565b90565b60001c90565b60018060a01b031690565b61016961016e9161014c565b610152565b90565b61017b905461015d565b90565b6101866100f3565b506101a2600061019c610197610120565b6105a2565b01610171565b90565b90565b90565b6101bf6101ba6101c4926101a5565b61001d565b6101a8565b90565b60405190565b600080fd5b600080fd5b909392938483116101f75784116101f2576001820201920390565b6101d2565b6101cd565b91565b600080fd5b600080fd5b61021290610012565b90565b61021e81610209565b0361022557565b600080fd5b9050359061023782610215565b565b600080fd5b600080fd5b601f801991011690565b634e487b7160e01b600052604160045260246000fd5b9061026d90610243565b810190811067ffffffffffffffff82111761028757604052565b61024d565b9061029f6102986101c7565b9283610263565b565b67ffffffffffffffff81116102bf576102bb602091610243565b0190565b61024d565b90826000939282370152565b909291926102e56102e0826102a1565b61028c565b93818552602085019082840111610301576102ff926102c4565b565b61023e565b9080601f8301121561032457816020610321933591016102d0565b90565b610239565b9160608383031261037657610341826000850161022a565b9261034f836020830161022a565b92604082013567ffffffffffffffff81116103715761036e9201610306565b90565b610204565b6101ff565b61038f61038a61039492610012565b61001d565b610012565b90565b6103a09061037b565b90565b6103ac90610397565b90565b67ffffffffffffffff81116103cd576103c9602091610243565b0190565b61024d565b906103e46103df836103af565b61028c565b918252565b6103f360006103d2565b90565b6103fe6103e9565b90565b610409610054565b506104126105cd565b61046161045761045161044761043f61043960003661043160046101ab565b9080926101d7565b906101fc565b810190610329565b93919290926103a3565b916103a3565b91909190916105ec565b6104696103f6565b90565b3361048661048061047b61017e565b610048565b91610048565b1460001461059d57610496610054565b5063ffffffff60e01b60003516806104bd6104b7631b2ce7f360e11b610059565b91610059565b146000146104d757506104ce610817565b5b602081519101f35b806104f16104eb63278f794360e11b610059565b91610059565b1460001461050857506105026107c1565b5b6104cf565b8061052261051c6308f2839760e41b610059565b91610059565b146000146105395750610533610723565b5b610503565b8061055361054d6303e1469160e61b610059565b91610059565b1460001461056a57506105646106bf565b5b610534565b61058361057d635c60da1b60e01b610059565b91610059565b146000146105985761059361067a565b610565565b61064a565b61064a565b90565b6105b96105b46105be9261000f565b61001d565b6101a8565b90565b156105c857565b600080fd5b6105ea346105e46105de60006105a5565b916101a8565b146105c1565b565b91906105f661087a565b61061161060b610606600061003c565b610048565b91610048565b0361062d5761062261062b936108b2565b9060009161098d565b565b600063f92ee8a960e01b81528061064660048201610065565b0390fd5b610652610aa6565b610ae7565b61066090610048565b9052565b919061067890600060208501940190610657565b565b610682610054565b5061068b6105cd565b6106ad6106bc610699610aa6565b6106a16101c7565b92839160208301610664565b60208201810382520382610263565b90565b6106c7610054565b506106d06105cd565b6106f26107016106de61017e565b6106e66101c7565b92839160208301610664565b60208201810382520382610263565b90565b9060208282031261071e5761071b9160000161022a565b90565b6101ff565b61072b610054565b506107346105cd565b61077061076b61076661075e61075860003661075060046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108b2565b6107786103f6565b90565b9190916040818403126107bc57610795836000830161022a565b92602082013567ffffffffffffffff81116107b7576107b49201610306565b90565b610204565b6101ff565b6107c9610054565b5061080c6108036107fc6107f46107ee6000366107e660046101ab565b9080926101d7565b906101fc565b81019061077b565b91906103a3565b90600191610b0a565b6108146103f6565b90565b61081f610054565b506108286105cd565b61086f61085f61085a61085261084c60003661084460046101ab565b9080926101d7565b906101fc565b810190610704565b6103a3565b6108676103f6565b600091610b0a565b6108776103f6565b90565b6108826100f3565b5061088b61017e565b90565b9160206108b09294936108a960408201966000830190610657565b0190610657565b565b6108fd906108be61017e565b817f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f916108f56108ec6101c7565b9283928361088e565b0390a1610c4d565b565b61090890610397565b90565b5190565b6109189061037b565b90565b6109249061090f565b90565b61093090610397565b90565b60e01b90565b61094281610048565b0361094957565b600080fd5b9050519061095b82610939565b565b90602082820312610977576109749160000161094e565b90565b6101ff565b6109846101c7565b3d6000823e3d90fd5b9161099783610e30565b826109c27f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e916108ff565b906109cb6101c7565b806109d581610065565b0390a26109e18261090b565b6109f46109ee60006105a5565b916101a8565b11908115610a9e575b50610a07575b5050565b6020610a1d610a18610a339461091b565b610927565b635c60da1b90610a2b6101c7565b948592610933565b82528180610a4360048201610065565b03915afa908115610a9957610a6192600092610a69575b5090610f65565b503880610a03565b610a8b91925060203d8111610a92575b610a838183610263565b81019061095d565b9038610a5a565b503d610a79565b61097c565b9050386109fd565b610aae6100f3565b50610ab7610f85565b80610ad3610acd610ac8600061003c565b610048565b91610048565b03610ae45750610ae1610f99565b90565b90565b60008091368280378136915af43d6000803e600014610b05573d6000f35b3d6000fd5b91610b148361102f565b610b1d8261090b565b610b30610b2a60006105a5565b916101a8565b11908115610b54575b50610b43575b5050565b610b4c91610f65565b503880610b3f565b905038610b39565b60209181520190565b60207f6464726573730000000000000000000000000000000000000000000000000000917f455243313936373a206e65772061646d696e20697320746865207a65726f206160008201520152565b610bc06026604092610b5c565b610bc981610b65565b0190565b610be39060208101906000818303910152610bb3565b90565b15610bed57565b610bf56101c7565b62461bcd60e51b815280610c0b60048201610bcd565b0390fd5b90610c2060018060a01b03916100fe565b9181191691161790565b90565b90610c42610c3d610c49926108ff565b610c2a565b8254610c0f565b9055565b610c8f90610c7781610c70610c6a610c65600061003c565b610048565b91610048565b1415610be6565b6000610c89610c84610120565b6105a2565b01610c2d565b565b60207f7472616374000000000000000000000000000000000000000000000000000000917f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e60008201520152565b610cec6025604092610b5c565b610cf581610c91565b0190565b610d0f9060208101906000818303910152610cdf565b90565b15610d1957565b610d216101c7565b62461bcd60e51b815280610d3760048201610cf9565b0390fd5b60207f73206e6f74206120636f6e747261637400000000000000000000000000000000917f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960008201520152565b610d966030604092610b5c565b610d9f81610d3b565b0190565b610db99060208101906000818303910152610d89565b90565b15610dc357565b610dcb6101c7565b62461bcd60e51b815280610de160048201610da3565b0390fd5b90565b610dfc610df7610e0192610de5565b6100fe565b6100fb565b90565b610e2d7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50610de8565b90565b610e6e90610e45610e408261107f565b610d12565b6020610e58610e538361091b565b610927565b635c60da1b90610e666101c7565b948592610933565b82528180610e7e60048201610065565b03915afa8015610eee57610ea1610ea691610ebe94600091610ec0575b5061107f565b610dbc565b6000610eb8610eb3610e04565b6105a2565b01610c2d565b565b610ee1915060203d8111610ee7575b610ed98183610263565b81019061095d565b38610e9b565b503d610ecf565b61097c565b60207f206661696c656400000000000000000000000000000000000000000000000000917f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60008201520152565b610f4b60276103d2565b90610f5860208301610ef3565b565b610f62610f41565b90565b90610f8291610f72610054565b5090610f7c610f5a565b916110e2565b90565b610f8d6100f3565b50610f96611160565b90565b610fa16100f3565b50610fd56020610fbf610fba610fb5611187565b61091b565b610927565b635c60da1b90610fcd6101c7565b938492610933565b82528180610fe560048201610065565b03915afa90811561102a57600091610ffc575b5090565b61101d915060203d8111611023575b6110158183610263565b81019061095d565b38610ff8565b503d61100b565b61097c565b61103881611258565b6110627fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b916108ff565b9061106b6101c7565b8061107581610065565b0390a2565b600090565b61108761107a565b503b61109c61109660006105a5565b916101a8565b1190565b906110b26110ad836102a1565b61028c565b918252565b3d6000146110d4576110c83d6110a0565b903d6000602084013e5b565b6110dc610054565b906110d2565b9091600080611112946110f3610054565b508490602081019051915af4916111086110b7565b909290919261130b565b90565b90565b61112c61112761113192611115565b6100fe565b6100fb565b90565b61115d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611118565b90565b6111686100f3565b50611184600061117e611179611134565b6105a2565b01610171565b90565b61118f6100f3565b506111ab60006111a56111a0610e04565b6105a2565b01610171565b90565b60207f6f74206120636f6e747261637400000000000000000000000000000000000000917f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201520152565b611209602d604092610b5c565b611212816111ae565b0190565b61122c90602081019060008183039101526111fc565b90565b1561123657565b61123e6101c7565b62461bcd60e51b81528061125460048201611216565b0390fd5b6112859061126d6112688261107f565b61122f565b600061127f61127a611134565b6105a2565b01610c2d565b565b60007f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000910152565b6112bc601d602092610b5c565b6112c581611287565b0190565b6112df90602081019060008183039101526112af565b90565b156112e957565b6112f16101c7565b62461bcd60e51b815280611307600482016112c9565b0390fd5b919290611316610054565b5060001461135c57506113288261090b565b61133b61133560006105a5565b916101a8565b14611345575b5090565b6113516113569161107f565b6112e2565b38611341565b826113d5565b5190565b60005b83811061137a575050906000910152565b806020918301518185015201611369565b6113aa6113b36020936113b8936113a181611362565b93848093610b5c565b95869101611366565b610243565b0190565b6113d2916020820191600081840391015261138b565b90565b906113df8261090b565b6113f26113ec60006105a5565b916101a8565b116000146114035750805190602001fd5b6114249061140f6101c7565b91829162461bcd60e51b8352600483016113bc565b0390fdfea2646970667358221220fb1899e61f38faa78bfbab79b8dc2fa613357c2fce2699411f9fee80b624365564736f6c634300081b0033a2646970667358221220cd646062cb417292f6d2898e5ada0fe14e78d8b561e44329e18b3e3630edc17d64736f6c634300081b0033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI JUMPDEST PUSH2 0x537 JUMP JUMPDEST PUSH2 0x1E PUSH1 0x0 CALLDATALOAD PUSH2 0x8D JUMP JUMPDEST DUP1 PUSH4 0x1BCE4583 EQ PUSH2 0x88 JUMPI DUP1 PUSH4 0x59659E90 EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x7E JUMPI DUP1 PUSH4 0x8CFD4E5E EQ PUSH2 0x79 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x74 JUMPI DUP1 PUSH4 0xF13B273D EQ PUSH2 0x6F JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI PUSH2 0x504 JUMP JUMPDEST PUSH2 0x4C8 JUMP JUMPDEST PUSH2 0x493 JUMP JUMPDEST PUSH2 0x457 JUMP JUMPDEST PUSH2 0x21F JUMP JUMPDEST PUSH2 0x1EA JUMP JUMPDEST PUSH2 0x108 JUMP JUMPDEST PUSH1 0xE0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0xBC SWAP1 PUSH2 0xA8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC8 DUP2 PUSH2 0xB3 JUMP JUMPDEST SUB PUSH2 0xCF JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0xE1 DUP3 PUSH2 0xBF JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0xFD JUMPI PUSH2 0xFA SWAP2 PUSH1 0x0 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x136 JUMPI PUSH2 0x120 PUSH2 0x11B CALLDATASIZE PUSH1 0x4 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0x635 JUMP JUMPDEST PUSH2 0x128 PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x132 DUP2 PUSH2 0x102 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x146 JUMPI JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x16A SWAP1 PUSH1 0x8 PUSH2 0x16F SWAP4 MUL PUSH2 0x14B JUMP JUMPDEST PUSH2 0x14F JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x17D SWAP2 SLOAD PUSH2 0x15A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x18D PUSH1 0x1 PUSH1 0x0 SWAP1 PUSH2 0x172 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1A7 PUSH2 0x1A2 PUSH2 0x1AC SWAP3 PUSH2 0xA8 JUMP JUMPDEST PUSH2 0x190 JUMP JUMPDEST PUSH2 0xA8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1B8 SWAP1 PUSH2 0x193 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1C4 SWAP1 PUSH2 0x1AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1D0 SWAP1 PUSH2 0x1BB JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1E8 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x1C7 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x21A JUMPI PUSH2 0x1FA CALLDATASIZE PUSH1 0x4 PUSH2 0x13B JUMP JUMPDEST PUSH2 0x216 PUSH2 0x205 PUSH2 0x180 JUMP JUMPDEST PUSH2 0x20D PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x1D4 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x24D JUMPI PUSH2 0x22F CALLDATASIZE PUSH1 0x4 PUSH2 0x13B JUMP JUMPDEST PUSH2 0x237 PUSH2 0x691 JUMP JUMPDEST PUSH2 0x23F PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x249 DUP2 PUSH2 0x102 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x286 SWAP1 PUSH2 0x25C JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x2A0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x266 JUMP JUMPDEST SWAP1 PUSH2 0x2B8 PUSH2 0x2B1 PUSH2 0x93 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x27C JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2D8 JUMPI PUSH2 0x2D4 PUSH1 0x20 SWAP2 PUSH2 0x25C JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x266 JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2FE PUSH2 0x2F9 DUP3 PUSH2 0x2BA JUMP JUMPDEST PUSH2 0x2A5 JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x31A JUMPI PUSH2 0x318 SWAP3 PUSH2 0x2DD JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x257 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x33D JUMPI DUP2 PUSH1 0x20 PUSH2 0x33A SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x252 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x351 DUP2 PUSH2 0x342 JUMP JUMPDEST SUB PUSH2 0x358 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x36A DUP3 PUSH2 0x348 JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x378 DUP2 PUSH2 0x36C JUMP JUMPDEST SUB PUSH2 0x37F JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x391 DUP3 PUSH2 0x36F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0xE0 DUP2 DUP4 SUB SLT PUSH2 0x42F JUMPI PUSH2 0x3AA DUP3 PUSH1 0x0 DUP4 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP3 PUSH2 0x3B8 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x42A JUMPI DUP2 PUSH2 0x3D9 SWAP2 DUP6 ADD PUSH2 0x31F JUMP JUMPDEST SWAP3 PUSH1 0x60 DUP2 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x425 JUMPI DUP3 PUSH2 0x3FA SWAP2 DUP4 ADD PUSH2 0x31F JUMP JUMPDEST SWAP3 PUSH2 0x422 PUSH2 0x40B DUP5 PUSH1 0x80 DUP6 ADD PUSH2 0x35D JUMP JUMPDEST SWAP4 PUSH2 0x419 DUP2 PUSH1 0xA0 DUP7 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP4 PUSH1 0xC0 ADD PUSH2 0x384 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xA3 JUMP JUMPDEST PUSH2 0xA3 JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH2 0x43D SWAP1 PUSH2 0xB3 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x455 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x434 JUMP JUMPDEST JUMP JUMPDEST CALLVALUE PUSH2 0x48E JUMPI PUSH2 0x48A PUSH2 0x479 PUSH2 0x46D CALLDATASIZE PUSH1 0x4 PUSH2 0x393 JUMP JUMPDEST SWAP6 SWAP5 SWAP1 SWAP5 SWAP4 SWAP2 SWAP4 PUSH2 0x7BB JUMP JUMPDEST PUSH2 0x481 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x441 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x4C3 JUMPI PUSH2 0x4A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x13B JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x4AE PUSH2 0x84D JUMP JUMPDEST PUSH2 0x4B6 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x441 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x4FF JUMPI PUSH2 0x4FB PUSH2 0x4EA PUSH2 0x4DE CALLDATASIZE PUSH1 0x4 PUSH2 0x393 JUMP JUMPDEST SWAP6 SWAP5 SWAP1 SWAP5 SWAP4 SWAP2 SWAP4 PUSH2 0x887 JUMP JUMPDEST PUSH2 0x4F2 PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x441 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST CALLVALUE PUSH2 0x532 JUMPI PUSH2 0x51C PUSH2 0x517 CALLDATASIZE PUSH1 0x4 PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xAB2 JUMP JUMPDEST PUSH2 0x524 PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0x52E DUP2 PUSH2 0x102 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x99 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x54D SWAP1 PUSH2 0x548 PUSH2 0xB40 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH2 0x561 PUSH2 0x566 SWAP2 PUSH2 0x54F JUMP JUMPDEST PUSH2 0x14F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x573 SWAP1 SLOAD PUSH2 0x555 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP2 SUB SLT PUSH2 0x58C JUMPI JUMP JUMPDEST PUSH2 0x9E JUMP JUMPDEST PUSH2 0x599 PUSH2 0x93 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x5B4 PUSH2 0x5AF PUSH1 0x1 PUSH2 0x569 JUMP JUMPDEST PUSH2 0x1BB JUMP JUMPDEST SWAP1 PUSH4 0x3659CFE6 SWAP1 DUP3 EXTCODESIZE ISZERO PUSH2 0x630 JUMPI PUSH2 0x5EC SWAP3 PUSH2 0x5E1 PUSH1 0x0 DUP1 SWAP5 PUSH2 0x5D5 PUSH2 0x93 JUMP JUMPDEST SWAP7 DUP8 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH2 0x57B JUMP JUMPDEST DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x441 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x62B JUMPI PUSH2 0x5FE JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0x61E SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0x624 JUMPI JUMPDEST PUSH2 0x616 DUP2 DUP4 PUSH2 0x27C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x581 JUMP JUMPDEST CODESIZE PUSH2 0x5FB JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x60C JUMP JUMPDEST PUSH2 0x591 JUMP JUMPDEST PUSH2 0x576 JUMP JUMPDEST PUSH2 0x63E SWAP1 PUSH2 0x53C JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x648 PUSH2 0xB40 JUMP JUMPDEST PUSH2 0x650 PUSH2 0x67D JUMP JUMPDEST JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x669 PUSH2 0x664 PUSH2 0x66E SWAP3 PUSH2 0x652 JUMP JUMPDEST PUSH2 0x190 JUMP JUMPDEST PUSH2 0xA8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x67A SWAP1 PUSH2 0x655 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x68F PUSH2 0x68A PUSH1 0x0 PUSH2 0x671 JUMP JUMPDEST PUSH2 0xBBC JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x699 PUSH2 0x640 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x6C1 JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x6B0 JUMP JUMPDEST PUSH2 0x6F1 PUSH2 0x6FA PUSH1 0x20 SWAP4 PUSH2 0x6FF SWAP4 PUSH2 0x6E8 DUP2 PUSH2 0x6A0 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x6A4 JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x6AD JUMP JUMPDEST PUSH2 0x25C JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x70C SWAP1 PUSH2 0x342 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH2 0x719 SWAP1 PUSH2 0x36C JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP5 PUSH2 0x76F PUSH2 0x764 PUSH1 0xA0 SWAP6 PUSH2 0x756 PUSH2 0x779 SWAP6 PUSH2 0x780 SWAP11 SWAP13 SWAP12 SWAP10 SWAP13 PUSH2 0x749 PUSH1 0xC0 DUP11 ADD SWAP3 PUSH1 0x0 DUP12 ADD SWAP1 PUSH2 0x434 JUMP JUMPDEST DUP9 DUP3 SUB PUSH1 0x20 DUP11 ADD MSTORE PUSH2 0x6D2 JUMP JUMPDEST SWAP1 DUP7 DUP3 SUB PUSH1 0x40 DUP9 ADD MSTORE PUSH2 0x6D2 JUMP JUMPDEST SWAP9 PUSH1 0x60 DUP6 ADD SWAP1 PUSH2 0x703 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0x434 JUMP JUMPDEST ADD SWAP1 PUSH2 0x710 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x79E PUSH2 0x799 DUP4 PUSH2 0x2BA JUMP JUMPDEST PUSH2 0x2A5 JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x7AD PUSH1 0x0 PUSH2 0x78C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x7B8 PUSH2 0x7A3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP5 SWAP4 PUSH2 0x81E SWAP7 PUSH2 0x7FC SWAP5 SWAP6 PUSH2 0x7ED SWAP4 PUSH2 0x7D2 PUSH2 0x69B JUMP JUMPDEST POP SWAP5 SWAP7 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x7E1 PUSH2 0x93 JUMP JUMPDEST SWAP8 DUP9 SWAP7 PUSH1 0x20 DUP9 ADD PUSH2 0x71D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x27C JUMP JUMPDEST PUSH2 0x80E PUSH2 0x808 DUP3 PUSH2 0x788 JUMP JUMPDEST SWAP2 PUSH2 0x782 JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0x818 PUSH2 0x7B0 JUMP JUMPDEST SWAP2 PUSH2 0xCCC JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x838 PUSH2 0x83D SWAP2 PUSH2 0x54F JUMP JUMPDEST PUSH2 0x821 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x84A SWAP1 SLOAD PUSH2 0x82C JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x855 PUSH2 0x69B JUMP JUMPDEST POP PUSH2 0x860 PUSH1 0x0 PUSH2 0x840 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x86C SWAP1 PUSH2 0x193 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x878 SWAP1 PUSH2 0x863 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x884 SWAP1 PUSH2 0x1AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x8EE SWAP1 SWAP7 SWAP2 SWAP3 SWAP4 SWAP6 SWAP7 PUSH2 0x899 PUSH2 0x69B JUMP JUMPDEST POP DUP4 PUSH2 0x8CC DUP7 SWAP2 PUSH2 0x8BD DUP11 DUP11 DUP14 SWAP1 DUP10 SWAP3 PUSH2 0x8B1 PUSH2 0x93 JUMP JUMPDEST SWAP8 DUP9 SWAP7 PUSH1 0x20 DUP9 ADD PUSH2 0x71D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x27C JUMP JUMPDEST PUSH2 0x8DE PUSH2 0x8D8 DUP3 PUSH2 0x788 JUMP JUMPDEST SWAP2 PUSH2 0x782 JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0x8E8 PUSH2 0x7B0 JUMP JUMPDEST SWAP2 PUSH2 0xE2C JUMP JUMPDEST SWAP6 PUSH2 0x900 PUSH2 0x8FB DUP9 PUSH2 0x86F JUMP JUMPDEST PUSH2 0x87B JUMP JUMPDEST SWAP3 PUSH4 0x9C14F298 SWAP1 SWAP5 SWAP7 SWAP6 SWAP2 SWAP3 SWAP6 DUP5 EXTCODESIZE ISZERO PUSH2 0x9BF JUMPI PUSH1 0x0 SWAP7 PUSH2 0x935 SWAP5 DUP9 SWAP5 PUSH2 0x940 SWAP4 PUSH2 0x929 PUSH2 0x93 JUMP JUMPDEST SWAP12 DUP13 SWAP11 DUP12 SWAP10 DUP11 SWAP9 PUSH2 0x57B JUMP JUMPDEST DUP9 MSTORE PUSH1 0x4 DUP9 ADD PUSH2 0x71D JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0x9BA JUMPI PUSH2 0x98D JUMPI JUMPDEST POP DUP1 PUSH2 0x987 PUSH32 0x2F7AEBCAA1B6E607137FC80962355832B79ED6710CC89ACB7987434D1E4D1B24 SWAP2 PUSH2 0x97E PUSH2 0x93 JUMP JUMPDEST SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x441 JUMP JUMPDEST SUB SWAP1 LOG1 SWAP1 JUMP JUMPDEST PUSH2 0x9AD SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0x9B3 JUMPI JUMPDEST PUSH2 0x9A5 DUP2 DUP4 PUSH2 0x27C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x581 JUMP JUMPDEST CODESIZE PUSH2 0x94F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x99B JUMP JUMPDEST PUSH2 0x591 JUMP JUMPDEST PUSH2 0x576 JUMP JUMPDEST PUSH2 0x9D5 SWAP1 PUSH2 0x9D0 PUSH2 0xB40 JUMP JUMPDEST PUSH2 0xA81 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xA32 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0x6A4 JUMP JUMPDEST PUSH2 0xA3B DUP2 PUSH2 0x9D7 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xA55 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xA25 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xA5F JUMPI JUMP JUMPDEST PUSH2 0xA67 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xA7D PUSH1 0x4 DUP3 ADD PUSH2 0xA3F JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xAB0 SWAP1 PUSH2 0xAAB DUP2 PUSH2 0xAA4 PUSH2 0xA9E PUSH2 0xA99 PUSH1 0x0 PUSH2 0x671 JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST SWAP2 PUSH2 0xB3 JUMP JUMPDEST EQ ISZERO PUSH2 0xA58 JUMP JUMPDEST PUSH2 0xBBC JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xABB SWAP1 PUSH2 0x9C4 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xAF1 PUSH1 0x20 DUP1 SWAP3 PUSH2 0x6A4 JUMP JUMPDEST PUSH2 0xAFA DUP2 PUSH2 0xABD JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xB14 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xAE5 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xB1E JUMPI JUMP JUMPDEST PUSH2 0xB26 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xB3C PUSH1 0x4 DUP3 ADD PUSH2 0xAFE JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xB6A PUSH2 0xB4B PUSH2 0x84D JUMP JUMPDEST PUSH2 0xB64 PUSH2 0xB5E PUSH2 0xB59 PUSH2 0xF6B JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST SWAP2 PUSH2 0xB3 JUMP JUMPDEST EQ PUSH2 0xB17 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xB83 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xB6C JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST PUSH2 0xB96 SWAP1 PUSH2 0x1AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xBB1 PUSH2 0xBAC PUSH2 0xBB8 SWAP3 PUSH2 0xB8D JUMP JUMPDEST PUSH2 0xB99 JUMP JUMPDEST DUP3 SLOAD PUSH2 0xB72 JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xBC6 PUSH1 0x0 PUSH2 0x840 JUMP JUMPDEST PUSH2 0xBD1 DUP3 PUSH1 0x0 PUSH2 0xB9C JUMP JUMPDEST SWAP1 PUSH2 0xC05 PUSH2 0xBFF PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP4 PUSH2 0xB8D JUMP JUMPDEST SWAP2 PUSH2 0xB8D JUMP JUMPDEST SWAP2 PUSH2 0xC0E PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH2 0xC18 DUP2 PUSH2 0x102 JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC2C PUSH2 0xC31 SWAP2 PUSH2 0x36C JUMP JUMPDEST PUSH2 0xC1D JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x60 SHL SWAP1 JUMP JUMPDEST PUSH2 0xC44 SWAP1 PUSH2 0xC35 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC50 SWAP1 PUSH2 0xC3B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC5F PUSH2 0xC64 SWAP2 PUSH2 0xB3 JUMP JUMPDEST PUSH2 0xC47 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC92 PUSH2 0xC89 SWAP3 PUSH1 0x20 SWAP3 PUSH2 0xC80 DUP2 PUSH2 0x788 JUMP JUMPDEST SWAP5 DUP6 DUP1 SWAP4 PUSH2 0xC68 JUMP JUMPDEST SWAP4 DUP5 SWAP2 ADD PUSH2 0x6AD JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH1 0x14 DUP1 SWAP4 PUSH2 0xCBA PUSH1 0x20 DUP5 PUSH2 0xCB2 PUSH2 0xCC2 SWAP7 PUSH2 0xCC9 SWAP12 SWAP11 SWAP9 PUSH2 0xC20 JUMP JUMPDEST ADD DUP1 SWAP3 PUSH2 0xC53 JUMP JUMPDEST ADD DUP1 SWAP3 PUSH2 0xC53 JUMP JUMPDEST ADD SWAP1 PUSH2 0xC6D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xD5F SWAP3 SWAP2 PUSH2 0xD09 PUSH2 0xD18 SWAP3 PUSH2 0xCE0 PUSH2 0x69B JUMP JUMPDEST POP SWAP2 SWAP4 PUSH2 0xCF5 PUSH2 0xCF0 PUSH1 0x1 PUSH2 0x569 JUMP JUMPDEST PUSH2 0x1BB JUMP JUMPDEST PUSH2 0xCFD PUSH2 0x93 JUMP JUMPDEST SWAP6 DUP7 SWAP5 PUSH1 0x20 DUP7 ADD PUSH2 0xC96 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x27C JUMP JUMPDEST PUSH2 0xD2A PUSH2 0xD24 DUP3 PUSH2 0x788 JUMP JUMPDEST SWAP2 PUSH2 0x782 JUMP JUMPDEST KECCAK256 PUSH2 0x148A PUSH2 0xD3A PUSH1 0x20 DUP3 ADD PUSH2 0x2A5 JUMP JUMPDEST SWAP1 DUP1 DUP3 MSTORE PUSH2 0x11E3 PUSH1 0x20 DUP4 ADD CODECOPY PUSH2 0xD58 PUSH2 0xD52 DUP3 PUSH2 0x788 JUMP JUMPDEST SWAP2 PUSH2 0x782 JUMP JUMPDEST KECCAK256 SWAP1 PUSH2 0xF84 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xD79 PUSH2 0xD74 PUSH2 0xD7E SWAP3 PUSH2 0x652 JUMP JUMPDEST PUSH2 0x190 JUMP JUMPDEST PUSH2 0xD62 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xD8A SWAP1 PUSH2 0x193 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xD96 SWAP1 PUSH2 0xD81 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDA2 SWAP1 PUSH2 0x193 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDAE SWAP1 PUSH2 0xD99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDBA SWAP1 PUSH2 0x1AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH2 0xDE5 PUSH2 0xDEE PUSH1 0x20 SWAP4 PUSH2 0xDF3 SWAP4 PUSH2 0xDDC DUP2 PUSH2 0x788 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xDBD JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x6AD JUMP JUMPDEST PUSH2 0x25C JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xE1C PUSH2 0xE29 SWAP5 SWAP3 SWAP4 PUSH2 0xE12 PUSH1 0x60 DUP5 ADD SWAP6 PUSH1 0x0 DUP6 ADD SWAP1 PUSH2 0x434 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x434 JUMP JUMPDEST PUSH1 0x40 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xDC6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xEBC SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH2 0xE3C PUSH2 0x69B JUMP JUMPDEST POP PUSH2 0xE7C DUP6 SWAP2 PUSH2 0xE6D PUSH2 0xE57 PUSH2 0xE52 PUSH1 0x1 PUSH2 0x569 JUMP JUMPDEST PUSH2 0x1BB JUMP JUMPDEST DUP7 SWAP1 PUSH2 0xE61 PUSH2 0x93 JUMP JUMPDEST SWAP6 DUP7 SWAP5 PUSH1 0x20 DUP7 ADD PUSH2 0xC96 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x27C JUMP JUMPDEST PUSH2 0xE8E PUSH2 0xE88 DUP3 PUSH2 0x788 JUMP JUMPDEST SWAP2 PUSH2 0x782 JUMP JUMPDEST KECCAK256 PUSH2 0x148A PUSH2 0xE9E PUSH1 0x20 DUP3 ADD PUSH2 0x2A5 JUMP JUMPDEST SWAP1 DUP1 DUP3 MSTORE PUSH2 0x11E3 PUSH1 0x20 DUP4 ADD CODECOPY PUSH2 0xEB7 PUSH1 0x0 SWAP3 SWAP2 SWAP3 PUSH2 0xD65 JUMP JUMPDEST PUSH2 0x1130 JUMP JUMPDEST SWAP3 PUSH2 0xED6 PUSH2 0xED1 PUSH2 0xECC DUP7 PUSH2 0xD8D JUMP JUMPDEST PUSH2 0xDA5 JUMP JUMPDEST PUSH2 0xDB1 JUMP JUMPDEST PUSH4 0xCF7A1D77 SWAP2 SWAP1 PUSH2 0xEEF PUSH2 0xEEA PUSH1 0x1 PUSH2 0x569 JUMP JUMPDEST PUSH2 0x1BB JUMP JUMPDEST SWAP4 SWAP3 DUP2 EXTCODESIZE ISZERO PUSH2 0xF66 JUMPI PUSH1 0x0 PUSH2 0xF17 SWAP2 PUSH2 0xF22 DUP3 SWAP7 PUSH2 0xF0B PUSH2 0x93 JUMP JUMPDEST SWAP9 DUP10 SWAP8 DUP9 SWAP7 DUP8 SWAP6 PUSH2 0x57B JUMP JUMPDEST DUP6 MSTORE PUSH1 0x4 DUP6 ADD PUSH2 0xDF7 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xF61 JUMPI PUSH2 0xF34 JUMPI JUMPDEST POP JUMP JUMPDEST PUSH2 0xF54 SWAP1 PUSH1 0x0 RETURNDATASIZE DUP2 GT PUSH2 0xF5A JUMPI JUMPDEST PUSH2 0xF4C DUP2 DUP4 PUSH2 0x27C JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x581 JUMP JUMPDEST CODESIZE PUSH2 0xF31 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xF42 JUMP JUMPDEST PUSH2 0x591 JUMP JUMPDEST PUSH2 0x576 JUMP JUMPDEST PUSH2 0xF73 PUSH2 0x69B JUMP JUMPDEST POP CALLER SWAP1 JUMP JUMPDEST PUSH2 0xF81 SWAP1 PUSH2 0x1AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xFA2 SWAP2 PUSH2 0xF91 PUSH2 0x69B JUMP JUMPDEST POP SWAP1 PUSH2 0xF9C ADDRESS PUSH2 0xF78 JUMP JUMPDEST SWAP2 PUSH2 0x11B9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A20696E73756666696369656E742062616C616E6365000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xFDA PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0x6A4 JUMP JUMPDEST PUSH2 0xFE3 DUP2 PUSH2 0xFA5 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xFFD SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xFCD JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1007 JUMPI JUMP JUMPDEST PUSH2 0x100F PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1025 PUSH1 0x4 DUP3 ADD PUSH2 0xFE7 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A2062797465636F6465206C656E677468206973207A65726F SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x105D PUSH1 0x20 DUP1 SWAP3 PUSH2 0x6A4 JUMP JUMPDEST PUSH2 0x1066 DUP2 PUSH2 0x1029 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1080 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x1051 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x108A JUMPI JUMP JUMPDEST PUSH2 0x1092 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x10A8 PUSH1 0x4 DUP3 ADD PUSH2 0x106A JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x437265617465323A204661696C6564206F6E206465706C6F7900000000000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x10E1 PUSH1 0x19 PUSH1 0x20 SWAP3 PUSH2 0x6A4 JUMP JUMPDEST PUSH2 0x10EA DUP2 PUSH2 0x10AC JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x1104 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x10D4 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x110E JUMPI JUMP JUMPDEST PUSH2 0x1116 PUSH2 0x93 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x112C PUSH1 0x4 DUP3 ADD PUSH2 0x10EE JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x113B PUSH2 0x69B JUMP JUMPDEST POP PUSH2 0x1162 PUSH2 0x1148 ADDRESS PUSH2 0xF78 JUMP JUMPDEST BALANCE PUSH2 0x115B PUSH2 0x1155 DUP5 PUSH2 0xD62 JUMP JUMPDEST SWAP2 PUSH2 0xD62 JUMP JUMPDEST LT ISZERO PUSH2 0x1000 JUMP JUMPDEST PUSH2 0x1188 PUSH2 0x116E DUP4 PUSH2 0x788 JUMP JUMPDEST PUSH2 0x1181 PUSH2 0x117B PUSH1 0x0 PUSH2 0xD65 JUMP JUMPDEST SWAP2 PUSH2 0xD62 JUMP JUMPDEST EQ ISZERO PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD SWAP3 ADD SWAP1 CREATE2 SWAP1 PUSH2 0x11B7 DUP3 PUSH2 0x11B0 PUSH2 0x11AA PUSH2 0x11A5 PUSH1 0x0 PUSH2 0x671 JUMP JUMPDEST PUSH2 0xB3 JUMP JUMPDEST SWAP2 PUSH2 0xB3 JUMP JUMPDEST EQ ISZERO PUSH2 0x1107 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x55 SWAP3 PUSH1 0xB SWAP3 PUSH2 0x11C8 PUSH2 0x69B JUMP JUMPDEST POP PUSH1 0x40 MLOAD SWAP3 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP4 ADD MSTORE DUP2 MSTORE ADD PUSH1 0xFF DUP2 MSTORE8 KECCAK256 SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x1C JUMPI PUSH1 0xE PUSH1 0x20 JUMP JUMPDEST PUSH2 0x145E PUSH2 0x2C DUP3 CODECOPY PUSH2 0x145E SWAP1 RETURN JUMPDEST PUSH1 0x26 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE ISZERO PUSH2 0x6B JUMPI PUSH2 0x6B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x34 PUSH2 0x2F PUSH2 0x39 SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x45 SWAP1 PUSH2 0x20 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x51 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND SWAP1 JUMP JUMPDEST PUSH1 0x0 ADD SWAP1 JUMP JUMPDEST PUSH2 0x73 PUSH2 0x17E JUMP JUMPDEST PUSH2 0x8E PUSH2 0x88 PUSH2 0x83 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x46C JUMPI PUSH2 0x9B PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND PUSH2 0xC1 PUSH2 0xBB PUSH4 0xCF7A1D77 PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH2 0xE3 JUMPI PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0xDF PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0xEB PUSH2 0x401 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x113 PUSH2 0x11D SWAP3 PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x149 PUSH32 0xB53127684A568B3173AE13B9F8A6016E243E63B6E8EE1178D6A717850B5D6103 PUSH2 0x104 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x16E SWAP2 PUSH2 0x14C JUMP JUMPDEST PUSH2 0x152 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x17B SWAP1 SLOAD PUSH2 0x15D JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x186 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1A2 PUSH1 0x0 PUSH2 0x19C PUSH2 0x197 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1BF PUSH2 0x1BA PUSH2 0x1C4 SWAP3 PUSH2 0x1A5 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 SWAP3 SWAP4 DUP5 DUP4 GT PUSH2 0x1F7 JUMPI DUP5 GT PUSH2 0x1F2 JUMPI PUSH1 0x1 DUP3 MUL ADD SWAP3 SUB SWAP1 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1CD JUMP JUMPDEST SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x212 SWAP1 PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x21E DUP2 PUSH2 0x209 JUMP JUMPDEST SUB PUSH2 0x225 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP CALLDATALOAD SWAP1 PUSH2 0x237 DUP3 PUSH2 0x215 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F DUP1 NOT SWAP2 ADD AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH2 0x26D SWAP1 PUSH2 0x243 JUMP JUMPDEST DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x287 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x29F PUSH2 0x298 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 PUSH2 0x263 JUMP JUMPDEST JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2BF JUMPI PUSH2 0x2BB PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 DUP3 PUSH1 0x0 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD MSTORE JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP3 PUSH2 0x2E5 PUSH2 0x2E0 DUP3 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP4 DUP2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 DUP3 DUP5 ADD GT PUSH2 0x301 JUMPI PUSH2 0x2FF SWAP3 PUSH2 0x2C4 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x23E JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x324 JUMPI DUP2 PUSH1 0x20 PUSH2 0x321 SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x2D0 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x239 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP4 DUP4 SUB SLT PUSH2 0x376 JUMPI PUSH2 0x341 DUP3 PUSH1 0x0 DUP6 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH2 0x34F DUP4 PUSH1 0x20 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x371 JUMPI PUSH2 0x36E SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x38F PUSH2 0x38A PUSH2 0x394 SWAP3 PUSH2 0x12 JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x12 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3A0 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3AC SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x3CD JUMPI PUSH2 0x3C9 PUSH1 0x20 SWAP2 PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST SWAP1 PUSH2 0x3E4 PUSH2 0x3DF DUP4 PUSH2 0x3AF JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x3F3 PUSH1 0x0 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x3FE PUSH2 0x3E9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x409 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x412 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x461 PUSH2 0x457 PUSH2 0x451 PUSH2 0x447 PUSH2 0x43F PUSH2 0x439 PUSH1 0x0 CALLDATASIZE PUSH2 0x431 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x329 JUMP JUMPDEST SWAP4 SWAP2 SWAP3 SWAP1 SWAP3 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 PUSH2 0x3A3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x5EC JUMP JUMPDEST PUSH2 0x469 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLER PUSH2 0x486 PUSH2 0x480 PUSH2 0x47B PUSH2 0x17E JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x59D JUMPI PUSH2 0x496 PUSH2 0x54 JUMP JUMPDEST POP PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND DUP1 PUSH2 0x4BD PUSH2 0x4B7 PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x4D7 JUMPI POP PUSH2 0x4CE PUSH2 0x817 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST DUP1 PUSH2 0x4F1 PUSH2 0x4EB PUSH4 0x278F7943 PUSH1 0xE1 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x508 JUMPI POP PUSH2 0x502 PUSH2 0x7C1 JUMP JUMPDEST JUMPDEST PUSH2 0x4CF JUMP JUMPDEST DUP1 PUSH2 0x522 PUSH2 0x51C PUSH4 0x8F28397 PUSH1 0xE4 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x539 JUMPI POP PUSH2 0x533 PUSH2 0x723 JUMP JUMPDEST JUMPDEST PUSH2 0x503 JUMP JUMPDEST DUP1 PUSH2 0x553 PUSH2 0x54D PUSH4 0x3E14691 PUSH1 0xE6 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x56A JUMPI POP PUSH2 0x564 PUSH2 0x6BF JUMP JUMPDEST JUMPDEST PUSH2 0x534 JUMP JUMPDEST PUSH2 0x583 PUSH2 0x57D PUSH4 0x5C60DA1B PUSH1 0xE0 SHL PUSH2 0x59 JUMP JUMPDEST SWAP2 PUSH2 0x59 JUMP JUMPDEST EQ PUSH1 0x0 EQ PUSH2 0x598 JUMPI PUSH2 0x593 PUSH2 0x67A JUMP JUMPDEST PUSH2 0x565 JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST PUSH2 0x64A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x5B9 PUSH2 0x5B4 PUSH2 0x5BE SWAP3 PUSH2 0xF JUMP JUMPDEST PUSH2 0x1D JUMP JUMPDEST PUSH2 0x1A8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x5C8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5EA CALLVALUE PUSH2 0x5E4 PUSH2 0x5DE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x5C1 JUMP JUMPDEST JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x5F6 PUSH2 0x87A JUMP JUMPDEST PUSH2 0x611 PUSH2 0x60B PUSH2 0x606 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x62D JUMPI PUSH2 0x622 PUSH2 0x62B SWAP4 PUSH2 0x8B2 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 PUSH2 0x98D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 PUSH2 0x646 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x652 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST PUSH2 0x660 SWAP1 PUSH2 0x48 JUMP JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x678 SWAP1 PUSH1 0x0 PUSH1 0x20 DUP6 ADD SWAP5 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x682 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x68B PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6AD PUSH2 0x6BC PUSH2 0x699 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x6A1 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x6C7 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x6D0 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x6F2 PUSH2 0x701 PUSH2 0x6DE PUSH2 0x17E JUMP JUMPDEST PUSH2 0x6E6 PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP2 PUSH1 0x20 DUP4 ADD PUSH2 0x664 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE SUB DUP3 PUSH2 0x263 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x71E JUMPI PUSH2 0x71B SWAP2 PUSH1 0x0 ADD PUSH2 0x22A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x72B PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x734 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x770 PUSH2 0x76B PUSH2 0x766 PUSH2 0x75E PUSH2 0x758 PUSH1 0x0 CALLDATASIZE PUSH2 0x750 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x8B2 JUMP JUMPDEST PUSH2 0x778 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x7BC JUMPI PUSH2 0x795 DUP4 PUSH1 0x0 DUP4 ADD PUSH2 0x22A JUMP JUMPDEST SWAP3 PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7B7 JUMPI PUSH2 0x7B4 SWAP3 ADD PUSH2 0x306 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x204 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x7C9 PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x80C PUSH2 0x803 PUSH2 0x7FC PUSH2 0x7F4 PUSH2 0x7EE PUSH1 0x0 CALLDATASIZE PUSH2 0x7E6 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x77B JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x3A3 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x814 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x81F PUSH2 0x54 JUMP JUMPDEST POP PUSH2 0x828 PUSH2 0x5CD JUMP JUMPDEST PUSH2 0x86F PUSH2 0x85F PUSH2 0x85A PUSH2 0x852 PUSH2 0x84C PUSH1 0x0 CALLDATASIZE PUSH2 0x844 PUSH1 0x4 PUSH2 0x1AB JUMP JUMPDEST SWAP1 DUP1 SWAP3 PUSH2 0x1D7 JUMP JUMPDEST SWAP1 PUSH2 0x1FC JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x704 JUMP JUMPDEST PUSH2 0x3A3 JUMP JUMPDEST PUSH2 0x867 PUSH2 0x3F6 JUMP JUMPDEST PUSH1 0x0 SWAP2 PUSH2 0xB0A JUMP JUMPDEST PUSH2 0x877 PUSH2 0x3F6 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x882 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x88B PUSH2 0x17E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 PUSH1 0x20 PUSH2 0x8B0 SWAP3 SWAP5 SWAP4 PUSH2 0x8A9 PUSH1 0x40 DUP3 ADD SWAP7 PUSH1 0x0 DUP4 ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST ADD SWAP1 PUSH2 0x657 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x8FD SWAP1 PUSH2 0x8BE PUSH2 0x17E JUMP JUMPDEST DUP2 PUSH32 0x7E644D79422F17C01E4894B5F4F588D331EBFA28653D42AE832DC59E38C9798F SWAP2 PUSH2 0x8F5 PUSH2 0x8EC PUSH2 0x1C7 JUMP JUMPDEST SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x88E JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0xC4D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x908 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x918 SWAP1 PUSH2 0x37B JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x924 SWAP1 PUSH2 0x90F JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x930 SWAP1 PUSH2 0x397 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xE0 SHL SWAP1 JUMP JUMPDEST PUSH2 0x942 DUP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0x949 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP MLOAD SWAP1 PUSH2 0x95B DUP3 PUSH2 0x939 JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x977 JUMPI PUSH2 0x974 SWAP2 PUSH1 0x0 ADD PUSH2 0x94E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x984 PUSH2 0x1C7 JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 PUSH2 0x997 DUP4 PUSH2 0xE30 JUMP JUMPDEST DUP3 PUSH2 0x9C2 PUSH32 0x1CF3B03A6CF19FA2BABA4DF148E9DCABEDEA7F8A5C07840E207E5C089BE95D3E SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x9CB PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x9D5 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH2 0x9E1 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x9F4 PUSH2 0x9EE PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xA9E JUMPI JUMPDEST POP PUSH2 0xA07 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x20 PUSH2 0xA1D PUSH2 0xA18 PUSH2 0xA33 SWAP5 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xA2B PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xA43 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xA99 JUMPI PUSH2 0xA61 SWAP3 PUSH1 0x0 SWAP3 PUSH2 0xA69 JUMPI JUMPDEST POP SWAP1 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xA03 JUMP JUMPDEST PUSH2 0xA8B SWAP2 SWAP3 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xA92 JUMPI JUMPDEST PUSH2 0xA83 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0xA5A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xA79 JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0x9FD JUMP JUMPDEST PUSH2 0xAAE PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xAB7 PUSH2 0xF85 JUMP JUMPDEST DUP1 PUSH2 0xAD3 PUSH2 0xACD PUSH2 0xAC8 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST SUB PUSH2 0xAE4 JUMPI POP PUSH2 0xAE1 PUSH2 0xF99 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP2 CALLDATASIZE DUP3 DUP1 CALLDATACOPY DUP2 CALLDATASIZE SWAP2 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 EQ PUSH2 0xB05 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH2 0xB14 DUP4 PUSH2 0x102F JUMP JUMPDEST PUSH2 0xB1D DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0xB30 PUSH2 0xB2A PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 DUP2 ISZERO PUSH2 0xB54 JUMPI JUMPDEST POP PUSH2 0xB43 JUMPI JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xB4C SWAP2 PUSH2 0xF65 JUMP JUMPDEST POP CODESIZE DUP1 PUSH2 0xB3F JUMP JUMPDEST SWAP1 POP CODESIZE PUSH2 0xB39 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E65772061646D696E20697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xBC0 PUSH1 0x26 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xBC9 DUP2 PUSH2 0xB65 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xBE3 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xBB3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xBED JUMPI JUMP JUMPDEST PUSH2 0xBF5 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xC0B PUSH1 0x4 DUP3 ADD PUSH2 0xBCD JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 PUSH2 0xC20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0xFE JUMP JUMPDEST SWAP2 DUP2 NOT AND SWAP2 AND OR SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xC42 PUSH2 0xC3D PUSH2 0xC49 SWAP3 PUSH2 0x8FF JUMP JUMPDEST PUSH2 0xC2A JUMP JUMPDEST DUP3 SLOAD PUSH2 0xC0F JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC8F SWAP1 PUSH2 0xC77 DUP2 PUSH2 0xC70 PUSH2 0xC6A PUSH2 0xC65 PUSH1 0x0 PUSH2 0x3C JUMP JUMPDEST PUSH2 0x48 JUMP JUMPDEST SWAP2 PUSH2 0x48 JUMP JUMPDEST EQ ISZERO PUSH2 0xBE6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC89 PUSH2 0xC84 PUSH2 0x120 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x20 PUSH32 0x7472616374000000000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720626561636F6E206973206E6F74206120636F6E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xCEC PUSH1 0x25 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xCF5 DUP2 PUSH2 0xC91 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xD0F SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xCDF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xD19 JUMPI JUMP JUMPDEST PUSH2 0xD21 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xD37 PUSH1 0x4 DUP3 ADD PUSH2 0xCF9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH32 0x73206E6F74206120636F6E747261637400000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A20626561636F6E20696D706C656D656E746174696F6E2069 PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xD96 PUSH1 0x30 PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0xD9F DUP2 PUSH2 0xD3B JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0xDB9 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0xD89 JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xDC3 JUMPI JUMP JUMPDEST PUSH2 0xDCB PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0xDE1 PUSH1 0x4 DUP3 ADD PUSH2 0xDA3 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xDFC PUSH2 0xDF7 PUSH2 0xE01 SWAP3 PUSH2 0xDE5 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE2D PUSH32 0xA3F0AD74E5423AEBFD80D3EF4346578335A9A72AEAEE59FF6CB3582B35133D50 PUSH2 0xDE8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xE6E SWAP1 PUSH2 0xE45 PUSH2 0xE40 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0xD12 JUMP JUMPDEST PUSH1 0x20 PUSH2 0xE58 PUSH2 0xE53 DUP4 PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xE66 PUSH2 0x1C7 JUMP JUMPDEST SWAP5 DUP6 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xE7E PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL DUP1 ISZERO PUSH2 0xEEE JUMPI PUSH2 0xEA1 PUSH2 0xEA6 SWAP2 PUSH2 0xEBE SWAP5 PUSH1 0x0 SWAP2 PUSH2 0xEC0 JUMPI JUMPDEST POP PUSH2 0x107F JUMP JUMPDEST PUSH2 0xDBC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEB8 PUSH2 0xEB3 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEE1 SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xEE7 JUMPI JUMPDEST PUSH2 0xED9 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xE9B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xECF JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH1 0x20 PUSH32 0x206661696C656400000000000000000000000000000000000000000000000000 SWAP2 PUSH32 0x416464726573733A206C6F772D6C6576656C2064656C65676174652063616C6C PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0xF4B PUSH1 0x27 PUSH2 0x3D2 JUMP JUMPDEST SWAP1 PUSH2 0xF58 PUSH1 0x20 DUP4 ADD PUSH2 0xEF3 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xF62 PUSH2 0xF41 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0xF82 SWAP2 PUSH2 0xF72 PUSH2 0x54 JUMP JUMPDEST POP SWAP1 PUSH2 0xF7C PUSH2 0xF5A JUMP JUMPDEST SWAP2 PUSH2 0x10E2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xF8D PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xF96 PUSH2 0x1160 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xFA1 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0xFD5 PUSH1 0x20 PUSH2 0xFBF PUSH2 0xFBA PUSH2 0xFB5 PUSH2 0x1187 JUMP JUMPDEST PUSH2 0x91B JUMP JUMPDEST PUSH2 0x927 JUMP JUMPDEST PUSH4 0x5C60DA1B SWAP1 PUSH2 0xFCD PUSH2 0x1C7 JUMP JUMPDEST SWAP4 DUP5 SWAP3 PUSH2 0x933 JUMP JUMPDEST DUP3 MSTORE DUP2 DUP1 PUSH2 0xFE5 PUSH1 0x4 DUP3 ADD PUSH2 0x65 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x102A JUMPI PUSH1 0x0 SWAP2 PUSH2 0xFFC JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x101D SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0x1023 JUMPI JUMPDEST PUSH2 0x1015 DUP2 DUP4 PUSH2 0x263 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x95D JUMP JUMPDEST CODESIZE PUSH2 0xFF8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x100B JUMP JUMPDEST PUSH2 0x97C JUMP JUMPDEST PUSH2 0x1038 DUP2 PUSH2 0x1258 JUMP JUMPDEST PUSH2 0x1062 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP2 PUSH2 0x8FF JUMP JUMPDEST SWAP1 PUSH2 0x106B PUSH2 0x1C7 JUMP JUMPDEST DUP1 PUSH2 0x1075 DUP2 PUSH2 0x65 JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x1087 PUSH2 0x107A JUMP JUMPDEST POP EXTCODESIZE PUSH2 0x109C PUSH2 0x1096 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x10B2 PUSH2 0x10AD DUP4 PUSH2 0x2A1 JUMP JUMPDEST PUSH2 0x28C JUMP JUMPDEST SWAP2 DUP3 MSTORE JUMP JUMPDEST RETURNDATASIZE PUSH1 0x0 EQ PUSH2 0x10D4 JUMPI PUSH2 0x10C8 RETURNDATASIZE PUSH2 0x10A0 JUMP JUMPDEST SWAP1 RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST JUMP JUMPDEST PUSH2 0x10DC PUSH2 0x54 JUMP JUMPDEST SWAP1 PUSH2 0x10D2 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x0 DUP1 PUSH2 0x1112 SWAP5 PUSH2 0x10F3 PUSH2 0x54 JUMP JUMPDEST POP DUP5 SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 MLOAD SWAP2 GAS DELEGATECALL SWAP2 PUSH2 0x1108 PUSH2 0x10B7 JUMP JUMPDEST SWAP1 SWAP3 SWAP1 SWAP2 SWAP3 PUSH2 0x130B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x112C PUSH2 0x1127 PUSH2 0x1131 SWAP3 PUSH2 0x1115 JUMP JUMPDEST PUSH2 0xFE JUMP JUMPDEST PUSH2 0xFB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x115D PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH2 0x1118 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1168 PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x1184 PUSH1 0x0 PUSH2 0x117E PUSH2 0x1179 PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x118F PUSH2 0xF3 JUMP JUMPDEST POP PUSH2 0x11AB PUSH1 0x0 PUSH2 0x11A5 PUSH2 0x11A0 PUSH2 0xE04 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0x171 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x20 PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 SWAP2 PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH2 0x1209 PUSH1 0x2D PUSH1 0x40 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x1212 DUP2 PUSH2 0x11AE JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x122C SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x11FC JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1236 JUMPI JUMP JUMPDEST PUSH2 0x123E PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1254 PUSH1 0x4 DUP3 ADD PUSH2 0x1216 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH2 0x1285 SWAP1 PUSH2 0x126D PUSH2 0x1268 DUP3 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127F PUSH2 0x127A PUSH2 0x1134 JUMP JUMPDEST PUSH2 0x5A2 JUMP JUMPDEST ADD PUSH2 0xC2D JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0x12BC PUSH1 0x1D PUSH1 0x20 SWAP3 PUSH2 0xB5C JUMP JUMPDEST PUSH2 0x12C5 DUP2 PUSH2 0x1287 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x12DF SWAP1 PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x0 DUP2 DUP4 SUB SWAP2 ADD MSTORE PUSH2 0x12AF JUMP JUMPDEST SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x12E9 JUMPI JUMP JUMPDEST PUSH2 0x12F1 PUSH2 0x1C7 JUMP JUMPDEST PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 PUSH2 0x1307 PUSH1 0x4 DUP3 ADD PUSH2 0x12C9 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 PUSH2 0x1316 PUSH2 0x54 JUMP JUMPDEST POP PUSH1 0x0 EQ PUSH2 0x135C JUMPI POP PUSH2 0x1328 DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x133B PUSH2 0x1335 PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST EQ PUSH2 0x1345 JUMPI JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1351 PUSH2 0x1356 SWAP2 PUSH2 0x107F JUMP JUMPDEST PUSH2 0x12E2 JUMP JUMPDEST CODESIZE PUSH2 0x1341 JUMP JUMPDEST DUP3 PUSH2 0x13D5 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x137A JUMPI POP POP SWAP1 PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 PUSH1 0x20 SWAP2 DUP4 ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH2 0x1369 JUMP JUMPDEST PUSH2 0x13AA PUSH2 0x13B3 PUSH1 0x20 SWAP4 PUSH2 0x13B8 SWAP4 PUSH2 0x13A1 DUP2 PUSH2 0x1362 JUMP JUMPDEST SWAP4 DUP5 DUP1 SWAP4 PUSH2 0xB5C JUMP JUMPDEST SWAP6 DUP7 SWAP2 ADD PUSH2 0x1366 JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST PUSH2 0x13D2 SWAP2 PUSH1 0x20 DUP3 ADD SWAP2 PUSH1 0x0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x138B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x13DF DUP3 PUSH2 0x90B JUMP JUMPDEST PUSH2 0x13F2 PUSH2 0x13EC PUSH1 0x0 PUSH2 0x5A5 JUMP JUMPDEST SWAP2 PUSH2 0x1A8 JUMP JUMPDEST GT PUSH1 0x0 EQ PUSH2 0x1403 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH2 0x1424 SWAP1 PUSH2 0x140F PUSH2 0x1C7 JUMP JUMPDEST SWAP2 DUP3 SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x13BC JUMP JUMPDEST SUB SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB XOR SWAP10 0xE6 0x1F CODESIZE STATICCALL 0xA7 DUP12 0xFB 0xAB PUSH26 0xB8DC2FA613357C2FCE2699411F9FEE80B624365564736F6C6343 STOP ADDMOD SHL STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD PUSH5 0x6062CB4172 SWAP3 0xF6 0xD2 DUP10 DUP15 GAS 0xDA 0xF 0xE1 0x4E PUSH25 0xD8B561E44329E18B3E3630EDC17D64736F6C634300081B0033 ",
              "sourceMap": "335:1670:37:-:0;;;;;;;;;-1:-1:-1;335:1670:37;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::o;746:31:30:-;;;;;;:::i;:::-;;:::o;335:1670:37:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;1063:62:4;1117:1;1063:62;;;:::i;:::-;1117:1;:::i;:::-;1063:62::o;335:1670:37:-;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;:::i;:::-;;;;;;;;2718:127:30;2806:16;:6;;;:::i;:::-;:16;:::i;:::-;;;2823:14;2806:32;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;2718:127;;:::o;2806:32::-;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;:::i;2718:127::-;;;;:::i;:::-;:::o;1063:62:4:-;;;:::i;:::-;1117:1;;:::i;:::-;1063:62::o;335:1670:37:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;1824:101:4:-;1907:10;;1915:1;1907:10;:::i;:::-;;:::i;:::-;1824:101::o;:::-;;;:::i;:::-;:::o;335:1670:37:-;;;:::o;:::-;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;:::o;:::-;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;:::i;:::-;;:::o;1506:496::-;;;1953:42;1506:496;1843:92;1506:496;;1843:92;1506:496;1777:17;;:::i;:::-;1854:10;1866:4;1872:6;1880:8;1890:21;1913;1843:92;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;1833:103;;;;:::i;:::-;;;:::i;:::-;;1980:10;1953:42;;:::i;:::-;;;:::i;:::-;1946:49;:::o;335:1670::-;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;1201:85:4:-;1247:7;;:::i;:::-;1273:6;;;;:::i;:::-;1266:13;:::o;335:1670:37:-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;758:694::-;1195:34;758:694;;;;;;;1014:17;;:::i;:::-;1091:10;;1080:92;1103:4;1109:6;1080:92;1109:6;1117:8;1127:21;1150;;1080:92;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;1070:103;;;;:::i;:::-;;;:::i;:::-;;1214:10;1195:34;;:::i;:::-;;;:::i;:::-;1250:9;1239:32;:21;1250:9;1239:21;:::i;:::-;:32;:::i;:::-;;;1285:10;1297:4;1303:6;1311:8;1321:21;1344;1239:136;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;758:694;1409:9;;1390:29;;;;;:::i;:::-;;;;;;:::i;:::-;;;;1429:16;:::o;1239:136::-;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;:::i;1063:62:4:-;1117:1;1063:62;;;:::i;:::-;1117:1;:::i;:::-;1063:62::o;335:1670:37:-;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;2074:198:4;2256:8;2074:198;2154:73;2162:8;:22;;2174:10;2182:1;2174:10;:::i;:::-;2162:22;:::i;:::-;;;:::i;:::-;;;2154:73;:::i;:::-;2256:8;:::i;:::-;2074:198::o;:::-;;;;:::i;:::-;:::o;335:1670:37:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;1359:130:4;1414:68;1422:7;;:::i;:::-;:23;;1433:12;;:::i;:::-;1422:23;:::i;:::-;;;:::i;:::-;;1414:68;:::i;:::-;1359:130::o;335:1670:37:-;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;2426:187:4:-;2518:6;;;:::i;:::-;2534:17;2543:8;2534:17;;:::i;:::-;2597:8;2566:40;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;:::i;:::-;;;;2426:187::o;335:1670:37:-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;;:::o;2174:419:30:-;2538:48;2174:419;;2363:60;;2174:419;2313:7;;:::i;:::-;2380:5;2387:11;2408:6;2400:15;2408:6;;;:::i;:::-;2400:15;:::i;:::-;2363:60;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;2353:71;;;;:::i;:::-;;;:::i;:::-;;2467:52;;;;;;:::i;:::-;;;;;;;;;;2457:63;;;;:::i;:::-;;;:::i;:::-;;2538:48;;:::i;:::-;2531:55;:::o;335:1670:37:-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;:::o;1424:523:30:-;1786:39;1424:523;;;;;1550:20;;:::i;:::-;1630:5;1613:60;1637:11;1658:6;1613:60;1650:15;1658:6;;;:::i;:::-;1650:15;:::i;:::-;1667:5;1613:60;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;1603:71;;;;:::i;:::-;;;:::i;:::-;;1708:52;;;;;;:::i;:::-;;;;;;;;;;1786:39;1801:1;1804:10;1816:8;1786:39;;:::i;:::-;;:::i;:::-;1878:12;1835:68;:57;1870:21;1878:12;1870:21;:::i;:::-;1835:57;:::i;:::-;:68;:::i;:::-;;1904:11;1925:6;1917:15;1925:6;;;:::i;:::-;1917:15;:::i;:::-;1934:5;1835:105;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;1424:523;;:::o;1835:105::-;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;:::i;640:96:15:-;693:7;;:::i;:::-;719:10;;712:17;:::o;335:1670:37:-;;;;:::i;:::-;;:::o;1769:165:16:-;;1878:49;1769:165;1852:7;;:::i;:::-;1893:4;1899:12;1913:13;1921:4;1913:13;:::i;:::-;1878:49;;:::i;:::-;1871:56;:::o;335:1670:37:-;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;1081:484:16;;;;1168:12;;:::i;:::-;1208:4;1192:73;1200:13;1208:4;1200:13;:::i;:::-;:21;:31;;1225:6;1200:31;:::i;:::-;;;:::i;:::-;;;1192:73;:::i;:::-;1275:65;1283:15;:8;:15;:::i;:::-;:20;;1302:1;1283:20;:::i;:::-;;;:::i;:::-;;;1275:65;:::i;:::-;1393:100;;;;;;;1510:4;1502:56;1510:4;:18;;1518:10;1526:1;1518:10;:::i;:::-;1510:18;:::i;:::-;;;:::i;:::-;;;1502:56;:::i;:::-;1081:484::o;2177:1772::-;;2345:1598;2177:1772;2345:1598;2177:1772;2278:12;;:::i;:::-;2345:1598;;;;;;;;;;;;;;;;;;;2177:1772;:::o"
            },
            "methodIdentifiers": {
              "beacon()": "59659e90",
              "deploy(address,address,string,string,uint8,address,bytes32)": "f13b273d",
              "determineAddress(address,address,string,string,uint8,address,bytes32)": "8cfd4e5e",
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferOwnership(address)": "f2fde38b",
              "upgradeBeacon(address)": "1bce4583"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"name\":\"ERC20ItemsDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beacon\",\"outputs\":[{\"internalType\":\"contract UpgradeableBeacon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"determineAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"upgradeBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ERC20ItemsDeployed(address)\":{\"params\":{\"proxyAddr\":\"The address of the deployed proxy.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"factoryOwner\":\"The owner of the ERC-20 Items Factory\"}},\"deploy(address,address,string,string,uint8,address,bytes32)\":{\"params\":{\"decimals\":\"The decimals of the ERC-20 Items proxy\",\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"name\":\"The name of the ERC-20 Items proxy\",\"proxyOwner\":\"The owner of the ERC-20 Items proxy\",\"symbol\":\"The symbol of the ERC-20 Items proxy\",\"tokenOwner\":\"The owner of the ERC-20 Items implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-20 Items Proxy\"}},\"determineAddress(address,address,string,string,uint8,address,bytes32)\":{\"params\":{\"decimals\":\"The decimals of the ERC-20 Items proxy\",\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"name\":\"The name of the ERC-20 Items proxy\",\"proxyOwner\":\"The owner of the ERC-20 Items proxy\",\"symbol\":\"The symbol of the ERC-20 Items proxy\",\"tokenOwner\":\"The owner of the ERC-20 Items implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-20 Items Proxy\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeBeacon(address)\":{\"params\":{\"implementation\":\"The new beacon implementation.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ERC20ItemsDeployed(address)\":{\"notice\":\"Event emitted when a new ERC-20 Items proxy contract is deployed.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Creates an ERC-20 Items Factory.\"},\"deploy(address,address,string,string,uint8,address,bytes32)\":{\"notice\":\"Creates an ERC-20 Items proxy.\"},\"determineAddress(address,address,string,string,uint8,address,bytes32)\":{\"notice\":\"Computes the address of a proxy instance.\"},\"upgradeBeacon(address)\":{\"notice\":\"Upgrades the beacon implementation.\"}},\"notice\":\"Deployer of ERC-20 Items proxies.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC20/presets/items/ERC20ItemsFactory.sol\":\"ERC20ItemsFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\\n     * beacon.\\n     */\\n    constructor(address implementation_) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableBeacon: implementation is not a contract\\\");\\n        _implementation = newImplementation;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec71aef5659f3f74011169948d2fcda8c6599be5bb38f986380a8737f96cc0f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IImplicitProjectValidation } from \\\"../registry/IImplicitProjectValidation.sol\\\";\\n\\nimport { ERC165, IERC165 } from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\nimport { ISignalsImplicitMode } from \\\"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\\\";\\nimport { Payload } from \\\"sequence-v3/src/modules/Payload.sol\\\";\\n\\n/// @title SignalsImplicitMode\\n/// @author Michael Standen\\n/// @notice Base contract for implicit mode validation by project\\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\\n\\n  IImplicitProjectValidation internal _validator;\\n  bytes32 internal _projectId;\\n\\n  /// @notice Initialize implicit mode validation\\n  /// @param validator The IImplicitProjectValidation address\\n  /// @param projectId The project id\\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\\n    _validator = IImplicitProjectValidation(validator);\\n    _projectId = projectId;\\n  }\\n\\n  /// @inheritdoc ISignalsImplicitMode\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32) {\\n    _validateImplicitRequest(wallet, attestation, call);\\n    return _validator.validateAttestation(wallet, attestation, _projectId);\\n  }\\n\\n  /// @notice Validates an implicit request\\n  /// @dev Optional hook for additional validation of the implicit requests\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  function _validateImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) internal view virtual { }\\n\\n  /// @inheritdoc IERC165\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd9107be2460f7f7ec4bdfefc3d10c79aa92b9285e1b12a75cb2a8d17b150a2ec\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"},\"src/proxies/SequenceProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport {\\n    ITransparentUpgradeableBeaconProxy,\\n    TransparentUpgradeableBeaconProxy\\n} from \\\"./TransparentUpgradeableBeaconProxy.sol\\\";\\n\\nimport { Ownable } from \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport { UpgradeableBeacon } from \\\"openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\nimport { Create2 } from \\\"openzeppelin-contracts/contracts/utils/Create2.sol\\\";\\n\\n/**\\n * An proxy factory that deploys upgradeable beacon proxies.\\n * @dev The factory owner is able to upgrade the beacon implementation.\\n * @dev Proxy deployers are able to override the beacon reference with their own.\\n */\\nabstract contract SequenceProxyFactory is Ownable {\\n\\n    UpgradeableBeacon public beacon;\\n\\n    /**\\n     * Initialize a Sequence Proxy Factory.\\n     * @param implementation The initial beacon implementation.\\n     * @param factoryOwner The owner of the factory.\\n     */\\n    function _initialize(address implementation, address factoryOwner) internal {\\n        beacon = new UpgradeableBeacon(implementation);\\n        Ownable._transferOwnership(factoryOwner);\\n    }\\n\\n    /**\\n     * Deploys and initializes a new proxy instance.\\n     * @param _salt The deployment salt.\\n     * @param _proxyOwner The owner of the proxy.\\n     * @param _data The initialization data.\\n     * @return proxyAddress The address of the deployed proxy.\\n     */\\n    function _createProxy(\\n        bytes32 _salt,\\n        address _proxyOwner,\\n        bytes memory _data\\n    ) internal returns (address proxyAddress) {\\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\\n        bytes memory bytecode = type(TransparentUpgradeableBeaconProxy).creationCode;\\n\\n        proxyAddress = Create2.deploy(0, saltedHash, bytecode);\\n        ITransparentUpgradeableBeaconProxy(payable(proxyAddress)).initialize(_proxyOwner, address(beacon), _data);\\n    }\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param _salt The deployment salt.\\n     * @param _proxyOwner The owner of the proxy.\\n     * @return proxy The expected address of the deployed proxy.\\n     */\\n    function _computeProxyAddress(\\n        bytes32 _salt,\\n        address _proxyOwner,\\n        bytes memory _data\\n    ) internal view returns (address) {\\n        bytes32 saltedHash = keccak256(abi.encodePacked(_salt, _proxyOwner, address(beacon), _data));\\n        bytes32 bytecodeHash = keccak256(type(TransparentUpgradeableBeaconProxy).creationCode);\\n\\n        return Create2.computeAddress(saltedHash, bytecodeHash);\\n    }\\n\\n    /**\\n     * Upgrades the beacon implementation.\\n     * @param implementation The new beacon implementation.\\n     */\\n    function upgradeBeacon(\\n        address implementation\\n    ) public onlyOwner {\\n        beacon.upgradeTo(implementation);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1cfe45a8e44b7a1b8f11631da9bdd1420fe040e2322ca725d644fbb26813de73\",\"license\":\"Apache-2.0\"},\"src/proxies/TransparentUpgradeableBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { BeaconProxy, Proxy } from \\\"./openzeppelin/BeaconProxy.sol\\\";\\nimport { ERC1967Proxy, TransparentUpgradeableProxy } from \\\"./openzeppelin/TransparentUpgradeableProxy.sol\\\";\\n\\ninterface ITransparentUpgradeableBeaconProxy {\\n\\n    function initialize(address admin, address beacon, bytes memory data) external;\\n\\n}\\n\\nerror InvalidInitialization();\\n\\n/**\\n * @dev As the underlying proxy implementation (TransparentUpgradeableProxy) allows the admin to call the implementation,\\n * care must be taken to avoid proxy selector collisions. Implementation selectors must not conflict with the proxy selectors.\\n * See https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * The proxy selectors are:\\n * - 0xcf7a1d77: initialize\\n * - 0x3659cfe6: upgradeTo (from TransparentUpgradeableProxy)\\n * - 0x4f1ef286: upgradeToAndCall (from TransparentUpgradeableProxy)\\n * - 0x8f283970: changeAdmin (from TransparentUpgradeableProxy)\\n * - 0xf851a440: admin (from TransparentUpgradeableProxy)\\n * - 0x5c60da1b: implementation (from TransparentUpgradeableProxy)\\n */\\ncontract TransparentUpgradeableBeaconProxy is TransparentUpgradeableProxy, BeaconProxy {\\n\\n    /**\\n     * Decode the initialization data from the msg.data and call the initialize function.\\n     */\\n    function _dispatchInitialize() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        (address admin, address beacon, bytes memory data) = abi.decode(msg.data[4:], (address, address, bytes));\\n        initialize(admin, beacon, data);\\n\\n        return \\\"\\\";\\n    }\\n\\n    function initialize(address admin, address beacon, bytes memory data) internal {\\n        if (_admin() != address(0)) {\\n            // Redundant call. This function can only be called when the admin is not set.\\n            revert InvalidInitialization();\\n        }\\n        _changeAdmin(admin);\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev If the admin is not set, the fallback function is used to initialize the proxy.\\n     * @dev If the admin is set, the fallback function is used to delegatecall the implementation.\\n     */\\n    function _fallback() internal override(TransparentUpgradeableProxy, Proxy) {\\n        if (_getAdmin() == address(0)) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableBeaconProxy.initialize.selector) {\\n                ret = _dispatchInitialize();\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    return(add(ret, 0x20), mload(ret))\\n                }\\n            }\\n            // When the admin is not set, the fallback function is used to initialize the proxy.\\n            revert InvalidInitialization();\\n        }\\n        TransparentUpgradeableProxy._fallback();\\n    }\\n\\n    /**\\n     * Returns the current implementation address.\\n     * @dev This is the implementation address set by the admin, or the beacon implementation.\\n     */\\n    function _implementation() internal view override(ERC1967Proxy, BeaconProxy) returns (address) {\\n        address implementation = ERC1967Proxy._implementation();\\n        if (implementation != address(0)) {\\n            return implementation;\\n        }\\n        return BeaconProxy._implementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xf7c7834545a955cedbe5228c3583f72fb332337dd0b4ebcd5fdb0b6504c5a8cb\",\"license\":\"Apache-2.0\"},\"src/proxies/openzeppelin/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2aa58701eaf7336890fae8a17f5769adf764beac64f3c5873199cd56abd66d0d\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\n// Note: This implementation is an exact copy with the constructor removed, and pragma and imports updated.\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"openzeppelin-contracts/contracts/proxy/Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x87a69f59211b7b73c737e399211fd71d9b549b7d416e05c85b8ab605f64b3b00\",\"license\":\"MIT\"},\"src/proxies/openzeppelin/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\n/// @notice This implementation is a copy of OpenZeppelin's with the following changes:\\n/// - Pragma updated\\n/// - Imports updated\\n/// - Constructor removed\\n/// - Allows admin to call implementation\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\\n * include them in the ABI so this interface must be used to interact with it.\\n */\\ninterface ITransparentUpgradeableProxy is IERC1967 {\\n\\n    function admin() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n\\n    function changeAdmin(\\n        address\\n    ) external;\\n\\n    function upgradeTo(\\n        address\\n    ) external;\\n\\n    function upgradeToAndCall(address, bytes memory) external payable;\\n\\n}\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * Unlike the original OpenZeppelin implementation, this contract does not prevent the admin from calling the implementation.\\n * This potentially exposes the admin to a proxy selector attack. See\\n * https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector clashing].\\n * When using this contract, you must ensure that the implementation function selectors do not clash with the proxy selectors.\\n * The proxy selectors are:\\n * - 0x3659cfe6: upgradeTo\\n * - 0x4f1ef286: upgradeToAndCall\\n * - 0x8f283970: changeAdmin\\n * - 0xf851a440: admin\\n * - 0x5c60da1b: implementation\\n *\\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\\n * implementation.\\n *\\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     *\\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\\n     * implementation provides a function with the same selector.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\\n     */\\n    function _fallback() internal virtual override {\\n        if (msg.sender == _getAdmin()) {\\n            bytes memory ret;\\n            bytes4 selector = msg.sig;\\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\\n                ret = _dispatchUpgradeTo();\\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\\n                ret = _dispatchUpgradeToAndCall();\\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\\n                ret = _dispatchChangeAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\\n                ret = _dispatchAdmin();\\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\\n                ret = _dispatchImplementation();\\n            } else {\\n                // Call implementation\\n                return super._fallback();\\n            }\\n            assembly {\\n                return(add(ret, 0x20), mload(ret))\\n            }\\n        } else {\\n            super._fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function _dispatchAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address admin = _getAdmin();\\n        return abi.encode(admin);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _dispatchImplementation() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address implementation = _implementation();\\n        return abi.encode(implementation);\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _dispatchChangeAdmin() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newAdmin = abi.decode(msg.data[4:], (address));\\n        _changeAdmin(newAdmin);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     */\\n    function _dispatchUpgradeTo() private returns (bytes memory) {\\n        _requireZeroValue();\\n\\n        address newImplementation = abi.decode(msg.data[4:], (address));\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     */\\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\\n        _upgradeToAndCall(newImplementation, data, true);\\n\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\\n     */\\n    function _requireZeroValue() internal {\\n        require(msg.value == 0);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4615fce1ce5dccba23058d4d4567a4a4cd01ba0c434960fa0b94bf9d44f14e99\",\"license\":\"MIT\"},\"src/tokens/ERC20/ERC20BaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { SignalsImplicitModeControlled } from \\\"../common/SignalsImplicitModeControlled.sol\\\";\\n\\nimport { ERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\\\";\\nimport { IERC20 } from \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC20Metadata } from \\\"openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nerror InvalidInitialization();\\n\\n/**\\n * A standard base implementation of ERC-20 for use in Sequence library contracts.\\n */\\nabstract contract ERC20BaseToken is ERC20, SignalsImplicitModeControlled {\\n\\n    string internal _tokenName;\\n    string internal _tokenSymbol;\\n    uint8 private _tokenDecimals;\\n\\n    address private immutable _initializer;\\n    bool private _initialized;\\n\\n    constructor() ERC20(\\\"\\\", \\\"\\\") {\\n        _initializer = msg.sender;\\n    }\\n\\n    /**\\n     * Initialize contract.\\n     * @param owner The owner of the contract\\n     * @param tokenName Name of the token\\n     * @param tokenSymbol Symbol of the token\\n     * @param tokenDecimals Number of decimals\\n     * @param implicitModeValidator Implicit session validator address\\n     * @param implicitModeProjectId Implicit session project id\\n     * @dev This should be called immediately after deployment.\\n     */\\n    function initialize(\\n        address owner,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint8 tokenDecimals,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) public virtual {\\n        if (msg.sender != _initializer || _initialized) {\\n            revert InvalidInitialization();\\n        }\\n\\n        _tokenName = tokenName;\\n        _tokenSymbol = tokenSymbol;\\n        _tokenDecimals = tokenDecimals;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, owner);\\n\\n        _initializeImplicitMode(owner, implicitModeValidator, implicitModeProjectId);\\n\\n        _initialized = true;\\n    }\\n\\n    //\\n    // Burn\\n    //\\n\\n    /**\\n     * Allows the owner of the token to burn their tokens.\\n     * @param amount Amount of tokens to burn\\n     */\\n    function burn(\\n        uint256 amount\\n    ) public virtual {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC20).interfaceId || interfaceId == type(IERC20Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    //\\n    // ERC20 Overrides\\n    //\\n\\n    /**\\n     * Override the ERC20 name function.\\n     */\\n    function name() public view override returns (string memory) {\\n        return _tokenName;\\n    }\\n\\n    /**\\n     * Override the ERC20 symbol function.\\n     */\\n    function symbol() public view override returns (string memory) {\\n        return _tokenSymbol;\\n    }\\n\\n    /**\\n     * Override the ERC20 decimals function.\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return _tokenDecimals;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x54b850ac7eeeae98507d167db8195bc0ecf243bb04e5d64ff9e85707c26e5656\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC20/presets/items/ERC20Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { ERC20BaseToken } from \\\"../../ERC20BaseToken.sol\\\";\\nimport { IERC20Items, IERC20ItemsFunctions } from \\\"./IERC20Items.sol\\\";\\n\\n/**\\n * A ready made implementation of ERC-20 capable of minting when role provided.\\n */\\ncontract ERC20Items is ERC20BaseToken, IERC20Items {\\n\\n    bytes32 internal constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    address private immutable _initializer;\\n    bool private _initialized;\\n\\n    constructor() {\\n        _initializer = msg.sender;\\n    }\\n\\n    /**\\n     * Initialize contract.\\n     * @param owner The owner of the contract\\n     * @param tokenName Name of the token\\n     * @param tokenSymbol Symbol of the token\\n     * @param tokenDecimals Number of decimals\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @dev This should be called immediately after deployment.\\n     */\\n    function initialize(\\n        address owner,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint8 tokenDecimals,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) public virtual override {\\n        if (msg.sender != _initializer || _initialized) {\\n            revert InvalidInitialization();\\n        }\\n\\n        ERC20BaseToken.initialize(\\n            owner, tokenName, tokenSymbol, tokenDecimals, implicitModeValidator, implicitModeProjectId\\n        );\\n\\n        _grantRole(MINTER_ROLE, owner);\\n\\n        _initialized = true;\\n    }\\n\\n    //\\n    // Minting\\n    //\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param amount Amount of tokens to mint.\\n     * @notice This function can only be called by a items.\\n     */\\n    function mint(address to, uint256 amount) external onlyRole(MINTER_ROLE) {\\n        _mint(to, amount);\\n    }\\n\\n    //\\n    // Admin\\n    //\\n\\n    /**\\n     * Set name and symbol of token.\\n     * @param tokenName Name of token.\\n     * @param tokenSymbol Symbol of token.\\n     */\\n    function setNameAndSymbol(\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _tokenName = tokenName;\\n        _tokenSymbol = tokenSymbol;\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Check interface support.\\n     * @param interfaceId Interface id\\n     * @return True if supported\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return type(IERC20ItemsFunctions).interfaceId == interfaceId || ERC20BaseToken.supportsInterface(interfaceId)\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1f41ee30ef18bf3309068c4d57bd7c76684b1b68ba55536278f9ee4d25ac5a4d\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC20/presets/items/ERC20ItemsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { SequenceProxyFactory } from \\\"../../../../proxies/SequenceProxyFactory.sol\\\";\\nimport { ERC20Items } from \\\"./ERC20Items.sol\\\";\\nimport { IERC20ItemsFactory, IERC20ItemsFactoryFunctions } from \\\"./IERC20ItemsFactory.sol\\\";\\n\\n/**\\n * Deployer of ERC-20 Items proxies.\\n */\\ncontract ERC20ItemsFactory is IERC20ItemsFactory, SequenceProxyFactory {\\n\\n    /**\\n     * Creates an ERC-20 Items Factory.\\n     * @param factoryOwner The owner of the ERC-20 Items Factory\\n     */\\n    constructor(\\n        address factoryOwner\\n    ) {\\n        ERC20Items impl = new ERC20Items();\\n        SequenceProxyFactory._initialize(address(impl), factoryOwner);\\n    }\\n\\n    /// @inheritdoc IERC20ItemsFactoryFunctions\\n    function deploy(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr) {\\n        bytes32 salt =\\n            keccak256(abi.encode(tokenOwner, name, symbol, decimals, implicitModeValidator, implicitModeProjectId));\\n        proxyAddr = _createProxy(salt, proxyOwner, \\\"\\\");\\n        ERC20Items(proxyAddr).initialize(\\n            tokenOwner, name, symbol, decimals, implicitModeValidator, implicitModeProjectId\\n        );\\n        emit ERC20ItemsDeployed(proxyAddr);\\n        return proxyAddr;\\n    }\\n\\n    /// @inheritdoc IERC20ItemsFactoryFunctions\\n    function determineAddress(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external view returns (address proxyAddr) {\\n        bytes32 salt =\\n            keccak256(abi.encode(tokenOwner, name, symbol, decimals, implicitModeValidator, implicitModeProjectId));\\n        return _computeProxyAddress(salt, proxyOwner, \\\"\\\");\\n    }\\n\\n}\\n\",\"keccak256\":\"0x88836b2fc400d7f82e55aa90316769fe9022b66d4bb139068ab9177b730908b8\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC20/presets/items/IERC20Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC20ItemsFunctions {\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param amount Amount of tokens to mint.\\n     */\\n    function mint(address to, uint256 amount) external;\\n\\n    /**\\n     * Set name and symbol of token.\\n     * @param tokenName Name of token.\\n     * @param tokenSymbol Symbol of token.\\n     */\\n    function setNameAndSymbol(string memory tokenName, string memory tokenSymbol) external;\\n\\n}\\n\\ninterface IERC20ItemsSignals {\\n\\n    /**\\n     * Invalid initialization error.\\n     */\\n    error InvalidInitialization();\\n\\n}\\n\\ninterface IERC20Items is IERC20ItemsFunctions, IERC20ItemsSignals { }\\n\",\"keccak256\":\"0xfa6b8383ebde0ec4135a6b37ea408762628f3f0d534fcd4b013d9cd831bb8b85\",\"license\":\"Apache-2.0\"},\"src/tokens/ERC20/presets/items/IERC20ItemsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC20ItemsFactoryFunctions {\\n\\n    /**\\n     * Creates an ERC-20 Items proxy.\\n     * @param proxyOwner The owner of the ERC-20 Items proxy\\n     * @param tokenOwner The owner of the ERC-20 Items implementation\\n     * @param name The name of the ERC-20 Items proxy\\n     * @param symbol The symbol of the ERC-20 Items proxy\\n     * @param decimals The decimals of the ERC-20 Items proxy\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-20 Items Proxy\\n     */\\n    function deploy(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param proxyOwner The owner of the ERC-20 Items proxy\\n     * @param tokenOwner The owner of the ERC-20 Items implementation\\n     * @param name The name of the ERC-20 Items proxy\\n     * @param symbol The symbol of the ERC-20 Items proxy\\n     * @param decimals The decimals of the ERC-20 Items proxy\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-20 Items Proxy\\n     */\\n    function determineAddress(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external view returns (address proxyAddr);\\n\\n}\\n\\ninterface IERC20ItemsFactorySignals {\\n\\n    /**\\n     * Event emitted when a new ERC-20 Items proxy contract is deployed.\\n     * @param proxyAddr The address of the deployed proxy.\\n     */\\n    event ERC20ItemsDeployed(address proxyAddr);\\n\\n}\\n\\ninterface IERC20ItemsFactory is IERC20ItemsFactoryFunctions, IERC20ItemsFactorySignals { }\\n\",\"keccak256\":\"0x14c7559058854d072448a826cf8f4bac8b5b16f8e06acae7865c8b5b5d66d13e\",\"license\":\"Apache-2.0\"},\"src/tokens/common/SignalsImplicitModeControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport {\\n    IERC165,\\n    IImplicitProjectValidation,\\n    SignalsImplicitMode\\n} from \\\"signals-implicit-mode/src/helper/SignalsImplicitMode.sol\\\";\\n\\n/**\\n * An abstract contract that allows implicit session access for a given project.\\n */\\nabstract contract SignalsImplicitModeControlled is AccessControlEnumerable, SignalsImplicitMode {\\n\\n    bytes32 internal constant _IMPLICIT_MODE_ADMIN_ROLE = keccak256(\\\"IMPLICIT_MODE_ADMIN_ROLE\\\");\\n\\n    function _initializeImplicitMode(address owner, address validator, bytes32 projectId) internal {\\n        _grantRole(_IMPLICIT_MODE_ADMIN_ROLE, owner);\\n        _initializeSignalsImplicitMode(validator, projectId);\\n    }\\n\\n    /**\\n     * Updates the validator for implicit mode validation.\\n     * @param validator The validator address.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeValidator(\\n        address validator\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _validator = IImplicitProjectValidation(validator);\\n    }\\n\\n    /**\\n     * Updates the settings for implicit mode validation.\\n     * @param projectId The project id.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeProjectId(\\n        bytes32 projectId\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _projectId = projectId;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable, SignalsImplicitMode) returns (bool) {\\n        return\\n            AccessControlEnumerable.supportsInterface(interfaceId) || SignalsImplicitMode.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb1a20575f188af254f90ec7df7f70415610ba5f41f7966ce383b50063220b860\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "events": {
              "ERC20ItemsDeployed(address)": {
                "notice": "Event emitted when a new ERC-20 Items proxy contract is deployed."
              }
            },
            "kind": "user",
            "methods": {
              "constructor": {
                "notice": "Creates an ERC-20 Items Factory."
              },
              "deploy(address,address,string,string,uint8,address,bytes32)": {
                "notice": "Creates an ERC-20 Items proxy."
              },
              "determineAddress(address,address,string,string,uint8,address,bytes32)": {
                "notice": "Computes the address of a proxy instance."
              },
              "upgradeBeacon(address)": {
                "notice": "Upgrades the beacon implementation."
              }
            },
            "notice": "Deployer of ERC-20 Items proxies.",
            "version": 1
          }
        }
      },
      "src/tokens/ERC20/presets/items/IERC20Items.sol": {
        "IERC20Items": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidInitialization",
              "type": "error"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "tokenName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "tokenSymbol",
                  "type": "string"
                }
              ],
              "name": "setNameAndSymbol",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "mint(address,uint256)": {
                "params": {
                  "amount": "Amount of tokens to mint.",
                  "to": "Address to mint tokens to."
                }
              },
              "setNameAndSymbol(string,string)": {
                "params": {
                  "tokenName": "Name of token.",
                  "tokenSymbol": "Symbol of token."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "mint(address,uint256)": "40c10f19",
              "setNameAndSymbol(string,string)": "5a446215"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"setNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"mint(address,uint256)\":{\"params\":{\"amount\":\"Amount of tokens to mint.\",\"to\":\"Address to mint tokens to.\"}},\"setNameAndSymbol(string,string)\":{\"params\":{\"tokenName\":\"Name of token.\",\"tokenSymbol\":\"Symbol of token.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"notice\":\"Invalid initialization error.\"}]},\"kind\":\"user\",\"methods\":{\"mint(address,uint256)\":{\"notice\":\"Mint tokens.\"},\"setNameAndSymbol(string,string)\":{\"notice\":\"Set name and symbol of token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC20/presets/items/IERC20Items.sol\":\"IERC20Items\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC20/presets/items/IERC20Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC20ItemsFunctions {\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param amount Amount of tokens to mint.\\n     */\\n    function mint(address to, uint256 amount) external;\\n\\n    /**\\n     * Set name and symbol of token.\\n     * @param tokenName Name of token.\\n     * @param tokenSymbol Symbol of token.\\n     */\\n    function setNameAndSymbol(string memory tokenName, string memory tokenSymbol) external;\\n\\n}\\n\\ninterface IERC20ItemsSignals {\\n\\n    /**\\n     * Invalid initialization error.\\n     */\\n    error InvalidInitialization();\\n\\n}\\n\\ninterface IERC20Items is IERC20ItemsFunctions, IERC20ItemsSignals { }\\n\",\"keccak256\":\"0xfa6b8383ebde0ec4135a6b37ea408762628f3f0d534fcd4b013d9cd831bb8b85\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidInitialization()": [
                {
                  "notice": "Invalid initialization error."
                }
              ]
            },
            "kind": "user",
            "methods": {
              "mint(address,uint256)": {
                "notice": "Mint tokens."
              },
              "setNameAndSymbol(string,string)": {
                "notice": "Set name and symbol of token."
              }
            },
            "version": 1
          }
        },
        "IERC20ItemsFunctions": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "tokenName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "tokenSymbol",
                  "type": "string"
                }
              ],
              "name": "setNameAndSymbol",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "mint(address,uint256)": {
                "params": {
                  "amount": "Amount of tokens to mint.",
                  "to": "Address to mint tokens to."
                }
              },
              "setNameAndSymbol(string,string)": {
                "params": {
                  "tokenName": "Name of token.",
                  "tokenSymbol": "Symbol of token."
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "mint(address,uint256)": "40c10f19",
              "setNameAndSymbol(string,string)": "5a446215"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"name\":\"setNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"mint(address,uint256)\":{\"params\":{\"amount\":\"Amount of tokens to mint.\",\"to\":\"Address to mint tokens to.\"}},\"setNameAndSymbol(string,string)\":{\"params\":{\"tokenName\":\"Name of token.\",\"tokenSymbol\":\"Symbol of token.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mint(address,uint256)\":{\"notice\":\"Mint tokens.\"},\"setNameAndSymbol(string,string)\":{\"notice\":\"Set name and symbol of token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC20/presets/items/IERC20Items.sol\":\"IERC20ItemsFunctions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC20/presets/items/IERC20Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC20ItemsFunctions {\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param amount Amount of tokens to mint.\\n     */\\n    function mint(address to, uint256 amount) external;\\n\\n    /**\\n     * Set name and symbol of token.\\n     * @param tokenName Name of token.\\n     * @param tokenSymbol Symbol of token.\\n     */\\n    function setNameAndSymbol(string memory tokenName, string memory tokenSymbol) external;\\n\\n}\\n\\ninterface IERC20ItemsSignals {\\n\\n    /**\\n     * Invalid initialization error.\\n     */\\n    error InvalidInitialization();\\n\\n}\\n\\ninterface IERC20Items is IERC20ItemsFunctions, IERC20ItemsSignals { }\\n\",\"keccak256\":\"0xfa6b8383ebde0ec4135a6b37ea408762628f3f0d534fcd4b013d9cd831bb8b85\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "mint(address,uint256)": {
                "notice": "Mint tokens."
              },
              "setNameAndSymbol(string,string)": {
                "notice": "Set name and symbol of token."
              }
            },
            "version": 1
          }
        },
        "IERC20ItemsSignals": {
          "abi": [
            {
              "inputs": [],
              "name": "InvalidInitialization",
              "type": "error"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"notice\":\"Invalid initialization error.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC20/presets/items/IERC20Items.sol\":\"IERC20ItemsSignals\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC20/presets/items/IERC20Items.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC20ItemsFunctions {\\n\\n    /**\\n     * Mint tokens.\\n     * @param to Address to mint tokens to.\\n     * @param amount Amount of tokens to mint.\\n     */\\n    function mint(address to, uint256 amount) external;\\n\\n    /**\\n     * Set name and symbol of token.\\n     * @param tokenName Name of token.\\n     * @param tokenSymbol Symbol of token.\\n     */\\n    function setNameAndSymbol(string memory tokenName, string memory tokenSymbol) external;\\n\\n}\\n\\ninterface IERC20ItemsSignals {\\n\\n    /**\\n     * Invalid initialization error.\\n     */\\n    error InvalidInitialization();\\n\\n}\\n\\ninterface IERC20Items is IERC20ItemsFunctions, IERC20ItemsSignals { }\\n\",\"keccak256\":\"0xfa6b8383ebde0ec4135a6b37ea408762628f3f0d534fcd4b013d9cd831bb8b85\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "errors": {
              "InvalidInitialization()": [
                {
                  "notice": "Invalid initialization error."
                }
              ]
            },
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/tokens/ERC20/presets/items/IERC20ItemsFactory.sol": {
        "IERC20ItemsFactory": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "name": "ERC20ItemsDeployed",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "uint8",
                  "name": "decimals",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "deploy",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "uint8",
                  "name": "decimals",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "determineAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "events": {
              "ERC20ItemsDeployed(address)": {
                "params": {
                  "proxyAddr": "The address of the deployed proxy."
                }
              }
            },
            "kind": "dev",
            "methods": {
              "deploy(address,address,string,string,uint8,address,bytes32)": {
                "params": {
                  "decimals": "The decimals of the ERC-20 Items proxy",
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "name": "The name of the ERC-20 Items proxy",
                  "proxyOwner": "The owner of the ERC-20 Items proxy",
                  "symbol": "The symbol of the ERC-20 Items proxy",
                  "tokenOwner": "The owner of the ERC-20 Items implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-20 Items Proxy"
                }
              },
              "determineAddress(address,address,string,string,uint8,address,bytes32)": {
                "params": {
                  "decimals": "The decimals of the ERC-20 Items proxy",
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "name": "The name of the ERC-20 Items proxy",
                  "proxyOwner": "The owner of the ERC-20 Items proxy",
                  "symbol": "The symbol of the ERC-20 Items proxy",
                  "tokenOwner": "The owner of the ERC-20 Items implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-20 Items Proxy"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "deploy(address,address,string,string,uint8,address,bytes32)": "f13b273d",
              "determineAddress(address,address,string,string,uint8,address,bytes32)": "8cfd4e5e"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"name\":\"ERC20ItemsDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"determineAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ERC20ItemsDeployed(address)\":{\"params\":{\"proxyAddr\":\"The address of the deployed proxy.\"}}},\"kind\":\"dev\",\"methods\":{\"deploy(address,address,string,string,uint8,address,bytes32)\":{\"params\":{\"decimals\":\"The decimals of the ERC-20 Items proxy\",\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"name\":\"The name of the ERC-20 Items proxy\",\"proxyOwner\":\"The owner of the ERC-20 Items proxy\",\"symbol\":\"The symbol of the ERC-20 Items proxy\",\"tokenOwner\":\"The owner of the ERC-20 Items implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-20 Items Proxy\"}},\"determineAddress(address,address,string,string,uint8,address,bytes32)\":{\"params\":{\"decimals\":\"The decimals of the ERC-20 Items proxy\",\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"name\":\"The name of the ERC-20 Items proxy\",\"proxyOwner\":\"The owner of the ERC-20 Items proxy\",\"symbol\":\"The symbol of the ERC-20 Items proxy\",\"tokenOwner\":\"The owner of the ERC-20 Items implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-20 Items Proxy\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ERC20ItemsDeployed(address)\":{\"notice\":\"Event emitted when a new ERC-20 Items proxy contract is deployed.\"}},\"kind\":\"user\",\"methods\":{\"deploy(address,address,string,string,uint8,address,bytes32)\":{\"notice\":\"Creates an ERC-20 Items proxy.\"},\"determineAddress(address,address,string,string,uint8,address,bytes32)\":{\"notice\":\"Computes the address of a proxy instance.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC20/presets/items/IERC20ItemsFactory.sol\":\"IERC20ItemsFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC20/presets/items/IERC20ItemsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC20ItemsFactoryFunctions {\\n\\n    /**\\n     * Creates an ERC-20 Items proxy.\\n     * @param proxyOwner The owner of the ERC-20 Items proxy\\n     * @param tokenOwner The owner of the ERC-20 Items implementation\\n     * @param name The name of the ERC-20 Items proxy\\n     * @param symbol The symbol of the ERC-20 Items proxy\\n     * @param decimals The decimals of the ERC-20 Items proxy\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-20 Items Proxy\\n     */\\n    function deploy(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param proxyOwner The owner of the ERC-20 Items proxy\\n     * @param tokenOwner The owner of the ERC-20 Items implementation\\n     * @param name The name of the ERC-20 Items proxy\\n     * @param symbol The symbol of the ERC-20 Items proxy\\n     * @param decimals The decimals of the ERC-20 Items proxy\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-20 Items Proxy\\n     */\\n    function determineAddress(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external view returns (address proxyAddr);\\n\\n}\\n\\ninterface IERC20ItemsFactorySignals {\\n\\n    /**\\n     * Event emitted when a new ERC-20 Items proxy contract is deployed.\\n     * @param proxyAddr The address of the deployed proxy.\\n     */\\n    event ERC20ItemsDeployed(address proxyAddr);\\n\\n}\\n\\ninterface IERC20ItemsFactory is IERC20ItemsFactoryFunctions, IERC20ItemsFactorySignals { }\\n\",\"keccak256\":\"0x14c7559058854d072448a826cf8f4bac8b5b16f8e06acae7865c8b5b5d66d13e\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "events": {
              "ERC20ItemsDeployed(address)": {
                "notice": "Event emitted when a new ERC-20 Items proxy contract is deployed."
              }
            },
            "kind": "user",
            "methods": {
              "deploy(address,address,string,string,uint8,address,bytes32)": {
                "notice": "Creates an ERC-20 Items proxy."
              },
              "determineAddress(address,address,string,string,uint8,address,bytes32)": {
                "notice": "Computes the address of a proxy instance."
              }
            },
            "version": 1
          }
        },
        "IERC20ItemsFactoryFunctions": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "uint8",
                  "name": "decimals",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "deploy",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "proxyOwner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tokenOwner",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "uint8",
                  "name": "decimals",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "implicitModeValidator",
                  "type": "address"
                },
                {
                  "internalType": "bytes32",
                  "name": "implicitModeProjectId",
                  "type": "bytes32"
                }
              ],
              "name": "determineAddress",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "kind": "dev",
            "methods": {
              "deploy(address,address,string,string,uint8,address,bytes32)": {
                "params": {
                  "decimals": "The decimals of the ERC-20 Items proxy",
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "name": "The name of the ERC-20 Items proxy",
                  "proxyOwner": "The owner of the ERC-20 Items proxy",
                  "symbol": "The symbol of the ERC-20 Items proxy",
                  "tokenOwner": "The owner of the ERC-20 Items implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-20 Items Proxy"
                }
              },
              "determineAddress(address,address,string,string,uint8,address,bytes32)": {
                "params": {
                  "decimals": "The decimals of the ERC-20 Items proxy",
                  "implicitModeProjectId": "The implicit mode project id",
                  "implicitModeValidator": "The implicit mode validator address",
                  "name": "The name of the ERC-20 Items proxy",
                  "proxyOwner": "The owner of the ERC-20 Items proxy",
                  "symbol": "The symbol of the ERC-20 Items proxy",
                  "tokenOwner": "The owner of the ERC-20 Items implementation"
                },
                "returns": {
                  "proxyAddr": "The address of the ERC-20 Items Proxy"
                }
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "deploy(address,address,string,string,uint8,address,bytes32)": "f13b273d",
              "determineAddress(address,address,string,string,uint8,address,bytes32)": "8cfd4e5e"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"implicitModeValidator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"implicitModeProjectId\",\"type\":\"bytes32\"}],\"name\":\"determineAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(address,address,string,string,uint8,address,bytes32)\":{\"params\":{\"decimals\":\"The decimals of the ERC-20 Items proxy\",\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"name\":\"The name of the ERC-20 Items proxy\",\"proxyOwner\":\"The owner of the ERC-20 Items proxy\",\"symbol\":\"The symbol of the ERC-20 Items proxy\",\"tokenOwner\":\"The owner of the ERC-20 Items implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-20 Items Proxy\"}},\"determineAddress(address,address,string,string,uint8,address,bytes32)\":{\"params\":{\"decimals\":\"The decimals of the ERC-20 Items proxy\",\"implicitModeProjectId\":\"The implicit mode project id\",\"implicitModeValidator\":\"The implicit mode validator address\",\"name\":\"The name of the ERC-20 Items proxy\",\"proxyOwner\":\"The owner of the ERC-20 Items proxy\",\"symbol\":\"The symbol of the ERC-20 Items proxy\",\"tokenOwner\":\"The owner of the ERC-20 Items implementation\"},\"returns\":{\"proxyAddr\":\"The address of the ERC-20 Items Proxy\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy(address,address,string,string,uint8,address,bytes32)\":{\"notice\":\"Creates an ERC-20 Items proxy.\"},\"determineAddress(address,address,string,string,uint8,address,bytes32)\":{\"notice\":\"Computes the address of a proxy instance.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC20/presets/items/IERC20ItemsFactory.sol\":\"IERC20ItemsFactoryFunctions\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC20/presets/items/IERC20ItemsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC20ItemsFactoryFunctions {\\n\\n    /**\\n     * Creates an ERC-20 Items proxy.\\n     * @param proxyOwner The owner of the ERC-20 Items proxy\\n     * @param tokenOwner The owner of the ERC-20 Items implementation\\n     * @param name The name of the ERC-20 Items proxy\\n     * @param symbol The symbol of the ERC-20 Items proxy\\n     * @param decimals The decimals of the ERC-20 Items proxy\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-20 Items Proxy\\n     */\\n    function deploy(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param proxyOwner The owner of the ERC-20 Items proxy\\n     * @param tokenOwner The owner of the ERC-20 Items implementation\\n     * @param name The name of the ERC-20 Items proxy\\n     * @param symbol The symbol of the ERC-20 Items proxy\\n     * @param decimals The decimals of the ERC-20 Items proxy\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-20 Items Proxy\\n     */\\n    function determineAddress(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external view returns (address proxyAddr);\\n\\n}\\n\\ninterface IERC20ItemsFactorySignals {\\n\\n    /**\\n     * Event emitted when a new ERC-20 Items proxy contract is deployed.\\n     * @param proxyAddr The address of the deployed proxy.\\n     */\\n    event ERC20ItemsDeployed(address proxyAddr);\\n\\n}\\n\\ninterface IERC20ItemsFactory is IERC20ItemsFactoryFunctions, IERC20ItemsFactorySignals { }\\n\",\"keccak256\":\"0x14c7559058854d072448a826cf8f4bac8b5b16f8e06acae7865c8b5b5d66d13e\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "deploy(address,address,string,string,uint8,address,bytes32)": {
                "notice": "Creates an ERC-20 Items proxy."
              },
              "determineAddress(address,address,string,string,uint8,address,bytes32)": {
                "notice": "Computes the address of a proxy instance."
              }
            },
            "version": 1
          }
        },
        "IERC20ItemsFactorySignals": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "address",
                  "name": "proxyAddr",
                  "type": "address"
                }
              ],
              "name": "ERC20ItemsDeployed",
              "type": "event"
            }
          ],
          "devdoc": {
            "events": {
              "ERC20ItemsDeployed(address)": {
                "params": {
                  "proxyAddr": "The address of the deployed proxy."
                }
              }
            },
            "kind": "dev",
            "methods": {},
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxyAddr\",\"type\":\"address\"}],\"name\":\"ERC20ItemsDeployed\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"ERC20ItemsDeployed(address)\":{\"params\":{\"proxyAddr\":\"The address of the deployed proxy.\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"ERC20ItemsDeployed(address)\":{\"notice\":\"Event emitted when a new ERC-20 Items proxy contract is deployed.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC20/presets/items/IERC20ItemsFactory.sol\":\"IERC20ItemsFactorySignals\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"src/tokens/ERC20/presets/items/IERC20ItemsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC20ItemsFactoryFunctions {\\n\\n    /**\\n     * Creates an ERC-20 Items proxy.\\n     * @param proxyOwner The owner of the ERC-20 Items proxy\\n     * @param tokenOwner The owner of the ERC-20 Items implementation\\n     * @param name The name of the ERC-20 Items proxy\\n     * @param symbol The symbol of the ERC-20 Items proxy\\n     * @param decimals The decimals of the ERC-20 Items proxy\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-20 Items Proxy\\n     */\\n    function deploy(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external returns (address proxyAddr);\\n\\n    /**\\n     * Computes the address of a proxy instance.\\n     * @param proxyOwner The owner of the ERC-20 Items proxy\\n     * @param tokenOwner The owner of the ERC-20 Items implementation\\n     * @param name The name of the ERC-20 Items proxy\\n     * @param symbol The symbol of the ERC-20 Items proxy\\n     * @param decimals The decimals of the ERC-20 Items proxy\\n     * @param implicitModeValidator The implicit mode validator address\\n     * @param implicitModeProjectId The implicit mode project id\\n     * @return proxyAddr The address of the ERC-20 Items Proxy\\n     */\\n    function determineAddress(\\n        address proxyOwner,\\n        address tokenOwner,\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        address implicitModeValidator,\\n        bytes32 implicitModeProjectId\\n    ) external view returns (address proxyAddr);\\n\\n}\\n\\ninterface IERC20ItemsFactorySignals {\\n\\n    /**\\n     * Event emitted when a new ERC-20 Items proxy contract is deployed.\\n     * @param proxyAddr The address of the deployed proxy.\\n     */\\n    event ERC20ItemsDeployed(address proxyAddr);\\n\\n}\\n\\ninterface IERC20ItemsFactory is IERC20ItemsFactoryFunctions, IERC20ItemsFactorySignals { }\\n\",\"keccak256\":\"0x14c7559058854d072448a826cf8f4bac8b5b16f8e06acae7865c8b5b5d66d13e\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "events": {
              "ERC20ItemsDeployed(address)": {
                "notice": "Event emitted when a new ERC-20 Items proxy contract is deployed."
              }
            },
            "kind": "user",
            "methods": {},
            "version": 1
          }
        }
      },
      "src/tokens/common/SignalsImplicitModeControlled.sol": {
        "SignalsImplicitModeControlled": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "previousAdminRole",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "newAdminRole",
                  "type": "bytes32"
                }
              ],
              "name": "RoleAdminChanged",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleGranted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                }
              ],
              "name": "RoleRevoked",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "DEFAULT_ADMIN_ROLE",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "wallet",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "approvedSigner",
                      "type": "address"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "identityType",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "issuerHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "audienceHash",
                      "type": "bytes32"
                    },
                    {
                      "internalType": "bytes",
                      "name": "applicationData",
                      "type": "bytes"
                    },
                    {
                      "components": [
                        {
                          "internalType": "string",
                          "name": "redirectUrl",
                          "type": "string"
                        },
                        {
                          "internalType": "uint64",
                          "name": "issuedAt",
                          "type": "uint64"
                        }
                      ],
                      "internalType": "struct AuthData",
                      "name": "authData",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct Attestation",
                  "name": "attestation",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "to",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "gasLimit",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "delegateCall",
                      "type": "bool"
                    },
                    {
                      "internalType": "bool",
                      "name": "onlyFallback",
                      "type": "bool"
                    },
                    {
                      "internalType": "uint256",
                      "name": "behaviorOnError",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Payload.Call",
                  "name": "call",
                  "type": "tuple"
                }
              ],
              "name": "acceptImplicitRequest",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleAdmin",
              "outputs": [
                {
                  "internalType": "bytes32",
                  "name": "",
                  "type": "bytes32"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                }
              ],
              "name": "getRoleMember",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                }
              ],
              "name": "getRoleMemberCount",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "grantRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "hasRole",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "renounceRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "role",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "revokeRole",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes32",
                  "name": "projectId",
                  "type": "bytes32"
                }
              ],
              "name": "setImplicitModeProjectId",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "validator",
                  "type": "address"
                }
              ],
              "name": "setImplicitModeValidator",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "bytes4",
                  "name": "interfaceId",
                  "type": "bytes4"
                }
              ],
              "name": "supportsInterface",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "devdoc": {
            "events": {
              "RoleAdminChanged(bytes32,bytes32,bytes32)": {
                "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
              },
              "RoleGranted(bytes32,address,address)": {
                "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
              },
              "RoleRevoked(bytes32,address,address)": {
                "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
              }
            },
            "kind": "dev",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "params": {
                  "attestation": "The attestation data",
                  "call": "The call to validate",
                  "wallet": "The wallet's address"
                },
                "returns": {
                  "_0": "The hash of the implicit request if valid"
                }
              },
              "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
              },
              "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
              },
              "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
              },
              "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
              },
              "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
              },
              "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
              },
              "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
              },
              "setImplicitModeProjectId(bytes32)": {
                "params": {
                  "projectId": "The project id."
                }
              },
              "setImplicitModeValidator(address)": {
                "params": {
                  "validator": "The validator address."
                }
              },
              "supportsInterface(bytes4)": {
                "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
              }
            },
            "version": 1
          },
          "evm": {
            "bytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "functionDebugData": {},
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "DEFAULT_ADMIN_ROLE()": "a217fddf",
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": "9d043a66",
              "getRoleAdmin(bytes32)": "248a9ca3",
              "getRoleMember(bytes32,uint256)": "9010d07c",
              "getRoleMemberCount(bytes32)": "ca15c873",
              "grantRole(bytes32,address)": "2f2ff15d",
              "hasRole(bytes32,address)": "91d14854",
              "renounceRole(bytes32,address)": "36568abe",
              "revokeRole(bytes32,address)": "d547741f",
              "setImplicitModeProjectId(bytes32)": "ed4c2ac7",
              "setImplicitModeValidator(address)": "0bb310de",
              "supportsInterface(bytes4)": "01ffc9a7"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"approvedSigner\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"identityType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"issuerHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"audienceHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"applicationData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"redirectUrl\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"issuedAt\",\"type\":\"uint64\"}],\"internalType\":\"struct AuthData\",\"name\":\"authData\",\"type\":\"tuple\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delegateCall\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"onlyFallback\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"behaviorOnError\",\"type\":\"uint256\"}],\"internalType\":\"struct Payload.Call\",\"name\":\"call\",\"type\":\"tuple\"}],\"name\":\"acceptImplicitRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"projectId\",\"type\":\"bytes32\"}],\"name\":\"setImplicitModeProjectId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"setImplicitModeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"params\":{\"attestation\":\"The attestation data\",\"call\":\"The call to validate\",\"wallet\":\"The wallet's address\"},\"returns\":{\"_0\":\"The hash of the implicit request if valid\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setImplicitModeProjectId(bytes32)\":{\"params\":{\"projectId\":\"The project id.\"}},\"setImplicitModeValidator(address)\":{\"params\":{\"validator\":\"The validator address.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))\":{\"notice\":\"Determines if an implicit request is valid\"},\"setImplicitModeProjectId(bytes32)\":{\"notice\":\"Updates the settings for implicit mode validation.Only callable by an address with the project admin role.\"},\"setImplicitModeValidator(address)\":{\"notice\":\"Updates the validator for implicit mode validation.Only callable by an address with the project admin role.\"}},\"notice\":\"An abstract contract that allows implicit session access for a given project.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/common/SignalsImplicitModeControlled.sol\":\"SignalsImplicitModeControlled\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/murky/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc2470-libs/=lib/erc2470-libs/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/signals-implicit-mode/lib/sequence-v3/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":sequence-v3/=lib/signals-implicit-mode/lib/sequence-v3/\",\":signals-implicit-mode/=lib/signals-implicit-mode/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../../../utils/LibBytes.sol\\\";\\nimport { ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX } from \\\"./ISignalsImplicitMode.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @notice Attestation for a specific session\\n/// @param approvedSigner Address of the approved signer\\n/// @param identityType Identity type\\n/// @param issuerHash Hash of the issuer\\n/// @param audienceHash Hash of the audience\\n/// @param applicationData Unspecified application data\\n/// @param authData Auth data\\nstruct Attestation {\\n  address approvedSigner;\\n  bytes4 identityType;\\n  bytes32 issuerHash;\\n  bytes32 audienceHash;\\n  bytes applicationData;\\n  AuthData authData;\\n}\\n\\n/// @notice Auth data for an attestation\\n/// @param redirectUrl Authorization redirect URL\\n/// @param issuedAt Timestamp of the attestation issuance\\nstruct AuthData {\\n  string redirectUrl;\\n  uint64 issuedAt;\\n}\\n\\n/// @title LibAttestation\\n/// @author Michael Standen\\n/// @notice Library for attestation management\\nlibrary LibAttestation {\\n\\n  /// @notice Hashes an attestation\\n  function toHash(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes32) {\\n    return keccak256(toPacked(attestation));\\n  }\\n\\n  /// @notice Decodes an attestation from a packed bytes array\\n  /// @param encoded The packed bytes array\\n  /// @param pointer The pointer to the start of the attestation\\n  /// @return attestation The decoded attestation\\n  /// @return newPointer The new pointer to the end of the attestation\\n  function fromPacked(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (Attestation memory attestation, uint256 newPointer) {\\n    newPointer = pointer;\\n    (attestation.approvedSigner, newPointer) = encoded.readAddress(newPointer);\\n    (attestation.identityType, newPointer) = encoded.readBytes4(newPointer);\\n    (attestation.issuerHash, newPointer) = encoded.readBytes32(newPointer);\\n    (attestation.audienceHash, newPointer) = encoded.readBytes32(newPointer);\\n    // Application data (arbitrary bytes)\\n    uint256 dataSize;\\n    (dataSize, newPointer) = encoded.readUint24(newPointer);\\n    attestation.applicationData = encoded[newPointer:newPointer + dataSize];\\n    newPointer += dataSize;\\n    // Auth data\\n    (attestation.authData, newPointer) = fromPackedAuthData(encoded, newPointer);\\n    return (attestation, newPointer);\\n  }\\n\\n  /// @notice Decodes the auth data from a packed bytes\\n  /// @param encoded The packed bytes containing the auth data\\n  /// @param pointer The pointer to the start of the auth data within the encoded data\\n  /// @return authData The decoded auth data\\n  /// @return newPointer The pointer to the end of the auth data within the encoded data\\n  function fromPackedAuthData(\\n    bytes calldata encoded,\\n    uint256 pointer\\n  ) internal pure returns (AuthData memory authData, uint256 newPointer) {\\n    uint24 redirectUrlLength;\\n    (redirectUrlLength, pointer) = encoded.readUint24(pointer);\\n    authData.redirectUrl = string(encoded[pointer:pointer + redirectUrlLength]);\\n    pointer += redirectUrlLength;\\n    (authData.issuedAt, pointer) = encoded.readUint64(pointer);\\n    return (authData, pointer);\\n  }\\n\\n  /// @notice Encodes an attestation into a packed bytes array\\n  /// @param attestation The attestation to encode\\n  /// @return encoded The packed bytes array\\n  function toPacked(\\n    Attestation memory attestation\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(\\n      attestation.approvedSigner,\\n      attestation.identityType,\\n      attestation.issuerHash,\\n      attestation.audienceHash,\\n      uint24(attestation.applicationData.length),\\n      attestation.applicationData,\\n      toPackAuthData(attestation.authData)\\n    );\\n  }\\n\\n  /// @notice Encodes the auth data into a packed bytes array\\n  /// @param authData The auth data to encode\\n  /// @return encoded The packed bytes array\\n  function toPackAuthData(\\n    AuthData memory authData\\n  ) internal pure returns (bytes memory encoded) {\\n    return abi.encodePacked(uint24(bytes(authData.redirectUrl).length), bytes(authData.redirectUrl), authData.issuedAt);\\n  }\\n\\n  /// @notice Generates the implicit request magic return value\\n  /// @param attestation The attestation\\n  /// @param wallet The wallet\\n  /// @return magic The expected implicit request magic\\n  function generateImplicitRequestMagic(Attestation memory attestation, address wallet) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encodePacked(ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX, wallet, attestation.audienceHash, attestation.issuerHash)\\n    );\\n  }\\n\\n}\\n\",\"keccak256\":\"0xcaa44022b5eb4bc7ab487b3b1a0125da67e2e891cee983ef6cdb6814f045efc8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { Payload } from \\\"../../../modules/Payload.sol\\\";\\nimport { Attestation } from \\\"./Attestation.sol\\\";\\n\\n/// @dev Magic prefix for the implicit request\\nbytes32 constant ACCEPT_IMPLICIT_REQUEST_MAGIC_PREFIX = keccak256(abi.encodePacked(\\\"acceptImplicitRequest\\\"));\\n\\n/// @title ISignalsImplicitMode\\n/// @author Agustin Aguilar, Michael Standen\\n/// @notice Interface for the contracts that support implicit mode validation\\ninterface ISignalsImplicitMode {\\n\\n  /// @notice Determines if an implicit request is valid\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  /// @return magic The hash of the implicit request if valid\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32 magic);\\n\\n}\\n\",\"keccak256\":\"0x6cb48f50c49bcb3c7071306fe9fac6c102bc9eabf73d9909e19ab3b9a835d0a8\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.27;\\n\\nimport { LibBytes } from \\\"../utils/LibBytes.sol\\\";\\n\\nusing LibBytes for bytes;\\n\\n/// @title Payload\\n/// @author Agustin Aguilar, Michael Standen, William Hua\\n/// @notice Library for encoding and decoding payloads\\nlibrary Payload {\\n\\n  /// @notice Error thrown when the kind is invalid\\n  error InvalidKind(uint8 kind);\\n\\n  /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  bytes32 private constant EIP712_DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n  /// @dev keccak256(\\\"Sequence Wallet\\\")\\n  bytes32 private constant EIP712_DOMAIN_NAME_SEQUENCE =\\n    0x4aa45ca7ad825ceb1bf35643f0a58c295239df563b1b565c2485f96477c56318;\\n\\n  /// @dev keccak256(\\\"3\\\")\\n  bytes32 private constant EIP712_DOMAIN_VERSION_SEQUENCE =\\n    0x2a80e1ef1d7842f27f2e6be0972bb708b9a135c38860dbe73c27c3486c34f4de;\\n\\n  function domainSeparator(bool _noChainId, address _wallet) internal view returns (bytes32 _domainSeparator) {\\n    return keccak256(\\n      abi.encode(\\n        EIP712_DOMAIN_TYPEHASH,\\n        EIP712_DOMAIN_NAME_SEQUENCE,\\n        EIP712_DOMAIN_VERSION_SEQUENCE,\\n        _noChainId ? uint256(0) : uint256(block.chainid),\\n        _wallet\\n      )\\n    );\\n  }\\n\\n  /// @dev keccak256(\\\"Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALL_TYPEHASH = 0x0603985259a953da1f65a522f589c17bd1d0117ec1d3abb7c0788aef251ef437;\\n\\n  /// @dev keccak256(\\\"Calls(Call[] calls,uint256 space,uint256 nonce,address[] wallets)Call(address to,uint256 value,bytes data,uint256 gasLimit,bool delegateCall,bool onlyFallback,uint256 behaviorOnError)\\\")\\n  bytes32 private constant CALLS_TYPEHASH = 0x11e1e4079a79a66e4ade50033cfe2678cdd5341d2dfe5ef9513edb1a0be147a2;\\n\\n  /// @dev keccak256(\\\"Message(bytes message,address[] wallets)\\\")\\n  bytes32 private constant MESSAGE_TYPEHASH = 0xe19a3b94fc3c7ece3f890d98a99bc422615537a08dea0603fa8425867d87d466;\\n\\n  /// @dev keccak256(\\\"ConfigUpdate(bytes32 imageHash,address[] wallets)\\\")\\n  bytes32 private constant CONFIG_UPDATE_TYPEHASH = 0x11fdeb7e8373a1aa96bfac8d0ea91526b2c5d15e5cee20e0543e780258f3e8e4;\\n\\n  /// @notice Kind of transaction\\n  uint8 public constant KIND_TRANSACTIONS = 0x00;\\n  /// @notice Kind of digest\\n  uint8 public constant KIND_MESSAGE = 0x01;\\n  /// @notice Kind of config update\\n  uint8 public constant KIND_CONFIG_UPDATE = 0x02;\\n  /// @notice Kind of message\\n  uint8 public constant KIND_DIGEST = 0x03;\\n\\n  /// @notice Behavior on error: ignore error\\n  uint8 public constant BEHAVIOR_IGNORE_ERROR = 0x00;\\n  /// @notice Behavior on error: revert on error\\n  uint8 public constant BEHAVIOR_REVERT_ON_ERROR = 0x01;\\n  /// @notice Behavior on error: abort on error\\n  uint8 public constant BEHAVIOR_ABORT_ON_ERROR = 0x02;\\n\\n  /// @notice Payload call information\\n  /// @param to Address of the target contract\\n  /// @param value Value to send with the call\\n  /// @param data Data to send with the call\\n  /// @param gasLimit Gas limit for the call\\n  /// @param delegateCall If the call is a delegate call\\n  /// @param onlyFallback If the call should only be executed in an error scenario\\n  /// @param behaviorOnError Behavior on error\\n  struct Call {\\n    address to;\\n    uint256 value;\\n    bytes data;\\n    uint256 gasLimit;\\n    bool delegateCall;\\n    bool onlyFallback;\\n    uint256 behaviorOnError;\\n  }\\n\\n  /// @notice Decoded payload\\n  /// @param kind Kind of payload\\n  /// @param noChainId If the chain ID should be omitted\\n  /// @param calls Array of calls (transaction kind)\\n  /// @param space Nonce space for the calls (transaction kind)\\n  /// @param nonce Nonce value for the calls (transaction kind)\\n  /// @param message Message to validate (message kind)\\n  /// @param imageHash Image hash to update to (config update kind)\\n  /// @param digest Digest to validate (digest kind)\\n  /// @param parentWallets Parent wallets\\n  struct Decoded {\\n    uint8 kind;\\n    bool noChainId;\\n    // Transaction kind\\n    Call[] calls;\\n    uint256 space;\\n    uint256 nonce;\\n    // Message kind\\n    // TODO: Maybe native 721 ?\\n    bytes message;\\n    // Config update kind\\n    bytes32 imageHash;\\n    // Digest kind for 1271\\n    bytes32 digest;\\n    // Parent wallets\\n    address[] parentWallets;\\n  }\\n\\n  function fromMessage(\\n    bytes memory message\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_MESSAGE;\\n    _decoded.message = message;\\n  }\\n\\n  function fromConfigUpdate(\\n    bytes32 imageHash\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_CONFIG_UPDATE;\\n    _decoded.imageHash = imageHash;\\n  }\\n\\n  function fromDigest(\\n    bytes32 digest\\n  ) internal pure returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_DIGEST;\\n    _decoded.digest = digest;\\n  }\\n\\n  function fromPackedCalls(\\n    bytes calldata packed\\n  ) internal view returns (Decoded memory _decoded) {\\n    _decoded.kind = KIND_TRANSACTIONS;\\n\\n    // Read the global flag\\n    (uint256 globalFlag, uint256 pointer) = packed.readFirstUint8();\\n\\n    // First bit determines if space is zero or not\\n    if (globalFlag & 0x01 == 0x01) {\\n      _decoded.space = 0;\\n    } else {\\n      (_decoded.space, pointer) = packed.readUint160(pointer);\\n    }\\n\\n    // Next 3 bits determine the size of the nonce\\n    uint256 nonceSize = (globalFlag >> 1) & 0x07;\\n\\n    if (nonceSize > 0) {\\n      // Read the nonce\\n      (_decoded.nonce, pointer) = packed.readUintX(pointer, nonceSize);\\n    }\\n\\n    uint256 numCalls;\\n\\n    // Bit 5 determines if the batch contains a single call\\n    if (globalFlag & 0x10 == 0x10) {\\n      numCalls = 1;\\n    } else {\\n      // Bit 6 determines if the number of calls uses 1 byte or 2 bytes\\n      if (globalFlag & 0x20 == 0x20) {\\n        (numCalls, pointer) = packed.readUint16(pointer);\\n      } else {\\n        (numCalls, pointer) = packed.readUint8(pointer);\\n      }\\n    }\\n\\n    // Read the calls\\n    _decoded.calls = new Call[](numCalls);\\n\\n    for (uint256 i = 0; i < numCalls; i++) {\\n      uint8 flags;\\n      (flags, pointer) = packed.readUint8(pointer);\\n\\n      // First bit determines if this is a call to self\\n      // or a call to another address\\n      if (flags & 0x01 == 0x01) {\\n        // Call to self\\n        _decoded.calls[i].to = address(this);\\n      } else {\\n        // Call to another address\\n        (_decoded.calls[i].to, pointer) = packed.readAddress(pointer);\\n      }\\n\\n      // Second bit determines if the call has value or not\\n      if (flags & 0x02 == 0x02) {\\n        (_decoded.calls[i].value, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Third bit determines if the call has data or not\\n      if (flags & 0x04 == 0x04) {\\n        // 3 bytes determine the size of the calldata\\n        uint256 calldataSize;\\n        (calldataSize, pointer) = packed.readUint24(pointer);\\n        _decoded.calls[i].data = packed[pointer:pointer + calldataSize];\\n        pointer += calldataSize;\\n      }\\n\\n      // Fourth bit determines if the call has a gas limit or not\\n      if (flags & 0x08 == 0x08) {\\n        (_decoded.calls[i].gasLimit, pointer) = packed.readUint256(pointer);\\n      }\\n\\n      // Fifth bit determines if the call is a delegate call or not\\n      _decoded.calls[i].delegateCall = (flags & 0x10 == 0x10);\\n\\n      // Sixth bit determines if the call is fallback only\\n      _decoded.calls[i].onlyFallback = (flags & 0x20 == 0x20);\\n\\n      // Last 2 bits are directly mapped to the behavior on error\\n      _decoded.calls[i].behaviorOnError = (flags & 0xC0) >> 6;\\n    }\\n  }\\n\\n  function hashCall(\\n    Call memory c\\n  ) internal pure returns (bytes32) {\\n    return keccak256(\\n      abi.encode(\\n        CALL_TYPEHASH, c.to, c.value, keccak256(c.data), c.gasLimit, c.delegateCall, c.onlyFallback, c.behaviorOnError\\n      )\\n    );\\n  }\\n\\n  function hashCalls(\\n    Call[] memory calls\\n  ) internal pure returns (bytes32) {\\n    // In EIP712, an array is often hashed as the keccak256 of the concatenated\\n    // hashes of each item. So we hash each Call, pack them, and hash again.\\n    bytes32[] memory callHashes = new bytes32[](calls.length);\\n    for (uint256 i = 0; i < calls.length; i++) {\\n      callHashes[i] = hashCall(calls[i]);\\n    }\\n    return keccak256(abi.encodePacked(callHashes));\\n  }\\n\\n  function toEIP712(\\n    Decoded memory _decoded\\n  ) internal pure returns (bytes32) {\\n    bytes32 walletsHash = keccak256(abi.encodePacked(_decoded.parentWallets));\\n\\n    if (_decoded.kind == KIND_TRANSACTIONS) {\\n      bytes32 callsHash = hashCalls(_decoded.calls);\\n      // The top-level struct for Calls might be something like:\\n      // Calls(bytes32 callsHash,uint256 space,uint256 nonce,bytes32 walletsHash)\\n      return keccak256(abi.encode(CALLS_TYPEHASH, callsHash, _decoded.space, _decoded.nonce, walletsHash));\\n    } else if (_decoded.kind == KIND_MESSAGE) {\\n      // If you define your top-level as: Message(bytes32 messageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, keccak256(_decoded.message), walletsHash));\\n    } else if (_decoded.kind == KIND_CONFIG_UPDATE) {\\n      // Top-level: ConfigUpdate(bytes32 imageHash,bytes32 walletsHash)\\n      return keccak256(abi.encode(CONFIG_UPDATE_TYPEHASH, _decoded.imageHash, walletsHash));\\n    } else if (_decoded.kind == KIND_DIGEST) {\\n      // Top-level: Use MESSAGE_TYPEHASH but assume the digest is already the hashed message\\n      return keccak256(abi.encode(MESSAGE_TYPEHASH, _decoded.digest, walletsHash));\\n    } else {\\n      // Unknown kind\\n      revert InvalidKind(_decoded.kind);\\n    }\\n  }\\n\\n  function hash(\\n    Decoded memory _decoded\\n  ) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, address(this));\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n  function hashFor(Decoded memory _decoded, address _wallet) internal view returns (bytes32) {\\n    bytes32 domain = domainSeparator(_decoded.noChainId, _wallet);\\n    bytes32 structHash = toEIP712(_decoded);\\n    return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domain, structHash));\\n  }\\n\\n}\\n\",\"keccak256\":\"0x25066fa78d12d0d73d463b97b37528291f3d4d60ca642247441538b83d6597d6\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.18;\\n\\n/// @title Library for reading data from bytes arrays\\n/// @author Agustin Aguilar (aa@horizon.io), Michael Standen (mstan@horizon.io)\\n/// @notice This library contains functions for reading data from bytes arrays.\\n/// @dev These functions do not check if the input index is within the bounds of the data array.\\n/// @dev Reading out of bounds may return dirty values.\\nlibrary LibBytes {\\n\\n  function readFirstUint8(\\n    bytes calldata _data\\n  ) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(_data.offset)\\n      a := shr(248, word)\\n      newPointer := 1\\n    }\\n  }\\n\\n  function readUint8(bytes calldata _data, uint256 _index) internal pure returns (uint8 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(248, word)\\n      newPointer := add(_index, 1)\\n    }\\n  }\\n\\n  function readUint16(bytes calldata _data, uint256 _index) internal pure returns (uint16 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(240, word)\\n      newPointer := add(_index, 2)\\n    }\\n  }\\n\\n  function readUint24(bytes calldata _data, uint256 _index) internal pure returns (uint24 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(232, word)\\n      newPointer := add(_index, 3)\\n    }\\n  }\\n\\n  function readUint64(bytes calldata _data, uint256 _index) internal pure returns (uint64 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(192, word)\\n      newPointer := add(_index, 8)\\n    }\\n  }\\n\\n  function readUint160(bytes calldata _data, uint256 _index) internal pure returns (uint160 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := shr(96, word)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  function readUint256(bytes calldata _data, uint256 _index) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_index, _data.offset))\\n      newPointer := add(_index, 32)\\n    }\\n  }\\n\\n  function readUintX(\\n    bytes calldata _data,\\n    uint256 _index,\\n    uint256 _length\\n  ) internal pure returns (uint256 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      let shift := sub(256, mul(_length, 8))\\n      a := and(shr(shift, word), sub(shl(mul(8, _length), 1), 1))\\n      newPointer := add(_index, _length)\\n    }\\n  }\\n\\n  function readBytes4(bytes calldata _data, uint256 _pointer) internal pure returns (bytes4 a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_pointer, _data.offset))\\n      a := and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n      newPointer := add(_pointer, 4)\\n    }\\n  }\\n\\n  function readBytes32(bytes calldata _data, uint256 _pointer) internal pure returns (bytes32 a, uint256 newPointer) {\\n    assembly {\\n      a := calldataload(add(_pointer, _data.offset))\\n      newPointer := add(_pointer, 32)\\n    }\\n  }\\n\\n  function readAddress(bytes calldata _data, uint256 _index) internal pure returns (address a, uint256 newPointer) {\\n    assembly {\\n      let word := calldataload(add(_index, _data.offset))\\n      a := and(shr(96, word), 0xffffffffffffffffffffffffffffffffffffffff)\\n      newPointer := add(_index, 20)\\n    }\\n  }\\n\\n  /// @dev ERC-2098 Compact Signature\\n  function readRSVCompact(\\n    bytes calldata _data,\\n    uint256 _index\\n  ) internal pure returns (bytes32 r, bytes32 s, uint8 v, uint256 newPointer) {\\n    uint256 yParityAndS;\\n    assembly {\\n      r := calldataload(add(_index, _data.offset))\\n      yParityAndS := calldataload(add(_index, add(_data.offset, 32)))\\n      newPointer := add(_index, 64)\\n    }\\n    uint256 yParity = uint256(yParityAndS >> 255);\\n    s = bytes32(uint256(yParityAndS) & ((1 << 255) - 1));\\n    v = uint8(yParity) + 27;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x4fe0b4786b2157e12384b90ae9daa1009b74b2547a8a24b800a8b998278c874b\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { IImplicitProjectValidation } from \\\"../registry/IImplicitProjectValidation.sol\\\";\\n\\nimport { ERC165, IERC165 } from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\nimport { ISignalsImplicitMode } from \\\"sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol\\\";\\nimport { Payload } from \\\"sequence-v3/src/modules/Payload.sol\\\";\\n\\n/// @title SignalsImplicitMode\\n/// @author Michael Standen\\n/// @notice Base contract for implicit mode validation by project\\nabstract contract SignalsImplicitMode is ISignalsImplicitMode, ERC165 {\\n\\n  IImplicitProjectValidation internal _validator;\\n  bytes32 internal _projectId;\\n\\n  /// @notice Initialize implicit mode validation\\n  /// @param validator The IImplicitProjectValidation address\\n  /// @param projectId The project id\\n  function _initializeSignalsImplicitMode(address validator, bytes32 projectId) internal {\\n    _validator = IImplicitProjectValidation(validator);\\n    _projectId = projectId;\\n  }\\n\\n  /// @inheritdoc ISignalsImplicitMode\\n  function acceptImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) external view returns (bytes32) {\\n    _validateImplicitRequest(wallet, attestation, call);\\n    return _validator.validateAttestation(wallet, attestation, _projectId);\\n  }\\n\\n  /// @notice Validates an implicit request\\n  /// @dev Optional hook for additional validation of the implicit requests\\n  /// @param wallet The wallet's address\\n  /// @param attestation The attestation data\\n  /// @param call The call to validate\\n  function _validateImplicitRequest(\\n    address wallet,\\n    Attestation calldata attestation,\\n    Payload.Call calldata call\\n  ) internal view virtual { }\\n\\n  /// @inheritdoc IERC165\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(ISignalsImplicitMode).interfaceId || super.supportsInterface(interfaceId);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xd9107be2460f7f7ec4bdfefc3d10c79aa92b9285e1b12a75cb2a8d17b150a2ec\",\"license\":\"Apache-2.0\"},\"lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.13;\\n\\nimport { Attestation } from \\\"sequence-v3/src/extensions/sessions/implicit/Attestation.sol\\\";\\n\\n/// @title IImplicitProjectValidation\\n/// @author Michael Standen\\n/// @notice Interface for contracts supporting validation of implicit sessions for projects\\ninterface IImplicitProjectValidation {\\n\\n  /// @notice Invalid redirect url error\\n  error InvalidRedirectUrl();\\n\\n  /// @notice Check if a project has a code\\n  /// @param wallet The wallet address\\n  /// @param attestation The attestation\\n  /// @param projectId The project id\\n  /// @return magic The attestation magic bytes for the wallet address\\n  function validateAttestation(\\n    address wallet,\\n    Attestation calldata attestation,\\n    bytes32 projectId\\n  ) external view returns (bytes32);\\n\\n}\\n\",\"keccak256\":\"0x1e8c305e011aa13d774e0ff3cfd9286af3d8174c4e33ba5ef8f724ea2dd6e5b2\",\"license\":\"Apache-2.0\"},\"src/tokens/common/SignalsImplicitModeControlled.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\nimport { AccessControlEnumerable } from \\\"openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\\\";\\nimport {\\n    IERC165,\\n    IImplicitProjectValidation,\\n    SignalsImplicitMode\\n} from \\\"signals-implicit-mode/src/helper/SignalsImplicitMode.sol\\\";\\n\\n/**\\n * An abstract contract that allows implicit session access for a given project.\\n */\\nabstract contract SignalsImplicitModeControlled is AccessControlEnumerable, SignalsImplicitMode {\\n\\n    bytes32 internal constant _IMPLICIT_MODE_ADMIN_ROLE = keccak256(\\\"IMPLICIT_MODE_ADMIN_ROLE\\\");\\n\\n    function _initializeImplicitMode(address owner, address validator, bytes32 projectId) internal {\\n        _grantRole(_IMPLICIT_MODE_ADMIN_ROLE, owner);\\n        _initializeSignalsImplicitMode(validator, projectId);\\n    }\\n\\n    /**\\n     * Updates the validator for implicit mode validation.\\n     * @param validator The validator address.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeValidator(\\n        address validator\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _validator = IImplicitProjectValidation(validator);\\n    }\\n\\n    /**\\n     * Updates the settings for implicit mode validation.\\n     * @param projectId The project id.\\n     * @notice Only callable by an address with the project admin role.\\n     */\\n    function setImplicitModeProjectId(\\n        bytes32 projectId\\n    ) external onlyRole(_IMPLICIT_MODE_ADMIN_ROLE) {\\n        _projectId = projectId;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlEnumerable, SignalsImplicitMode) returns (bool) {\\n        return\\n            AccessControlEnumerable.supportsInterface(interfaceId) || SignalsImplicitMode.supportsInterface(interfaceId);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb1a20575f188af254f90ec7df7f70415610ba5f41f7966ce383b50063220b860\",\"license\":\"Apache-2.0\"}},\"version\":1}",
          "userdoc": {
            "kind": "user",
            "methods": {
              "acceptImplicitRequest(address,(address,bytes4,bytes32,bytes32,bytes,(string,uint64)),(address,uint256,bytes,uint256,bool,bool,uint256))": {
                "notice": "Determines if an implicit request is valid"
              },
              "setImplicitModeProjectId(bytes32)": {
                "notice": "Updates the settings for implicit mode validation.Only callable by an address with the project admin role."
              },
              "setImplicitModeValidator(address)": {
                "notice": "Updates the validator for implicit mode validation.Only callable by an address with the project admin role."
              }
            },
            "notice": "An abstract contract that allows implicit session access for a given project.",
            "version": 1
          }
        }
      }
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/access/AccessControl.sol": {
        "id": 0
      },
      "lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol": {
        "id": 1
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControl.sol": {
        "id": 2
      },
      "lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol": {
        "id": 3
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "id": 4
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
        "id": 5
      },
      "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
        "id": 6
      },
      "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
        "id": 7
      },
      "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
        "id": 8
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
        "id": 9
      },
      "lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol": {
        "id": 10
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
        "id": 11
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "id": 12
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "id": 13
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "id": 14
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "id": 15
      },
      "lib/openzeppelin-contracts/contracts/utils/Create2.sol": {
        "id": 16
      },
      "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
        "id": 17
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        "id": 18
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        "id": 19
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        "id": 20
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        "id": 21
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        "id": 22
      },
      "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
        "id": 23
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/Attestation.sol": {
        "id": 24
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/extensions/sessions/implicit/ISignalsImplicitMode.sol": {
        "id": 25
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/modules/Payload.sol": {
        "id": 26
      },
      "lib/signals-implicit-mode/lib/sequence-v3/src/utils/LibBytes.sol": {
        "id": 27
      },
      "lib/signals-implicit-mode/src/helper/SignalsImplicitMode.sol": {
        "id": 28
      },
      "lib/signals-implicit-mode/src/registry/IImplicitProjectValidation.sol": {
        "id": 29
      },
      "src/proxies/SequenceProxyFactory.sol": {
        "id": 30
      },
      "src/proxies/TransparentUpgradeableBeaconProxy.sol": {
        "id": 31
      },
      "src/proxies/openzeppelin/BeaconProxy.sol": {
        "id": 32
      },
      "src/proxies/openzeppelin/ERC1967Proxy.sol": {
        "id": 33
      },
      "src/proxies/openzeppelin/TransparentUpgradeableProxy.sol": {
        "id": 34
      },
      "src/tokens/ERC20/ERC20BaseToken.sol": {
        "id": 35
      },
      "src/tokens/ERC20/presets/items/ERC20Items.sol": {
        "id": 36
      },
      "src/tokens/ERC20/presets/items/ERC20ItemsFactory.sol": {
        "id": 37
      },
      "src/tokens/ERC20/presets/items/IERC20Items.sol": {
        "id": 38
      },
      "src/tokens/ERC20/presets/items/IERC20ItemsFactory.sol": {
        "id": 39
      },
      "src/tokens/common/SignalsImplicitModeControlled.sol": {
        "id": 40
      }
    }
  },
  "solcLongVersion": "0.8.27+commit.40a35a09",
  "solcVersion": "0.8.27"
}
