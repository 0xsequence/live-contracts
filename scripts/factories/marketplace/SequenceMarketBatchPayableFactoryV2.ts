import { ContractFactory, ethers } from 'ethers'
import type { VerificationRequest } from 'scripts/types'
import { SequenceMarketV2Interface } from './SequenceMarketFactoryV2'

// https://github.com/0xsequence/marketplace-contracts/blob/2bd241fde41fb36cf53fe7b6ec719344b823820a/contracts/SequenceMarketBatchPayableFactory.sol

const abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor'
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'implementation',
        type: 'address'
      }
    ],
    name: 'ImplementationAddress',
    type: 'event'
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'salt',
        type: 'bytes32'
      },
      {
        internalType: 'address',
        name: 'owner',
        type: 'address'
      }
    ],
    name: 'deploy',
    outputs: [
      {
        internalType: 'address',
        name: 'proxy',
        type: 'address'
      }
    ],
    stateMutability: 'nonpayable',
    type: 'function'
  },
  {
    inputs: [],
    name: 'implementation',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'salt',
        type: 'bytes32'
      },
      {
        internalType: 'address',
        name: 'owner',
        type: 'address'
      }
    ],
    name: 'predictAddress',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address'
      }
    ],
    stateMutability: 'view',
    type: 'function'
  }
] as const

export class SequenceMarketBatchPayableFactoryV2 extends ContractFactory {
  constructor(signer?: ethers.Signer) {
    super(
      abi,
      '0x608080604052346100ab5761315181810191906001600160401b0383118284101761009557610878823980600092039082f080156100885781546001600160a01b0319166001600160a01b03919091169081178255604051917fbd8074177ccb6aec660877b807e48f8ea0e5e0b0415263166222444dd81e4e2c9080a26107c790816100b18239f35b50604051903d90823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fdfe60806040818152600436101561001457600080fd5b600091823560e01c9081633351683514610182575080635c60da1b1461015b57638c1fb9311461004357600080fd5b346101575761005136610210565b835483516020808201948552606084811b6bffffffffffffffffffffffff19908116604085015293901b909216605482015290946001600160a01b039390916100b591906100ac81606881015b03601f19810183528261023b565b51902092610296565b9081511561011557858251920190f5169081156100d25751908152f35b5162461bcd60e51b815260048101839052601960248201527f437265617465323a204661696c6564206f6e206465706c6f79000000000000006044820152606490fd5b60648686519062461bcd60e51b825280600483015260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f6044820152fd5b5080fd5b5034610157578160031936011261015757905490516001600160a01b039091168152602090f35b90503461020c57916055600b6020946101e961019d36610210565b9554888401918252606087811b6bffffffffffffffffffffffff19908116602085015291901b1660348201526001600160a01b0395926101e0816048840161009e565b51902091610296565b8681519101209085519186830152868201523081520160ff815320915191168152f35b8280fd5b604090600319011261023657600435906024356001600160a01b03811681036102365790565b600080fd5b90601f8019910116810190811067ffffffffffffffff82111761025d57604052565b634e487b7160e01b600052604160045260246000fd5b60005b8381106102865750506000910152565b8181015183820152602001610276565b6040805163189acdbd60e31b60208083019182526001600160a01b03948516602480850191909152835291939260608501919067ffffffffffffffff83118684101761025d5761036c610378958261034d608061035d9a886103369752610416946103038b87018b61023b565b858a528282019561037c8739600054169784519788928c84019a8b52868085015251809281606086015285850190610273565b601f8019910116810103606081018752018561023b565b5197889551809288880190610273565b84019151809386840190610273565b0103808452018261023b565b9056fe604060808152610416908138038061001681610218565b93843982019181818403126102135780516001600160a01b038116808203610213576020838101516001600160401b0394919391858211610213570186601f820112156102135780519061007161006c83610253565b610218565b918083528583019886828401011161021357888661008f930161026e565b813b156101b9577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b031916841790556000927fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8480a28051158015906101b2575b61010b575b855160d190816103458239f35b855194606086019081118682101761019e578697849283926101889952602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c87890152660819985a5b195960ca1b8a8901525190845af4913d15610194573d9061017a61006c83610253565b91825281943d92013e610291565b508038808080806100fe565b5060609250610291565b634e487b7160e01b84526041600452602484fd5b50826100f9565b855162461bcd60e51b815260048101859052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761023d57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161023d57601f01601f191660200190565b60005b8381106102815750506000910152565b8181015183820152602001610271565b919290156102f357508151156102a5575090565b3b156102ae5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156103065750805190602001fd5b6044604051809262461bcd60e51b825260206004830152610336815180928160248601526020868601910161026e565b601f01601f19168101030190fdfe608060405236156054577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e156050573d90f35b3d90fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e156050573d90f3fea2646970667358221220e5732c711ec47a700c88920ce2b7c593d7743292eddbcc07e748fd146f447a3664736f6c63430008130033a26469706673582212205db8ec7b00cdb249dd9dd1aec900709413c70cf7c791335df46901d3611ec1cc64736f6c6343000813003360a080604052346100dd57306080526000549060ff8260081c1661008b575060ff80821603610050575b60405161306e9081620000e382396080518181816111410152818161126e01526116e20152f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610029565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80630bc9b0451461198c57806324dc6bd0146119525780633015394c1461192e5780633659cfe6146116bd57806336de974214611677578063386c96e0146116275780633ed97342146115db578063449768ad146114af5780634f1ef286146111f257806352d1902d1461112e57806367f1f7ee146110b1578063715018a6146110545780638da5cb5b1461102b578063956463e514610f15578063a93c531714610e6e578063b056d4ae1461095b578063b561dde214610921578063c4d66de8146107de578063c58343ef14610727578063d0f46a6c146106d6578063dd0de6ec14610327578063e6bd720e14610295578063f1f5176c1461022e578063f2fde38b1461019f5763ffaf1d8d1461012f57600080fd5b3461019a57602036600319011261019a57610148611a82565b60ff54903360005260fd60205260406000209060018060a01b0316908160005260205281604060002055337f359d2c7e56147963a26a08fd48199b16e28d5fff314390b6c79bb822362340ff600080a4005b600080fd5b3461019a57602036600319011261019a576101b8611a82565b6101c0612aef565b6001600160a01b038116156101da576101d890612b47565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b3461019a57602036600319011261019a576004356001600160401b03811161019a5761025e903690600401611b1d565b90610267612d42565b60005b828110610278576001606555005b8061028f6102896001938686611d8d565b35611d9d565b0161026a565b60a036600319011261019a576044356001600160a01b038116810361019a576001600160401b039060643582811161019a576102d5903690600401611b1d565b60849291923593841161019a576102f3610309943690600401611b1d565b9390926102fe612d42565b60243560043561260a565b4780610317575b6001606555005b6103219033612f8f565b80610310565b3461019a576101008060031936011261019a57610342612d42565b6044356001600160a01b038116810361019a5760e43580156106c55760a435906001600160601b03821680920361019a57428211156106b45760243580159283159182811415908161019a5780156106a4576103a6636cdb3d1360e11b5b88612552565b600435958615159687810361019a57156105c457508161019a576064356103d46084359283838b339361229a565b1561058d5750505b61019a5760c4356001600160a01b038116929083900361019a576040519461040386611bc0565b338652602086015260408501526001600160a01b0385166060850152606435608085015260843560a085015260c084015260e08301528382015260ff54916000198314610577576020936001840160ff558360005260fb8552600560406000209360018060a01b038151168554908883015115159160ff60a81b6040850151151560a81b169160ff60a01b8460a01b169169ffffffffffffffffffff60b01b1617171786556001860160018060a01b036060840151166001600160601b0360a01b82541617905560808201519586600282015560a083015160038201556001600160601b0360c0840151169460e0840151936001600160601b03198560601b16871760048401550151938491015560405195865287860152608435604086015260018060a01b03166060850152608084015260a083015260018060a01b031690827fb67ee55b059861d68b3b5640ee51bde6a5d9d849c6ecdb610663cbd4290bdfd560c03393a46001606555604051908152f35b634e487b7160e01b600052601160045260246000fd5b604051633e2c0d9b60e11b81526001600160a01b038916600482015260248101919091526044810191909152336064820152608490fd5b915060c4356001600160a01b03811680820361019a578015610692576084359161061461060b8b6106036105f88c88611d6d565b8092606435906120af565b919050611d80565b9182339161217c565b1561066e57505060009282610665575b8215610645575b5050156103dc575b60405163524f409b60e01b8152600490fd5b60009350915081610659575b50888061062b565b60019150141588610651565b81159250610624565b6064925060405191631184019360e31b835260048301526024820152336044820152fd5b604051631eb3268560e31b8152600490fd5b6103a66380ac58cd60e01b6103a0565b60405162d36c8560e81b8152600490fd5b60405162bfc92160e01b8152600490fd5b3461019a57604036600319011261019a576106ef611a82565b6106f7611a98565b9060018060a01b0380911660005260fd602052604060002091166000526020526020604060002054604051908152f35b3461019a57602036600319011261019a57610740611e3b565b5060043560005260fb602052610120604060002060056040519161076383611bc0565b805460ff60018060a01b03918281168652818160a01c161515602087015260a81c1615156040850152600182015416606084015260028101546080840152600381015460a084015260048101546001600160601b03811660c085015260601c60e084015201546101008201526107dc6040518092611aae565bf35b3461019a57602036600319011261019a576107f7611a82565b60005460ff8160081c161591828093610914575b80156108fd575b156108a15760ff198216600117600055610851918361088f575b5061084760ff60005460081c1661084281612ce2565b612ce2565b6001606555612b47565b61085757005b61ff0019600054166000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b61ffff1916610101176000558361082c565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156108125750600160ff831614610812565b50600160ff83161061080b565b3461019a57602036600319011261019a576001600160a01b03610942611a82565b1660005260fc6020526020604060002054604051908152f35b3461019a57602036600319011261019a576001600160401b03806004351161019a5736602360043501121561019a57600435600401351161019a573660246004356004013560081b60043501011161019a576109b5612d42565b6109c460043560040135611cf7565b6109d16040519182611c25565b600480350135808252601f19906109e790611cf7565b0136602083013760005b600435600401358110610a445750600180606555604051906020820160208352835180915260206040840194019060005b818110610a2f5784860385f35b82518652602095860195909201918301610a22565b610a5760648260081b6004350101611d38565b906101048160081b600435010135156106c557426001600160601b03610a8660c48460081b6004350101611d4c565b1611156106b4576044610aa1818360081b6004350101611d60565b15610e5e57610ab8636cdb3d1360e11b5b84612552565b610acb60248360081b6004350101611d60565b15610d4757610ae2818360081b6004350101611d60565b608490818460081b600435010135610b0a60a48660081b60043501013592838389339361229a565b15610d16575050505b610b38610b2960248460081b6004350101611d60565b918360081b6004350101611d60565b6001600160601b03610b5360e48560081b6004350101611d38565b91610b6760c48660081b6004350101611d4c565b9060405194610b7586611bc0565b33865215156020860152151560408501526001600160a01b0386811660608601526084600887901b6004350190810135608087015260a481013560a08701529190921660c0850152911660e0830152610104013561010082015260ff549060001982146105775760019384830160ff558260005260fb60205260406000206005868060a01b0384511693825494602082015115159560ff60a81b6040840151151560a81b169160ff60a01b8860a01b169169ffffffffffffffffffff60b01b161717178355878301888060a01b036060830151166001600160601b0360a01b82541617905560808101519485600285015560a082015160038501556001600160601b0360c0830151169361010060e0840151936001600160601b03198560601b168717600484015501519384910155604051958652602086015260a48760081b6004350101356040860152878060a01b03166060850152608084015260a0830152848060a01b031690827fb67ee55b059861d68b3b5640ee51bde6a5d9d849c6ecdb610663cbd4290bdfd560c03393a4610d0f8285611d0e565b52016109f1565b604051633e2c0d9b60e11b81526001600160a01b038716600482015260248101919091529283015233606483015290fd5b600435600883901b0160e4016001600160a01b0380610d6583611d38565b161561069257600435600885901b0160a48101359290610da490610d8e90610104013585611d6d565b6106038160848960081b6004350101358a6120af565b90610db83383610db384611d38565b61217c565b15610e3057505050610dd2828460081b6004350101611d60565b9081610e27575b8115610df8575b5015610b135760405163524f409b60e01b8152600490fd5b9050610e0c828460081b6004350101611d60565b159081610e1b575b5085610de0565b60019150141585610e14565b80159150610dd9565b60649291610e3e8692611d38565b604051631184019360e31b81529316600484015260248301523390820152fd5b610ab86380ac58cd60e01b610ab2565b3461019a57610e7c36611c61565b959897610e8e97929497959195612d42565b898114801590610f0b575b610ef95760005b818110610eae576001606555005b80610ef38989898f8f8f610eed610ee8898f95938f958f959d8f9e60019f82610eda91610ee195611d8d565b3598611d8d565b3594611d8d565b611d38565b9161260a565b01610ea0565b6040516355ca07b760e11b8152600490fd5b5087811415610e99565b3461019a5760208060031936011261019a576004356001600160401b03811161019a57610f46903690600401611b1d565b9190610f5183611e80565b9260005b818110610f7757505050610f73604051928284938452830190611b4d565b0390f35b610f82818385611d8d565b3560005260fb8452604060002090604051610f9c81611bc0565b600583549360018060a01b0394858116845260ff60a0918181841c1615158b87015260a81c161515604085015260019586830154169060609182860152600283015460808601526003830154908501526004820154906001600160601b03821660c08601521c60e084015201546101008201526110198288611d0e565b526110248187611d0e565b5001610f55565b3461019a57600036600319011261019a576033546040516001600160a01b039091168152602090f35b3461019a57600036600319011261019a5761106d612aef565b603380546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b6110ba36611c61565b9598976110cc97929497959195612d42565b898114801590611124575b610ef95760005b8181106110f2574780610317576001606555005b8061111e8989898f8f8f610eed610ee8898f95938f958f959d8f9e60019f82610eda91610ee195611d8d565b016110de565b50878114156110d7565b3461019a57600036600319011261019a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031630036111875760206040516000805160206130198339815191528152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b604036600319011261019a57611206611a82565b602435906001600160401b03821161019a573660238301121561019a57816004013561123181611c46565b9261123f6040519485611c25565b81845260209182850191366024838301011161019a578160009260248693018537860101526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169061129c30831415612b90565b6112b9600080516020613019833981519152928284541614612bf1565b6112c1612aef565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156112f957505050506101d89150612c52565b84939416906040516352d1902d60e01b81528581600481865afa60009181611480575b5061137d5760405162461bcd60e51b815260048101879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b036114295761138b83612c52565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2835115801590611421575b6113c157005b600080916101d8957f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c604051966113f788611c0a565b60278852870152660819985a5b195960ca1b60408701525190845af461141b612d98565b91612dc8565b5060016113bb565b60405162461bcd60e51b815260048101859052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508681813d83116114a8575b6114988183611c25565b8101031261019a5751908861131c565b503d61148e565b3461019a57604036600319011261019a576001600160401b0360043581811161019a576114e0903690600401611b1d565b9160243590811161019a576114f9903690600401611b1d565b8084929403610ef95761150b82611cf7565b926115196040519485611c25565b82845261152583611cf7565b9460209283860196601f190136883761153d85611e80565b9460005b818110611597575050505050604051926040840190604085525180915260608401949060005b81811061158157858703848701528580610f738988611b4d565b8251151587529583019591830191600101611567565b806115bb6115a86001938589611d8d565b356115b4838789611d8d565b3590611ed0565b6115c5838b611d0e565b526115d0828b611d0e565b901515905201611541565b3461019a57600036600319011261019a5760ff543360005260fc60205280604060002055337fb9fd665eb33107da2a1f0113e84d01c5915024b696fa667e66f80505bf3b2977600080a3005b3461019a57602036600319011261019a576001600160a01b0380611649611a82565b16600090815260fe60209081526040918290205482519381166001600160a01b0316845260a01c9083015290f35b3461019a57606036600319011261019a576116a0611693611a82565b60443590602435906120af565b604080516001600160a01b03939093168352602083019190915290f35b3461019a5760208060031936011261019a576116d7611a82565b6001600160a01b03917f0000000000000000000000000000000000000000000000000000000000000000831661170f30821415612b90565b61172c600080516020613019833981519152918583541614612bf1565b611734612aef565b6040519361174185611bef565b600085527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561177c575050506101d89150612c52565b83929316906040516352d1902d60e01b81528481600481865afa600091816118ff575b506118005760405162461bcd60e51b815260048101869052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b036118a85761180e82612c52565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a28251158015906118a0575b61184457005b6000806101d8946040519461185886611c0a565b602786527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c81870152660819985a5b195960ca1b604087015281519101845af461141b612d98565b50600061183e565b60405162461bcd60e51b815260048101849052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508581813d8311611927575b6119178183611c25565b8101031261019a5751908761179f565b503d61190d565b3461019a57602036600319011261019a57611947612d42565b610310600435611d9d565b3461019a57604036600319011261019a576101406107dc611977602435600435611ed0565b60409291925192151583526020830190611aae565b3461019a57606036600319011261019a576119a5611a82565b6119ad611a98565b6044356001600160601b0381169182820361019a576119ca612aef565b6127108311611a70576040517f60567f9d30ab22ef3cd7557f56b897c677c80a85c8673a4a5c26eb9349ef8c6093611a0182611b8f565b60018060a01b03809681851684526020840192835216958660005260fe6020526040600020925116906001600160601b0360a01b905160a01b16179055611a6b604051928392839092916001600160601b03602091604084019560018060a01b0316845216910152565b0390a2005b60405163e0e54ced60e01b8152600490fd5b600435906001600160a01b038216820361019a57565b602435906001600160a01b038216820361019a57565b60018060a01b038082511683526020820151151560208401526040820151151560408401528060608301511660608401526080820151608084015260a082015160a08401526001600160601b0360c08301511660c084015260e08201511660e083015261010080910151910152565b9181601f8401121561019a578235916001600160401b03831161019a576020808501948460051b01011161019a57565b90815180825260208080930193019160005b828110611b6d575050505090565b909192938261012082611b836001948951611aae565b01950193929101611b5f565b604081019081106001600160401b03821117611baa57604052565b634e487b7160e01b600052604160045260246000fd5b61012081019081106001600160401b03821117611baa57604052565b6001600160401b038111611baa57604052565b602081019081106001600160401b03821117611baa57604052565b606081019081106001600160401b03821117611baa57604052565b90601f801991011681019081106001600160401b03821117611baa57604052565b6001600160401b038111611baa57601f01601f191660200190565b60a060031982011261019a576004906001600160401b03823581811161019a5782611c8d918501611b1d565b9490949360243583811161019a5784611ca7918301611b1d565b9490949360443581811161019a5782611cc1918501611b1d565b9490949360643583811161019a5784611cdb918301611b1d565b9490949360843590811161019a57611cf39201611b1d565b9091565b6001600160401b038111611baa5760051b60200190565b8051821015611d225760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b038116810361019a5790565b356001600160601b038116810361019a5790565b35801515810361019a5790565b8181029291811591840414171561057757565b9190820180921161057757565b9190811015611d225760051b0190565b600081815260fb6020526040812080549192916001600160a01b03919082163303611e22579060017fe0d7665e06e7db1fc500d66d4e3898d1d4a5533d7efe54b352fcdaa177c22783920154169282815260fb602052611e1e6040822060056000918281558260018201558260028201558260038201558260048201550155565b80a3565b6040516364b4f07960e11b815260048101849052602490fd5b60405190611e4882611bc0565b816101006000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201520152565b90611e8a82611cf7565b611e976040519182611c25565b8281528092611ea8601f1991611cf7565b019060005b828110611eb957505050565b602090611ec4611e3b565b82828501015201611ead565b9190611eda611e3b565b5060009280845260209160fb8352604090818620918051611efa81611bc0565b83549760018060a01b039460ff868b169a8b8552818160a01c1615158a86015260a81c16151584840152600586600183015416916060850192835260028101546080860152600381015460a086015260048101546001600160601b03811660c087015260601c60e08601520154966101009788850152839a835260fc8952848320548110918215612078575b505061206d5750508115612061575b828751161515948561204a575b8561203b575b85611fb7575b50505050509190565b870151939450919290919015611ff257611fe89350850151151591806060870151166080870151918751169361229a565b3880808080611fae565b506120039061203693860151611d6d565b9061202c61201d83836060890151166080890151906120af565b90508260e08801511693611d80565b908551169161217c565b611fe8565b60a08801518311159550611fa8565b60c08801516001600160601b031642109550611fa2565b60a08701519150611f95565b975095945050505050565b84518816845260fd8a528584209051881684528952848320541190503880611f86565b51906001600160a01b038216820361019a57565b6040805163152a902d60e11b81526004810193909352602483018490526001600160a01b0394939290918516908281604481855afa9081600091829361213b575b5061213257505091602061212e926127109460005260fe82528060002090519061211982611b8f565b549687169687825260a01c9182910152611d6d565b0490565b95509392505050565b919092508482813d8311612175575b6121548183611c25565b81010312612172575060206121688261209b565b91015191386120f0565b80fd5b503d61214a565b6040516370a0823160e01b81526001600160a01b03848116600483015291909116926020918281602481885afa8015612246578491600091612252575b50101593846121ca575b5050505090565b604051636eb1769f60e11b81526001600160a01b03929092166004830152306024830152929350918190839060449082905afa9081156122465760009161221a575b5090501015388080806121c3565b82813d831161223f575b61222e8183611c25565b81010312612172575051803861220c565b503d612224565b6040513d6000823e3d90fd5b91508382813d831161227b575b6122698183611c25565b810103126121725750839051386121b9565b503d61225f565b9081602091031261019a5751801515810361019a5790565b93919093612452576040516331a9108f60e11b8152600481018290526000946001600160a01b0390811694602093879385816024818b5afa899181612417575b506123a3575b50506001149586612394575b50856122fb575b505050505090565b93945090921630149190821561231a575b5050905038808080806122f3565b60405163e985e9c560e01b81526001600160a01b0391909116600482015230602482015290929091508290829060449082905afa91821561224657600092612367575b505080388061230c565b6123869250803d1061238d575b61237e8183611c25565b810190612282565b388061235d565b503d612374565b819650168584161494386122ec565b60405163020604bf60e21b81526004810192909252975084816024818a5afa600091816123e0575b506123d7575b806122e0565b925060016123d1565b90918682813d8311612410575b6123f78183611c25565b8101031261217257506124099061209b565b90386123cb565b503d6123ed565b9091508681813d831161244b575b61242f8183611c25565b81010312612447576124409061209b565b90386122da565b8980fd5b503d612425565b92909180151593846124ca575b50508261246b57505090565b60405163e985e9c560e01b81526001600160a01b039283166004820152306024820152925060209183916044918391165afa908115612246576000916124af575090565b6124c7915060203d811161238d5761237e8183611c25565b90565b604051627eeac760e11b81526001600160a01b0385166004820152602481019190915291935090602081806044810103816001600160a01b0388165afa90811561224657600091612521575b50101591388061245f565b906020823d821161254a575b8161253a60209383611c25565b8101031261217257505138612516565b3d915061252d565b90813b61258b575b604051625d185960e41b81526001600160a01b0390921660048301526001600160e01b031916602482015260449150fd5b6040516301ffc9a760e01b81526001600160e01b0319821660048201526020816024816001600160a01b0387165afa600091816125dd575b506125cf575b5061255a565b6125d957826125c9565b5050565b6125f691925060203d811161238d5761237e8183611c25565b90386125c3565b9190820391821161057757565b93919495909260009285845260fb602052604084206040519061262c82611bc0565b600581549160ff60018060a01b03841693848652818160a01c161515602087015260a81c161515604085015260018060a01b03600182015416606085015260028101546080850152600381015460a085015260048101546001600160601b03811660c086015260601c60e0850152015461010083015215612ad65785158015612ac9575b6106335780516001600160a01b0316855260fc602052604085205487108015612a96575b612a845760c08101516001600160601b03164210156106b4578382036129515787938660a083015114600014612a635787865260fb6020526127376040872060056000918281558260018201558260028201558260038201558260048201550155565b60018060a01b036060830151169961275488610100850151611d6d565b612764818d6080870151906120af565b919096602086015115159384600014612a495786516001600160a01b0316999833968b9590915b60e08a01516001600160a01b03161597826129e3575b5050509791908b988c935b808510612963575050505050602085015115600014612941576080956127d1916125fd565b915b15612924576127e29250612f8f565b6040810151156128be57015190873b156128ba57604051637921219560e11b81526001600160a01b0393841660048201529216602483015260448201526064810183905260a0608482015260a48101829052818160c481838a5af180156128af5761289b575b5060406003915b84815260fb602052200154906040519360018060a01b03168452602084015260408301527f146c7c3a67244cf406ca437a82b2bf587bc02b628b63659c73b4295b8b00e76f60603393a4565b6128a58291611bdc565b6121725738612848565b6040513d84823e3d90fd5b8380fd5b015191873b156128ba57604051632142170760e11b81526001600160a01b0391821660048201529116602482015260448101919091528181606481838a5af180156128af5791604091600393612915575b5061284f565b61291e90611bdc565b3861290f565b60e084015161293c93906001600160a01b0316612e9c565b6127e2565b80929511612951576080946127d3565b6040516330fd3c3160e01b8152600490fd5b90919293996129738b8387611d8d565b35612982610ee88d8688611d8d565b906001600160a01b0382161580156129db575b612951576001928c826129bb948e8e6000146129c657506129b69250612f8f565b611d80565b9a01939291906127ac565b6129b69360e0898060a01b0391015116612e9c565b508015612995565b9195909115612a2e57856129f6916125fd565b945b8715612a0f57612a0791612f8f565b3880806127a1565b60e08a0151612a2992908a906001600160a01b0316612e9c565b612a07565b94858111156129f85760405163e0e54ced60e01b8152600490fd5b8651339a506001600160a01b03169889968f95909161278b565b87865260fb60205260036040872001612a7d8882546125fd565b9055612737565b6040516319f6cea560e01b8152600490fd5b5080516001600160a01b03908116865260fd602090815260408088206060850151909316885291905285205487106126d4565b5060a081015186116126b0565b6040516364b4f07960e11b815260048101889052602490fd5b6033546001600160a01b03163303612b0357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b15612b9757565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15612bf857565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b803b15612c875760008051602061301983398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b15612ce957565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b600260655414612d53576002606555565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b3d15612dc3573d90612da982611c46565b91612db76040519384611c25565b82523d6000602084013e565b606090565b91929015612e2a5750815115612ddc575090565b3b15612de55790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015612e3d5750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510612e83575050604492506000838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350612e60565b6040516323b872dd60e01b602082019081526001600160a01b039384166024830152939092166044830152606480830194909452928152600092839290918390612ee7608482611c25565b51925af1612ef3612d98565b81612f60575b5015612f0157565b60405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b6064820152608490fd5b8051801592508215612f75575b505038612ef9565b612f889250602080918301019101612282565b3880612f6d565b6000808093819382604051612fa381611bef565b525af1612fae612d98565b5015612fb657565b60405162461bcd60e51b815260206004820152603460248201527f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60448201527308115512081d1c985b9cd9995c8819985a5b195960621b6064820152608490fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca264697066735822122001778e3c0e1431aaed06d18786e2d72c0d122340f32f8cd956f10acc84cc7b5a64736f6c63430008130033',
      signer
    )
  }
}

export const SEQUENCEMARKETBATCHPAYABLEFACTORYV2_VERIFICATION: Omit<VerificationRequest, 'waitForSuccess'> = {
  contractToVerify: 'contracts/SequenceMarketBatchPayableFactory.sol:SequenceMarketBatchPayableFactory',
  version: 'v0.8.19+commit.7dd6d404',
  licenceType: 'Apache-2.0',
  compilerInput: {
    language: 'Solidity',
    sources: {
      'contracts/SequenceMarketBatchPayableFactory.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.19;\n\nimport {SequenceMarketBatchPayable, SequenceMarket} from "./SequenceMarketBatchPayable.sol";\nimport {ERC1967Proxy} from "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol";\nimport {Create2} from "@openzeppelin/contracts/utils/Create2.sol";\n\n\ncontract SequenceMarketBatchPayableFactory {\n  event ImplementationAddress(address indexed implementation);\n\n  address public implementation;\n\n  constructor() {\n    implementation = address(new SequenceMarketBatchPayable());\n    emit ImplementationAddress(implementation);\n  }\n\n  function deploy(bytes32 salt, address owner) external returns (address proxy) {\n    bytes32 saltedHash = keccak256(abi.encodePacked(salt, owner, implementation));\n    bytes memory bytecode = _getDeployBytecode(owner);\n    proxy = Create2.deploy(0, saltedHash, bytecode);\n  }\n\n  function predictAddress(bytes32 salt, address owner) external view returns (address) {\n    bytes32 saltedHash = keccak256(abi.encodePacked(salt, owner, implementation));\n    bytes memory bytecode = _getDeployBytecode(owner);\n    bytes32 bytecodeHash = keccak256(bytecode);\n    return Create2.computeAddress(saltedHash, bytecodeHash);\n  }\n\n  function _getDeployBytecode(address owner) internal view returns (bytes memory) {\n    bytes memory initData = abi.encodeWithSelector(SequenceMarket.initialize.selector, owner);\n    return abi.encodePacked(type(ERC1967Proxy).creationCode, abi.encode(implementation, initData));\n  }\n}\n'
      },
      'contracts/SequenceMarketBatchPayable.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.19;\n\nimport {SequenceMarket, ISequenceMarketFunctions} from "./SequenceMarket.sol";\nimport {ISequenceMarketBatchPayable, ISequenceMarketBatchPayableFunctions} from "./interfaces/ISequenceMarketBatchPayable.sol";\nimport {IERC721} from "./interfaces/IERC721.sol";\nimport {IERC1155} from "@0xsequence/erc-1155/contracts/interfaces/IERC1155.sol";\nimport {TransferHelper} from "@uniswap/lib/contracts/libraries/TransferHelper.sol";\n\ncontract SequenceMarketBatchPayable is SequenceMarket, ISequenceMarketBatchPayable {\n\n  /// @inheritdoc ISequenceMarketFunctions\n  function acceptRequest(\n    uint256 requestId,\n    uint256 quantity,\n    address recipient,\n    uint256[] calldata additionalFees,\n    address[] calldata additionalFeeRecipients\n  ) external payable override(SequenceMarket, ISequenceMarketFunctions) nonReentrant {\n    _acceptRequest(requestId, quantity, recipient, additionalFees, additionalFeeRecipients);\n\n    // Transfer any remaining native token back to currency sender (msg.sender)\n    uint256 thisBal = address(this).balance;\n    if (thisBal > 0) {\n      TransferHelper.safeTransferETH(msg.sender, thisBal);\n    }\n  }\n\n  /// @inheritdoc ISequenceMarketBatchPayableFunctions\n  function acceptRequestBatchPayable(\n    uint256[] calldata requestIds,\n    uint256[] calldata quantities,\n    address[] calldata recipients,\n    uint256[] calldata additionalFees,\n    address[] calldata additionalFeeRecipients\n  ) external payable nonReentrant {\n    uint256 len = requestIds.length;\n    if (len != quantities.length || len != recipients.length) {\n      revert InvalidBatchRequest();\n    }\n\n    for (uint256 i; i < len;) {\n      _acceptRequest(requestIds[i], quantities[i], recipients[i], additionalFees, additionalFeeRecipients);\n      unchecked { ++i; }\n    }\n\n    // Transfer any remaining native token back to currency sender (msg.sender)\n    uint256 thisBal = address(this).balance;\n    if (thisBal > 0) {\n      TransferHelper.safeTransferETH(msg.sender, thisBal);\n    }\n  }\n\n  /**\n   * Performs acceptance of a request.\n   * @param requestId The ID of the request.\n   * @param quantity The quantity of tokens to accept.\n   * @param recipient The recipient of the accepted tokens.\n   * @param additionalFees The additional fees to pay.\n   * @param additionalFeeRecipients The addresses to send the additional fees to.\n   * @dev This function is identical to SequenceMarket._acceptRequest, but with native the currency refund removed.\n   */\n  function _acceptRequest(\n    uint256 requestId,\n    uint256 quantity,\n    address recipient,\n    uint256[] calldata additionalFees,\n    address[] calldata additionalFeeRecipients\n  ) internal override {\n    Request memory request = _requests[requestId];\n    if (request.creator == address(0)) {\n      // Request cancelled, completed or never existed\n      revert InvalidRequestId(requestId);\n    }\n    if (quantity == 0 || quantity > request.quantity) {\n      revert InvalidQuantity();\n    }\n    if (\n      requestId < invalidBeforeId[request.creator]\n        || requestId < invalidTokenBeforeId[request.creator][request.tokenContract]\n    ) {\n      revert Invalidated();\n    }\n    if (_isExpired(request)) {\n      revert InvalidExpiry();\n    }\n    if (additionalFees.length != additionalFeeRecipients.length) {\n      revert InvalidAdditionalFees();\n    }\n\n    // Update request state\n    if (request.quantity == quantity) {\n      // Refund some gas\n      delete _requests[requestId];\n    } else {\n      _requests[requestId].quantity -= quantity;\n    }\n    address tokenContract = request.tokenContract;\n\n    // Calculate payables\n    uint256 remainingCost = request.pricePerToken * quantity;\n    (address royaltyRecipient, uint256 royaltyAmount) = getRoyaltyInfo(tokenContract, request.tokenId, remainingCost);\n\n    address currencySender;\n    address currencyRecipient;\n    address tokenSender;\n    address tokenRecipient;\n    if (request.isListing) {\n      currencySender = msg.sender;\n      currencyRecipient = request.creator;\n      tokenSender = request.creator;\n      tokenRecipient = recipient;\n    } else {\n      currencySender = request.creator;\n      currencyRecipient = recipient;\n      tokenSender = msg.sender;\n      tokenRecipient = request.creator;\n    }\n\n    bool isNative = request.currency == address(0);\n\n    if (royaltyAmount > 0) {\n      if (request.isListing) {\n        // Royalties are paid by the maker. This reduces the cost for listings.\n        // Underflow prevents fees > cost\n        remainingCost -= royaltyAmount;\n      } else if (royaltyAmount > remainingCost) {\n        // Royalty cannot exceed cost\n        revert InvalidRoyalty();\n      }\n      // Transfer royalties\n      if (isNative) {\n        // Transfer native token\n        TransferHelper.safeTransferETH(royaltyRecipient, royaltyAmount);\n      } else {\n        // Transfer currency\n        TransferHelper.safeTransferFrom(request.currency, currencySender, royaltyRecipient, royaltyAmount);\n      }\n    }\n\n    // Transfer additional fees\n    uint256 totalFees;\n    uint256 len = additionalFees.length;\n    for (uint256 i; i < len;) {\n      uint256 fee = additionalFees[i];\n      address feeRecipient = additionalFeeRecipients[i];\n      if (feeRecipient == address(0) || fee == 0) {\n        revert InvalidAdditionalFees();\n      }\n      if (isNative) {\n        TransferHelper.safeTransferETH(feeRecipient, fee);\n      } else {\n        TransferHelper.safeTransferFrom(request.currency, currencySender, feeRecipient, fee);\n      }\n      totalFees += fee;\n      unchecked { ++i; }\n    }\n    if (!request.isListing) {\n      // Fees are paid by the taker. This reduces the cost for offers.\n      // Underflow prevents fees > cost\n      remainingCost -= totalFees;\n    } else if (totalFees > remainingCost) {\n      // Fees cannot exceed cost - royalties\n      revert InvalidAdditionalFees();\n    }\n\n    if (isNative) {\n      // Transfer native token\n      TransferHelper.safeTransferETH(currencyRecipient, remainingCost);\n    } else {\n      // Transfer currency\n      TransferHelper.safeTransferFrom(request.currency, currencySender, currencyRecipient, remainingCost);\n    }\n\n    // Transfer token\n    if (request.isERC1155) {\n      IERC1155(tokenContract).safeTransferFrom(tokenSender, tokenRecipient, request.tokenId, quantity, "");\n    } else {\n      IERC721(tokenContract).safeTransferFrom(tokenSender, tokenRecipient, request.tokenId);\n    }\n\n    emit RequestAccepted(requestId, msg.sender, tokenContract, recipient, quantity, _requests[requestId].quantity);\n  }\n}\n'
      },
      'lib/openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport "../Proxy.sol";\nimport "./ERC1967Upgrade.sol";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn\'t conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it\'s used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n'
      },
      'lib/openzeppelin/contracts/utils/Create2.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as \'counterfactual interactions\'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\n        require(address(this).balance >= amount, "Create2: insufficient balance");\n        require(bytecode.length != 0, "Create2: bytecode length is zero");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), "Create2: Failed on deploy");\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract\'s address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n'
      },
      'contracts/SequenceMarket.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.19;\n\nimport {ISequenceMarket, ISequenceMarketFunctions} from "./interfaces/ISequenceMarket.sol";\nimport {IERC721} from "./interfaces/IERC721.sol";\nimport {IERC2981} from "./interfaces/IERC2981.sol";\nimport {IERC20} from "@0xsequence/erc-1155/contracts/interfaces/IERC20.sol";\nimport {IERC165} from "@0xsequence/erc-1155/contracts/interfaces/IERC165.sol";\nimport {IERC1155} from "@0xsequence/erc-1155/contracts/interfaces/IERC1155.sol";\nimport {TransferHelper} from "@uniswap/lib/contracts/libraries/TransferHelper.sol";\nimport {UUPSUpgradeable} from "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";\nimport {OwnableUpgradeable} from "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";\nimport {ReentrancyGuardUpgradeable} from "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";\n\ncontract SequenceMarket is ISequenceMarket, OwnableUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable {\n  mapping(uint256 => Request) internal _requests;\n  mapping(address => uint256) public invalidBeforeId;\n  mapping(address => mapping(address => uint256)) public invalidTokenBeforeId;\n  mapping(address => CustomRoyalty) public customRoyalties;\n\n  uint256 private _nextRequestId;\n\n  constructor() {\n    _disableInitializers();\n  }\n\n  function initialize(address _owner) external initializer {\n    __ReentrancyGuard_init();\n    // __UUPSUpgradeable_init(); Empty\n    // __ERC1967Upgrade_init(); Empty\n    // __Context_init(); Empty\n    // __Ownable_init(); Skip\n\n    _transferOwnership(_owner);\n  }\n\n  function _authorizeUpgrade(address) internal override onlyOwner {}\n\n  /// @inheritdoc ISequenceMarketFunctions\n  function createRequest(RequestParams calldata request) external nonReentrant returns (uint256 requestId) {\n    return _createRequest(request);\n  }\n\n  /// @inheritdoc ISequenceMarketFunctions\n  function createRequestBatch(RequestParams[] calldata requests)\n    external\n    nonReentrant\n    returns (uint256[] memory requestIds)\n  {\n    uint256 len = requests.length;\n    requestIds = new uint256[](len);\n    for (uint256 i; i < len;) {\n      requestIds[i] = _createRequest(requests[i]);\n      unchecked { ++i; }\n    }\n  }\n\n  /**\n   * Performs creation of a request.\n   * @param params The request\'s params.\n   * @return requestId The ID of the request.\n   */\n  function _createRequest(RequestParams calldata params) internal returns (uint256 requestId) {\n    uint256 quantity = params.quantity;\n    address tokenContract = params.tokenContract;\n\n    if (params.pricePerToken == 0) {\n      revert InvalidPrice();\n    }\n    // solhint-disable-next-line not-rely-on-time\n    if (params.expiry <= block.timestamp) {\n      revert InvalidExpiry();\n    }\n\n    // Check interfaces\n    _requireInterface(tokenContract, params.isERC1155 ? type(IERC1155).interfaceId : type(IERC721).interfaceId);\n\n    if (params.isListing) {\n      // Check valid token for listing\n      if (!_hasApprovedTokens(params.isERC1155, tokenContract, params.tokenId, quantity, msg.sender)) {\n        revert InvalidTokenApproval(tokenContract, params.tokenId, quantity, msg.sender);\n      }\n    } else {\n      if (params.currency == address(0)) {\n        // Native token support not available for offers\n        revert InvalidCurrency();\n      }\n      // Check approved currency for offer inc royalty\n      uint256 total = quantity * params.pricePerToken;\n      (, uint256 royaltyAmount) = getRoyaltyInfo(tokenContract, params.tokenId, total);\n      total += royaltyAmount;\n      if (!_hasApprovedCurrency(params.currency, total, msg.sender)) {\n        revert InvalidCurrencyApproval(params.currency, total, msg.sender);\n      }\n      // Check quantity. Covered by _hasApprovedTokens for listings\n      if ((params.isERC1155 && quantity == 0) || (!params.isERC1155 && quantity != 1)) {\n        revert InvalidQuantity();\n      }\n    }\n\n    Request memory request = Request({\n      isListing: params.isListing,\n      isERC1155: params.isERC1155,\n      creator: msg.sender,\n      tokenContract: tokenContract,\n      tokenId: params.tokenId,\n      quantity: quantity,\n      currency: params.currency,\n      pricePerToken: params.pricePerToken,\n      expiry: params.expiry\n    });\n\n    requestId = uint256(_nextRequestId);\n    _nextRequestId++;\n    _requests[requestId] = request;\n\n    emit RequestCreated(\n      requestId,\n      msg.sender,\n      tokenContract,\n      request.tokenId,\n      request.isListing,\n      quantity,\n      request.currency,\n      request.pricePerToken,\n      request.expiry\n    );\n\n    return requestId;\n  }\n\n  /// @inheritdoc ISequenceMarketFunctions\n  function acceptRequest(\n    uint256 requestId,\n    uint256 quantity,\n    address recipient,\n    uint256[] calldata additionalFees,\n    address[] calldata additionalFeeRecipients\n  ) external payable virtual nonReentrant {\n    _acceptRequest(requestId, quantity, recipient, additionalFees, additionalFeeRecipients);\n  }\n\n  /// @inheritdoc ISequenceMarketFunctions\n  function acceptRequestBatch(\n    uint256[] calldata requestIds,\n    uint256[] calldata quantities,\n    address[] calldata recipients,\n    uint256[] calldata additionalFees,\n    address[] calldata additionalFeeRecipients\n  ) external nonReentrant {\n    uint256 len = requestIds.length;\n    if (len != quantities.length || len != recipients.length) {\n      revert InvalidBatchRequest();\n    }\n\n    for (uint256 i; i < len;) {\n      _acceptRequest(requestIds[i], quantities[i], recipients[i], additionalFees, additionalFeeRecipients);\n      unchecked { ++i; }\n    }\n  }\n\n  /**\n   * Performs acceptance of a request.\n   * @param requestId The ID of the request.\n   * @param quantity The quantity of tokens to accept.\n   * @param recipient The recipient of the accepted tokens.\n   * @param additionalFees The additional fees to pay.\n   * @param additionalFeeRecipients The addresses to send the additional fees to.\n   */\n  function _acceptRequest(\n    uint256 requestId,\n    uint256 quantity,\n    address recipient,\n    uint256[] calldata additionalFees,\n    address[] calldata additionalFeeRecipients\n  ) internal virtual {\n    Request memory request = _requests[requestId];\n    if (request.creator == address(0)) {\n      // Request cancelled, completed or never existed\n      revert InvalidRequestId(requestId);\n    }\n    if (quantity == 0 || quantity > request.quantity) {\n      revert InvalidQuantity();\n    }\n    if (\n      requestId < invalidBeforeId[request.creator]\n        || requestId < invalidTokenBeforeId[request.creator][request.tokenContract]\n    ) {\n      revert Invalidated();\n    }\n    if (_isExpired(request)) {\n      revert InvalidExpiry();\n    }\n    if (additionalFees.length != additionalFeeRecipients.length) {\n      revert InvalidAdditionalFees();\n    }\n    if (request.currency != address(0) && msg.value != 0) {\n      // Sent native token when not required\n      revert InvalidCurrency();\n    }\n\n    // Update request state\n    if (request.quantity == quantity) {\n      // Refund some gas\n      delete _requests[requestId];\n    } else {\n      _requests[requestId].quantity -= quantity;\n    }\n    address tokenContract = request.tokenContract;\n\n    // Calculate payables\n    uint256 remainingCost = request.pricePerToken * quantity;\n    (address royaltyRecipient, uint256 royaltyAmount) = getRoyaltyInfo(tokenContract, request.tokenId, remainingCost);\n\n    address currencySender;\n    address currencyRecipient;\n    address tokenSender;\n    address tokenRecipient;\n    if (request.isListing) {\n      currencySender = msg.sender;\n      currencyRecipient = request.creator;\n      tokenSender = request.creator;\n      tokenRecipient = recipient;\n    } else {\n      currencySender = request.creator;\n      currencyRecipient = recipient;\n      tokenSender = msg.sender;\n      tokenRecipient = request.creator;\n    }\n\n    bool isNative = request.currency == address(0);\n\n    if (royaltyAmount > 0) {\n      if (request.isListing) {\n        // Royalties are paid by the maker. This reduces the cost for listings.\n        // Underflow prevents fees > cost\n        remainingCost -= royaltyAmount;\n      } else if (royaltyAmount > remainingCost) {\n        // Royalty cannot exceed cost\n        revert InvalidRoyalty();\n      }\n      // Transfer royalties\n      if (isNative) {\n        // Transfer native token\n        TransferHelper.safeTransferETH(royaltyRecipient, royaltyAmount);\n      } else {\n        // Transfer currency\n        TransferHelper.safeTransferFrom(request.currency, currencySender, royaltyRecipient, royaltyAmount);\n      }\n    }\n\n    // Transfer additional fees\n    uint256 totalFees;\n    uint256 len = additionalFees.length;\n    for (uint256 i; i < len;) {\n      uint256 fee = additionalFees[i];\n      address feeRecipient = additionalFeeRecipients[i];\n      if (feeRecipient == address(0) || fee == 0) {\n        revert InvalidAdditionalFees();\n      }\n      if (isNative) {\n        TransferHelper.safeTransferETH(feeRecipient, fee);\n      } else {\n        TransferHelper.safeTransferFrom(request.currency, currencySender, feeRecipient, fee);\n      }\n      totalFees += fee;\n      unchecked { ++i; }\n    }\n    if (!request.isListing) {\n      // Fees are paid by the taker. This reduces the cost for offers.\n      // Underflow prevents fees > cost\n      remainingCost -= totalFees;\n    } else if (totalFees > remainingCost) {\n      // Fees cannot exceed cost - royalties\n      revert InvalidAdditionalFees();\n    }\n\n    if (isNative) {\n      // Transfer native token\n      TransferHelper.safeTransferETH(currencyRecipient, remainingCost);\n      uint256 thisBal = address(this).balance;\n      if (thisBal > 0) {\n        // Transfer any remaining native token back to currency sender (msg.sender)\n        TransferHelper.safeTransferETH(currencySender, thisBal);\n      }\n    } else {\n      // Transfer currency\n      TransferHelper.safeTransferFrom(request.currency, currencySender, currencyRecipient, remainingCost);\n    }\n\n    // Transfer token\n    if (request.isERC1155) {\n      IERC1155(tokenContract).safeTransferFrom(tokenSender, tokenRecipient, request.tokenId, quantity, "");\n    } else {\n      IERC721(tokenContract).safeTransferFrom(tokenSender, tokenRecipient, request.tokenId);\n    }\n\n    emit RequestAccepted(requestId, msg.sender, tokenContract, recipient, quantity, _requests[requestId].quantity);\n  }\n\n  /// @inheritdoc ISequenceMarketFunctions\n  function cancelRequest(uint256 requestId) external nonReentrant {\n    _cancelRequest(requestId);\n  }\n\n  /// @inheritdoc ISequenceMarketFunctions\n  function cancelRequestBatch(uint256[] calldata requestIds) external nonReentrant {\n    uint256 len = requestIds.length;\n    for (uint256 i; i < len;) {\n      _cancelRequest(requestIds[i]);\n      unchecked { ++i; }\n    }\n  }\n\n  /**\n   * Performs cancellation of a request.\n   * @param requestId The ID of the request.\n   */\n  function _cancelRequest(uint256 requestId) internal {\n    Request storage request = _requests[requestId];\n    if (request.creator != msg.sender) {\n      revert InvalidRequestId(requestId);\n    }\n    address tokenContract = request.tokenContract;\n\n    // Refund some gas\n    delete _requests[requestId];\n\n    emit RequestCancelled(requestId, tokenContract);\n  }\n\n  /// @inheritdoc ISequenceMarketFunctions\n  function invalidateRequests() external {\n    invalidBeforeId[msg.sender] = _nextRequestId;\n    emit RequestsInvalidated(msg.sender, _nextRequestId);\n  }\n\n  /// @inheritdoc ISequenceMarketFunctions\n  function invalidateRequests(address tokenContract) external {\n    invalidTokenBeforeId[msg.sender][tokenContract] = _nextRequestId;\n    emit RequestsInvalidated(msg.sender, tokenContract, _nextRequestId);\n  }\n\n  /// @inheritdoc ISequenceMarketFunctions\n  function getRequest(uint256 requestId) external view returns (Request memory request) {\n    return _requests[requestId];\n  }\n\n  /// @inheritdoc ISequenceMarketFunctions\n  function getRequestBatch(uint256[] calldata requestIds) external view returns (Request[] memory requests) {\n    uint256 len = requestIds.length;\n    requests = new Request[](len);\n    for (uint256 i; i < len;) {\n      requests[i] = _requests[requestIds[i]];\n      unchecked { ++i; }\n    }\n  }\n\n  /// @inheritdoc ISequenceMarketFunctions\n  function isRequestValid(uint256 requestId, uint256 quantity) public view returns (bool valid, Request memory request) {\n    request = _requests[requestId];\n    if (\n      requestId < invalidBeforeId[request.creator]\n        || requestId < invalidTokenBeforeId[request.creator][request.tokenContract]\n    ) {\n      return (false, request);\n    }\n    if (quantity == 0) {\n      // 0 is assumed to be max quantity\n      quantity = request.quantity;\n    }\n    valid = request.creator != address(0) && !_isExpired(request) && quantity <= request.quantity;\n    if (valid) {\n      if (request.isListing) {\n        valid = _hasApprovedTokens(request.isERC1155, request.tokenContract, request.tokenId, quantity, request.creator);\n      } else {\n        // Add royalty\n        uint256 cost = request.pricePerToken * quantity;\n        (, uint256 royaltyAmount) = getRoyaltyInfo(request.tokenContract, request.tokenId, cost);\n        valid = _hasApprovedCurrency(request.currency, cost + royaltyAmount, request.creator);\n      }\n    }\n    return (valid, request);\n  }\n\n  /// @inheritdoc ISequenceMarketFunctions\n  function isRequestValidBatch(uint256[] calldata requestIds, uint256[] calldata quantities)\n    external\n    view\n    returns (bool[] memory valid, Request[] memory requests)\n  {\n    uint256 len = requestIds.length;\n    if (len != quantities.length) {\n      revert InvalidBatchRequest();\n    }\n    valid = new bool[](len);\n    requests = new Request[](len);\n    for (uint256 i; i < len;) {\n      (valid[i], requests[i]) = isRequestValid(requestIds[i], quantities[i]);\n      unchecked { ++i; }\n    }\n  }\n\n  /**\n   * Checks if a request has expired.\n   * @param request The request to check.\n   * @return isExpired True if the request has expired.\n   */\n  function _isExpired(Request memory request) internal view returns (bool isExpired) {\n    // solhint-disable-next-line not-rely-on-time\n    return request.expiry <= block.timestamp;\n  }\n\n  /**\n   * Will set the royalties fees and recipient for contracts that don\'t support ERC-2981.\n   * @param tokenContract The contract the custom royalties apply to.\n   * @param recipient Address to send the royalties to.\n   * @param fee Fee percentage with a 10000 basis (e.g. 0.3% is 30 and 1% is 100 and 100% is 10000).\n   * @dev Can only be called by the owner.\n   * @notice This can be called even when the contract supports ERC-2891, but will be ignored if it does.\n   */\n  function setRoyaltyInfo(address tokenContract, address recipient, uint96 fee) public onlyOwner {\n    if (fee > 10000) {\n      revert InvalidRoyalty();\n    }\n    customRoyalties[tokenContract] = CustomRoyalty(recipient, fee);\n    emit CustomRoyaltyChanged(tokenContract, recipient, fee);\n  }\n\n  /// @inheritdoc ISequenceMarketFunctions\n  function getRoyaltyInfo(address tokenContract, uint256 tokenId, uint256 cost)\n    public\n    view\n    returns (address recipient, uint256 royalty)\n  {\n    try IERC2981(address(tokenContract)).royaltyInfo(tokenId, cost) returns (address _r, uint256 _c) {\n      return (_r, _c);\n    } catch {} // solhint-disable-line no-empty-blocks\n\n    // Fail over to custom royalty\n    CustomRoyalty memory customRoyalty = customRoyalties[tokenContract];\n    return (customRoyalty.recipient, customRoyalty.fee * cost / 10000);\n  }\n\n  /**\n   * Checks if the amount of currency is approved for transfer exceeds the given amount.\n   * @param currency The address of the currency.\n   * @param amount The amount of currency.\n   * @param who The address of the owner of the currency.\n   * @return isValid True if the amount of currency is sufficient and approved for transfer.\n   */\n  function _hasApprovedCurrency(address currency, uint256 amount, address who) internal view returns (bool isValid) {\n    return IERC20(currency).balanceOf(who) >= amount && IERC20(currency).allowance(who, address(this)) >= amount;\n  }\n\n  /**\n   * Checks if a token contract is ERC1155 or ERC721 and if the token is owned and approved for transfer.\n   * @param isERC1155 True if the token is an ERC1155 token, false if it is an ERC721 token.\n   * @param tokenContract The address of the token contract.\n   * @param tokenId The ID of the token.\n   * @param quantity The quantity of tokens to list.\n   * @param who The address of the owner of the token.\n   * @return isValid True if the token is owned and approved for transfer.\n   * @dev Returns false if the token contract is not ERC1155 or ERC721.\n   */\n  function _hasApprovedTokens(bool isERC1155, address tokenContract, uint256 tokenId, uint256 quantity, address who)\n    internal\n    view\n    returns (bool isValid)\n  {\n    address market = address(this);\n\n    if (isERC1155) {\n      // ERC1155\n      return quantity > 0 && IERC1155(tokenContract).balanceOf(who, tokenId) >= quantity\n        && IERC1155(tokenContract).isApprovedForAll(who, market);\n    }\n\n    // ERC721\n    address tokenOwner;\n    address operator;\n\n    try IERC721(tokenContract).ownerOf(tokenId) returns (address _tokenOwner) {\n      tokenOwner = _tokenOwner;\n\n      try IERC721(tokenContract).getApproved(tokenId) returns (address _operator) {\n        operator = _operator;\n      } catch {} // solhint-disable-line no-empty-blocks\n    } catch {} // solhint-disable-line no-empty-blocks\n\n    return\n      quantity == 1 && who == tokenOwner && (operator == market || IERC721(tokenContract).isApprovedForAll(who, market));\n  }\n\n  /**\n   * Checks if a contract implements an interface.\n   * @param contractAddress The address of the contract.\n   * @param interfaceId The interface ID.\n   * @dev Reverts if the contract does not implement the interface.\n   */\n  function _requireInterface(address contractAddress, bytes4 interfaceId) internal view {\n    if (contractAddress.code.length != 0) {\n      try IERC165(contractAddress).supportsInterface(interfaceId) returns (bool supported) {\n        if (supported) {\n          // Success\n          return;\n        }\n      } catch {}\n    }\n    // Fail over\n    revert UnsupportedContractInterface(contractAddress, interfaceId);\n  }\n}\n'
      },
      'contracts/interfaces/ISequenceMarketBatchPayable.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.19;\n\nimport {ISequenceMarket} from "./ISequenceMarket.sol";\n\ninterface ISequenceMarketBatchPayableFunctions {\n\n  /**\n   * Accepts requests.\n   * @param requestIds The IDs of the requests.\n   * @param quantities The quantities of tokens to accept.\n   * @param recipients The recipients of the accepted tokens.\n   * @param additionalFees The additional fees to pay.\n   * @param additionalFeeRecipients The addresses to send the additional fees to.\n   * @dev Additional fees are applied to each request.\n   */\n  function acceptRequestBatchPayable(\n    uint256[] calldata requestIds,\n    uint256[] calldata quantities,\n    address[] calldata recipients,\n    uint256[] calldata additionalFees,\n    address[] calldata additionalFeeRecipients\n  )\n    external payable;\n}\n\n// solhint-disable-next-line no-empty-blocks\ninterface ISequenceMarketBatchPayable is ISequenceMarket, ISequenceMarketBatchPayableFunctions {}\n'
      },
      'contracts/interfaces/IERC721.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.19;\n\ninterface IERC721 {\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n  function balanceOf(address _owner) external view returns (uint256 balance);\n  function ownerOf(uint256 _tokenId) external view returns (address owner);\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\n  function transferFrom(address _from, address _to, uint256 _tokenId) external;\n  function approve(address _to, uint256 _tokenId) external;\n  function getApproved(uint256 _tokenId) external view returns (address operator);\n  function setApprovalForAll(address _operator, bool _approved) external;\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;\n}\n'
      },
      'lib/0xsequence/erc-1155/src/contracts/interfaces/IERC1155.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\nimport \'./IERC165.sol\';\n\n\ninterface IERC1155 is IERC165 {\n\n  /****************************************|\n  |                 Events                 |\n  |_______________________________________*/\n\n  /**\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\n   *   Operator MUST be msg.sender\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the "circulating supply" for a given token ID\n   *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\n   */\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\n\n  /**\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\n   *   Operator MUST be msg.sender\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the "circulating supply" for a given token ID\n   *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\n   */\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\n\n  /**\n   * @dev MUST emit when an approval is updated\n   */\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n\n  /****************************************|\n  |                Functions               |\n  |_______________________________________*/\n\n  /**\n    * @notice Transfers amount of an _id from the _from address to the _to address specified\n    * @dev MUST emit TransferSingle event on success\n    * Caller must be approved to manage the _from account\'s tokens (see isApprovedForAll)\n    * MUST throw if `_to` is the zero address\n    * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\n    * MUST throw on any other error\n    * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n    * @param _from    Source address\n    * @param _to      Target address\n    * @param _id      ID of the token type\n    * @param _amount  Transfered amount\n    * @param _data    Additional data with no specified format, sent in call to `_to`\n    */\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\n\n  /**\n    * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\n    * @dev MUST emit TransferBatch event on success\n    * Caller must be approved to manage the _from account\'s tokens (see isApprovedForAll)\n    * MUST throw if `_to` is the zero address\n    * MUST throw if length of `_ids` is not the same as length of `_amounts`\n    * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\n    * MUST throw on any other error\n    * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n    * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\n    * @param _from     Source addresses\n    * @param _to       Target addresses\n    * @param _ids      IDs of each token type\n    * @param _amounts  Transfer amounts per token type\n    * @param _data     Additional data with no specified format, sent in call to `_to`\n  */\n  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\n\n  /**\n   * @notice Get the balance of an account\'s Tokens\n   * @param _owner  The address of the token holder\n   * @param _id     ID of the Token\n   * @return        The _owner\'s balance of the Token type requested\n   */\n  function balanceOf(address _owner, uint256 _id) external view returns (uint256);\n\n  /**\n   * @notice Get the balance of multiple account/token pairs\n   * @param _owners The addresses of the token holders\n   * @param _ids    ID of the Tokens\n   * @return        The _owner\'s balance of the Token types requested (i.e. balance for each (owner, id) pair)\n   */\n  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\n\n  /**\n   * @notice Enable or disable approval for a third party ("operator") to manage all of caller\'s tokens\n   * @dev MUST emit the ApprovalForAll event on success\n   * @param _operator  Address to add to the set of authorized operators\n   * @param _approved  True if the operator is approved, false to revoke approval\n   */\n  function setApprovalForAll(address _operator, bool _approved) external;\n\n  /**\n   * @notice Queries the approval status of an operator for a given owner\n   * @param _owner     The owner of the Tokens\n   * @param _operator  Address of authorized operator\n   * @return isOperator True if the operator is approved, false if not\n   */\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\n}\n'
      },
      'lib/uniswap-lib/contracts/libraries/TransferHelper.sol': {
        content:
          "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}\n"
      },
      'lib/openzeppelin/contracts/proxy/Proxy.sol': {
        content:
          "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
      },
      'lib/openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport "../beacon/IBeacon.sol";\nimport "../../interfaces/IERC1967.sol";\nimport "../../interfaces/draft-IERC1822.sol";\nimport "../../utils/Address.sol";\nimport "../../utils/StorageSlot.sol";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");\n            } catch {\n                revert("ERC1967Upgrade: new implementation is not UUPS");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), "ERC1967: new admin is the zero address");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256(\'eip1967.proxy.beacon\')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), "ERC1967: new beacon is not a contract");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            "ERC1967: beacon implementation is not a contract"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n'
      },
      'contracts/interfaces/ISequenceMarket.sol': {
        content:
          "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.19;\n\ninterface ISequenceMarketStorage {\n  /**\n   * Request parameters.\n   * @param isListing True if the request is a listing, false if it is an offer.\n   * @param isERC1155 True if the token is an ERC1155 token, false if it is an ERC721 token.\n   * @param tokenContract The address of the token contract.\n   * @param tokenId The ID of the token.\n   * @param quantity The quantity of tokens.\n   * @param expiry The expiry of the request.\n   * @param currency The address of the currency. address(0) for native token.\n   * @param pricePerToken The price per token, including royalty fees.\n   */\n  struct RequestParams {\n    bool isListing;\n    bool isERC1155;\n    address tokenContract;\n    uint256 tokenId;\n    uint256 quantity;\n    uint96 expiry;\n    address currency;\n    uint256 pricePerToken;\n  }\n\n  /**\n   * Request storage.\n   * @param creator The address of the request creator.\n   * @param isListing True if the request is a listing, false if it is an offer.\n   * @param isERC1155 True if the token is an ERC1155 token, false if it is an ERC721 token.\n   * @param tokenContract The address of the token contract.\n   * @param tokenId The ID of the token.\n   * @param quantity The quantity of tokens.\n   * @param expiry The expiry of the request.\n   * @param currency The address of the currency. address(0) for native token.\n   * @param pricePerToken The price per token, including royalty fees.\n   */\n  struct Request {\n    address creator;\n    bool isListing;\n    bool isERC1155;\n    address tokenContract;\n    uint256 tokenId;\n    uint256 quantity;\n    uint96 expiry;\n    address currency;\n    uint256 pricePerToken;\n  }\n\n  /**\n   * Custom royalty parameters.\n   * @param recipient Address to send the fees to.\n   * @param fee Fee percentage with a 10000 basis (e.g. 0.3% is 30 and 1% is 100 and 100% is 10000).\n   * @dev Used to store custom royalty settings for contracts do not support ERC2981.\n   */\n  struct CustomRoyalty {\n    address recipient;\n    uint96 fee;\n  }\n}\n\ninterface ISequenceMarketFunctions is ISequenceMarketStorage {\n  /**\n   * Creates a request.\n   * @param request The request's details.\n   * @return requestId The ID of the request.\n   * @notice A listing is when the maker is selling tokens for currency.\n   * @notice An offer is when the maker is buying tokens with currency.\n   */\n  function createRequest(RequestParams calldata request) external returns (uint256 requestId);\n\n  /**\n   * Creates requests.\n   * @param requests The requests' details.\n   * @return requestIds The IDs of the requests.\n   */\n  function createRequestBatch(RequestParams[] calldata requests) external returns (uint256[] memory requestIds);\n\n  /**\n   * Accepts a request.\n   * @param requestId The ID of the request.\n   * @param quantity The quantity of tokens to accept.\n   * @param recipient The recipient of the accepted tokens.\n   * @param additionalFees The additional fees to pay.\n   * @param additionalFeeRecipients The addresses to send the additional fees to.\n   */\n  function acceptRequest(\n    uint256 requestId,\n    uint256 quantity,\n    address recipient,\n    uint256[] calldata additionalFees,\n    address[] calldata additionalFeeRecipients\n  )\n    external payable;\n\n  /**\n   * Accepts requests.\n   * @param requestIds The IDs of the requests.\n   * @param quantities The quantities of tokens to accept.\n   * @param recipients The recipients of the accepted tokens.\n   * @param additionalFees The additional fees to pay.\n   * @param additionalFeeRecipients The addresses to send the additional fees to.\n   * @dev Additional fees are applied to each request.\n   */\n  function acceptRequestBatch(\n    uint256[] calldata requestIds,\n    uint256[] calldata quantities,\n    address[] calldata recipients,\n    uint256[] calldata additionalFees,\n    address[] calldata additionalFeeRecipients\n  )\n    external;\n\n  /**\n   * Cancels a request.\n   * @param requestId The ID of the request.\n   */\n  function cancelRequest(uint256 requestId) external;\n\n  /**\n   * Cancels requests.\n   * @param requestIds The IDs of the requests.\n   */\n  function cancelRequestBatch(uint256[] calldata requestIds) external;\n\n  /**\n   * Gets a request.\n   * @param requestId The ID of the request.\n   * @return request The request.\n   */\n  function getRequest(uint256 requestId) external view returns (Request memory request);\n\n  /**\n   * Gets requests.\n   * @param requestIds The IDs of the requests.\n   * @return requests The requests.\n   */\n  function getRequestBatch(uint256[] calldata requestIds) external view returns (Request[] memory requests);\n\n  /**\n   * Invalidates all current requests for the msg.sender.\n   */\n  function invalidateRequests() external;\n\n  /**\n   * Invalidates all current requests for a given `tokenContract` for the msg.sender.\n   */\n  function invalidateRequests(address tokenContract) external;\n\n  /**\n   * Checks if a request is valid.\n   * @param requestId The ID of the request.\n   * @param quantity The amount of tokens to exchange. 0 is assumed to be the request's available quantity.\n   * @return valid The validity of the request.\n   * @return request The request.\n   * @notice A request is valid if it is active, has not expired and give amount of tokens (currency for offers, tokens for listings) are transferrable.\n   */\n  function isRequestValid(uint256 requestId, uint256 quantity) external view returns (bool valid, Request memory request);\n\n  /**\n   * Checks if requests are valid.\n   * @param requestIds The IDs of the requests.\n   * @param quantities The amount of tokens to exchange per request. 0 is assumed to be the request's available quantity.\n   * @return valid The validities of the requests.\n   * @return requests The requests.\n   * @notice A request is valid if it is active, has not expired and give amount of tokens (currency for offers, tokens for listings) are transferrable.\n   */\n  function isRequestValidBatch(uint256[] calldata requestIds, uint256[] calldata quantities)\n    external\n    view\n    returns (bool[] memory valid, Request[] memory requests);\n\n  /**\n   * Returns the royalty details for the given token and cost.\n   * @param tokenContract Address of the token being traded.\n   * @param tokenId The ID of the token.\n   * @param cost Amount of currency sent/received for the trade.\n   * @return recipient Address to send royalties to.\n   * @return royalty Amount of currency to be paid as royalties.\n   */\n  function getRoyaltyInfo(address tokenContract, uint256 tokenId, uint256 cost)\n    external\n    view\n    returns (address recipient, uint256 royalty);\n}\n\ninterface ISequenceMarketSignals {\n  //\n  // Events\n  //\n\n  /// Emitted when a request is created.\n  event RequestCreated(\n    uint256 indexed requestId,\n    address indexed creator,\n    address indexed tokenContract,\n    uint256 tokenId,\n    bool isListing,\n    uint256 quantity,\n    address currency,\n    uint256 pricePerToken,\n    uint256 expiry\n  );\n\n  /// Emitted when a request is accepted.\n  event RequestAccepted(\n    uint256 indexed requestId,\n    address indexed buyer,\n    address indexed tokenContract,\n    address recipient,\n    uint256 quantity,\n    uint256 quantityRemaining\n  );\n\n  /// Emitted when a request is cancelled.\n  event RequestCancelled(uint256 indexed requestId, address indexed tokenContract);\n\n  /// Emitted when a user bulk invalidates requests.\n  event RequestsInvalidated(address indexed creator, uint256 indexed invalidatedBefore);\n\n  /// Emitted when a user bulk invalidates requests.\n  event RequestsInvalidated(address indexed creator, address indexed tokenContract, uint256 indexed invalidatedBefore);\n\n  /// Emitted when custom royalty settings are changed.\n  event CustomRoyaltyChanged(address indexed tokenContract, address recipient, uint96 fee);\n\n  //\n  // Errors\n  //\n\n  /// Thrown when the contract address does not support the required interface.\n  error UnsupportedContractInterface(address contractAddress, bytes4 interfaceId);\n\n  /// Thrown when the token approval is invalid.\n  error InvalidTokenApproval(address tokenContract, uint256 tokenId, uint256 quantity, address owner);\n\n  /// Thrown when the currency address is invalid.\n  error InvalidCurrency();\n\n  /// Thrown when the currency approval is invalid.\n  error InvalidCurrencyApproval(address currency, uint256 quantity, address owner);\n\n  /// Thrown when request id is invalid.\n  error InvalidRequestId(uint256 requestId);\n\n  /// Thrown when the parameters of a batch accept request are invalid.\n  error InvalidBatchRequest();\n\n  /// Thrown when quantity is invalid.\n  error InvalidQuantity();\n\n  /// Thrown when price is invalid.\n  error InvalidPrice();\n\n  /// Thrown when royalty is invalid.\n  error InvalidRoyalty();\n\n  /// Thrown when expiry is invalid.\n  error InvalidExpiry();\n\n  /// Thrown when request has been explicitly invalidated.\n  error Invalidated();\n\n  /// Thrown when the additional fees are invalid.\n  error InvalidAdditionalFees();\n}\n\n// solhint-disable-next-line no-empty-blocks\ninterface ISequenceMarket is ISequenceMarketFunctions, ISequenceMarketSignals {}\n"
      },
      'contracts/interfaces/IERC2981.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.19;\n\nimport {IERC165} from "@0xsequence/erc-1155/contracts/interfaces/IERC165.sol";\n\n/**\n * @dev Interface for the NFT Royalty Standard\n */\ninterface IERC2981 is IERC165 {\n  /**\n   * @notice Called with the sale price to determine how much royalty\n   * is owed and to whom.\n   * @param _tokenId - the NFT asset queried for royalty information\n   * @param _salePrice - the sale price of the NFT asset specified by _tokenId\n   * @return receipient - address of who should be sent the royalty payment\n   * @return royaltyAmount - the royalty payment amount for _salePrice\n   */\n  function royaltyInfo(uint256 _tokenId, uint256 _salePrice)\n    external\n    view\n    returns (address receipient, uint256 royaltyAmount);\n}\n'
      },
      'lib/0xsequence/erc-1155/src/contracts/interfaces/IERC20.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/**\n * @title ERC20 interface\n * @dev see https://eips.ethereum.org/EIPS/eip-20\n */\ninterface IERC20 {\n  function transfer(address to, uint256 value) external returns (bool);\n  function approve(address spender, uint256 value) external returns (bool);\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\n  function totalSupply() external view returns (uint256);\n  function balanceOf(address who) external view returns (uint256);\n  function allowance(address owner, address spender) external view returns (uint256);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n'
      },
      'lib/0xsequence/erc-1155/src/contracts/interfaces/IERC165.sol': {
        content:
          '// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n\n/**\n * @title ERC165\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n */\ninterface IERC165 {\n\n    /**\n     * @notice Query if a contract implements an interface\n     * @dev Interface identification is specified in ERC-165. This function\n     * uses less than 30,000 gas\n     * @param _interfaceId The interface identifier, as specified in ERC-165\n     */\n    function supportsInterface(bytes4 _interfaceId)\n    external\n    view\n    returns (bool);\n}\n'
      },
      'lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport "../../interfaces/draft-IERC1822Upgradeable.sol";\nimport "../ERC1967/ERC1967UpgradeUpgradeable.sol";\nimport {Initializable} from "./Initializable.sol";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, "Function must be called through delegatecall");\n        require(_getImplementation() == __self, "Function must be called through active proxy");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, "UUPSUpgradeable: must not be called through delegatecall");\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation\'s compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n'
      },
      'lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport "../utils/ContextUpgradeable.sol";\nimport {Initializable} from "../proxy/utils/Initializable.sol";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), "Ownable: new owner is the zero address");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n'
      },
      'lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from "../proxy/utils/Initializable.sol";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\'s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\'s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\'s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n'
      },
      'lib/openzeppelin/contracts/proxy/beacon/IBeacon.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n'
      },
      'lib/openzeppelin/contracts/interfaces/IERC1967.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n'
      },
      'lib/openzeppelin/contracts/interfaces/draft-IERC1822.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n'
      },
      'lib/openzeppelin/contracts/utils/Address.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), "Address: call to non-contract");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n'
      },
      'lib/openzeppelin/contracts/utils/StorageSlot.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n'
      },
      'lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n'
      },
      'lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport "../beacon/IBeaconUpgradeable.sol";\nimport "../../interfaces/IERC1967Upgradeable.sol";\nimport "../../interfaces/draft-IERC1822Upgradeable.sol";\nimport "../../utils/AddressUpgradeable.sol";\nimport "../../utils/StorageSlotUpgradeable.sol";\nimport {Initializable} from "../utils/Initializable.sol";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    // This is the keccak-256 hash of "eip1967.proxy.rollback" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of "eip1967.proxy.implementation" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, "ERC1967Upgrade: unsupported proxiableUUID");\n            } catch {\n                revert("ERC1967Upgrade: new implementation is not UUPS");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of "eip1967.proxy.admin" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), "ERC1967: new admin is the zero address");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256(\'eip1967.proxy.beacon\')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), "ERC1967: new beacon is not a contract");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            "ERC1967: beacon implementation is not a contract"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n'
      },
      'lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport "../../utils/AddressUpgradeable.sol";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it\'s common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each "step" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init("MyToken", "MTK");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init("MyToken");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            "Initializable: contract is already initialized"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn\'t been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, "Initializable: contract is already initialized");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, "Initializable: contract is not initializing");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, "Initializable: contract is initializing");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n'
      },
      'lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from "../proxy/utils/Initializable.sol";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n'
      },
      'lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n'
      },
      'lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1967Upgradeable.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n'
      },
      'lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, "Address: insufficient balance");\n\n        (bool success, ) = recipient.call{value: amount}("");\n        require(success, "Address: unable to send value, recipient may have reverted");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, "Address: low-level call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, "Address: insufficient balance for call");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, "Address: low-level static call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), "Address: call to non-contract");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\'t, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n'
      },
      'lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol': {
        content:
          '// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), "ERC1967: new implementation is not a contract");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n'
      }
    },
    settings: {
      remappings: [
        'ds-test/=lib/forge-std/lib/ds-test/src/',
        'forge-std/=lib/forge-std/src/',
        '@0xsequence/erc20-meta-token/=lib/0xsequence/erc20-meta-token/src/',
        '@0xsequence/erc-1155/=lib/0xsequence/erc-1155/src/',
        '@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/',
        '@openzeppelin/contracts/=lib/openzeppelin/contracts/',
        '@uniswap/lib/=lib/uniswap-lib/',
        '0xsequence/=lib/0xsequence/',
        'erc4626-tests/=lib/openzeppelin/lib/erc4626-tests/',
        'openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/',
        'openzeppelin/=lib/openzeppelin/',
        'uniswap-lib/=lib/uniswap-lib/contracts/'
      ],
      optimizer: {
        enabled: true,
        runs: 200
      },
      metadata: {
        bytecodeHash: 'ipfs',
        appendCBOR: true
      },
      outputSelection: {
        '*': {
          '*': ['evm.bytecode', 'evm.deployedBytecode', 'devdoc', 'userdoc', 'metadata', 'abi']
        }
      },
      evmVersion: 'paris',
      viaIR: true,
      libraries: {}
    }
  }
}

// Minimal interface for verification
export const SequenceMarketBatchPayableV2Interface = SequenceMarketV2Interface
